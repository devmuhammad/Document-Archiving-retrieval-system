{"version":3,"sources":["webpack:///webpack/bootstrap 6943322967407ddaa128","webpack:///./node_modules/process/browser.js","webpack:///./node_modules/pdfjs-dist/build/pdf.worker.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","setTimeout","e","this","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","length","concat","drainQueue","timeout","len","run","marker","runClearTimeout","Item","array","noop","nextTick","args","Array","arguments","push","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","factory","__w_pdfjs_require__","r","Symbol","toStringTag","value","t","mode","ns","create","key","bind","pdfjsCoreWorker","WorkerMessageHandler","WorkerTask","_util","_primitives","_pdf_manager","_is_node","_message_handler","_worker_stream","_core_utils","terminated","_capability","createPromiseCapability","finished","promise","[object Object]","resolve","maybePort","handler","port","testMessageProcessed","data","Uint8Array","send","supportTransfers","postMessageTransfers","setVerbosityLevel","verbosity","createDocumentHandler","docParams","pdfManager","cancelXHRs","WorkerTasks","getVerbosityLevel","apiVersion","enumerableProperties","join","docId","docBaseUrl","workerHandlerName","MessageHandler","ensureNotTerminated","startWorkerTask","task","finishWorkerTask","finish","indexOf","splice","async","loadDocument","recoveryMode","ensureDoc","numPages","fingerprint","Promise","all","getPdfManager","evaluatorOptions","pdfManagerCapability","source","LocalPdfManager","password","ex","reject","pdfStream","cachedChunks","PDFWorkerStream","fullRequest","getFullReader","headersReady","then","isRangeSupported","disableAutoFetch","isStreamingSupported","NetworkPdfManager","msgHandler","contentLength","rangeChunkSize","sendProgressiveData","catch","reason","loaded","readChunk","chunk","done","pdfFile","arraysToBytes","warn","flushChunks","arrayByteLength","total","Math","max","read","cancelAllRequests","getPage","pageIndex","page","ensure","rotate","ref","userUnit","view","Ref","num","gen","pdfDocument","catalog","getPageIndex","ensureCatalog","id","requestLoadedStream","onLoadedStream","stream","bytes","xref","stats","intent","getAnnotationsData","sink","start","VerbosityLevel","INFOS","Date","now","getOperatorList","renderInteractiveForms","operatorListInfo","info","close","featureId","UNSUPPORTED_FEATURES","unknown","error","onPull","desiredSize","onCancel","extractTextContent","normalizeWhitespace","combineTextItems","fontFallback","cleanup","waitOn","terminate","AbortException","cleanupPromise","clearPrimitiveCaches","forEach","destroy","onSuccess","doc","pdfInfo","onFailure","PasswordException","code","sendWithPromise","updatePassword","pdfManagerReady","InvalidPDFException","MissingPDFException","UnexpectedResponseException","UnknownErrorException","message","toString","XRefParseException","forceDataSchema","disableCreateObjectURL","maxImageSize","disableFontFace","nativeImageDecoderSupport","ignoreErrors","isEvalSupported","newPdfManager","byteLength","setupDoc","setup","window","isNodeJS","self","postMessage","initializeFromPort","arr","resultLength","pos","item","stringToBytes","itemLength","set","assert","bytesToString","undefined","String","fromCharCode","strBuf","chunkEnd","min","subarray","capability","isSettled","msg","console","log","isArrayBuffer","v","isArrayEqual","arr1","arr2","every","element","index","isBool","isEmptyObj","obj","isNum","isString","isSameOrigin","baseUrl","otherUrl","base","URL","origin","other","createValidAbsoluteUrl","url","absoluteUrl","protocol","_isValidProtocol","removeNullCharacters","str","replace","NullCharactersRegExp","level","Number","isInteger","shadow","string32","stringToPDFString","charCodeAt","PDFStringTranslateTable","charAt","stringToUTF8String","decodeURIComponent","escape","utf8StringToString","unescape","encodeURIComponent","unreachable","IsEvalSupportedCached","IsLittleEndianCached","createObjectURL","FormatError","Util","TextRenderingMode","StreamType","PermissionFlag","PasswordResponses","NativeImageDecoding","CMapCompressionType","ImageKind","FontType","AnnotationType","AnnotationStateModelType","AnnotationReviewState","AnnotationReplyType","AnnotationMarkedState","AnnotationFlag","AnnotationFieldFlag","AnnotationBorderStyleType","OPS","IDENTITY_MATRIX","FONT_IDENTITY_MATRIX","BaseException","NONE","DECODE","DISPLAY","PRINT","MODIFY_CONTENTS","COPY","MODIFY_ANNOTATIONS","FILL_INTERACTIVE_FORMS","COPY_FOR_ACCESSIBILITY","ASSEMBLE","PRINT_HIGH_QUALITY","FILL","STROKE","FILL_STROKE","INVISIBLE","FILL_ADD_TO_PATH","STROKE_ADD_TO_PATH","FILL_STROKE_ADD_TO_PATH","ADD_TO_PATH","FILL_STROKE_MASK","ADD_TO_PATH_FLAG","GRAYSCALE_1BPP","RGB_24BPP","RGBA_32BPP","TEXT","LINK","FREETEXT","LINE","SQUARE","CIRCLE","POLYGON","POLYLINE","HIGHLIGHT","UNDERLINE","SQUIGGLY","STRIKEOUT","STAMP","CARET","INK","POPUP","FILEATTACHMENT","SOUND","MOVIE","WIDGET","SCREEN","PRINTERMARK","TRAPNET","WATERMARK","THREED","REDACT","MARKED","REVIEW","UNMARKED","ACCEPTED","REJECTED","CANCELLED","COMPLETED","GROUP","REPLY","HIDDEN","NOZOOM","NOROTATE","NOVIEW","READONLY","LOCKED","TOGGLENOVIEW","LOCKEDCONTENTS","REQUIRED","NOEXPORT","MULTILINE","PASSWORD","NOTOGGLETOOFF","RADIO","PUSHBUTTON","COMBO","EDIT","SORT","FILESELECT","MULTISELECT","DONOTSPELLCHECK","DONOTSCROLL","COMB","RICHTEXT","RADIOSINUNISON","COMMITONSELCHANGE","SOLID","DASHED","BEVELED","INSET","UNKNOWN","FLATE","LZW","DCT","JPX","JBIG","A85","AHX","CCF","RLX","TYPE1","TYPE1C","CIDFONTTYPE0","CIDFONTTYPE0C","TRUETYPE","CIDFONTTYPE2","TYPE3","OPENTYPE","TYPE0","MMTYPE1","ERRORS","WARNINGS","BINARY","STREAM","dependency","setLineWidth","setLineCap","setLineJoin","setMiterLimit","setDash","setRenderingIntent","setFlatness","setGState","save","restore","transform","moveTo","lineTo","curveTo","curveTo2","curveTo3","closePath","rectangle","stroke","closeStroke","fill","eoFill","fillStroke","eoFillStroke","closeFillStroke","closeEOFillStroke","endPath","clip","eoClip","beginText","endText","setCharSpacing","setWordSpacing","setHScale","setLeading","setFont","setTextRenderingMode","setTextRise","moveText","setLeadingMoveText","setTextMatrix","nextLine","showText","showSpacedText","nextLineShowText","nextLineSetSpacingShowText","setCharWidth","setCharWidthAndBounds","setStrokeColorSpace","setFillColorSpace","setStrokeColor","setStrokeColorN","setFillColor","setFillColorN","setStrokeGray","setFillGray","setStrokeRGBColor","setFillRGBColor","setStrokeCMYKColor","setFillCMYKColor","shadingFill","beginInlineImage","beginImageData","endInlineImage","paintXObject","markPoint","markPointProps","beginMarkedContent","beginMarkedContentProps","endMarkedContent","beginCompat","endCompat","paintFormXObjectBegin","paintFormXObjectEnd","beginGroup","endGroup","beginAnnotations","endAnnotations","beginAnnotation","endAnnotation","paintJpegXObject","paintImageMaskXObject","paintImageMaskXObjectGroup","paintImageXObject","paintInlineImageXObject","paintInlineImageXObjectGroup","paintImageXObjectRepeat","paintImageMaskXObjectRepeat","paintSolidColorImageMask","constructPath","forms","javaScript","smask","shadingPattern","font","NEED_PASSWORD","INCORRECT_PASSWORD","cond","prop","writable","constructor","super","details","status","buffer8","Uint32Array","buffer","isLittleEndian","Function","rgbBuf","g","b","m1","m2","p1","applyTransform","p2","slice","p3","p4","transpose","a","first","second","sqrt","sx","sy","rect","rect1","rect2","compare","orderedX","sort","orderedY","result","normalizeRect","digits","contentType","blob","Blob","type","ii","b1","b2","b3","Cmd","_clearCache","Name","isEOF","EOF","isCmd","cmd","isDict","isName","isRef","isRefsEqual","v1","v2","isStream","getBytes","RefSetCache","RefSet","Dict","nameCache","nameValue","cmdCache","cmdValue","nonSerializable","_map","objId","suppressEncryption","__nonSerializable__","assignXref","newXref","key1","key2","key3","fetch","fetchAsync","isArray","getRaw","getKeys","keys","has","callback","empty","merge","dictArray","mergedDict","dict","keyName","refCache","refValue","put","remove","putAlias","aliasRef","clear","_chunked_stream","_document","_stream","BasePdfManager","_docId","_password","_docBaseUrl","href","begin","end","Stream","PDFDocument","_loadedStreamPromise","pdfNetworkStream","streamManager","ChunkedStreamManager","getStream","MissingDataException","requestRange","requestAllChunks","onReceiveData","abort","ChunkedStream","chunkSize","manager","loadedChunks","numChunksLoaded","numChunks","ceil","progressiveDataLength","lastSuccessfulEnsureByteChunk","chunks","beginChunk","floor","endChunk","curChunk","position","isEmpty","ensureByte","b0","getByte","forceClamped","strEnd","ensureRange","Uint8ClampedArray","peekedByte","ChunkedStreamSubstream","getMissingChunks","missingChunks","allChunksLoaded","subStream","currRequestId","chunksNeededByRequest","requestsByChunk","promisesByRequest","aborted","_loadedStreamCapability","rangeReader","getRangeReader","onProgress","chunkData","_requestChunks","requestId","chunksNeeded","hasChunk","chunksToRequest","groupedChunksToRequest","groupChunks","groupedChunk","sendRequest","getBeginChunk","getEndChunk","ranges","range","includes","groupedChunks","prevChunk","isProgressive","onReceiveProgressiveData","loadedRequests","requestIds","nextEmptyChunk","lastChunk","err","getLookupTableFactory","initializer","lookup","getInheritableProperty","getArray","stopWhenFound","values","loopCount","toRomanNumerals","number","lowerCase","romanBuf","ROMAN_NUMBER_MAP","romanStr","toLowerCase","log2","x","readInt8","offset","readUint16","readUint32","isWhiteSpace","ch","XRefEntryException","Page","_obj","_annotation","_crypto","_parser","_operator_list","_evaluator","_function","DEFAULT_USER_UNIT","LETTER_SIZE_MEDIABOX","isAnnotationRenderable","annotation","viewable","printable","pageDict","fontCache","builtInCMapCache","pdfFunctionFactory","resourcesPromise","idCounters","idFactory","createObjId","getDocId","content","resources","_getInheritableProperty","box","mediaBox","_getBoundingBox","cropBox","intersect","streams","fetchIfRef","StreamsSequenceStream","NullStream","ObjectLoader","load","contentStreamPromise","loadResources","partialEvaluator","PartialEvaluator","options","pageListPromise","contentStream","opList","OperatorList","transparency","hasBlendModes","operatorList","_parsedAnnotations","pageOpList","annotations","flush","totalLength","opListPromises","opLists","addOp","addOpList","getTextContent","annotationsData","parsedAnnotations","annotationRefs","annotationPromises","AnnotationFactory","filter","PDF_HEADER_SIGNATURE","STARTXREF_SIGNATURE","ENDOBJ_SIGNATURE","FINGERPRINT_FIRST_BYTES","EMPTY_FINGERPRINT","PDF_HEADER_VERSION_REGEXP","find","signature","limit","backwards","signatureLength","scanBytes","peekBytes","scanLength","signatureEnd","j","arg","XRef","PDFFunctionFactory","_pagePromises","catDict","pdfFormatVersion","acroForm","xfa","fields","collection","linearization","Linearization","startXRef","reset","step","startXRefLength","found","skip","parseInt","isNaN","moveStart","substring","setStartXRef","parse","Catalog","documentInfo","DocumentInfoValidators","Title","Author","Subject","Keywords","Creator","Producer","CreationDate","ModDate","Trapped","test","docInfo","PDFFormatVersion","IsLinearized","IsAcroFormPresent","IsXFAPresent","IsCollectionPresent","infoDict","trailer","customValue","hash","idArray","fingerprintBuf","calculateMD5","getByteRange","hex","padStart","pageFirst","objectNumberFirst","pageKidsCountCache","getPageDict","_getLinearizationPage","FileSpec","_colorspace","fetchDestination","dest","getCatalogObj","Map","metadata","streamRef","encrypt","encryptMetadata","subtype","toplevelPagesDict","pagesObj","documentOutline","_readDocumentOutline","root","items","parent","processed","blackColor","shift","outlineDict","parseDestDictionary","destDict","resultObj","flags","color","count","rgbColor","ColorSpace","singletons","rgb","getRgb","outlineItem","unsafeUrl","newWindow","bold","italic","permissions","_readPermissions","destinations","_readDests","dests","NameTree","names","getAll","destinationId","pageLabels","_readPageLabels","style","prefix","nums","NumberTree","currentLabel","currentIndex","labelDict","st","LIMIT","baseCharCode","letterIndex","character","charBuf","jj","pageLayout","pageMode","viewerPreferences","ViewerPreferencesValidators","HideToolbar","HideMenubar","HideWindowUI","FitWindow","CenterWindow","DisplayDocTitle","NonFullScreenPageMode","Direction","ViewArea","ViewClip","PrintArea","PrintClip","PrintScaling","Duplex","PickTrayByPDFSize","PrintPageRange","NumCopies","prefs","prefValue","openAction","action","attachments","fs","serializable","appendIfJavaScriptDict","jsDict","js","promises","translatedFonts","translatedFont","loadedName","fallback","translated","nodesToVisit","visitedNodes","currentPageIndex","next","currentNode","pop","kids","last","pageRef","kidRef","parentRef","node","getAsync","kidPromises","kid","pagesBeforeRef","params","actionType","actionName","startsWith","addDefaultProtocolToUrl","urlDict","remoteDest","split","JSON","stringify","namedAction","jsAction","jsUrl","RegExp","exec","tryConvertUrlEncoding","entries","xrefstms","_cacheMap","streamTypes","fontTypes","startXRefQueue","trailerDict","indexObjects","readXRef","ids","fileId","CipherTransformFactory","processXRefTable","parser","tableState","entryNum","streamPos","lexer","parserBuf1","buf1","parserBuf2","buf2","readXRefTable","getObj","firstEntryNum","entryCount","entry","free","uncompressed","processXRefStream","streamParameters","byteWidths","streamState","entryRanges","readXRefStream","typeFieldWidth","offsetFieldWidth","generationFieldWidth","generation","LF","CR","LT","readToken","token","skipUntil","what","dataLength","skipped","objRegExp","endobjRegExp","nestedObjRegExp","trailerBytes","startxrefBytes","objBytes","xrefBytes","trailers","xrefStms","startPos","endPos","checkPos","tokenStr","objToken","xrefTagOffset","Parser","Lexer","allowStreams","rootDict","startXRefParsedCache","topDict","getEntry","xrefEntry","cacheEntry","fetchUncompressed","fetchCompressed","makeSubStream","obj1","obj2","obj3","createCipherTransform","tableOffset","NameOrNumberTree","_type","kidsOrEntries","limits","tmp","currentKey","mm","description","contentAvailable","pickPlatformItem","filename","_filename","contentRef","fileObj","mayHaveChildren","addChildren","dictKeys","rawValue","refSet","_walk","nodesToRevisit","pendingRequests","getBaseStreams","baseStreams","foundMissingData","requestRanges","_ccitt_stream","_jbig2_stream","_jpeg_stream","_jpx_stream","MAX_LENGTH_TO_CACHE","MAX_ADLER32_LENGTH","computeAdler32","bytesLength","imageCache","refill","cipherTransform","makeInlineImage","makeStream","decryptString","maybeEIPos","state","followingBytes","endOffset","peekByte","markerLength","foundEOI","getUint16","findDefaultInlineStreamEnd","inlineStreamSkipEI","tildePos","maybeEI","dictLength","beginInlineImagePos","filterName","filterZero","findDCTDecodeInlineStreamEnd","findASCII85DecodeInlineStreamEnd","findASCIIHexDecodeInlineStreamEnd","cacheKey","imageStream","imageBytes","initialStreamPos","dictBytes","createStream","skipToNextLine","nextChar","tryShift","ENDSTREAM_SIGNATURE","actualLength","_findStreamLength","MAX_TRUNCATION","TRUNCATED_SIGNATURE","maybeLength","lastByte","makeFilter","filterArray","paramsArray","xrefStreamStats","PredictorStream","FlateStream","earlyChange","LZWStream","JpegStream","JpxStream","Ascii85Stream","AsciiHexStream","CCITTFaxStream","RunLengthStream","Jbig2Stream","specialChars","toHexDigit","knownCommands","_hexStringNumWarn","currentChar","eNotation","divideBy","sign","baseValue","powerValue","powerValueSign","currentDigit","peekChar","numParen","charBuffered","previousCh","x2","firstDigit","secondDigit","isFirstHex","_hexStringWarn","comment","getNumber","getString","getName","getHexString","knownCommandFound","possibleCommand","getInt","linDict","allowZeroValue","hints","hintsLength","hint","getHints","endFirst","mainXRefEntriesOffset","StringStream","DecodeStream","DecryptStream","arrayBuffer","getInt32","emptyBuffer","maybeMinBufferLength","_rawMinBufferLength","bufferLength","eof","minBufferLength","readBlock","ensureBuffer","requested","size","buffer2","bufEnd","newLength","codeLenCodeMap","Int32Array","lengthDecode","distDecode","fixedLitCodeTab","fixedDistCodeTab","cmf","flg","codeSize","codeBuf","getBits","bits","getCode","table","codes","maxLen","codeLen","codeVal","generateHuffmanTable","lengths","val","code2","hdr","litCodeTable","distCodeTable","numLitCodes","numDistCodes","numCodeLenCodes","codeLenCodeLengths","codeLenCodeTab","bitsLength","bitsOffset","codeLengths","repeatLength","code1","dist","k","blockLen","check","block","predictor","readBlockTiff","readBlockPng","colors","columns","pixBytes","rowBytes","rawBytes","inbuf","outbuf","inbits","outbits","bytesPerPixel","sum","compArray","bitMask","kk","prevRow","up","upLeft","left","pa","pb","pc","decrypt","nextChunk","initialized","hasMoreData","input","maxDecodeLength","digit","repeatHeader","cachedData","bitsCached","lzwState","codeLength","nextCode","dictionaryValues","dictionaryLengths","Uint16Array","dictionaryPrevCodes","currentSequence","currentSequenceLength","readBits","lastCode","q","estimatedDecodedSize","blockSize","prevCode","decodedLength","currentBufferLength","hasPrev","_ccitt","ccittFaxDecoder","CCITTFaxDecoder","K","EndOfLine","EncodedByteAlign","Columns","Rows","EndOfBlock","BlackIs1","readNextChar","twoDimTable","whiteTable1","whiteTable2","blackTable1","blackTable2","blackTable3","encoding","eoline","byteAlign","rows","eoblock","black","codingLine","refLine","codingPos","row","nextLine2D","inputBits","inputBuf","outputBits","rowsDone","_lookBits","_eatBits","refPos","blackPixels","code3","_getTwoDimCode","_addPixels","_getBlackCode","_getWhiteCode","_addPixelsNeg","gotEOL","a1","limitValue","_findTableCode","_jbig","jbig2Image","Jbig2Image","globalsStream","globals","parseChunks","_arithmetic_decoder","Jbig2Error","ContextCache","DecodingContext","decodeInteger","contextCache","procedure","decoder","contexts","getContexts","prev","bit","readBit","decodeIAID","Int8Array","ArithmeticDecoder","cache","SegmentTypes","CodingTemplates","y","RefinementTemplates","coding","reference","ReusedContexts","RefinementReusedContexts","decodeBitmap","mmr","width","height","templateIndex","prediction","at","decodingContext","decodeMMRBitmap","Reader","contextLabel","pixel","row1","row2","bitmap","decodeBitmapTemplate0","useskip","template","templateLength","templateX","templateY","changingTemplateEntries","reuseMask","minX","maxX","minY","changingEntriesLength","changingTemplateX","changingTemplateY","changingTemplateBit","i0","j0","sbb_left","sbb_top","sbb_right","pseudoPixelContext","ltp","decodeRefinement","referenceBitmap","offsetX","offsetY","codingTemplate","codingTemplateLength","codingTemplateX","codingTemplateY","referenceTemplate","referenceTemplateLength","referenceTemplateX","referenceTemplateY","referenceWidth","referenceHeight","decodeTextRegion","huffman","refinement","defaultPixelValue","numberOfSymbolInstances","stripSize","inputSymbols","symbolCodeLength","transposed","dsOffset","referenceCorner","combinationOperator","huffmanTables","refinementTemplateIndex","refinementAt","logStripSize","huffmanInput","stripT","tableDeltaT","decode","firstS","currentS","tableFirstS","currentT","symbolId","symbolIDTable","applyRefinement","symbolBitmap","symbolWidth","symbolHeight","rdw","rdh","s2","t2","symbolRow","offsetT","offsetS","maxWidth","deltaS","tableDeltaS","readSegmentHeader","segmentHeader","segmentType","typeName","deferredNonRetain","pageAssociationFieldSize","referredFlags","referredToCount","retainBits","referredToSegmentNumberSize","referredTo","pageAssociation","genericRegionInfo","readRegionSegmentInformation","genericRegionMmr","RegionSegmentInformationFieldLength","searchPattern","headerEnd","readSegments","header","segments","segment","randomAccess","processSegment","visitor","atLength","dictionary","dictionaryFlags","huffmanDHSelector","huffmanDWSelector","bitmapSizeSelector","aggregationInstancesSelector","bitmapCodingContextUsed","bitmapCodingContextRetained","refinementTemplate","numberOfExportedSymbols","numberOfNewSymbols","textRegion","textRegionSegmentFlags","textRegionHuffmanFlags","huffmanFS","huffmanDS","huffmanDT","huffmanRefinementDW","huffmanRefinementDH","huffmanRefinementDX","huffmanRefinementDY","huffmanRefinementSizeSelector","patternDictionary","patternDictionaryFlags","patternWidth","patternHeight","maxPatternIndex","halftoneRegion","halftoneRegionFlags","enableSkip","gridWidth","gridHeight","gridOffsetX","gridOffsetY","gridVectorX","gridVectorY","genericRegion","genericRegionSegmentFlags","pageInfo","resolutionX","resolutionY","pageSegmentFlags","lossless","requiresBuffer","combinationOperatorOverride","callbackName","processSegments","SimpleSegmentVisitor","HuffmanLine","lineData","isOOB","rangeLow","prefixLength","rangeLength","prefixCode","isLowerRange","HuffmanTreeNode","line","children","isLeaf","HuffmanTable","lines","prefixCodesDone","assignPrefixCodes","rootNode","buildTree","onPageInformation","currentPageInfo","rowSize","drawBitmap","regionInfo","mask","mask0","offset0","onImmediateGenericRegion","region","onImmediateLosslessGenericRegion","onSymbolDictionary","currentSegment","referredSegments","customTables","tableDeltaHeight","tableDeltaWidth","tableBitmapSize","tableAggregateInstances","customIndex","getStandardTable","getCustomHuffmanTable","getSymbolDictionaryHuffmanTables","symbols","referredSymbols","newSymbols","currentHeight","tableB1","symbolWidths","currentWidth","totalWidth","firstSymbol","deltaWidth","numberOfInstances","rdx","rdy","bitmapSize","collectiveBitmap","readUncompressedBitmap","originalEnd","bitmapEnd","numberOfSymbolsDecoded","xMax","bitmapWidth","xMin","exportedSymbols","currentFlag","totalSymbolsLength","runLength","decodeSymbolDictionary","onImmediateTextRegion","numberOfSymbols","reader","runCodesTable","repeatedLength","numberOfRepeats","getTextRegionHuffmanTables","onImmediateLosslessTextRegion","patterns","patternBitmap","decodePatternDictionary","regionWidth","regionHeight","regionBitmap","numberOfPatterns","pattern0","bitsPerValue","grayScaleBitPlanes","mmrInput","mg","ng","patternIndex","patternRow","regionRow","regionX","regionY","decodeHalftoneRegion","onImmediateHalftoneRegion","lowestValue","highestValue","prefixSizeBits","rangeSizeBits","currentRangeLow","decodeTablesSegment","htOffset","decodeNode","linesLength","prefixLengthMax","histogram","currentCode","currentTemp","currentLength","firstCode","standardTablesCache","currentByte","endOfBlock","lookForEOFLimit","numBits","parseJbig2Chunks","imgData","numberOfPages","bitPacked","parseJbig2","QeTable","qe","nmps","nlps","switchFlag","bp","dataEnd","chigh","clow","byteIn","ct","cx_index","cx_mps","qeTableIcx","qeIcx","_jpg","jpegOptions","decodeTransform","colorTransform","decodeArr","forceRGB","bitsPerComponent","decodeArrLength","transformNeeded","maxValue","jpegImage","JpegImage","getData","drawWidth","drawHeight","isSourcePDF","dictHeight","validDimensions","foundSOF","scanLines","getIR","JpegError","DNLMarkerError","EOIMarkerError","dctZigZag","dctCos1","dctSin1","dctCos3","dctSin3","dctCos6","dctSin6","dctSqrt2","dctSqrt1d2","_decodeTransform","_colorTransform","buildHuffmanTable","getBlockBufferOffset","component","col","blocksPerLine","decodeScan","frame","components","resetInterval","spectralStart","spectralEnd","successivePrev","successive","parseDNLMarker","mcusPerLine","progressive","startOffset","bitsData","bitsCount","nextByte","maybeScanLines","blockRow","decodeHuffman","tree","receive","receiveAndExtend","eobrun","successiveACNextValue","successiveACState","decodeMcu","mcu","mcuCol","blockCol","h","decodeBlock","decodeFn","componentsLength","huffmanTableDC","diff","blockData","pred","rs","huffmanTableAC","z","offsetZ","fileMarker","mcuExpected","blocksPerColumn","mcusPerColumn","mcuToRead","findNextFileMarker","invalid","quantizeAndInverse","blockBufferOffset","v0","v3","v4","v5","v6","v7","p0","p5","p6","p7","qt","quantizationTable","buildComponentData","computationBuffer","Int16Array","currentPos","maxPos","newPos","currentMarker","newMarker","dnlScanLines","readDataBlock","prepareComponents","samplesPerLine","maxH","maxV","blocksPerLineForMcu","blocksBufferSize","jfif","adobe","numSOSMarkers","quantizationTables","huffmanTablesAC","huffmanTablesDC","markerLoop","appData","major","minor","densityUnits","xDensity","yDensity","thumbWidth","thumbHeight","thumbData","flags0","flags1","transformCode","quantizationTablesEnd","quantizationTableSpec","tableData","extended","precision","sofScanLines","componentIds","componentId","componentsCount","qId","quantizationId","huffmanLength","huffmanTableSpec","codeLengthSum","huffmanValues","selectorsCount","componentIndex","tableSpec","successiveApproximation","nextFileMarker","output","scaleX","scaleY","numComponents","componentScaleX","componentScaleY","blocksPerScanline","xScaleBlockOffset","lastComponentScaleX","_isColorConversionNeeded","_convertYccToRgb","Y","Cb","Cr","_convertYcckToRgb","_convertYcckToCmyk","_convertCmykToRgb","_getLinearizedBlockData","rgbData","grayColor","_jpx","jpxImage","JpxImage","tileCount","tiles","tileComponents","tileWidth","tileHeight","tileLeft","tileTop","top","src","srcPosition","dataPosition","imgRowSize","tileRowSize","JpxError","SubbandsGainLog2","LL","LH","HL","HH","failOnCorruptedImage","calculateComponentDimensions","siz","x0","XOsiz","XRsiz","x1","Xsiz","y0","YOsiz","YRsiz","y1","Ysiz","calculateTileGrids","context","tile","SIZ","numXtiles","XTOsiz","XTsiz","numYtiles","YTOsiz","YTsiz","tx0","ty0","tx1","ty1","Csiz","tileComponent","tcx0","tcy0","tcx1","tcy1","getBlocksDimensions","codOrCoc","codingStyleParameters","entropyCoderWithCustomPrecincts","PPx","precinctsSizes","PPy","xcb_","xcb","ycb_","ycb","buildPrecincts","resolution","dimensions","precinctWidth","precinctHeight","isZeroRes","resLevel","precinctWidthInSubband","precinctHeightInSubband","numprecinctswide","trx1","trx0","numprecinctshigh","try1","try0","numprecincts","precinctParameters","buildCodeblocks","subband","codeblock","precinctNumber","codeblockWidth","codeblockHeight","cbx0","tbx0","cby0","tby0","cbx1","tbx1","cby1","tby1","codeblocks","precincts","cbx","cby","tbx0_","tby0_","tbx1_","tby1_","subbandType","Lblock","precinct","cbxMin","cbxMax","cbyMin","cbyMax","codeblockParameters","numcodeblockwide","numcodeblockhigh","createPacket","layerNumber","precinctCodeblocks","subbands","getPrecinctIndexIfExist","pxIndex","pyIndex","sizeInImageScale","precinctIterationSizes","posX","minWidth","posY","minHeight","startPrecinctRowIndex","getPrecinctSizesInImageScale","MAX_VALUE","maxNumWide","maxNumHigh","sizePerComponent","decompositionLevelsCount","sizePerResolution","minWidthCurrentComponent","minHeightCurrentComponent","maxNumWideCurrentComponent","maxNumHighCurrentComponent","scale","resolutions","widthCurrentResolution","heightCurrentResolution","buildPackets","tileIndex","currentTile","blocksDimensions","bscale","resolutionSubbands","progressionOrder","codingStyleDefaultParameters","packetsIterator","layersCount","maxDecompositionLevelsCount","nextPacket","packet","maxNumPrecinctsInLevel","maxNumPrecincts","precinctsIterationSizes","px","py","parseTilePackets","bufferSize","skipNextBit","skipMarkerIfEqual","skipBytes","alignToByte","readCodingpasses","sopMarkerUsed","COD","ephMarkerUsed","codeblockColumn","codeblockRow","codeblockIncluded","firstTimeInclusion","inclusionTree","zeroBitPlanesTree","InclusionTree","TagTree","incrementValue","nextLevel","included","zeroBitPlanes","codingpasses","codingpassesLog2","codedDataLength","packetItem","copyCoefficients","coefficients","levelWidth","levelHeight","delta","mb","reversible","segmentationSymbolUsed","right","bottom","blockWidth","blockHeight","bitModel","currentCodingpassType","BitModel","dataItem","encodedData","setDecoder","runSignificancePropagationPass","runMagnitudeRefinementPass","runCleanupPass","checkSegmentationSymbol","nb","coefficentsSign","magnitude","coefficentsMagnitude","bitsDecoded","magnitudeCorrection","interleave","levelOffset","transformTile","quantizationParameters","spqcds","SPqcds","scalarExpounded","guardBits","reversibleTransformation","ReversibleTransform","IrreversibleTransform","subbandCoefficients","Float32Array","mu","epsilon","gainLog2","calculate","initializeTile","qcdOrQcc","QCC","QCD","COC","headerSize","lbox","tbox","jumpDataLength","method","colorspace","parseCodestream","headerType","parseImageProperties","newByte","doNotRecover","sqcd","spqcdSize","mainHeader","isSigned","qcd","noQuantization","spqcd","cqcc","qcc","cod","scod","multipleComponentTransform","blockStyle","selectiveArithmeticCodingBypass","resetContextProbabilities","terminationOnEachCodingPass","verticallyStripe","predictableTermination","precinctsSize","unsupported","partIndex","partsCount","resultImages","transformedTiles","y2","tile0","out","fourComponents","y0items","y1items","y2items","y3items","component0","alpha01","transformComponents","levelsLength","levels","currentLevel","defaultValue","stopValue","propagateValues","levelIndex","currentValue","LLAndLHContextsLabel","HLContextLabel","HHContextLabel","contextLabelTable","coefficientCount","neighborsSignificance","processingFlags","setNeighborsSignificance","column","labels","i1","decodeSignBit","contribution","sign0","sign1","significance1","decoded","horizontalContribution","indexNext","width4","index0","iNext","oneRowDown","twoRowsDown","threeRowsDown","indexBase","checkAllEmpty","i2","Transform","u0","ll","iterate","extend","j1","j2","hl_lh_hh","u","llWidth","llHeight","llItems","rowBuffer","numBuffers","colBuffers","currentBuffer","current","alpha","beta","gamma","calculateSHA512","calculateSHA384","calculateSHA256","PDF20","PDF17","ARCFourCipher","AES256Cipher","AES128Cipher","keyLength","encryptBlock","tmp2","decryptBlock","h0","h1","h2","h3","paddedLength","padded","w","f","rotateArg","Word64","highInteger","lowInteger","high","low","and","word","xor","or","shiftRight","places","shiftLeft","rotateRight","not","add","lowAdd","highAdd","copyTo","assign","rotr","maj","sigma","sigmaPrime","littleSigma","h4","h5","h6","h7","t1","littleSigmaPrime","mode384","tmp3","tmp1","NullCipher","AESBaseCipher","_s","_inv_s","_mix","_mixCol","bufferPosition","cipherKey","_keySize","_cyclesOfRepetition","s0","s1","s3","finalize","sourceLength","iv","plain","_decrypt","_key","outputLength","lastBlock","psLen","_decryptBlock2","cipher","_encrypt","_rcon","_expandKey","rcon","t3","t4","compareByteArrays","array1","array2","checkOwnerPassword","ownerValidationSalt","userBytes","ownerPassword","hashData","checkUserPassword","userValidationSalt","userPassword","getOwnerKey","ownerKeySalt","ownerEncryption","getUserKey","userKeySalt","userEncryption","concatArrays","calculatePDF20Hash","arrayLength","k1","remainder","concatBytes","CipherTransform","stringCipherConstructor","streamCipherConstructor","StringCipherConstructor","StreamCipherConstructor","defaultPasswordBytes","prepareKeyData","revision","hashDataSize","keyLengthInBytes","checkData","encryptionKey","derivedKey","identityName","algorithm","cfDict","streamCryptoName","handlerDict","passwordBytes","fileIdBytes","uBytes","perms","passwordLength","pdfAlgorithm","createEncryptionKey20","decodeUserPassword","cf","stmf","strf","eff","buildObjectKey","isAes","buildCipherConstructor","cfm","cryptFilter","cipherConstructor","numComps","srcOffset","getRgbItem","destOffset","inputLength","decodeMap","bpc","isDefaultDecode","originalWidth","originalHeight","actualHeight","comps","numComponentColors","needsResizing","isPassthrough","allColors","colorMap","getRgbBuffer","rgbPos","destPos","w1","w2","xRatio","yRatio","oldIndex","newIndex","xScaled","w1Scanline","resizeRgbImage","usesZeroToOneRange","cs","res","IR","parseToIR","fromIR","whitePoint","blackPoint","gray","cmyk","CalGrayCS","matrix","CalRGBCS","basePatternCS","PatternCS","baseIndexedCS","hiVal","IndexedCS","alt","tintFn","AlternateCS","LabCS","colorSpaces","resCS","altIR","DeviceGrayCS","DeviceRgbCS","DeviceCmykCS","tmpBuf","baseNumComps","baseBuf","scaled","tinted","getOutputLength","baseCS","highVal","outputDelta","lookupPos","convertToRgb","srcScale","AG","G","L","YW","XW","ZW","XB","YB","ZB","BRADFORD_SCALE_MATRIX","BRADFORD_SCALE_INVERSE_MATRIX","SRGB_D65_XYZ_TO_RGB_MATRIX","FLAT_WHITEPOINT_MATRIX","tempNormalizeMatrix","tempConvertMatrix1","tempConvertMatrix2","DECODE_L_CONSTANT","matrixProduct","sRGBTransferFunction","adjustToRange","decodeL","A","B","C","AGR","GR","BGG","GG","CGB","GB","X","MXA","MXB","MXC","MYA","MYB","MYC","Z","MZA","MZB","MZC","XYZ","XYZ_Flat","sourceWhitePoint","XYZ_In","LMS","LMS_Flat","convertToFlat","normalizeWhitePointToFlat","XYZ_Black","sourceBlackPoint","zeroDecodeL","X_Scale","X_Offset","Y_Scale","Y_Offset","Z_Scale","Z_Offset","compensateBlackPoint","XYZ_D65","LMS_D65","convertToD65","normalizeWhitePointToD65","SRGB","fn_g","high1","low2","high2","maxVal","Ls","as","bs","amin","amax","bmin","bmax","M","N","getQuadPoints","MarkupAnnotation","AnnotationBorderStyle","Annotation","quadPoints","quadPointsLists","parameters","LinkAnnotation","TextAnnotation","fieldType","TextWidgetAnnotation","ButtonWidgetAnnotation","ChoiceWidgetAnnotation","WidgetAnnotation","PopupAnnotation","FreeTextAnnotation","LineAnnotation","SquareAnnotation","CircleAnnotation","PolylineAnnotation","PolygonAnnotation","CaretAnnotation","InkAnnotation","HighlightAnnotation","UnderlineAnnotation","SquigglyAnnotation","StrikeOutAnnotation","StampAnnotation","FileAttachmentAnnotation","setContents","setModificationDate","setFlags","setRectangle","setColor","setBorderStyle","setAppearance","annotationFlags","borderStyle","contents","hasAppearance","appearance","modificationDate","flag","_hasFlag","_isViewable","_isPrintable","dictType","setWidth","setStyle","setDashArray","setHorizontalCornerRadius","setVerticalCornerRadius","appearanceStates","normalAppearanceState","evaluator","renderForms","appearanceDict","bbox","maxY","getAxialAlignedBoundingBox","getTransformMatrix","dashArray","horizontalCornerRadius","verticalCornerRadius","maxHeight","isValid","allZeros","radius","rawIRT","inReplyTo","rt","replyType","setCreationDate","creationDate","hasPopup","annotationType","fieldName","_constructFieldName","fieldValue","alternativeText","defaultAppearance","fieldResources","fieldFlags","readOnly","hasFieldFlag","unshift","loopDict","alignment","textAlignment","maximumLength","multiLine","comb","checkBox","radioButton","pushButton","_processCheckBox","_processRadioButton","_processPushButton","customAppearance","exportValueOptionsDict","exportValues","exportValue","buttonValue","fieldParent","fieldParentValue","option","isOptionArray","displayValue","combo","multiSelect","stateModel","parentItem","parentSubtype","parentType","rawParent","parentId","parentFlags","lineCoordinates","rawVertices","vertices","originalInkLists","inkLists","file","QueueOptimizer","addState","parentState","pattern","checkFn","iterateFn","processFn","InitialState","iCurr","fnArray","argsArray","match","lastProcessed","curr","iFirstSave","iFirstTransform","iFirstPIIXO","map","maxLineHeight","currentX","currentY","img","imgWidth","imgHeight","dataOffset","kind","iFirstPIMXO","imageMask","handlePaintSolidColorImageMask","iTransform","transformArgs","isSameImage","firstPIMXOArg0","firstTransformArg0","firstTransformArg3","iPIMXO","positions","images","maskParams","firstPIXOArg0","iFirstSetFont","firstSetFontArg0","firstSetFontArg1","iFirstBeginText","iFirstSetTextMatrix","iFirstShowText","iFirstEndText","iFirst","iEndText","fn","_optimize","NullOptimizer","streamSink","_streamSink","optimizer","dependencies","_totalLength","weight","_resolved","ready","CHUNK_SIZE","addDependency","_transfers","transfers","cached","enqueue","_cmap","_fonts","_encodings","_unicode","_standard_fonts","_pattern","_bidi","_glyphlist","_metrics","_murmurhash","_image_utils","_image","DefaultPartialEvaluatorOptions","parsingType3Font","fetchBuiltInCMap","sendWithStream","getReader","pump","compressionType","TimeSlotManager","normalizeBlendMode","parsingArray","maybeBM","checked","endTime","deferred","newOptions","newEvaluator","nodes","graphicStates","graphicStatesKeys","graphicState","bm","xObjects","xObjectsKeys","xObject","xResources","xobj","initialState","group","groupOptions","isolated","knockout","groupSubtype","colorSpace","parseColorSpace","backdrop","image","isInline","forceDisableNativeImageDecoder","bitStrideLength","imgArray","PDFImage","createMask","imageIsFromDecodeStream","inverseDecode","softMask","createImageData","NativeImageDecoder","isSupported","maybeValidDimensions","buildPaintImageXObject","nativeImageDecoder","imgPromise","buildImage","nativeDecoder","imageObj","handleSMask","stateManager","smaskContent","smaskOptions","transferObj","isPDFFunction","transferFn","transferMap","buildFormXObject","clone","patternDict","tilingOpList","resourcesArray","patternResources","getTilingPatternIR","tilingPatternIR","addDependencies","handleSetFont","fontArgs","fontRef","fontName","loadFont","isType3Font","loadType3Data","TranslatedFont","ErrorFont","chars","glyphs","charsToGlyphs","textRenderingMode","fillColorSpace","buildFontPaths","gState","gStateObj","gStateKeys","errorFont","fontRes","partialMsg","getFallbackFontDict","fontCapability","preEvaluatedFont","preEvaluateFont","descriptor","fontID","translatedPromise","fontRefIsRef","fontAliases","aliasFontRef","Font","getFontID","translateFont","fontType","fontFile3","getFontType","parsingText","lastIndex","opArgs","patternName","typeNum","handleTilingType","shading","Pattern","parseShading","EvalState","xobjs","StateManager","preprocessor","EvaluatorPreprocessor","timeSlotManager","closePendingRestoreOPS","argument","savedStatesDepth","promiseBody","stop","operation","resolveXObject","rejectXObject","fontSize","ensureStateFont","handleText","combinedGlyphs","arrLength","arrItem","strokeColorSpace","handleColorN","shadingRes","patternIR","dictName","extGState","buildPath","seenStyles","TextState","textState","WhitespaceRegexp","textContent","styles","textContentItem","vertical","lastAdvanceWidth","lastAdvanceHeight","textAdvanceScale","spaceWidth","fakeSpaceMin","Infinity","fakeMultiSpaceMin","fakeMultiSpaceMax","textRunBreakAllowed","SPACE_FACTOR","MULTI_SPACE_FACTOR","MULTI_SPACE_FACTOR_MAX","skipEmptyXObjs","ensureTextContentItem","fontFamily","fallbackName","ascent","descent","tsm","textHScale","textRise","fontMatrix","glyphHeight","trm","ctm","textMatrix","textLineMatrix","scaleLineX","scaleCtmX","isMonospace","runBidiTransform","textChunk","bidiResult","bidi","replaceWhitespace","buildTextContentItem","glyph","glyphWidth","vmetric","glyphUnicode","unicode","NormalizedUnicodes","getNormalizedUnicodes","reverseIfRtl","charSpacing","isSpace","wordSpacing","addFakeSpaces","tx","ty","translateTextMatrix","abs","fakeSpaces","round","flushTextContentItem","enqueueChunk","advance","fontNameArg","fontSizeArg","leading","isSameTextLine","translateTextLineMatrix","carriageReturn","calcTextLineMatrixAdvance","setTextLineMatrix","breakTextRun","currentState","xObjStateManager","sinkWrapper","enqueueInvoked","gStateFont","extractDataStructures","baseDict","properties","cidToGidBytes","toUnicode","toUnicodePromise","readToUnicode","composite","cidSystemInfo","registry","ordering","supplement","cidToGidMap","differences","baseEncodingName","diffEncoding","defaultEncoding","getEncoding","isSymbolicFont","FontFlags","Symbolic","isNonsymbolicFont","Nonsymbolic","StandardEncoding","WinAnsiEncoding","MacRomanEncoding","SymbolSetEncoding","ZapfDingbatsEncoding","hasEncoding","buildToUnicode","readCidToGidMap","forceGlyphs","charcode","glyphName","glyphsUnicodeMap","getGlyphsUnicode","codeStr","_buildSimpleFontToUnicode","getUnicodeForGlyph","baseEncoding","fromCodePoint","ToUnicodeMap","hasIncludedToUnicodeMap","fallbackToUnicode","cMap","builtInCMap","IdentityCMap","ucs2CMapName","CMapFactory","useCMap","ucs2CMap","cid","ucs2","IdentityToUnicodeMap","firstChar","lastChar","cmapObj","cmap","getMap","charCode","glyphsData","glyphID","extractWidths","defaultVMetrics","widths","glyphsWidths","defaultWidth","glyphsVMetrics","vmetrics","parseFloat","baseFontName","metrics","getBaseFontMetrics","buildCharCodeToWidth","firstWidth","FixedPitch","isSerifFont","fontNameWoStyle","getSerifFonts","search","monospace","lookupName","getStdFontMap","Metrics","getMetrics","glyphWidths","widthsByGlyphName","uint8array","df","MurmurHash3_64","update","diffLength","diffBuf","diffEntry","hexdigest","maxCharIndex","Serif","getSymbolsFonts","baseFont","fontNameStr","baseFontStr","cMapPromise","fontFile","length1","length2","length3","wideChars","fixedPitch","xHeight","capHeight","italicAngle","cidEncoding","fontChar","renderer","hasBuiltPath","getPathJs","accent","_fallbackFontDict","type3Loaded","sent","exportData","glyphCacheValues","parentOperatorList","type3Options","type3Evaluator","loadCharProcsPromise","charProcs","fontResources","charProcKeys","charProcOperatorList","glyphStream","stateStack","old","txDiff","tyDiff","denominator","calcRenderMatrix","getOPMap","numArgs","variableArgs","opMap","nonProcessedArgs","_numInvalidPathOPS","opSpec","argsLength","preprocessCommand","CMap","BUILT_IN_CMAPS","codespaceRanges","numCodespaceRanges","dstLow","dst","nn","codespaceRange","isIdentityCMap","addCodespaceRange","BinaryCMapReader","hexToInt","hexToStr","addHex","incHex","MAX_NUM_SIZE","MAX_ENCODED_NUM_SIZE","BinaryCMapStream","readByte","readNumber","stack","sp","readHexNumber","char","sequence","dataSize","subitemsCount","readHex","mapOne","readSigned","mapCidRange","readHexSigned","mapBfRange","readString","strToInt","expectString","expectInt","parseBfChar","parseBfRange","mapBfRangeToArray","parseCidChar","parseCidRange","parseCodespaceRange","parseWMode","parseCMapName","parseCMap","previous","embeddedUseCMap","objLoop","extendCMap","createBuiltInCMap","newCMap","useCodespaceRanges","contains","cMapData","parsedCMap","SEAC_ANALYSIS_ENABLED","_cff_parser","_font_renderer","_type1_parser","PRIVATE_USE_AREAS","PDF_GLYPH_SPACE_UNITS","Script","Italic","AllCap","SmallCap","ForceBold","MacStandardGlyphOrdering","adjustWidths","recoverGlyphName","Glyph","operatorListId","isInFont","matchesForCache","OpenTypeFileBuilder","writeInt16","writeInt32","writeData","sfnt","tables","getSearchParams","entriesCount","entrySize","maxPower2","searchRange","rangeShift","toArray","tablesNames","tableName","numTables","tableOffsets","searchParams","checksum","addTable","tag","sizes","missingFile","glyphCache","toFontChar","fallbackToSystemFont","fileType","fileSubtype","isTrueTypeFile","isTrueTypeCollectionFile","isOpenTypeFile","isType1File","isCFFFile","getFontFileType","mimetype","cff","CFFFont","Type1Font","convert","checkAndRepair","isOpenType","seacMap","ID","int16","signedInt16","string16","safeString16","buildToFontChar","adjustMapping","charCodeToGlyphId","hasGlyph","newGlyphZeroId","newMap","privateUseAreaIndex","nextAvailableFontCharCode","privateUseOffetEnd","originalCharCode","glyphId","fontCharCode","createCmapTable","numGlyphs","codeIndices","getRanges","bmpLength","trailingRangesCount","segCount","startCount","endCount","idDeltas","idRangeOffsets","glyphsIds","bias","contiguous","format314","format31012","header31012","createOS2Table","charstrings","override","unitsPerEm","yMax","yMin","ulUnicodeRange1","ulUnicodeRange2","ulUnicodeRange3","ulUnicodeRange4","firstCharIndex","lastCharIndex","getUnicodeRangeFor","ascentScaled","typoAscent","typoDescent","winAscent","winDescent","createPostTable","angle","createNameTable","proto","strings","stringsUnicode","strBufUnicode","platforms","encodings","languages","namesRecordCount","nameTable","strOffset","strs","FontRendererFactory","stdFontMap","nonStdFontMap","getNonStdFontMap","isStandardFont","remeasure","GlyphMapForStandardFonts","getGlyphMapForStandardFonts","SupplementalGlyphMapForArialBlack","getSupplementalGlyphMapForArialBlack","SupplementalGlyphMapForCalibri","getSupplementalGlyphMapForCalibri","unicodeCharCode","getDingbatsGlyphsUnicode","VALID_TABLES","readTables","readTableEntry","previousPosition","readOpenTypeHeader","ttf","entrySelector","sanitizeGlyph","sourceStart","sourceEnd","destStart","hintsValid","glyphProfile","sizeOfInstructions","glyf","contoursCount","flagsCount","instructionsStart","instructionsLength","instructionsEnd","coordinatesLength","xLength","yLength","xyLength","repeat","glyphDataLength","readNameTable","numRecords","stringsStart","records","platform","language","record","nameIndex","TTOpsStackDeltas","sanitizeTTProgram","ttContext","funcId","lastEndf","lastDeff","callstack","functionsCalled","tooComplexToFollowFunctions","inFDEF","ifLevel","inELSE","op","functionsStackDeltas","stackTop","functionsDefined","functionsUsed","newStackLength","stackDelta","NaN","foldTTTable","cffFile","ttcData","ttc","numFonts","offsetTable","ttcTag","majorVersion","minorVersion","dsigTag","dsigLength","dsigOffset","readTrueTypeCollectionHeader","potentialHeader","potentialTables","nameEntry","readTrueTypeCollectionData","isTrueType","isComposite","numGlyphsOut","dupFirstEntry","maxFunctionDefs","maxSizeOfInstructions","fpgm","prep","cvt","checkInvalidFunctions","cvtData","sanitizeTTPrograms","numOfMetrics","numMissing","sanitizeMetrics","head","locaLength","indexToLocFormat","numGlyphsPlusOne","sanitizeHead","missingGlyphs","isGlyphLocationsLong","glyphsInfo","loca","itemSize","itemDecode","itemEncode","locaDataSize","locaData","oldGlyfData","oldGlyfDataLength","newGlyfData","writeOffset","simpleGlyph","firstEntryLength","sanitizeGlyphLocations","metricsOverride","post","maxpNumGlyphs","glyphNames","valid","glyphNameIndexes","customNames","stringLength","readPostScriptTable","isCidToGidMapEmpty","cmapTable","platformId","encodingId","mappings","hasShortCmap","potentialTable","canBreak","useTable","format","segIndex","offsetsCount","rangeOffset","offsetIndex","offsets","readCmapTable","cmapPlatformId","cmapEncodingId","cmapMappings","cmapMappingsLength","standardGlyphName","unicodeOrCharCode","glyphZeroId","newMapping","os2","selection","validateOS2Table","CFFParser","duplicateFirstGlyph","compiler","CFFCompiler","compile","namePrototype","builder","tableTag","builtInEncoding","amend","adjustToUnicode","mapping","getGlyphMapping","hasGlyphId","getCharCodes","charCodes","createCharCode","seacs","charset","getCharset","seac","baseGlyphName","accentGlyphName","baseGlyphId","accentGlyphId","accentOffset","baseFontCharCode","accentFontCharCode","tan","cffWidths","hmtx","charstring","_shadowWidth","possibleSpaceReplacements","charCodeOf","charToGlyph","widthCode","mapSpecialUnicodeValues","charsCache","charsCacheKey","readCharCode","type1FontGlyphMapping","findBlock","streamBytes","startIndex","streamBytesLength","headerBlockLength","pfbHeader","pfbHeaderPresent","headerBlock","suggestedLength","headerBytes","headerBytesLength","EEXEC_SIGNATURE","streamStartPos","getHeaderBlock","Type1Parser","extractFontHeader","eexecBytes","eexecBlock","extractFontProgram","type2Charstrings","getType2Charstrings","subrs","getType2Subrs","wrap","getSeacs","type1Charstrings","type1Subrs","type2Subrs","CFF","CFFHeader","CFFTopDict","setByName","CFFStrings","globalSubrIndex","CFFIndex","charsetArray","CFFStandardStrings","CFFCharset","charStringsIndex","charStrings","privateDict","CFFPrivateDict","field","privateData","subrIndex","subrsIndex","charsets","isCIDFont","CFFFDSelect","_charsets","CharstringValidationData","stackClearing","stem","resetStack","undefStack","CharstringValidationData12","stackFn","seacAnalysisEnabled","parseHeader","parseIndex","topDictIndex","stringIndex","topDictParsed","parseDict","createDict","parseNameIndex","parseStringIndex","parsePrivateDict","hasName","charStringOffset","getByName","charStringIndex","fontBBox","fdArrayIndex","dictRaw","fontDict","fdArray","parseCharsets","fdSelect","parseFDSelect","parseEncoding","charStringsAndSeacs","parseCharStrings","localSubrIndex","hdrSize","offSize","parseOperand","parseFloatOperand","operands","cffIndex","offsetSize","offsetStart","offsetEnd","Type","cffDict","pair","setByKey","parseCharString","callDepth","stackSize","validationCommand","subrNumber","hasVStems","firstStackClearing","localSubrToUse","privateDictToUse","fdIndex","getFDIndex","nominalWidth","emptyPrivateDictionary","parentDict","privateOffset","privateDictEnd","dictData","subrsOffset","relativeOffset","removeByName","CFFCharsetPredefinedTypes","ISO_ADOBE","ISOAdobeCharset","EXPERT","ExpertCharset","EXPERT_SUBSET","ExpertSubsetCharset","raw","predefined","ExpertEncoding","dataStart","glyphsCount","rangesCount","gid","supplementsCount","sid","readSupplement","CFFEncoding","glyphZero","NUM_STANDARD_CFF_STRINGS","getSID","objects","CFFDict","keyToNameMap","nameToKeyMap","defaults","types","opcodes","order","valueLength","createTables","layout","glyphIndex","CFFOffsetTracker","isTracking","track","location","setEntryLocation","offset1","offset2","offset3","offset4","compileHeader","compileNameIndex","subDict","compiled","compileTopDicts","topDictTracker","trackers","compileStringIndex","compileIndex","compileEncoding","compileCharset","compileCharStrings","compileFDSelect","fontDictTrackers","compilePrivateDicts","encodeNumber","encodeFloat","encodeInteger","nibbles","sanitizedName","dicts","removeCidKeys","fontDictTracker","fontDictData","compileDict","privateDictTracker","privateDictData","offsetTracker","compileGlobalSubrIndex","writeByteArray","numGlyphsLessNotDef","charsetIndex","numCharsets","warned","compileTypedArray","lastFD","currentFD","numRanges","lastOffset","encodingName","MacExpertEncoding","getSpecialPUASymbols","UnicodeRanges","charsLength","hexStr","nameLen","toUpperCase","getLong","getUshort","getSubroutineBias","numSubrs","parseCmap","idDelta","idOffset","groups","parseCff","gsubrs","isCFFCIDFont","lookupCmap","codePointAt","NOOP","CompiledFont","compiledGlyphs","compiledCharCodeToGlyphId","compileGlyph","cmds","compileGlyphImpl","compileGlyf","quadraticCurveTo","xa","ya","numberOfContours","arg1","arg2","scale01","scale10","subglyph","endPtsOfContours","numberOfPoints","points","startPoint","endPoint","contour","parseGlyfTable","cffInfo","glyphNameMap","gsubrsBias","subrsBias","compileCharString","stems","bezierCurveTo","xb","yb","subrCode","stackClean","achar","bchar","Type1CharString","COMMAND_MAP","lsb","flexing","encoded","wx","sbx","dy","executeCommand","sby","num2","num1","flexArgs","howManyArgs","command","keepStack","stackLength","EEXEC_ENCRYPT_KEY","isHexDigit","discardNumber","decrypted","isSpecial","encrypted","isBinary","digit1","digit2","decryptAscii","readNumberArray","getToken","readInt","readBoolean","readCharStrings","lenIV","program","blueArray","charString","charStringObject","encodingArg","xstep","ystep","paintType","tilingType","ShadingType","FUNCTION_BASED","AXIAL","RADIAL","FREE_FORM_MESH","LATTICE_FORM_MESH","COONS_PATCH_MESH","TENSOR_PATCH_MESH","getPattern","ctx","Shadings","RadialAxial","Mesh","Dummy","SMALL_NUMBER","coordsArr","shadingType","t0","domainArr","extendStart","extendEnd","extendArr","r1","r2","distance","fnObj","createFromArray","colorStops","ratio","cssColor","makeCssRgb","background","r0","singularValueDecompose2dScale","MeshStreamReader","tmpCompsBuf","csNumComps","tmpCsCompsBuf","colorFn","hasData","align","readFlag","bitsPerFlag","readCoordinate","bitsPerCoordinate","xi","yi","readComponents","ci","MIN_SPLIT_PATCH_CHUNKS_AMOUNT","MAX_SPLIT_PATCH_CHUNKS_AMOUNT","TRIANGLE_DENSITY","getB","lut","t_","buildB","buildFigureFromPatch","mesh","figure","figures","coords","pi","figureMinX","figureMinY","figureMaxX","figureMaxY","splitXBy","bounds","splitYBy","verticesPerRow","figureCoords","figureColors","cl","cr","c0","c1","c2","c3","bRow","bCol","newColor","updateBounds","patchMesh","operators","ps","verticesLeft","coord","decodeType4Shading","decodeType5Shading","tmp4","decodeType6Shading","decodeType7Shading","coordsPacked","xy","colorsPacked","packData","startLevel","isLTR","strLength","createBidiText","numBidi","charType","baseTypes","arabicTypes","isOdd","sor","eor","lastType","findUnequal","before","after","setValues","isEven","highestLevel","lowestOddLevel","reverseValues","temp","fnDict","PostScriptCompiler","PostScriptEvaluator","_ps_parser","toNumberArray","PDFFunction","parseArray","outputSize","bps","sampleMul","strBytes","strIdx","typeFn","constructSampled","constructInterpolated","constructStiched","constructPostScript","constructSampledFromIR","constructInterpolatedFromIR","constructStichedFromIR","constructPostScriptFromIR","toMultiArray","domain","inputSize","encode","getSampleArray","interpolate","xmin","xmax","ymin","ymax","samples","cubeVertices","cubeN","Float64Array","cubeVertex","domain_2i","domain_2i_1","size_i","e0","n0","n1","rj","fnRefs","fns","dmin","dmax","rmin","rmax","PostScriptLexer","PostScriptParser","numOutputs","numInputs","cache_available","cachedValue","execute","stackIndex","bound","PostScriptStack","initialStack","copy","roll","operator","counter","atan","cos","LN10","sin","AstNode","AstArgument","AstLiteral","AstBinaryOperation","AstMin","AstVariable","AstVariableDefinition","variable","ExpressionBuilderVisitor","parts","buildAddOperation","buildMulOperation","buildSubOperation","buildMinOperation","visit","visitArgument","visitLiteral","visitBinaryOperation","visitMin","visitVariable","visitVariableDefinition","literal","definition","ast1","ast2","tmpVar","instructions","lastRegister","instruction","statementBuilder","expr","nextToken","accept","expect","PostScriptTokenTypes","LBRACE","parseBlock","RBRACE","NUMBER","OPERATOR","parseCondition","conditionLocation","IF","jumpLocation","endOfTrue","IFELSE","PostScriptToken","opCache","opValue","getOperator","SEED","MASK_HIGH","MASK_LOW","seed","blockCounts","tailLength","dataUint32","k2","C1","C2","C1_LOW","C2_LOW","hex1","hex2","isDecodable","handleImageData","canDecode","decodeAndClamp","addend","coefficient","resizeImageMask","isMask","matte","needsDecode","decodeCoefficients","decodeAddends","isIndexed","smaskPromise","maskPromise","imagePromise","imageData","smaskData","maskData","computedLength","bufferPos","buf","rowComps","loop1End","loop2End","remainingBits","rgbaBuf","alphaBuf","sw","sh","fillGrayBuffer","opacity","imageOffset","maskOffset","matteRgb","matteR","matteG","matteB","forceRGBA","getImageBytes","newArray","imageLength","maybeUndoPreblend","getComponents","fillOpacity","decodeBuffer","fillRgb","undoPreblend","CallbackKind","DATA","ERROR","StreamKind","CANCEL","CANCEL_COMPLETE","CLOSE","ENQUEUE","PULL","PULL_COMPLETE","START_COMPLETE","wrapReason","sourceName","targetName","comObj","callbackId","streamId","streamSinks","streamControllers","callbackCapabilities","actionHandler","_onComObjOnMessage","event","_processStreamMessage","_createStreamSink","addEventListener","ah","_postMessage","queueingStrategy","ReadableStream","controller","startCapability","startCall","pullCall","cancelCall","isClosed","pull","pullCapability","cancel","cancelCapability","isCancelled","lastDesiredSize","sinkCapability","success","_deleteStreamController","allSettled","removeEventListener","_msgHandler","_contentLength","_fullRequestReader","_rangeRequestReaders","PDFWorkerStreamReader","PDFWorkerStreamRangeReader","_isRangeSupported","_isStreamingSupported","readableStream","_reader","_headersReady"],"mappings":"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WAAA,IAEAH,GAAA,MACAC,KAAA,EACAC,KAAA,EACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,EACAC,KAAA,EACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,EACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,EACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,IACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,MACAC,KAAA,EACAC,KAAA,EACAC,WAAA,IAEAH,GAAA,MACAC,KAAA,EACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,MACAC,KAAA,EACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,MACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,MACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,MACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,MACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,MACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,MACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,MACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,MACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,MACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,MACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,KACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,IACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,IACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,IACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,IACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,IACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,GACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,GACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,GACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,EACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,EACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,EACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IAEAH,GAAA,MACAC,KAAA,GACAC,KAAA,GACAC,WAAA,IA2GA3sD,EAAA+5C,wBAvGApzC,YAAAM,EAAAmG,EAAAyd,GACA1oB,KAAA8E,OACA9E,KAAAyqD,GAAAx/C,EACAjL,KAAA0qD,QAAAhiC,EACA1oB,KAAA2qD,MAAA7lD,EAAAmG,GACAjL,KAAA4qD,KAAA,EACA5qD,KAAA6qD,SACA7qD,KAAA2qD,MAAA3qD,KAAA2qD,OAAA,QAAA3qD,KAAA4qD,MAAA,MACA5qD,KAAA4qD,KAAA5qD,KAAA4qD,MAAA,QACA5qD,KAAA8qD,IAAA,EACA9qD,KAAAojB,EAAA,MAGA5e,SACA,MAAAM,EAAA9E,KAAA8E,KACA,IAAA2lD,EAAAzqD,KAAAyqD,GAEA,MAAA3lD,EAAA2lD,GACA3lD,EAAA2lD,EAAA,QACAzqD,KAAA4qD,MAAA,MACA5qD,KAAA8qD,GAAA,IAEAL,IACAzqD,KAAA4qD,MAAA9lD,EAAA2lD,IAAA,EACAzqD,KAAA8qD,GAAA,EACA9qD,KAAAyqD,OAGAA,IACAzqD,KAAA4qD,MAAAH,EAAAzqD,KAAA0qD,QAAA5lD,EAAA2lD,IAAA,QACAzqD,KAAA8qD,GAAA,EACA9qD,KAAAyqD,MAGAzqD,KAAA4qD,KAAA,QACA5qD,KAAA2qD,OAAA3qD,KAAA4qD,MAAA,GACA5qD,KAAA4qD,MAAA,OAIApmD,QAAA6yC,EAAAroC,GACA,IAAA+7C,EAAA1T,EAAAroC,IAAA,EACAg8C,EAAA,EAAA3T,EAAAroC,GACA,MAAAi8C,EAAAb,EAAAW,GACAG,EAAAD,EAAAZ,GACA,IAAAhsD,EACA+kB,EAAApjB,KAAAojB,EAAA8nC,EAEA,GAAAlrD,KAAA2qD,MAAAO,EACA9nC,EAAA8nC,GACA9nC,EAAA8nC,EACA7sD,EAAA2sD,EACAD,EAAAE,EAAAX,OAEAlnC,EAAA8nC,EACA7sD,EAAA,EAAA2sD,EAEA,IAAAC,EAAAT,aACAQ,EAAA3sD,GAGA0sD,EAAAE,EAAAV,UAEK,CAGL,GAFAvqD,KAAA2qD,OAAAO,EAEA,UAAA9nC,GAEA,OADApjB,KAAAojB,IACA4nC,EAGA5nC,EAAA8nC,GACA7sD,EAAA,EAAA2sD,EAEA,IAAAC,EAAAT,aACAQ,EAAA3sD,GAGA0sD,EAAAE,EAAAV,OAEAlsD,EAAA2sD,EACAD,EAAAE,EAAAX,MAIA,GACA,IAAAtqD,KAAA8qD,IACA9qD,KAAA6qD,SAGAznC,IAAA,EACApjB,KAAA2qD,MAAA3qD,KAAA2qD,OAAA,QAAA3qD,KAAA4qD,MAAA,KACA5qD,KAAA4qD,KAAA5qD,KAAA4qD,MAAA,QACA5qD,KAAA8qD,WACK,UAAA1nC,IAIL,OAFApjB,KAAAojB,IACAi0B,EAAAroC,GAAA+7C,GAAA,EAAAC,EACA3sD,KASA,SAAAP,EAAAD,EAAAiF,GAEA,aAGArE,OAAAC,eAAAb,EAAA,cACAqF,OAAA,IAEArF,EAAAksC,gBAAA,EAEA,IAAAnmC,EAAAd,EAAA,GAEAqlB,EAAArlB,EAAA,IAEAe,EAAAf,EAAA,GAEAqoD,EAAAroD,EAAA,IAEA,MAAAinC,EAAA,WACA,SAAAA,EAAAr/B,EAAA2+B,EAAA7hB,EAAAoX,GACA,IAAAjQ,EAEA,WAAAA,EAAAjkB,EAAA+f,YACA,SAAAkE,EAAA,CACAjkB,EAAAqqB,MAAA,GACA,MAIA/0B,KAAA0K,SACA1K,KAAAqpC,cACArpC,KAAAwnB,OACAxnB,KAAA4+B,SAEAzW,EAAAykB,aAAA1uC,KAAA8B,KAAAqpC,GAoLA,OAjLAU,EAAA7qC,UAAAT,OAAA6E,OAAA6kB,EAAAykB,aAAA1tC,WACAT,OAAAC,eAAAqrC,EAAA7qC,UAAA,SACAL,IAAA,WACA,SAAA+E,EAAAuO,QAAAnS,KAAA,QAAAA,KAAA0K,OAAAgb,SAAA1lB,KAAAqpC,eAEA1qC,cAAA,IAGAorC,EAAA7qC,UAAAquC,aAAA,SAAAC,KAEAzD,EAAA7qC,UAAAouC,UAAA,WACA,GAAAttC,KAAAotC,IACA,OAGA,MAAAge,GACAC,qBAAA97C,EACA+7C,oBAAA/7C,GAEAg8C,EAAAvrD,KAAAwnB,KAAAiG,SAAA,cAEA,GAAAztB,KAAAwrD,UAAApqD,MAAA0lB,QAAAykC,GAAA,CACA,MAAAE,EAAAzrD,KAAAwnB,KAAA3oB,IAAA,uBACA6sD,EAAAH,EAAAhrD,OACA8b,EAAA,IAAAyxB,WAAA4d,GACA,IAAAC,GAAA,EACA,MAAAC,GAAA,GAAAH,GAAA,EAEA,QAAA1tD,EAAA,EAAqBA,EAAA2tD,EAAqB3tD,GAAA,EAC1Cse,EAAAte,GAAA,KAAAwtD,EAAAxtD,EAAA,GAAAwtD,EAAAxtD,IAAA,EACAse,EAAAte,EAAA,GAAAwtD,EAAAxtD,GAAA6tD,EAAA,EAEA,MAAAvvC,EAAAte,IAAA,IAAAse,EAAAte,EAAA,KACA4tD,GAAA,GAIAA,IACAP,EAAAC,gBAAAhvC,GAIA,MAAAxY,EAAAshB,QAAAnlB,KAAA4+B,QAAA,CACA,MAAA0sB,EAAAtrD,KAAA4+B,OAAA//B,IAAA,kBAEAoT,OAAAC,UAAAo5C,KACAF,EAAAE,kBAIA,MAAAO,EAAA,IAAAV,EAAAW,UAAAV,GACAS,EAAAx2B,MAAAr1B,KAAA2K,OACA,MAAA7F,EAAA+mD,EAAAE,SACAvT,MAAAx4C,KAAAgsD,UACAvT,OAAAz4C,KAAAisD,WACAT,SAAAxrD,KAAAwrD,SACAU,aAAA,IAEAlsD,KAAAqiB,OAAAvd,EACA9E,KAAAmtC,aAAAroC,EAAAvE,OACAP,KAAAotC,KAAA,GAGA3uC,OAAAC,eAAAqrC,EAAA7qC,UAAA,wBACAL,IAAA,WACA,MAAA2oB,KACAA,EAAA9c,OACAA,GACO1K,KACPmsD,EAAA3kC,EAAA3oB,IAAA,cACAwkC,EAAA34B,EAAAsE,IACA,IAEA0T,EAFA0pC,GAAA,EACAC,GAAA,EAGA,WAAA3pC,EAAAhY,EAAA+f,YACA,SAAA/H,EAAA,CAIA,OAAAhY,EAAA+f,WACA,SACA,SACA,SACA4hC,GAAA,EACA3hD,EAAAsE,KAAA,EACAtE,EAAAsE,KAAA,EACA,MAAAs9C,EAAA5hD,EAAAi9B,YAEA,GAAA2kB,IAAAH,EACA,MAGA,OAAAG,EAAA,CACAF,GAAA,EACA,MAGA,GAAAE,EAAA,GAAAH,EAAA,CACAC,GAAA,EACA,MAGA,MAEA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACAC,GAAA,EACA,MAEA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,MAAA5kB,EAAA/8B,EAAAi9B,YAEAF,EAAA,EACA/8B,EAAAqqB,KAAA0S,EAAA,GAEA/8B,EAAAqqB,MAAA,GAGA,MAEA,SACArqB,EAAAqqB,MAAA,GACA,MAEA,SACAs3B,GAAA,EAIA,GAAAA,EACA,MAKA,OADA3hD,EAAAsE,IAAAq0B,GACA,EAAAz/B,EAAAuO,QAAAnS,KAAA,uBAAAosD,IAEAztD,cAAA,IAGAorC,EAAA7qC,UAAAqtD,MAAA,SAAAz+C,GAAA,GACA,SAAAlK,EAAAsP,iBAAAlT,KAAA2K,MAAA,aAAAmD,IAGAi8B,EApMA,GAuMAlsC,EAAAksC,cAIA,SAAAjsC,EAAAD,EAAAiF,GAEA,aAGArE,OAAAC,eAAAb,EAAA,cACAqF,OAAA,IAEArF,EAAAiuD,eAAA,EAEA,IAAAloD,EAAAd,EAAA,GAEAoB,EAAApB,EAAA,SAEA0pD,UAAA5oD,EAAA4Q,cACAhQ,YAAAwL,GACAgS,qBAAyBhS,YAKzBy8C,UAAA7oD,EAAA4Q,cACAhQ,YAAAmJ,EAAA2+C,GACAtqC,MAAArU,GACA3N,KAAAssD,mBAKAI,UAAA9oD,EAAA4Q,eAEA,IAAAs3C,EAAA,WACA,IAAAa,EAAA,IAAA5nD,YAAA,wLACA6nD,EAAA,KACAC,EAAA,IACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KAEA,SAAArB,GAAAT,gBACAA,EAAA,KAAAC,eACAA,GAAA,OAEAtrD,KAAAotD,iBAAA/B,EACArrD,KAAAqtD,gBAAA/B,EAGA,SAAAgC,EAAAzd,EAAAliB,GAOA,IANA,IAEA5vB,EACA81B,EAHAoc,EAAA,EACA9iC,KAGA5M,EAAA,GAEAA,EAAA,IAAAsvC,EAAAtvC,EAAA,IACAA,IAGA4M,EAAA7L,MACA+hD,YACA3yC,MAAA,IAEA,IACAwiC,EADA9zC,EAAA+N,EAAA,GAGA,IAAApP,EAAA,EAAeA,EAAAwC,EAAYxC,IAAA,CAC3B,IAAA81B,EAAA,EAAiBA,EAAAgc,EAAA9xC,GAAoB81B,IAAA,CAIrC,KAHAz0B,EAAA+N,EAAA8wB,OACAolB,SAAAjkD,EAAAsR,OAAAid,EAAAsiB,GAEA7wC,EAAAsR,MAAA,GACAtR,EAAA+N,EAAA8wB,MAMA,IAHA7+B,EAAAsR,QACAvD,EAAA7L,KAAAlC,GAEA+N,EAAA5M,QAAAxC,GACAoP,EAAA7L,KAAA4xC,GACAmQ,YACA3yC,MAAA,IAEAtR,EAAAikD,SAAAjkD,EAAAsR,OAAAwiC,EAAAmQ,SACAjkD,EAAA8zC,EAGAjD,IAGAlyC,EAAA,EAAAwC,IACA4M,EAAA7L,KAAA4xC,GACAmQ,YACA3yC,MAAA,IAEAtR,EAAAikD,SAAAjkD,EAAAsR,OAAAwiC,EAAAmQ,SACAjkD,EAAA8zC,GAIA,OAAA/lC,EAAA,GAAAk2C,SAGA,SAAAkK,EAAAC,EAAArY,EAAAsY,GACA,YAAAD,EAAAE,cAAA,GAAAvY,EAAAsY,GAGA,SAAAE,EAAA7oD,EAAAypB,EAAAq/B,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAA,GACA,IAAAC,EAAAR,EAAAQ,YACAC,EAAAT,EAAAS,YACAC,EAAA//B,EACAggC,EAAA,EACAC,EAAA,EAEA,SAAA/W,IACA,GAAA+W,EAAA,EAEA,OAAAD,KADAC,EACA,EAKA,UAFAD,EAAAzpD,EAAAypB,MAEA,CACA,IAAAkgC,EAAA3pD,EAAAypB,KAEA,GAAAkgC,EAAA,CACA,SAAAA,GAAAN,EAAA,CACA5/B,GAAA,EACA,MAAA+9B,GAAA,EAAApoD,EAAAsqB,YAAA1pB,EAAAypB,GAGA,GAFAA,GAAA,EAEA+9B,EAAA,GAAAA,IAAAsB,EAAAtB,UACA,UAAAG,EAAA,oDAAAH,QAEW,SAAAmC,EAAA,CACX,GAAAN,EAAA,CACA,MAAAO,EAAA,EAAAC,EAEA,GAAAD,EAAA,GAAAA,EAAAd,EAAAtB,UAAA,GACA,UAAAG,EAAA,wGAAAiC,GAIA,UAAAhC,EAAA,qDAGA,UAAAF,wBAAmD+B,GAAA,EAAAE,GAAA7gD,SAAA,QAKnD,OADA4gD,EAAA,EACAD,IAAA,EAGA,SAAAK,EAAAC,GAGA,IAFA,IAAAtwB,EAAAswB,IAEA,CAGA,cAFAtwB,IAAAkZ,OAGA,aACA,OAAAlZ,EAEA,aACA,SAGA,UAAAiuB,EAAA,6BAIA,SAAAsC,EAAAvuD,GAGA,IAFA,IAAAzB,EAAA,EAEAyB,EAAA,GACAzB,KAAA,EAAA24C,IACAl3C,IAGA,OAAAzB,EAGA,SAAAiwD,EAAAxuD,GACA,OAAAA,EACA,WAAAk3C,IAAA,KAGA,IAAA34C,EAAAgwD,EAAAvuD,GAEA,OAAAzB,GAAA,GAAAyB,EAAA,EACAzB,EAGAA,IAAA,GAAAyB,GAAA,EAwCA,IAAAyuD,EAAA,EAiCA,IACAC,EADAC,EAAA,EAmFA,IAAAP,EAAA,EAEA,SAAAQ,EAAA3B,EAAA5Q,EAAAwS,EAAAja,EAAAsY,GACA,IACA4B,EAAAD,EAAAhB,EACAO,GAFAS,EAAAhB,EAAA,GAEAZ,EAAAp9C,EAAA+kC,EACA,IAAAma,EAAAD,EAAA7B,EAAA+B,EAAA9B,EAEA7Q,EAAA4Q,EADAD,EAAAC,EAAAmB,EAAAW,IAIA,SAAAE,EAAAhC,EAAA5Q,EAAAwS,GACAT,EAAAS,EAAA5B,EAAAE,cAAA,EACA,IAAA4B,EAAAF,EAAA5B,EAAAE,cAEA9Q,EAAA4Q,EADAD,EAAAC,EAAAmB,EAAAW,IAIA,IACA9B,EAAAzvD,EAAA81B,EAAAoc,EAAAnxC,EACA2wD,EAFAC,EAAA7B,EAAAttD,OAMAkvD,EAFApB,EACA,IAAAN,EACA,IAAAE,EAtJA,SAAAT,EAAAj/B,GACA,IAAAprB,EAAAyrD,EAAApB,EAAAmC,gBACAC,EAAA,IAAAzsD,EAAA,EAAA4rD,EAAA5rD,IAAA+qD,EACAV,EAAAqC,UAAAthC,GAAAi/B,EAAAsC,MAAAF,GAGA,SAAApC,EAAAj/B,GACAi/B,EAAAqC,UAAAthC,IAAAkpB,KAAAyW,GAiJA,IAAAD,EA5IA,SAAAT,EAAAj/B,GACA,GAAAygC,EAAA,EACAA,SAOA,IAHA,IAAA/e,EAAA8d,EACAhuD,EAAAiuD,EAEA/d,GAAAlwC,GAAA,CACA,IAAAgwD,EAAAnB,EAAApB,EAAAwC,gBACA3wD,EAAA,GAAA0wD,EACAhtD,EAAAgtD,GAAA,EAEA,OAAA1wD,EAAA,CAWA,IAAA4wD,EAAAtD,EADA1c,GAAAltC,GAEAyqD,EAAAqC,UAAAthC,EAAA0hC,GAAAlB,EAAA1vD,IAAA,GAAA6uD,GACAje,QAbA,CACA,GAAAltC,EAAA,IACAisD,EAAAF,EAAA/rD,IAAA,GAAAA,GAAA,EACA,MAGAktC,GAAA,MAcA,SAAAud,EAAAj/B,GAOA,IANA,IAGAlvB,EACA0wD,EAJA9f,EAAA8d,EACAhuD,EAAAiuD,EACAjrD,EAAA,EAIAktC,GAAAlwC,GAAA,CACA,MAAAmwD,EAAA3hC,EAAAo+B,EAAA1c,GACApF,EAAA2iB,EAAAqC,UAAAK,GAAA,OAEA,OAAAhB,GACA,OAKA,GAFAnsD,GAFAgtD,EAAAnB,EAAApB,EAAAwC,kBAEA,EAEA,IAHA3wD,EAAA,GAAA0wD,GAIAhtD,EAAA,IACAisD,EAAAF,EAAA/rD,IAAA,GAAAA,GACAmsD,EAAA,IAEAnsD,EAAA,GACAmsD,EAAA,OAEa,CACb,OAAA7vD,EACA,UAAAmtD,EAAA,wBAGAyC,EAAAF,EAAA1vD,GACA6vD,EAAAnsD,EAAA,IAGA,SAEA,OACA,OACAyqD,EAAAqC,UAAAK,GACA1C,EAAAqC,UAAAK,IAAArlB,GAAA4M,KAAAyW,GAIA,KAFAnrD,IAGAmsD,EAAA,IAAAA,EAAA,KAIA,MAEA,OACA1B,EAAAqC,UAAAK,GACA1C,EAAAqC,UAAAK,IAAArlB,GAAA4M,KAAAyW,IAEAV,EAAAqC,UAAAK,GAAAjB,GAAAf,EACAgB,EAAA,GAGA,MAEA,OACA1B,EAAAqC,UAAAK,KACA1C,EAAAqC,UAAAK,IAAArlB,GAAA4M,KAAAyW,IAMAje,IAGA,IAAAif,GAGA,KAFAF,IAGAE,EAAA,IApJA,SAAA1B,EAAAj/B,GACA,IAAAprB,EAAAyrD,EAAApB,EAAAmC,gBACAC,EAAA,IAAAzsD,EAAA,EAAA4rD,EAAA5rD,GACAqqD,EAAAqC,UAAAthC,GAAAi/B,EAAAsC,MAAAF,EAGA,IAFA,IAAA3f,EAAA,EAEAA,EAAA,KACA,IAAA8f,EAAAnB,EAAApB,EAAAwC,gBACA3wD,EAAA,GAAA0wD,EACAhtD,EAAAgtD,GAAA,EAEA,OAAA1wD,EAAA,CAUA,IAAA4wD,EAAAtD,EADA1c,GAAAltC,GAEAyqD,EAAAqC,UAAAthC,EAAA0hC,GAAAlB,EAAA1vD,GACA4wC,QAZA,CACA,GAAAltC,EAAA,GACA,MAGAktC,GAAA,MAyKA,IACAkgB,EACAC,EAQAb,EAAAn/C,EAVAg/C,EAAA,EAYA,IAPAgB,EADA,IAAAV,EACA7B,EAAA,GAAAH,cAAAG,EAAA,GAAAwC,gBAEAjC,EAAAR,EAAA0C,cAKAlB,EAAAgB,GAAA,CACA,IAAAG,EAAAzC,EAAA1kD,KAAAwG,IAAAwgD,EAAAhB,EAAAtB,GAAAsC,EAEA,IAAAryD,EAAA,EAAiBA,EAAA2xD,EAAsB3xD,IACvC8vD,EAAA9vD,GAAA+xD,KAAA,EAKA,GAFAd,EAAA,EAEA,IAAAU,EAGA,IAFAlC,EAAAK,EAAA,GAEA/uD,EAAA,EAAmBA,EAAAyxD,EAAezxD,IAClC0wD,EAAAhC,EAAAiC,EAAAL,GACAA,SAGA,IAAAtwD,EAAA,EAAmBA,EAAAyxD,EAAezxD,IAAA,CAClC,IAAAf,EAAA,EAAqBA,EAAA2xD,EAAsB3xD,IAK3C,IAHAwxD,GADA/B,EAAAK,EAAA9vD,IACAwxD,EACAn/C,EAAAo9C,EAAAp9C,EAEAyjB,EAAA,EAAuBA,EAAAzjB,EAAOyjB,IAC9B,IAAAoc,EAAA,EAAyBA,EAAAsf,EAAOtf,IAChCkf,EAAA3B,EAAAiC,EAAAL,EAAAv7B,EAAAoc,GAKAmf,IAOA,GAHAZ,EAAA,IACA2B,EAAAK,EAAA1rD,EAAAypB,IAGA,MACO4hC,EAAAM,WACP,EAAA7sD,EAAAoF,MAAA,wDAAAmnD,EAAAM,SACAliC,EAAA4hC,EAAA5hC,QAGA,IAAA1tB,EAAAsvD,KAAAtvD,OAEA,IAAAA,MAAA,MACA,UAAA2rD,EAAA,8CAGA,KAAA3rD,GAAA,OAAAA,GAAA,OAGA,MAFA0tB,GAAA,EAaA,OAPA4hC,EAAAK,EAAA1rD,EAAAypB,KAEA4hC,EAAAM,WACA,EAAA7sD,EAAAoF,MAAA,yDAAAmnD,EAAAM,SACAliC,EAAA4hC,EAAA5hC,QAGAA,EAAA+/B,EAGA,SAAAoC,EAAAlD,EAAAmD,EAAAvxD,GACA,IAEAwxD,EAAArrC,EAAAC,EAAAqrC,EAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAruC,EAAAE,EAAAE,EAAAC,EAAAiuC,EAAAC,EAAAC,EACAluD,EAJAmuD,EAAA9D,EAAA+D,kBACA1B,EAAArC,EAAAqC,UAKA,IAAAyB,EACA,UAAA9E,EAAA,wCAGA,QAAArX,EAAA,EAAqBA,EAAA,GAAUA,GAAA,EAC/B+b,EAAArB,EAAAc,EAAAxb,GACAtyB,EAAAgtC,EAAAc,EAAAxb,EAAA,GACApyB,EAAA8sC,EAAAc,EAAAxb,EAAA,GACAlyB,EAAA4sC,EAAAc,EAAAxb,EAAA,GACAjyB,EAAA2sC,EAAAc,EAAAxb,EAAA,GACAgc,EAAAtB,EAAAc,EAAAxb,EAAA,GACAic,EAAAvB,EAAAc,EAAAxb,EAAA,GACAkc,EAAAxB,EAAAc,EAAAxb,EAAA,GACA+b,GAAAI,EAAAnc,GAEA,IAAAtyB,EAAAE,EAAAE,EAAAC,EAAAiuC,EAAAC,EAAAC,IAaAxuC,GAAAyuC,EAAAnc,EAAA,GACApyB,GAAAuuC,EAAAnc,EAAA,GACAlyB,GAAAquC,EAAAnc,EAAA,GACAjyB,GAAAouC,EAAAnc,EAAA,GACAgc,GAAAG,EAAAnc,EAAA,GACAic,GAAAE,EAAAnc,EAAA,GACAkc,GAAAC,EAAAnc,EAAA,GAUA5vB,GADAqrC,GARAA,EAAA1D,EAAAgE,EAAA,SACA3rC,EAAA2nC,EAAAhqC,EAAA,QAOA,MACAqC,EACApiB,GARAqiB,EAAAzC,GAQAkqC,GAPA4D,EAAAO,GAOApE,EAAA,OACAxnC,IAAAwnC,EAAA6D,EAAA5D,EAAA,OAGA+D,GADAF,GATAA,EAAA3D,GAAAtqC,EAAAwuC,GAAA,SAGAL,EAAAG,GAAA,GAMA,MACAH,EAEAD,GADAE,GAVAA,EAAA9D,GAAAtqC,EAAAwuC,GAAA,SACAN,EAAA9tC,GAAA,GASA,MACA8tC,EAEAF,GADAD,KALAC,EAAA1tD,GAKA,MACA0tD,EAEArrC,GADAD,IAAAC,EAAA,MACAA,EACAriB,EAAA2tD,EAAA/D,EAAAkE,EAAAnE,EAAA,SACAgE,IAAAhE,EAAAmE,EAAAlE,EAAA,SACAkE,EAAA9tD,EACAA,EAAA4tD,EAAAlE,EAAAmE,EAAApE,EAAA,SACAmE,IAAAnE,EAAAoE,EAAAnE,EAAA,SACAmE,EAAA7tD,EACA/D,EAAA+1C,GAAAyb,EAAAK,EACA7xD,EAAA+1C,EAAA,GAAAyb,EAAAK,EACA7xD,EAAA+1C,EAAA,GAAA5vB,EAAAyrC,EACA5xD,EAAA+1C,EAAA,GAAA5vB,EAAAyrC,EACA5xD,EAAA+1C,EAAA,GAAA3vB,EAAAurC,EACA3xD,EAAA+1C,EAAA,GAAA3vB,EAAAurC,EACA3xD,EAAA+1C,EAAA,GAAA0b,EAAAC,EACA1xD,EAAA+1C,EAAA,GAAA0b,EAAAC,IArDA3tD,EAAA+pD,EAAAgE,EAAA,QACA9xD,EAAA+1C,GAAAhyC,EACA/D,EAAA+1C,EAAA,GAAAhyC,EACA/D,EAAA+1C,EAAA,GAAAhyC,EACA/D,EAAA+1C,EAAA,GAAAhyC,EACA/D,EAAA+1C,EAAA,GAAAhyC,EACA/D,EAAA+1C,EAAA,GAAAhyC,EACA/D,EAAA+1C,EAAA,GAAAhyC,EACA/D,EAAA+1C,EAAA,GAAAhyC,GAgDA,QAAAsqD,EAAA,EAAqBA,EAAA,IAASA,EAC9ByD,EAAA9xD,EAAAquD,GASA,KARA5qC,EAAAzjB,EAAAquD,EAAA,KACA1qC,EAAA3jB,EAAAquD,EAAA,MACAxqC,EAAA7jB,EAAAquD,EAAA,MACAvqC,EAAA9jB,EAAAquD,EAAA,MACA0D,EAAA/xD,EAAAquD,EAAA,MACA2D,EAAAhyD,EAAAquD,EAAA,MACA4D,EAAAjyD,EAAAquD,EAAA,OAiCAloC,GADAqrC,EAAA,OARAA,EAAA1D,EAAAgE,EAAA,WACA3rC,EAAA2nC,EAAAhqC,EAAA,UAOA,OACAqC,EACApiB,GARAqiB,EAAAzC,GAQAkqC,GAPA4D,EAAAO,GAOApE,EAAA,SACAxnC,IAAAwnC,EAAA6D,EAAA5D,EAAA,SACA4D,EAAA1tD,EAEA6tD,GADAF,GATAA,EAAA3D,GAAAtqC,EAAAwuC,GAAA,WAGAL,EAAAG,GAMA,MACAH,EAEAD,GADAE,GAVAA,EAAA9D,GAAAtqC,EAAAwuC,GAAA,WACAN,EAAA9tC,GASA,MACA8tC,EAKA5tD,EAAA2tD,EAAA/D,EAAAkE,EAAAnE,EAAA,SACAgE,IAAAhE,EAAAmE,EAAAlE,EAAA,SACAkE,EAAA9tD,EACAA,EAAA4tD,EAAAlE,EAAAmE,EAAApE,EAAA,SACAmE,IAAAnE,EAAAoE,EAAAnE,EAAA,SAGAwE,GAXAT,IAAAC,EAAA,MAWAI,EACApuC,GAVA0C,IAAAC,EAAA,OAOAwrC,EAAA7tD,GAIAiuD,EAAA7rC,EAAAyrC,EACAjuC,GAXAyC,EAAAD,EAAAC,GAWAurC,EACAI,EAAA3rC,EAAAurC,EACA9tC,GAfA4tC,EAAAD,EAAAC,GAeAC,EACA5tC,EAAA2tC,EAAAC,GAPAI,EAAAN,EAAAK,GASA,GACAC,EAAA,EACOA,GAAA,KACPA,EAAA,IAEAA,IAAA,EAGAruC,EAAA,GACAA,EAAA,EACOA,GAAA,KACPA,EAAA,IAEAA,IAAA,EAGAE,EAAA,GACAA,EAAA,EACOA,GAAA,KACPA,EAAA,IAEAA,IAAA,EAGAE,EAAA,GACAA,EAAA,EACOA,GAAA,KACPA,EAAA,IAEAA,IAAA,EAGAC,EAAA,GACAA,EAAA,EACOA,GAAA,KACPA,EAAA,IAEAA,IAAA,EAGAiuC,EAAA,GACAA,EAAA,EACOA,GAAA,KACPA,EAAA,IAEAA,IAAA,EAGAC,EAAA,GACAA,EAAA,EACOA,GAAA,KACPA,EAAA,IAEAA,IAAA,EAGAC,EAAA,GACAA,EAAA,EACOA,GAAA,KACPA,EAAA,IAEAA,IAAA,EAGAxB,EAAAc,EAAAlD,GAAAyD,EACArB,EAAAc,EAAAlD,EAAA,GAAA5qC,EACAgtC,EAAAc,EAAAlD,EAAA,IAAA1qC,EACA8sC,EAAAc,EAAAlD,EAAA,IAAAxqC,EACA4sC,EAAAc,EAAAlD,EAAA,IAAAvqC,EACA2sC,EAAAc,EAAAlD,EAAA,IAAA0D,EACAtB,EAAAc,EAAAlD,EAAA,IAAA2D,EACAvB,EAAAc,EAAAlD,EAAA,IAAA4D,IA7HAluD,GAHAA,EAAA+pD,EAAAgE,EAAA,WAEA,KACA,EACS/tD,GAAA,KACT,IAEAA,EAAA,QAGA0sD,EAAAc,EAAAlD,GAAAtqD,EACA0sD,EAAAc,EAAAlD,EAAA,GAAAtqD,EACA0sD,EAAAc,EAAAlD,EAAA,IAAAtqD,EACA0sD,EAAAc,EAAAlD,EAAA,IAAAtqD,EACA0sD,EAAAc,EAAAlD,EAAA,IAAAtqD,EACA0sD,EAAAc,EAAAlD,EAAA,IAAAtqD,EACA0sD,EAAAc,EAAAlD,EAAA,IAAAtqD,EACA0sD,EAAAc,EAAAlD,EAAA,IAAAtqD,GAmHA,SAAAquD,EAAA5D,EAAAJ,GAKA,IAJA,IAAAE,EAAAF,EAAAE,cACA2C,EAAA7C,EAAA6C,gBACAoB,EAAA,IAAAC,WAAA,IAEA/C,EAAA,EAA0BA,EAAA0B,EAA4B1B,IACtD,QAAAW,EAAA,EAA4BA,EAAA5B,EAA0B4B,IAAA,CAEtDoB,EAAAlD,EADAD,EAAAC,EAAAmB,EAAAW,GACAmC,GAIA,OAAAjE,EAAAqC,UAGA,SAAAW,EAAA1rD,EAAA6sD,EAAAtuB,EAAAsuB,GACA,MAAAC,EAAA9sD,EAAAvE,OAAA,EACA,IAAAsxD,EAAAxuB,EAAAsuB,EAAAtuB,EAAAsuB,EAEA,GAAAA,GAAAC,EACA,YAGA,IAAAE,GAAA,EAAA5tD,EAAAsqB,YAAA1pB,EAAA6sD,GAEA,GAAAG,GAAA,OAAAA,GAAA,MACA,OACArB,QAAA,KACA5vD,OAAAixD,EACAvjC,OAAAojC,GAMA,IAFA,IAAAI,GAAA,EAAA7tD,EAAAsqB,YAAA1pB,EAAA+sD,KAEAE,GAAA,OAAAA,GAAA,SACA,KAAAF,GAAAD,EACA,YAGAG,GAAA,EAAA7tD,EAAAsqB,YAAA1pB,EAAA+sD,GAGA,OACApB,QAAAqB,EAAAlkD,SAAA,IACA/M,OAAAkxD,EACAxjC,OAAAsjC,GA+fA,OA3fA/F,EAAA5sD,WACAsF,MAAAM,GAAAktD,aACAA,EAAA,UAEA,SAAAC,IACA,MAAA1xD,GAAA,EAAA2D,EAAAsqB,YAAA1pB,EAAAypB,GAEA,IAAAgZ,GADAhZ,GAAA,GACAhuB,EAAA,EACA,IAAA4vD,EAAAK,EAAA1rD,EAAAyiC,EAAAhZ,GAEA4hC,KAAAM,WACA,EAAA7sD,EAAAoF,MAAA,wDAAAmnD,EAAAM,SACAlpB,EAAA4oB,EAAA5hC,QAGA,IAAAvtB,EAAA8D,EAAA+K,SAAA0e,EAAAgZ,GAEA,OADAhZ,GAAAvtB,EAAAT,OACAS,EAGA,SAAAkxD,EAAAtE,GAIA,IAHA,IAAAQ,EAAAhlD,KAAAygB,KAAA+jC,EAAAuE,eAAA,EAAAvE,EAAAwE,MACA9B,EAAAlnD,KAAAygB,KAAA+jC,EAAAtB,UAAA,EAAAsB,EAAAyE,MAEAt0D,EAAA,EAAuBA,EAAA6vD,EAAAC,WAAAttD,OAA6BxC,IAAA,CACpDyvD,EAAAI,EAAAC,WAAA9vD,GACA,IAAA2vD,EAAAtkD,KAAAygB,KAAAzgB,KAAAygB,KAAA+jC,EAAAuE,eAAA,GAAA3E,EAAA+B,EAAA3B,EAAAwE,MACA/B,EAAAjnD,KAAAygB,KAAAzgB,KAAAygB,KAAA+jC,EAAAtB,UAAA,GAAAkB,EAAAp9C,EAAAw9C,EAAAyE,MACAC,EAAAlE,EAAAZ,EAAA+B,EAEAgD,EAAA,IADAjC,EAAA9C,EAAAp9C,IACAkiD,EAAA,GACA9E,EAAAqC,UAAA,IAAA6B,WAAAa,GACA/E,EAAAE,gBACAF,EAAA6C,kBAGAzC,EAAAQ,cACAR,EAAA0C,gBAGA,IAGA1C,EAAAE,EAHAv/B,EAAA,EACAikC,EAAA,KACAC,EAAA,KAEA,IAAAC,EAAA,EACA,IAAAC,KACAC,KACAC,KACA,IAAA1C,GAAA,EAAAjsD,EAAAsqB,YAAA1pB,EAAAypB,GAGA,GAFAA,GAAA,EAEA,QAAA4hC,EACA,UAAA3D,EAAA,iBAGA2D,GAAA,EAAAjsD,EAAAsqB,YAAA1pB,EAAAypB,GACAA,GAAA,EAEAukC,EAAA,aAAA3C,GAAA,CACA,IAAApyD,EAAA81B,EAAA71B,EAEA,OAAAmyD,GACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,IAAA4C,EAAAd,IAEA,QAAA9B,GACA,KAAA4C,EAAA,SAAAA,EAAA,SAAAA,EAAA,SAAAA,EAAA,QAAAA,EAAA,KACAP,GACA5wD,SACAoxD,MAAAD,EAAA,GACAE,MAAAF,EAAA,IAEAG,aAAAH,EAAA,GACAI,SAAAJ,EAAA,MAAAA,EAAA,GACAK,SAAAL,EAAA,OAAAA,EAAA,IACAM,WAAAN,EAAA,IACAO,YAAAP,EAAA,IACAQ,UAAAR,EAAAljD,SAAA,QAAAkjD,EAAA,IAAAA,EAAA,OAKA,QAAA5C,GACA,KAAA4C,EAAA,UAAAA,EAAA,UAAAA,EAAA,SAAAA,EAAA,UAAAA,EAAA,KACAN,GACA7wD,QAAAmxD,EAAA,MAAAA,EAAA,GACAS,OAAAT,EAAA,MAAAA,EAAA,GACAU,OAAAV,EAAA,MAAAA,EAAA,IACAW,cAAAX,EAAA,MAKA,MAEA,WAMA,IAHA,IAAAY,GAFA,EAAAzvD,EAAAsqB,YAAA1pB,EAAAypB,IACAA,GAAA,GACA,EAGAA,EAAAolC,GAAA,CACA,IAAAC,EAAA9uD,EAAAypB,KACAslC,EAAA,IAAAjhB,YAAA,IAEA,GAAAghB,GAAA,KACA,IAAA//B,EAAA,EAA2BA,EAAA,GAAQA,IAEnCggC,EADAlH,EAAA94B,IACA/uB,EAAAypB,SAEe,IAAAqlC,GAAA,KAOf,UAAApH,EAAA,4BANA,IAAA34B,EAAA,EAA2BA,EAAA,GAAQA,IAEnCggC,EADAlH,EAAA94B,KACA,EAAA3vB,EAAAsqB,YAAA1pB,EAAAypB,GACAA,GAAA,EAMAokC,EAAA,GAAAiB,GAAAC,EAGA,MAEA,WACA,WACA,WACA,GAAAjG,EACA,UAAApB,EAAA,qCAGAj+B,GAAA,GACAq/B,MACAkG,SAAA,QAAA3D,EACAvC,EAAAS,YAAA,QAAA8B,EACAvC,EAAAmG,UAAAjvD,EAAAypB,KACA,MAAAylC,GAAA,EAAA9vD,EAAAsqB,YAAA1pB,EAAAypB,GACAA,GAAA,EACAq/B,EAAAtB,UAAA0F,GAAAgC,EACApG,EAAAuE,gBAAA,EAAAjuD,EAAAsqB,YAAA1pB,EAAAypB,GACAA,GAAA,EACAq/B,EAAAC,cACAD,EAAAqG,gBACA,IACAC,EADAC,EAAArvD,EAAAypB,KAEA6jC,EAAA,EACAC,EAAA,EAEA,IAAAt0D,EAAA,EAAuBA,EAAAo2D,EAAqBp2D,IAAA,CAC5Cm2D,EAAApvD,EAAAypB,GACA,IAAAghC,EAAAzqD,EAAAypB,EAAA,MACAne,EAAA,GAAAtL,EAAAypB,EAAA,GAEA6jC,EAAA7C,IACA6C,EAAA7C,GAGA8C,EAAAjiD,IACAiiD,EAAAjiD,GAGA,IAAAgkD,EAAAtvD,EAAAypB,EAAA,GACAvwB,EAAA4vD,EAAAC,WAAAvsD,MACAiuD,IACAn/C,IACAikD,eAAAD,EACA7C,kBAAA,OAEA3D,EAAAqG,aAAAC,GAAAl2D,EAAA,EACAuwB,GAAA,EAGAq/B,EAAAwE,OACAxE,EAAAyE,OACAH,EAAAtE,GACA,MAEA,WACA,MAAA0G,GAAA,EAAApwD,EAAAsqB,YAAA1pB,EAAAypB,GAGA,IAFAA,GAAA,EAEAxwB,EAAA,EAAuBA,EAAAu2D,GAAmB,CAC1C,IAAAC,EAAAzvD,EAAAypB,KACAshB,EAAA,IAAA9qC,WAAA,IACAyvD,EAAA,EAEA,IAAA3gC,EAAA,EAAyBA,EAAA,GAAQA,IAAAtF,IACjCimC,GAAA3kB,EAAAhc,GAAA/uB,EAAAypB,GAGA,IAAAkmC,EAAA,IAAA1vD,WAAAyvD,GAEA,IAAA3gC,EAAA,EAAyBA,EAAA2gC,EAAmB3gC,IAAAtF,IAC5CkmC,EAAA5gC,GAAA/uB,EAAAypB,GAGAxwB,GAAA,GAAAy2D,GACAD,GAAA,KAAA1B,EAAAD,GAAA,GAAA2B,GAAAjH,EAAAzd,EAAA4kB,GAGA,MAEA,WACAlmC,GAAA,EACAu/B,GAAA,EAAA5pD,EAAAsqB,YAAA1pB,EAAAypB,GACAA,GAAA,EACA,MAEA,WACA,MAAA4/B,EAAA,KAAAuE,IAAAV,EACAzjC,GAAA,EACA,IAEAi/B,EAFAkH,EAAA5vD,EAAAypB,KACAs/B,KAGA,IAAA9vD,EAAA,EAAuBA,EAAA22D,EAAoB32D,IAAA,CAC3C,IAAA42D,EAAA/G,EAAAqG,aAAAnvD,EAAAypB,MACAi/B,EAAAI,EAAAC,WAAA8G,GACA,IAAAC,EAAA9vD,EAAAypB,KACAi/B,EAAAmC,eAAAkD,EAAA+B,GAAA,GACApH,EAAAwC,eAAA4C,EAAA,GAAAgC,GACA/G,EAAAvsD,KAAAksD,GAGA,IAAAO,EAAAjpD,EAAAypB,KACAy/B,EAAAlpD,EAAAypB,KACAsmC,EAAA/vD,EAAAypB,KAEA,IACA,IAAAmK,EAAAi1B,EAAA7oD,EAAAypB,EAAAq/B,EAAAC,EAAAC,EAAAC,EAAAC,EAAA6G,GAAA,KAAAA,EAAA1G,GACA5/B,GAAAmK,EACa,MAAAnxB,GACb,GAAAA,aAAAklD,EAEA,OADA,EAAA7oD,EAAAoF,SAAmCzB,EAAAoG,qDACnC3N,KAAAq1B,MAAAvwB,GACAktD,aAAAzqD,EAAA+kD,YAEe,GAAA/kD,aAAAmlD,EAAA,EACf,EAAA9oD,EAAAoF,SAAmCzB,EAAAoG,mDACnC,MAAAmlD,EAGA,MAAAvrD,EAGA,MAEA,WACAgnB,GAAA,EACA,MAEA,WACA,MAAAzpB,EAAAypB,IACAA,IAGA,MAEA,QACA,MAAAumC,EAAAtE,EAAA1rD,EAAAypB,EAAA,EAAAA,EAAA,GAEA,GAAAumC,KAAArE,QAAA,EACA,EAAA7sD,EAAAoF,MAAA,yDAAA8rD,EAAArE,SACAliC,EAAAumC,EAAAvmC,OACA,MAGA,GAAAA,GAAAzpB,EAAAvE,OAAA,IACA,EAAAqD,EAAAoF,MAAA,+FACA,MAAA8pD,EAGA,UAAAtG,EAAA,qCAAA2D,EAAAviD,SAAA,KAGAuiD,GAAA,EAAAjsD,EAAAsqB,YAAA1pB,EAAAypB,GACAA,GAAA,EASA,IANAvuB,KAAAw4C,MAAAoV,EAAAuE,eACAnyD,KAAAy4C,OAAAmV,EAAAtB,UACAtsD,KAAAwyD,OACAxyD,KAAAyyD,QACAzyD,KAAA6tD,cAEA9vD,EAAA,EAAiBA,EAAA6vD,EAAAC,WAAAttD,OAA6BxC,IAAA,CAE9C,IAAAwzD,EAAAoB,GADAnF,EAAAI,EAAAC,WAAA9vD,IACAs2D,gBAEA9C,IACA/D,EAAA+D,qBAGAvxD,KAAA6tD,WAAAvsD,MACAyzD,OAAAvD,EAAA5D,EAAAJ,GACAwH,OAAAxH,EAAA+B,EAAA3B,EAAAwE,KACA6C,OAAAzH,EAAAp9C,EAAAw9C,EAAAyE,KACA3E,cAAAF,EAAAE,cACA2C,gBAAA7C,EAAA6C,kBAIArwD,KAAAk1D,cAAAl1D,KAAA6tD,WAAAttD,QAIAiE,wBAAAg0C,EAAAC,EAAAyT,GAAA,GACA,IAEAsB,EAAA2H,EAAAC,EAAAC,EACAhnC,EAAA2pB,EAAAj6C,EAAA81B,EAAAoc,EACAv/B,EAEAqkD,EANAC,EAAAh1D,KAAAw4C,QACAyc,EAAAj1D,KAAAy4C,SAIAlqB,EAAA,EAEA2mC,EAAAl1D,KAAA6tD,WAAAttD,OACAmiC,EAAA8V,EAAAC,EAAAyc,EACApwD,EAAA,IAAA+lB,kBAAA6X,GACA4yB,EAAA,IAAAlzC,YAAAo2B,GAEA,IAAA+c,EAEA,IAAAx3D,EAAA,EAAiBA,EAAAm3D,EAAmBn3D,IAAA,CAQpC,GANAo3D,GADA3H,EAAAxtD,KAAA6tD,WAAA9vD,IACAi3D,SACAI,EAAA5H,EAAAyH,SACA1mC,EAAAxwB,EACAg3D,EAAAvH,EAAAuH,OACAM,EAAA7H,EAAAE,cAAA,KAEAyH,IAAAI,EAAA,CACA,IAAAlnC,EAAA,EAAqBA,EAAAmqB,EAAWnqB,IAChCwF,EAAA,EAAAxF,EAAA8mC,EACAG,EAAAjnC,IAdA,WAcAwF,IAAA,IAAAA,EAGA0hC,EAAAJ,EAGA,IAAAnd,EAAA,EAAmBA,EAAAS,EAAYT,IAI/B,IAFAtnC,EAAA2kD,GAtBA,YAqBAxhC,EAAA,EAAAmkB,EAAAod,KACA,EAAAvhC,IAAA,EAEAxF,EAAA,EAAqBA,EAAAmqB,EAAWnqB,IAChCvpB,EAAAypB,GAAAwmC,EAAArkD,EAAA4kD,EAAAjnC,IACAE,GAAA2mC,EAKA,IAAA74C,EAAArc,KAAAotD,iBAMA,GAJAlB,GAAA,IAAAgJ,GAAA74C,IACAA,EAAA,IAAAyxB,aAAA,sCAGAzxB,EACA,IAAAte,EAAA,EAAmBA,EAAA2kC,GACnB,IAAA7O,EAAA,EAAAoc,EAAA,EAA4Bpc,EAAAqhC,EAAmBrhC,IAAA91B,IAAAkyC,GAAA,EAC/CnrC,EAAA/G,IAAA+G,EAAA/G,GAAAse,EAAA4zB,IAAA,GAAA5zB,EAAA4zB,EAAA,GAKA,OAAAnrC,GAGA0wD,+BACA,OAAAx1D,KAAAyyD,QACAzyD,KAAAyyD,MAAAiB,cAGA,IAAA1zD,KAAAk1D,cACA,IAAAl1D,KAAAqtD,gBAOA,IAAArtD,KAAAqtD,iBAOAoI,iBAAA,SAAA3wD,GAGA,IAFA,IAAA4wD,EAAAC,EAAAC,EAEA73D,EAAA,EAAAwC,EAAAuE,EAAAvE,OAA2CxC,EAAAwC,EAAYxC,GAAA,EACvD23D,EAAA5wD,EAAA/G,GACA43D,EAAA7wD,EAAA/G,EAAA,GACA63D,EAAA9wD,EAAA/G,EAAA,GACA+G,EAAA/G,GAAA23D,EAAA,cAAAE,EACA9wD,EAAA/G,EAAA,GAAA23D,EAAA,aAAAC,EAAA,KAAAC,EACA9wD,EAAA/G,EAAA,GAAA23D,EAAA,cAAAC,EAGA,OAAA7wD,GAEA+wD,kBAAA,SAAA/wD,GAIA,IAHA,IAAA4wD,EAAAC,EAAAC,EAAA3lB,EACA1hB,EAAA,EAEAxwB,EAAA,EAAAwC,EAAAuE,EAAAvE,OAA2CxC,EAAAwC,EAAYxC,GAAA,EACvD23D,EAAA5wD,EAAA/G,GACA43D,EAAA7wD,EAAA/G,EAAA,GACA63D,EAAA9wD,EAAA/G,EAAA,GACAkyC,EAAAnrC,EAAA/G,EAAA,GACA+G,EAAAypB,KAAAonC,IAAA,oBAAAA,EAAA,oBAAAC,EAAA,mBAAAF,EAAA,mBAAAzlB,EAAA,kCAAA2lB,IAAA,oBAAAA,EAAA,oBAAAF,EAAA,mBAAAzlB,EAAA,kBAAAylB,GAAA,oBAAAA,EAAA,mBAAAzlB,EAAA,iBAAAA,IAAA,oBAAAA,EAAA,kBACAnrC,EAAAypB,KAAA,iBAAAonC,GAAA,oBAAAA,EAAA,oBAAAC,EAAA,oBAAAF,EAAA,oBAAAzlB,EAAA,kBAAA2lB,IAAA,oBAAAA,EAAA,mBAAAF,EAAA,oBAAAzlB,EAAA,kBAAAylB,GAAA,mBAAAA,EAAA,mBAAAzlB,EAAA,iBAAAA,IAAA,oBAAAA,EAAA,kBACAnrC,EAAAypB,KAAAonC,IAAA,oBAAAA,EAAA,oBAAAC,EAAA,kBAAAF,EAAA,mBAAAzlB,EAAA,kCAAA2lB,IAAA,oBAAAA,EAAA,oBAAAF,EAAA,oBAAAzlB,EAAA,kBAAAylB,GAAA,mBAAAA,EAAA,mBAAAzlB,EAAA,kBAAAA,IAAA,oBAAAA,EAAA,iBAGA,OAAAnrC,EAAA+K,SAAA,EAAA0e,IAEAunC,mBAAA,SAAAhxD,GAGA,IAFA,IAAA4wD,EAAAC,EAAAC,EAEA73D,EAAA,EAAAwC,EAAAuE,EAAAvE,OAA2CxC,EAAAwC,EAAYxC,GAAA,EACvD23D,EAAA5wD,EAAA/G,GACA43D,EAAA7wD,EAAA/G,EAAA,GACA63D,EAAA9wD,EAAA/G,EAAA,GACA+G,EAAA/G,GAAA,QAAA23D,EAAA,MAAAE,EACA9wD,EAAA/G,EAAA,WAAA23D,EAAA,KAAAC,EAAA,KAAAC,EACA9wD,EAAA/G,EAAA,WAAA23D,EAAA,MAAAC,EAGA,OAAA7wD,GAEAixD,kBAAA,SAAAjxD,GAIA,IAHA,IAAA1G,EAAAD,EAAA65C,EAAA/H,EACA1hB,EAAA,EAEAxwB,EAAA,EAAAwC,EAAAuE,EAAAvE,OAA2CxC,EAAAwC,EAAYxC,GAAA,EACvDK,EAAA0G,EAAA/G,GACAI,EAAA2G,EAAA/G,EAAA,GACAi6C,EAAAlzC,EAAA/G,EAAA,GACAkyC,EAAAnrC,EAAA/G,EAAA,GACA+G,EAAAypB,KAAA,IAAAnwB,IAAA,qBAAAA,EAAA,qBAAAD,EAAA,qBAAA65C,EAAA,oBAAA/H,EAAA,oBAAA9xC,GAAA,sBAAAA,EAAA,qBAAA65C,EAAA,qBAAA/H,EAAA,oBAAA+H,IAAA,qBAAAA,EAAA,qBAAA/H,EAAA,mBAAAA,GAAA,qBAAAA,EAAA,mBACAnrC,EAAAypB,KAAA,IAAAnwB,GAAA,sBAAAA,EAAA,oBAAAD,EAAA,sBAAA65C,EAAA,qBAAA/H,EAAA,mBAAA9xC,IAAA,sBAAAA,EAAA,qBAAA65C,EAAA,qBAAA/H,EAAA,mBAAA+H,GAAA,qBAAAA,EAAA,sBAAA/H,EAAA,oBAAAA,GAAA,qBAAAA,EAAA,mBACAnrC,EAAAypB,KAAA,IAAAnwB,GAAA,sBAAAA,EAAA,sBAAAD,EAAA,qBAAA65C,EAAA,sBAAA/H,EAAA,oBAAA9xC,GAAA,sBAAAA,EAAA,qBAAA65C,EAAA,qBAAA/H,EAAA,oBAAA+H,GAAA,qBAAAA,EAAA,qBAAA/H,EAAA,mBAAAA,GAAA,qBAAAA,EAAA,mBAGA,OAAAnrC,EAAA+K,SAAA,EAAA0e,IAGA/pB,SAAAg0C,MACAA,EAAAC,OACAA,EAAA+S,SACAA,GAAA,EAAAU,YACAA,GAAA,IAEA,GAAAlsD,KAAAk1D,cAAA,EACA,UAAA1I,EAAA,0BAGA,IAAA1nD,EAAA9E,KAAAg2D,wBAAAxd,EAAAC,EAAAyT,GAEA,OAAAlsD,KAAAk1D,eAAA1J,EAAA,CAKA,IAJA,IAAA9oB,EAAA59B,EAAAvE,OACA01D,EAAA,IAAAprC,kBAAA,EAAA6X,GACAnU,EAAA,EAEAxwB,EAAA,EAAuBA,EAAA2kC,EAAgB3kC,IAAA,CACvC,IAAAm4D,EAAApxD,EAAA/G,GACAk4D,EAAA1nC,KAAA2nC,EACAD,EAAA1nC,KAAA2nC,EACAD,EAAA1nC,KAAA2nC,EAGA,OAAAD,EACO,OAAAj2D,KAAAk1D,eAAAl1D,KAAAw1D,yBACP,OAAAx1D,KAAAy1D,iBAAA3wD,GACO,OAAA9E,KAAAk1D,cAAA,CACP,GAAAl1D,KAAAw1D,yBACA,OAAAhK,EACAxrD,KAAA61D,kBAAA/wD,GAGA9E,KAAA81D,mBAAAhxD,GACS,GAAA0mD,EACT,OAAAxrD,KAAA+1D,kBAAAjxD,GAIA,OAAAA,IAIAgnD,EA3rCA,GA8rCAjuD,EAAAiuD,aAIA,SAAAhuD,EAAAD,EAAAiF,GAEA,aAGArE,OAAAC,eAAAb,EAAA,cACAqF,OAAA,IAEArF,EAAAmsC,eAAA,EAEA,IAAA7hB,EAAArlB,EAAA,IAEAqzD,EAAArzD,EAAA,IAEAc,EAAAd,EAAA,GAEA,MAAAknC,EAAA,WACA,SAAAA,EAAAt/B,EAAA2+B,EAAA7hB,EAAAoX,GACA5+B,KAAA0K,SACA1K,KAAAqpC,cACArpC,KAAAwnB,OACAxnB,KAAA4+B,SAEAzW,EAAAykB,aAAA1uC,KAAA8B,KAAAqpC,GAyDA,OAtDAW,EAAA9qC,UAAAT,OAAA6E,OAAA6kB,EAAAykB,aAAA1tC,WACAT,OAAAC,eAAAsrC,EAAA9qC,UAAA,SACAL,IAAA,WACA,SAAA+E,EAAAuO,QAAAnS,KAAA,QAAAA,KAAA0K,OAAAgb,SAAA1lB,KAAAqpC,eAEA1qC,cAAA,IAGAqrC,EAAA9qC,UAAAquC,aAAA,SAAAC,KAEAxD,EAAA9qC,UAAAouC,UAAA,WACA,GAAAttC,KAAAotC,IACA,OAGA,MAAAgpB,EAAA,IAAAD,EAAAE,SACAD,EAAA/gC,MAAAr1B,KAAA2K,OACA,MAAA6tC,EAAA4d,EAAA5d,MACAC,EAAA2d,EAAA3d,OACA0b,EAAAiC,EAAAjC,gBACAmC,EAAAF,EAAAG,MAAAh2D,OAEA,OAAA+1D,EACAt2D,KAAAqiB,OAAA+zC,EAAAG,MAAA,GAAA/9B,UACK,CACL,MAAA1zB,EAAA,IAAA+lB,kBAAA2tB,EAAAC,EAAA0b,GAEA,QAAAlkB,EAAA,EAAqBA,EAAAqmB,EAAermB,IAAA,CACpC,MAAAumB,EAAAJ,EAAAG,MAAAtmB,GACAwmB,EAAAD,EAAAhe,MACAke,EAAAF,EAAA/d,OACAke,EAAAH,EAAA/kB,KACAmlB,EAAAJ,EAAAK,IACAC,EAAAN,EAAAh+B,MACA,IAAAu+B,EAAA,EACAC,GAAAxe,EAAAoe,EAAAD,GAAAxC,EACA,MAAA8C,EAAAze,EAAA2b,EACA+C,EAAAT,EAAAtC,EAEA,QAAAtgC,EAAA,EAAuBA,EAAA6iC,EAAgB7iC,IAAA,CACvC,MAAA8c,EAAAmmB,EAAAjnD,SAAAknD,IAAAG,GACApyD,EAAAsK,IAAAuhC,EAAAqmB,GACAD,GAAAG,EACAF,GAAAC,GAIAj3D,KAAAqiB,OAAAvd,EAGA9E,KAAAmtC,aAAAntC,KAAAqiB,OAAA9hB,OACAP,KAAAotC,KAAA,GAGApD,EAhEA,GAmEAnsC,EAAAmsC,aAIA,SAAAlsC,EAAAD,EAAAiF,GAEA,aAGArE,OAAAC,eAAAb,EAAA,cACAqF,OAAA,IAEArF,EAAAw4D,cAAA,EAEA,IAAAzyD,EAAAd,EAAA,GAEAoB,EAAApB,EAAA,GAEA+zC,EAAA/zC,EAAA,UAEAq0D,UAAAvzD,EAAA4Q,cACAhQ,YAAAwL,GACAgS,oBAAwBhS,MAKxB,IAAAqmD,EAAA,WACA,IAAAe,GACAC,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,GAGA,SAAAnB,IACAr2D,KAAAy3D,sBAAA,EAwbA,SAAAC,EAAAlK,EAAAmK,GACAnK,EAAAoK,GAAAxuD,KAAAygB,KAAA8tC,EAAAE,MAAArK,EAAAsK,OACAtK,EAAAuK,GAAA3uD,KAAAygB,KAAA8tC,EAAAK,KAAAxK,EAAAsK,OACAtK,EAAAyK,GAAA7uD,KAAAygB,KAAA8tC,EAAAO,MAAA1K,EAAA2K,OACA3K,EAAA4K,GAAAhvD,KAAAygB,KAAA8tC,EAAAU,KAAA7K,EAAA2K,OACA3K,EAAAhV,MAAAgV,EAAAuK,GAAAvK,EAAAoK,GACApK,EAAA/U,OAAA+U,EAAA4K,GAAA5K,EAAAyK,GAGA,SAAAK,EAAAC,EAAA1K,GAOA,IANA,IACA2K,EADAb,EAAAY,EAAAE,IAEAlC,KACAmC,EAAAtvD,KAAAygB,MAAA8tC,EAAAK,KAAAL,EAAAgB,QAAAhB,EAAAiB,OACAC,EAAAzvD,KAAAygB,MAAA8tC,EAAAU,KAAAV,EAAAmB,QAAAnB,EAAAoB,OAEA7lB,EAAA,EAAmBA,EAAA2lB,EAAe3lB,IAClC,QAAA9zC,EAAA,EAAqBA,EAAAs5D,EAAet5D,KACpCo5D,MACAQ,IAAA5vD,KAAAC,IAAAsuD,EAAAgB,OAAAv5D,EAAAu4D,EAAAiB,MAAAjB,EAAAE,OACAW,EAAAS,IAAA7vD,KAAAC,IAAAsuD,EAAAmB,OAAA5lB,EAAAykB,EAAAoB,MAAApB,EAAAO,OACAM,EAAAU,IAAA9vD,KAAAwG,IAAA+nD,EAAAgB,QAAAv5D,EAAA,GAAAu4D,EAAAiB,MAAAjB,EAAAK,MACAQ,EAAAW,IAAA/vD,KAAAwG,IAAA+nD,EAAAmB,QAAA5lB,EAAA,GAAAykB,EAAAoB,MAAApB,EAAAU,MACAG,EAAAhgB,MAAAggB,EAAAU,IAAAV,EAAAQ,IACAR,EAAA/f,OAAA+f,EAAAW,IAAAX,EAAAS,IACAT,EAAA3K,cACA0I,EAAAj1D,KAAAk3D,GAIAD,EAAAhC,QAGA,IAFA,IAEAx4D,EAAA,EAAAymB,EAFAmzC,EAAAyB,KAEyCr7D,EAAAymB,EAAQzmB,IAGjD,IAFA,IAAAyvD,EAAAK,EAAA9vD,GAEA81B,EAAA,EAAAyH,EAAAi7B,EAAAh2D,OAAwCszB,EAAAyH,EAAQzH,IAAA,CAChD,IAAAwlC,KACAb,EAAAjC,EAAA1iC,GACAwlC,EAAAC,KAAAlwD,KAAAygB,KAAA2uC,EAAAQ,IAAAxL,EAAAsK,OACAuB,EAAAE,KAAAnwD,KAAAygB,KAAA2uC,EAAAS,IAAAzL,EAAA2K,OACAkB,EAAAG,KAAApwD,KAAAygB,KAAA2uC,EAAAU,IAAA1L,EAAAsK,OACAuB,EAAAI,KAAArwD,KAAAygB,KAAA2uC,EAAAW,IAAA3L,EAAA2K,OACAkB,EAAA7gB,MAAA6gB,EAAAG,KAAAH,EAAAC,KACAD,EAAA5gB,OAAA4gB,EAAAI,KAAAJ,EAAAE,KACAf,EAAA3K,WAAA9vD,GAAAs7D,GAKA,SAAAK,EAAAnB,EAAA/K,EAAAzqD,GACA,IAAA42D,EAAAnM,EAAAoM,sBACA31C,KAYA,OAVA01C,EAAAE,iCAIA51C,EAAA61C,IAAAH,EAAAI,eAAAh3D,GAAA+2D,IACA71C,EAAA+1C,IAAAL,EAAAI,eAAAh3D,GAAAi3D,MAJA/1C,EAAA61C,IAAA,GACA71C,EAAA+1C,IAAA,IAMA/1C,EAAAg2C,KAAAl3D,EAAA,EAAAqG,KAAAwG,IAAA+pD,EAAAO,IAAAj2C,EAAA61C,IAAA,GAAA1wD,KAAAwG,IAAA+pD,EAAAO,IAAAj2C,EAAA61C,KACA71C,EAAAk2C,KAAAp3D,EAAA,EAAAqG,KAAAwG,IAAA+pD,EAAAS,IAAAn2C,EAAA+1C,IAAA,GAAA5wD,KAAAwG,IAAA+pD,EAAAS,IAAAn2C,EAAA+1C,KACA/1C,EAGA,SAAAo2C,EAAA9B,EAAA+B,EAAAC,GACA,IAAAC,EAAA,GAAAD,EAAAT,IACAW,EAAA,GAAAF,EAAAP,IACAU,EAAA,IAAAJ,EAAAK,SACAC,EAAA,GAAAL,EAAAT,KAAAY,EAAA,MACAG,EAAA,GAAAN,EAAAP,KAAAU,EAAA,MACAI,EAAAR,EAAAS,KAAAT,EAAAU,KAAA5xD,KAAAygB,KAAAywC,EAAAS,KAAAP,GAAApxD,KAAA8gB,MAAAowC,EAAAU,KAAAR,GAAA,EACAS,EAAAX,EAAAY,KAAAZ,EAAAa,KAAA/xD,KAAAygB,KAAAywC,EAAAY,KAAAT,GAAArxD,KAAA8gB,MAAAowC,EAAAa,KAAAV,GAAA,EACAW,EAAAN,EAAAG,EACAX,EAAAe,oBACAb,gBACAC,iBACAK,mBACAG,mBACAG,eACAR,yBACAC,2BAIA,SAAAS,EAAA/C,EAAAgD,EAAAhB,GACA,IAWAx8D,EAAA81B,EAAA2nC,EAAAC,EAXAxB,EAAAM,EAAAN,KACAE,EAAAI,EAAAJ,KACAuB,EAAA,GAAAzB,EACA0B,EAAA,GAAAxB,EACAyB,EAAAL,EAAAM,MAAA5B,EACA6B,EAAAP,EAAAQ,MAAA5B,EACA6B,EAAAT,EAAAU,KAAAP,EAAA,GAAAzB,EACAiC,EAAAX,EAAAY,KAAAR,EAAA,GAAAxB,EACAkB,EAAAE,EAAAjB,WAAAe,mBACAe,KACAC,KAGA,IAAAxoC,EAAAioC,EAAkBjoC,EAAAqoC,EAAUroC,IAC5B,IAAA91B,EAAA69D,EAAoB79D,EAAAi+D,EAAUj+D,IAAA,CAoB9B,IAnBAy9D,GACAc,IAAAv+D,EACAw+D,IAAA1oC,EACAgoC,KAAAH,EAAA39D,EACAg+D,KAAAJ,EAAA9nC,EACAooC,KAAAP,GAAA39D,EAAA,GACAo+D,KAAAR,GAAA9nC,EAAA,KAEA2oC,MAAApzD,KAAAC,IAAAkyD,EAAAM,KAAAL,EAAAK,MACAL,EAAAiB,MAAArzD,KAAAC,IAAAkyD,EAAAQ,KAAAP,EAAAO,MACAP,EAAAkB,MAAAtzD,KAAAwG,IAAA2rD,EAAAU,KAAAT,EAAAS,MACAT,EAAAmB,MAAAvzD,KAAAwG,IAAA2rD,EAAAY,KAAAX,EAAAW,MAGAV,EAFAryD,KAAA8gB,OAAAsxC,EAAAgB,MAAAjB,EAAAM,MAAAR,EAAAT,wBACAxxD,KAAA8gB,OAAAsxC,EAAAiB,MAAAlB,EAAAQ,MAAAV,EAAAR,yBACAQ,EAAAP,iBACAU,EAAAC,iBACAD,EAAAoB,YAAArB,EAAAh3C,KACAi3C,EAAAqB,OAAA,IAEArB,EAAAkB,OAAAlB,EAAAgB,OAAAhB,EAAAmB,OAAAnB,EAAAiB,OAAA,CAIAL,EAAA96D,KAAAk6D,GACA,IAAAsB,EAAAT,EAAAZ,QAEAlsD,IAAAutD,GACA/+D,EAAA++D,EAAAC,OACAD,EAAAC,OAAAh/D,EACWA,EAAA++D,EAAAE,SACXF,EAAAE,OAAAj/D,GAGA81B,EAAAipC,EAAAG,OACAH,EAAAC,OAAAlpC,EACWA,EAAAipC,EAAAI,SACXJ,EAAAI,OAAArpC,IAGAwoC,EAAAZ,GAAAqB,GACAC,OAAAh/D,EACAk/D,OAAAppC,EACAmpC,OAAAj/D,EACAm/D,OAAArpC,GAIA2nC,EAAAsB,YAIAvB,EAAA4B,qBACAzB,eAAAzB,EACA0B,gBAAAxB,EACAiD,iBAAApB,EAAAJ,EAAA,EACAyB,iBAAAnB,EAAAJ,EAAA,GAEAP,EAAAa,aACAb,EAAAc,YAGA,SAAAiB,EAAAhD,EAAAmB,EAAA8B,GAIA,IAHA,IAAAC,KACAC,EAAAnD,EAAAmD,SAEA1/D,EAAA,EAAAymB,EAAAi5C,EAAAl9D,OAAyCxC,EAAAymB,EAAQzmB,IAIjD,IAHA,IACAq+D,EADAqB,EAAA1/D,GACAq+D,WAEAvoC,EAAA,EAAAyH,EAAA8gC,EAAA77D,OAA6CszB,EAAAyH,EAAQzH,IAAA,CACrD,IAAA2nC,EAAAY,EAAAvoC,GAEA2nC,EAAAC,oBAIA+B,EAAAl8D,KAAAk6D,GAIA,OACA+B,cACAnB,WAAAoB,GAqRA,SAAAE,EAAAC,EAAAC,EAAAC,EAAAC,EAAAxD,GACA,IAAAyD,EAAAJ,EAAAG,EAAAE,SACAC,EAAAL,EAAAE,EAAAI,UAEA,GAAAH,EAAAF,EAAArlB,OAAA,GAAAylB,EAAAJ,EAAAplB,QAAA,EACA,YAGA,IAAA0lB,EAAAF,EAAAJ,EAAArlB,MAAA8hB,EAAAe,mBAAAP,iBACA,OAAAiD,EAAAF,EAAAplB,OAAA0lB,EAGA,SAAAC,EAAA5F,GAQA,IAPA,IAAArE,EAAAqE,EAAA3K,WAAAttD,OACAy9D,EAAA/rD,OAAAosD,UACAH,EAAAjsD,OAAAosD,UACAC,EAAA,EACAC,EAAA,EACAC,EAAA,IAAAp9D,MAAA+yD,GAEA/1D,EAAA,EAAmBA,EAAA+1D,EAAqB/1D,IAAA,CAUxC,IATA,IAAAovD,EAAAgL,EAAA3K,WAAAzvD,GACAqgE,EAAAjR,EAAAoM,sBAAA6E,yBACAC,EAAA,IAAAt9D,MAAAq9D,EAAA,GACAE,EAAA1sD,OAAAosD,UACAO,EAAA3sD,OAAAosD,UACAQ,EAAA,EACAC,EAAA,EACAC,EAAA,EAEAh8D,EAAA07D,EAA4C17D,GAAA,IAAQA,EAAA,CACpD,IAAAu3D,EAAA9M,EAAAwR,YAAAj8D,GACAk8D,EAAAF,EAAAzE,EAAAe,mBAAAb,cACA0E,EAAAH,EAAAzE,EAAAe,mBAAAZ,eACAkE,EAAAv1D,KAAAwG,IAAA+uD,EAAAM,GACAL,EAAAx1D,KAAAwG,IAAAgvD,EAAAM,GACAL,EAAAz1D,KAAAC,IAAAw1D,EAAAvE,EAAAe,mBAAAP,kBACAgE,EAAA11D,KAAAC,IAAAy1D,EAAAxE,EAAAe,mBAAAJ,kBACAyD,EAAA37D,IACAy1C,MAAAymB,EACAxmB,OAAAymB,GAEAH,IAAA,EAGAf,EAAA50D,KAAAwG,IAAAouD,EAAAW,GACAT,EAAA90D,KAAAwG,IAAAsuD,EAAAU,GACAN,EAAAl1D,KAAAC,IAAAi1D,EAAAO,GACAN,EAAAn1D,KAAAC,IAAAk1D,EAAAO,GACAN,EAAApgE,IACA4gE,YAAAN,EACAV,SAAAW,EACAT,UAAAU,EACAN,WAAAO,EACAN,WAAAO,GAIA,OACAjR,WAAA2Q,EACAR,WACAE,YACAI,aACAC,cAIA,SAAAY,EAAA5G,GAMA,IALA,IAAAZ,EAAAY,EAAAE,IACA2G,EAAA7G,EAAA8G,YAAA3uD,MACA8nD,EAAAD,EAAAhC,MAAA6I,GACAjL,EAAAwD,EAAAyB,KAEAh7D,EAAA,EAAmBA,EAAA+1D,EAAqB/1D,IAAA,CAMxC,IALA,IAAAovD,EAAAgL,EAAA3K,WAAAzvD,GACAqgE,EAAAjR,EAAAoM,sBAAA6E,yBACAO,KACAvB,KAEA16D,EAAA,EAAqBA,GAAA07D,EAA+B17D,IAAA,CACpD,IAUAw4D,EAVA+D,EAAA5F,EAAAnB,EAAA/K,EAAAzqD,GACAu3D,KACAyE,EAAA,GAAAN,EAAA17D,EAUA,GATAu3D,EAAAU,KAAA5xD,KAAAygB,KAAA2jC,EAAA8L,KAAAyF,GACAzE,EAAAa,KAAA/xD,KAAAygB,KAAA2jC,EAAA+L,KAAAwF,GACAzE,EAAAS,KAAA3xD,KAAAygB,KAAA2jC,EAAAgM,KAAAuF,GACAzE,EAAAY,KAAA9xD,KAAAygB,KAAA2jC,EAAAiM,KAAAsF,GACAzE,EAAAK,SAAA53D,EACAs3D,EAAA9B,EAAA+B,EAAAgF,GACAN,EAAA19D,KAAAg5D,GAGA,IAAAv3D,GACAw4D,MACAh3C,KAAA,KACAg3C,EAAAM,KAAAzyD,KAAAygB,KAAA2jC,EAAA8L,KAAAyF,GACAxD,EAAAQ,KAAA3yD,KAAAygB,KAAA2jC,EAAA+L,KAAAwF,GACAxD,EAAAU,KAAA7yD,KAAAygB,KAAA2jC,EAAAgM,KAAAuF,GACAxD,EAAAY,KAAA/yD,KAAAygB,KAAA2jC,EAAAiM,KAAAsF,GACAxD,EAAAjB,aACAgB,EAAA/C,EAAAgD,EAAA+D,GACA7B,EAAAn8D,KAAAi6D,GACAjB,EAAAmD,UAAAlC,OACS,CACT,IAAAgE,EAAA,GAAAd,EAAA17D,EAAA,EACAy8D,MACAjE,MACAh3C,KAAA,KACAg3C,EAAAM,KAAAzyD,KAAAygB,KAAA2jC,EAAA8L,KAAAiG,EAAA,IACAhE,EAAAQ,KAAA3yD,KAAAygB,KAAA2jC,EAAA+L,KAAAgG,GACAhE,EAAAU,KAAA7yD,KAAAygB,KAAA2jC,EAAAgM,KAAA+F,EAAA,IACAhE,EAAAY,KAAA/yD,KAAAygB,KAAA2jC,EAAAiM,KAAA8F,GACAhE,EAAAjB,aACAgB,EAAA/C,EAAAgD,EAAA+D,GACA7B,EAAAn8D,KAAAi6D,GACAiE,EAAAl+D,KAAAi6D,IACAA,MACAh3C,KAAA,KACAg3C,EAAAM,KAAAzyD,KAAAygB,KAAA2jC,EAAA8L,KAAAiG,GACAhE,EAAAQ,KAAA3yD,KAAAygB,KAAA2jC,EAAA+L,KAAAgG,EAAA,IACAhE,EAAAU,KAAA7yD,KAAAygB,KAAA2jC,EAAAgM,KAAA+F,GACAhE,EAAAY,KAAA/yD,KAAAygB,KAAA2jC,EAAAiM,KAAA8F,EAAA,IACAhE,EAAAjB,aACAgB,EAAA/C,EAAAgD,EAAA+D,GACA7B,EAAAn8D,KAAAi6D,GACAiE,EAAAl+D,KAAAi6D,IACAA,MACAh3C,KAAA,KACAg3C,EAAAM,KAAAzyD,KAAAygB,KAAA2jC,EAAA8L,KAAAiG,EAAA,IACAhE,EAAAQ,KAAA3yD,KAAAygB,KAAA2jC,EAAA+L,KAAAgG,EAAA,IACAhE,EAAAU,KAAA7yD,KAAAygB,KAAA2jC,EAAAgM,KAAA+F,EAAA,IACAhE,EAAAY,KAAA/yD,KAAAygB,KAAA2jC,EAAAiM,KAAA8F,EAAA,IACAhE,EAAAjB,aACAgB,EAAA/C,EAAAgD,EAAA+D,GACA7B,EAAAn8D,KAAAi6D,GACAiE,EAAAl+D,KAAAi6D,GACAjB,EAAAmD,SAAA+B,GAIAhS,EAAAwR,cACAxR,EAAAiQ,WAGA,IAAAgC,EAAAjH,EAAAkH,6BAAAD,iBAEA,OAAAA,GACA,OACAjH,EAAAmH,gBAAA,IAraA,SAAApH,GAQA,IAPA,IAAAZ,EAAAY,EAAAE,IACA2G,EAAA7G,EAAA8G,YAAA3uD,MACA8nD,EAAAD,EAAAhC,MAAA6I,GACAQ,EAAApH,EAAAkH,6BAAAE,YACAzL,EAAAwD,EAAAyB,KACAyG,EAAA,EAEA3sB,EAAA,EAAmBA,EAAAihB,EAAqBjhB,IACxC2sB,EAAAz2D,KAAAC,IAAAw2D,EAAArH,EAAA3K,WAAA3a,GAAA0mB,sBAAA6E,0BAGA,IAAAzgE,EAAA,EACA+E,EAAA,EACAhF,EAAA,EACAkyC,EAAA,EAEAjwC,KAAA8/D,WAAA,WACA,KAAY9hE,EAAA4hE,EAAiB5hE,IAAA,CAC7B,KAAc+E,GAAA88D,EAAkC98D,IAAA,CAChD,KAAgBhF,EAAAo2D,EAAqBp2D,IAAA,CACrC,IAAAyvD,EAAAgL,EAAA3K,WAAA9vD,GAEA,KAAAgF,EAAAyqD,EAAAoM,sBAAA6E,0BAAA,CAOA,IAHA,IAAAnE,EAAA9M,EAAAwR,YAAAj8D,GACAq4D,EAAAd,EAAAe,mBAAAD,aAEkBnrB,EAAAmrB,GAAkB,CACpC,IAAA2E,EAAAzC,EAAAhD,EAAArqB,EAAAjyC,GAEA,OADAiyC,IACA8vB,EAGA9vB,EAAA,GAGAlyC,EAAA,EAGAgF,EAAA,EAGA,UAAAo0D,EAAA,mBAwXA,CAAAoB,GACA,MAEA,OACAC,EAAAmH,gBAAA,IAxXA,SAAApH,GAQA,IAPA,IAAAZ,EAAAY,EAAAE,IACA2G,EAAA7G,EAAA8G,YAAA3uD,MACA8nD,EAAAD,EAAAhC,MAAA6I,GACAQ,EAAApH,EAAAkH,6BAAAE,YACAzL,EAAAwD,EAAAyB,KACAyG,EAAA,EAEA3sB,EAAA,EAAmBA,EAAAihB,EAAqBjhB,IACxC2sB,EAAAz2D,KAAAC,IAAAw2D,EAAArH,EAAA3K,WAAA3a,GAAA0mB,sBAAA6E,0BAGA,IAAA17D,EAAA,EACA/E,EAAA,EACAD,EAAA,EACAkyC,EAAA,EAEAjwC,KAAA8/D,WAAA,WACA,KAAY/8D,GAAA88D,EAAkC98D,IAAA,CAC9C,KAAc/E,EAAA4hE,EAAiB5hE,IAAA,CAC/B,KAAgBD,EAAAo2D,EAAqBp2D,IAAA,CACrC,IAAAyvD,EAAAgL,EAAA3K,WAAA9vD,GAEA,KAAAgF,EAAAyqD,EAAAoM,sBAAA6E,0BAAA,CAOA,IAHA,IAAAnE,EAAA9M,EAAAwR,YAAAj8D,GACAq4D,EAAAd,EAAAe,mBAAAD,aAEkBnrB,EAAAmrB,GAAkB,CACpC,IAAA2E,EAAAzC,EAAAhD,EAAArqB,EAAAjyC,GAEA,OADAiyC,IACA8vB,EAGA9vB,EAAA,GAGAlyC,EAAA,EAGAC,EAAA,EAGA,UAAAm5D,EAAA,mBA2UA,CAAAoB,GACA,MAEA,OACAC,EAAAmH,gBAAA,IA3UA,SAAApH,GACA,IAKAv6D,EAAA+E,EAAA3E,EAAAgB,EALAu4D,EAAAY,EAAAE,IACA2G,EAAA7G,EAAA8G,YAAA3uD,MACA8nD,EAAAD,EAAAhC,MAAA6I,GACAQ,EAAApH,EAAAkH,6BAAAE,YACAzL,EAAAwD,EAAAyB,KAEAyG,EAAA,EAEA,IAAAzhE,EAAA,EAAeA,EAAA+1D,EAAqB/1D,IAAA,CACpC,IAAAovD,EAAAgL,EAAA3K,WAAAzvD,GACAyhE,EAAAz2D,KAAAC,IAAAw2D,EAAArS,EAAAoM,sBAAA6E,0BAGA,IAAAuB,EAAA,IAAAlyB,WAAA+xB,EAAA,GAEA,IAAA98D,EAAA,EAAeA,GAAA88D,IAAkC98D,EAAA,CACjD,IAAAk9D,EAAA,EAEA,IAAA7hE,EAAA,EAAiBA,EAAA+1D,IAAqB/1D,EAAA,CACtC,IAAA4gE,EAAAxG,EAAA3K,WAAAzvD,GAAA4gE,YAEAj8D,EAAAi8D,EAAAz+D,SACA0/D,EAAA72D,KAAAC,IAAA42D,EAAAjB,EAAAj8D,GAAAs4D,mBAAAD,eAIA4E,EAAAj9D,GAAAk9D,EAGAjiE,EAAA,EACA+E,EAAA,EACA3E,EAAA,EACAgB,EAAA,EAEAY,KAAA8/D,WAAA,WACA,KAAY/8D,GAAA88D,EAAkC98D,IAAA,CAC9C,KAAc3D,EAAA4gE,EAAAj9D,GAA+B3D,IAAA,CAC7C,KAAgBhB,EAAA+1D,EAAqB/1D,IAAA,CACrC,IAAAovD,EAAAgL,EAAA3K,WAAAzvD,GAEA,KAAA2E,EAAAyqD,EAAAoM,sBAAA6E,0BAAA,CAIA,IAAAnE,EAAA9M,EAAAwR,YAAAj8D,GACAq4D,EAAAd,EAAAe,mBAAAD,aAEA,KAAAh8D,GAAAg8D,GAAA,CAIA,KAAkBp9D,EAAA4hE,GAAiB,CACnC,IAAAG,EAAAzC,EAAAhD,EAAAl7D,EAAApB,GAEA,OADAA,IACA+hE,EAGA/hE,EAAA,IAGAI,EAAA,EAGAgB,EAAA,EAGA,UAAA+3D,EAAA,mBAwQA,CAAAoB,GACA,MAEA,OACAC,EAAAmH,gBAAA,IAxQA,SAAApH,GACA,IAAAZ,EAAAY,EAAAE,IACA2G,EAAA7G,EAAA8G,YAAA3uD,MACA8nD,EAAAD,EAAAhC,MAAA6I,GACAQ,EAAApH,EAAAkH,6BAAAE,YACAzL,EAAAwD,EAAAyB,KACAW,EAAAqE,EAAA5F,GACA0H,EAAAnG,EACA/7D,EAAA,EACA+E,EAAA,EACA3E,EAAA,EACA+hE,EAAA,EACAC,EAAA,EAEApgE,KAAA8/D,WAAA,WACA,KAAYM,EAAAF,EAAA3B,WAAyC6B,IAAA,CACrD,KAAcD,EAAAD,EAAA5B,WAAyC6B,IAAA,CACvD,KAAgB/hE,EAAA+1D,EAAqB/1D,IAAA,CAIrC,IAHA,IAAAovD,EAAAgL,EAAA3K,WAAAzvD,GACAqgE,EAAAjR,EAAAoM,sBAAA6E,yBAEkB17D,GAAA07D,EAA+B17D,IAAA,CACjD,IAAAu3D,EAAA9M,EAAAwR,YAAAj8D,GACA86D,EAAA9D,EAAAlM,WAAAzvD,GAAA4gE,YAAAj8D,GACAktC,EAAAytB,EAAAyC,EAAAC,EAAAvC,EAAAqC,EAAA5F,GAEA,UAAArqB,EAAA,CAIA,KAAoBjyC,EAAA4hE,GAAiB,CACrC,IAAAG,EAAAzC,EAAAhD,EAAArqB,EAAAjyC,GAEA,OADAA,IACA+hE,EAGA/hE,EAAA,GAGA+E,EAAA,EAGA3E,EAAA,EAGA+hE,EAAA,EAGA,UAAAhJ,EAAA,mBAwNA,CAAAoB,GACA,MAEA,OACAC,EAAAmH,gBAAA,IAxNA,SAAApH,GACA,IAAAZ,EAAAY,EAAAE,IACA2G,EAAA7G,EAAA8G,YAAA3uD,MACA8nD,EAAAD,EAAAhC,MAAA6I,GACAQ,EAAApH,EAAAkH,6BAAAE,YACAzL,EAAAwD,EAAAyB,KACAW,EAAAqE,EAAA5F,GACAx6D,EAAA,EACA+E,EAAA,EACA3E,EAAA,EACA+hE,EAAA,EACAC,EAAA,EAEApgE,KAAA8/D,WAAA,WACA,KAAY1hE,EAAA+1D,IAAqB/1D,EAAA,CAKjC,IAJA,IAAAovD,EAAAgL,EAAA3K,WAAAzvD,GACA8hE,EAAAnG,EAAAlM,WAAAzvD,GACAqgE,EAAAjR,EAAAoM,sBAAA6E,yBAEc2B,EAAAF,EAAA3B,WAAyC6B,IAAA,CACvD,KAAgBD,EAAAD,EAAA5B,WAAyC6B,IAAA,CACzD,KAAkBp9D,GAAA07D,EAA+B17D,IAAA,CACjD,IAAAu3D,EAAA9M,EAAAwR,YAAAj8D,GACA86D,EAAAqC,EAAAlB,YAAAj8D,GACAktC,EAAAytB,EAAAyC,EAAAC,EAAAvC,EAAAqC,EAAA5F,GAEA,UAAArqB,EAAA,CAIA,KAAoBjyC,EAAA4hE,GAAiB,CACrC,IAAAG,EAAAzC,EAAAhD,EAAArqB,EAAAjyC,GAEA,OADAA,IACA+hE,EAGA/hE,EAAA,GAGA+E,EAAA,EAGAo9D,EAAA,EAGAC,EAAA,EAGA,UAAAjJ,EAAA,mBAwKA,CAAAoB,GACA,MAEA,QACA,UAAApB,mCAA4DsI,MAI5D,SAAAY,EAAA9H,EAAAzzD,EAAAypB,EAAAmU,GACA,IACArgB,EADAgI,EAAA,EAEAi2C,EAAA,EACAC,GAAA,EAEA,SAAAvtB,EAAA7Z,GACA,KAAAmnC,EAAAnnC,GAAA,CACA,IAAAzW,EAAA5d,EAAAypB,EAAAlE,GACAA,IAEAk2C,GACAl+C,KAAA,EAAAK,EACA49C,GAAA,EACAC,GAAA,IAEAl+C,KAAA,EAAAK,EACA49C,GAAA,GAGA,MAAA59C,IACA69C,GAAA,GAKA,OAAAl+C,KADAi+C,GAAAnnC,IACA,GAAAA,GAAA,EAGA,SAAAqnC,EAAAt9D,GACA,aAAA4B,EAAAypB,EAAAlE,EAAA,IAAAvlB,EAAAypB,EAAAlE,KAAAnnB,GACAu9D,EAAA,IACA,GACO,MAAA37D,EAAAypB,EAAAlE,IAAAvlB,EAAAypB,EAAAlE,EAAA,KAAAnnB,IACPu9D,EAAA,IACA,GAMA,SAAAA,EAAAtnC,GACA9O,GAAA8O,EAGA,SAAAunC,IACAJ,EAAA,EAEAC,IACAl2C,IACAk2C,GAAA,GAIA,SAAAI,IACA,OAAA3tB,EAAA,GACA,SAGA,OAAAA,EAAA,GACA,SAGA,IAAA9vC,EAAA8vC,EAAA,GAEA,OAAA9vC,EAAA,EACAA,EAAA,GAGAA,EAAA8vC,EAAA,IAEA,GACA9vC,EAAA,GAGAA,EAAA8vC,EAAA,IACA,GASA,IANA,IAAAosB,EAAA7G,EAAA8G,YAAA3uD,MACA8nD,EAAAD,EAAAhC,MAAA6I,GACAwB,EAAArI,EAAAsI,IAAAD,cACAE,EAAAvI,EAAAsI,IAAAC,cACAnB,EAAAnH,EAAAmH,gBAEAt1C,EAAAqY,GAAA,CACAg+B,IAEAE,GAAAJ,EAAA,MACAC,EAAA,GAGA,IAAAV,EAAAJ,EAAAG,aAEA,GAAA9sB,EAAA,IAQA,IAJA,IAEAwoB,EAFA+B,EAAAwC,EAAAxC,YACAp9D,KAGApC,EAAA,EAAAymB,EAAAu7C,EAAA3D,WAAA77D,OAAoDxC,EAAAymB,EAAQzmB,IAAA,CAE5D,IAAA++D,GADAtB,EAAAuE,EAAA3D,WAAAr+D,IACA++D,SACAiE,EAAAvF,EAAAc,IAAAQ,EAAAC,OACAiE,EAAAxF,EAAAe,IAAAO,EAAAG,OACAgE,GAAA,EACAC,GAAA,EAGA,QAAA3xD,IAAAisD,EAAA,SACAyF,IAAAjuB,EAAA,OACS,CAET,IAAAmuB,EAAAC,EAEA,QAAA7xD,KAHAutD,EAAAtB,EAAAsB,UAGA,cACAqE,EAAArE,EAAAqE,kBACW,CACX,IAAA3oB,EAAAskB,EAAAE,OAAAF,EAAAC,OAAA,EACAtkB,EAAAqkB,EAAAI,OAAAJ,EAAAG,OAAA,EACAkE,EAAA,IAAAE,EAAA7oB,EAAAC,EAAA8kB,GACA6D,EAAA,IAAAE,EAAA9oB,EAAAC,GACAqkB,EAAAqE,gBACArE,EAAAsE,oBAGA,GAAAD,EAAAxsC,MAAAosC,EAAAC,EAAAzD,GACA,QACA,IAAAvqB,EAAA,GAQe,CACfmuB,EAAAI,eAAAhE,GACA,MAPA,IAFA4D,EAAAK,YAEA,CACAhG,EAAAiG,UAAA,EACAR,EAAAC,GAAA,EACA,QAUA,GAAAD,EAAA,CAIA,GAAAC,EAAA,CAIA,KAHAE,EAAAtE,EAAAsE,mBACAzsC,MAAAosC,EAAAC,KAGA,GAAAhuB,EAAA,IAGA,IAFAouB,EAAAI,YAGA,WAGAJ,EAAAG,iBAIA/F,EAAAkG,cAAAN,EAAAl+D,MAKA,IAFA,IAAAy+D,EAAAhB,IAEA3tB,EAAA,IACAwoB,EAAAqB,SAGA,IAAA+E,GAAA,EAAA19D,EAAAkqB,MAAAuzC,GAEAE,EAAA7uB,GADA2uB,EAAA,GAAAC,IAAA,EAAAA,GAAApG,EAAAqB,QAEA18D,EAAAmB,MACAk6D,YACAmG,eACAj/B,WAAAm/B,KAUA,IANAnB,IAEAI,GACAN,EAAA,KAGArgE,EAAAI,OAAA,IACA,IAAAuhE,EAAA3hE,EAAAy4B,aAGArpB,KAFAisD,EAAAsG,EAAAtG,WAEA,OACAA,EAAA12D,SAGA02D,EAAA12D,KAAAxD,MACAwD,OACAmG,MAAAsjB,EAAAlE,EACA3B,IAAA6F,EAAAlE,EAAAy3C,EAAAp/B,WACAi/B,aAAAG,EAAAH,eAEAt3C,GAAAy3C,EAAAp/B,aAIA,OAAArY,EAGA,SAAA03C,EAAAC,EAAAC,EAAAC,EAAA3G,EAAA4G,EAAAC,EAAAC,EAAAC,GAQA,IAPA,IAAA1K,EAAA2D,EAAAM,KACA5D,EAAAsD,EAAAQ,KACAvjB,EAAA+iB,EAAAU,KAAAV,EAAAM,KACAO,EAAAb,EAAAa,WACAmG,EAAA,MAAAhH,EAAAh3C,KAAA/R,OAAA,OACAgwD,EAAA,MAAAjH,EAAAh3C,KAAA/R,OAAA,GAAAyvD,EAAA,EAEAlkE,EAAA,EAAAymB,EAAA43C,EAAA77D,OAA2CxC,EAAAymB,IAAQzmB,EAAA,CACnD,IAAAy9D,EAAAY,EAAAr+D,GACA0kE,EAAAjH,EAAAkB,MAAAlB,EAAAgB,MACAkG,EAAAlH,EAAAmB,MAAAnB,EAAAiB,MAEA,OAAAgG,GAAA,IAAAC,QAIAnzD,IAAAisD,EAAA,MAIA,IAAAmH,EAAAC,EACAD,EAAA,IAAAE,EAAAJ,EAAAC,EAAAlH,EAAAoB,YAAApB,EAAAkG,cAAAU,GACAQ,EAAA,EACA,IAGA/uC,EAAAyH,EAAAwnC,EAHAh+D,EAAA02D,EAAA12D,KACAotB,EAAA,EACAyvC,EAAA,EAGA,IAAA9tC,EAAA,EAAAyH,EAAAx2B,EAAAvE,OAAmCszB,EAAAyH,EAAQzH,IAE3C3B,IADA4wC,EAAAh+D,EAAA+uB,IACAnL,IAAAo6C,EAAA73D,MACA02D,GAAAmB,EAAAnB,aAGA,IAAAoB,EAAA,IAAAh+D,WAAAmtB,GACA7H,EAAA,EAEA,IAAAwJ,EAAA,EAAAyH,EAAAx2B,EAAAvE,OAAmCszB,EAAAyH,EAAQzH,IAAA,CAE3C,IAAAjrB,GADAk6D,EAAAh+D,EAAA+uB,IACA/uB,KAAA+K,SAAAizD,EAAA73D,MAAA63D,EAAAp6C,KACAq6C,EAAA3zD,IAAAxG,EAAAyhB,GACAA,GAAAzhB,EAAArI,OAGA,IAAA62C,EAAA,IAAAP,EAAAe,kBAAAmrB,EAAA,EAAA7wC,GAGA,IAFAywC,EAAAK,WAAA5rB,GAEAvjB,EAAA,EAAiBA,EAAA8tC,EAAkB9tC,IAAA,CACnC,OAAA+uC,GACA,OACAD,EAAAM,iCACA,MAEA,OACAN,EAAAO,6BACA,MAEA,OACAP,EAAAQ,iBAEAb,GACAK,EAAAS,0BAMAR,KAAA,KAGA,IAKA3yB,EAAAnxC,EAAAukE,EALA90C,EAAAitC,EAAAgB,MAAA5E,GAAA4D,EAAAiB,MAAAxE,GAAAzf,EACA3N,EAAA83B,EAAAW,gBACAC,EAAAZ,EAAAa,qBACAC,EAAAd,EAAAc,YACAC,EAAArB,EAAA,KAEAh4C,EAAA,EACA,IAAAs5C,EAAA,OAAApI,EAAAh3C,KAEA,IAAAsP,EAAA,EAAiBA,EAAA6uC,EAAiB7uC,IAAA,CAClC,IACA+vC,EAAA,GADAr1C,EAAAiqB,EAAA,IACAypB,EAAAzpB,GAAA+pB,EAAAC,EAEA,IAAAvyB,EAAA,EAAmBA,EAAAwyB,EAAgBxyB,IAAA,CAGnC,QAFAnxC,EAAAykE,EAAAl5C,IAEA,CACAvrB,KAAA4kE,GAAAvB,EAEA,IAAAt3B,EAAAxgB,KACAvrB,MAGAukE,EAAAI,EAAAp5C,GACA,IAAArb,EAAA20D,EAAAC,GAAAr1C,GAAA,GAAAA,EAGAyzC,EAAAhzD,GADAqzD,GAAAgB,GAAAjB,EACAtjE,EAEAA,GAAA,GAAAsjE,EAAAiB,GAIA90C,IACAlE,IAGAkE,GAAAiqB,EAAAiqB,KAKA,SAAAoB,EAAAtL,EAAAC,EAAAp6D,GAeA,IAdA,IAAAovD,EAAAgL,EAAA3K,WAAAzvD,GACAw7D,EAAApM,EAAAoM,sBACAkK,EAAAtW,EAAAsW,uBACArF,EAAA7E,EAAA6E,yBACAsF,EAAAD,EAAAE,OACAC,EAAAH,EAAAG,gBACAC,EAAAJ,EAAAI,UACA5B,EAAA1I,EAAA0I,uBACAvO,EAAAwE,EAAA1K,WAAAzvD,GAAA21D,UACAsO,EAAAzI,EAAAuK,yBACA9nD,EAAAgmD,EAAA,IAAA+B,EAAA,IAAAC,EACAC,KACA5hD,EAAA,EAEA3kB,EAAA,EAAmBA,GAAA0gE,EAA+B1gE,IAAA,CAMlD,IALA,IAAAu8D,EAAA9M,EAAAwR,YAAAjhE,GACAy6C,EAAA8hB,EAAAS,KAAAT,EAAAU,KACAviB,EAAA6hB,EAAAY,KAAAZ,EAAAa,KACA6G,EAAA,IAAAuC,aAAA/rB,EAAAC,GAEA5kB,EAAA,EAAAyH,EAAAg/B,EAAAmD,SAAAl9D,OAAsDszB,EAAAyH,EAAQzH,IAAA,CAC9D,IAAA2wC,EAAAC,EAEAR,GAIAO,EAAAT,EAAArhD,GAAA8hD,GACAC,EAAAV,EAAArhD,GAAA+hD,QACA/hD,MALA8hD,EAAAT,EAAA,GAAAS,GACAC,EAAAV,EAAA,GAAAU,SAAA1mE,EAAA,IAAAA,EAAA,IAOA,IAAAw9D,EAAAjB,EAAAmD,SAAA5pC,GACA6wC,EAAAtN,EAAAmE,EAAAh3C,MAGAw9C,EAAAC,EAAAxpB,EAAAC,EAAA8iB,EAFA8G,EAAA,MAAAtO,EAAA2Q,EAAAD,IAAA,EAAAD,EAAA,MACAN,EAAAO,EAAA,EACApC,EAAAC,GAGAgC,EAAAhjE,MACAk3C,QACAC,SACAjgB,MAAAwpC,IAIA,IAAA/9C,EAAA5H,EAAAsoD,UAAAL,EAAA9W,EAAA8L,KAAA9L,EAAA+L,MACA,OACA9nB,KAAA+b,EAAA8L,KACAzC,IAAArJ,EAAA+L,KACA/gB,MAAAv0B,EAAAu0B,MACAC,OAAAx0B,EAAAw0B,OACAjgB,MAAAvU,EAAAuU,OA6FA,SAAAosC,EAAArM,EAAA6G,GAKA,IAJA,IACAjL,EADAoE,EAAAE,IACAW,KACAZ,EAAAD,EAAAhC,MAAA6I,GAEAhhE,EAAA,EAAmBA,EAAA+1D,EAAqB/1D,IAAA,CACxC,IAAAovD,EAAAgL,EAAA3K,WAAAzvD,GACAymE,OAAAt1D,IAAAgpD,EAAA8G,YAAAyF,IAAA1mE,GAAAm6D,EAAA8G,YAAAyF,IAAA1mE,GAAAm6D,EAAA8G,YAAA0F,IACAvX,EAAAsW,uBAAAe,EACA,IAAAlL,OAAApqD,IAAAgpD,EAAA8G,YAAA2F,IAAA5mE,GAAAm6D,EAAA8G,YAAA2F,IAAA5mE,GAAAm6D,EAAA8G,YAAAwB,IACArT,EAAAoM,sBAAAD,EAGAnB,EAAAkH,6BAAAnH,EAAA8G,YAAAwB,IAnhDAxK,EAAAn3D,WACAm2B,MAAA,SAAAvwB,GAGA,YAFA,EAAAZ,EAAAsqB,YAAA1pB,EAAA,GAUA,IAHA,IAAAulB,EAAA,EACA9pB,EAAAuE,EAAAvE,OAEA8pB,EAAA9pB,GAAA,CACA,IAAA0kE,EAAA,EACAC,GAAA,EAAAhhE,EAAAuqB,YAAA3pB,EAAAulB,GACA86C,GAAA,EAAAjhE,EAAAuqB,YAAA3pB,EAAAulB,EAAA,GAaA,GAZAA,GAAA46C,EAEA,IAAAC,IACAA,EAAA,cAAAhhE,EAAAuqB,YAAA3pB,EAAAulB,IAAA,EAAAnmB,EAAAuqB,YAAA3pB,EAAAulB,EAAA,GACAA,GAAA,EACA46C,GAAA,GAGA,IAAAC,IACAA,EAAA3kE,EAAA8pB,EAAA46C,GAGAC,EAAAD,EACA,UAAA9N,EAAA,0BAGA,IAAAz0B,EAAAwiC,EAAAD,EACAG,GAAA,EAEA,OAAAD,GACA,gBACAC,GAAA,EACA,MAEA,gBACA,IAAAC,EAAAvgE,EAAAulB,GAEA,OAAAg7C,EAAA,CACA,IAAAC,GAAA,EAAAphE,EAAAuqB,YAAA3pB,EAAAulB,EAAA,GAEA,OAAAi7C,GACA,QACA,QACA,QACA,MAEA,SACA,EAAA1hE,EAAAoF,MAAA,sBAAAs8D,SAGa,IAAAD,IACb,EAAAzhE,EAAA6H,MAAA,6BAGA,MAEA,gBACAzL,KAAAulE,gBAAAzgE,EAAAulB,IAAAqY,GACA,MAEA,eACA,eAAAx+B,EAAAuqB,YAAA3pB,EAAAulB,KACA,EAAAzmB,EAAAoF,MAAA,yBAGA,MAEA,gBACA,gBACA,gBACA,gBACA,gBACA,MAEA,QACA,IAAAw8D,EAAAh2D,OAAAC,aAAA01D,GAAA,OAAAA,GAAA,OAAAA,GAAA,UAAAA,IACA,EAAAvhE,EAAAoF,MAAA,2BAAAm8D,EAAA,KAAAK,EAAA,KAIAJ,IACA/6C,GAAAqY,QAlFA1iC,KAAAulE,gBAAAzgE,EAAA,EAAAA,EAAAvE,SAsFAklE,qBAAA,SAAA/6D,GAGA,IAFA,IAAAg7D,EAAAh7D,EAAA+f,UAEAi7C,GAAA,IAKA,YAJAA,GAEA,GADAA,EAAAh7D,EAAA+f,YAGA,CACA/f,EAAAqqB,KAAA,GACA,IAAAijC,EAAAttD,EAAAqiC,aAAA,EACAsrB,EAAA3tD,EAAAqiC,aAAA,EACA8qB,EAAAntD,EAAAqiC,aAAA,EACAmrB,EAAAxtD,EAAAqiC,aAAA,EACAriC,EAAAqqB,KAAA,IACA,IAAAqkC,EAAA1uD,EAAAi9B,YAKA,OAJA3nC,KAAAw4C,MAAAwf,EAAAH,EACA73D,KAAAy4C,OAAA4f,EAAAH,EACAl4D,KAAAm0D,gBAAAiF,OACAp5D,KAAAyrD,iBAAA,IAKA,UAAA0L,EAAA,uCAEAoO,gBAAA,SAAAzgE,EAAAmG,EAAAyd,GACA,IAAA6vC,KACAoN,GAAA,EAEA,IAGA,IAFA,IAAAt7C,EAAApf,EAEAof,EAAA,EAAA3B,GAAA,CACA,IAAAvb,GAAA,EAAAjJ,EAAAsqB,YAAA1pB,EAAAulB,GACAA,GAAA,EACA,IACAwJ,EACA+xC,EACA7B,EACA8B,EACA5B,EACAzL,EANAj4D,EAAA,EAQA,OAAA4M,GACA,WACAorD,EAAAuN,YAAA,EACA,MAEA,WACA,MAEA,WACAvlE,GAAA,EAAA2D,EAAAsqB,YAAA1pB,EAAAulB,GACA,IAAAstC,KACAA,EAAAK,MAAA,EAAA9zD,EAAAuqB,YAAA3pB,EAAAulB,EAAA,GACAstC,EAAAU,MAAA,EAAAn0D,EAAAuqB,YAAA3pB,EAAAulB,EAAA,GACAstC,EAAAE,OAAA,EAAA3zD,EAAAuqB,YAAA3pB,EAAAulB,EAAA,IACAstC,EAAAO,OAAA,EAAAh0D,EAAAuqB,YAAA3pB,EAAAulB,EAAA,IACAstC,EAAAiB,OAAA,EAAA10D,EAAAuqB,YAAA3pB,EAAAulB,EAAA,IACAstC,EAAAoB,OAAA,EAAA70D,EAAAuqB,YAAA3pB,EAAAulB,EAAA,IACAstC,EAAAgB,QAAA,EAAAz0D,EAAAuqB,YAAA3pB,EAAAulB,EAAA,IACAstC,EAAAmB,QAAA,EAAA50D,EAAAuqB,YAAA3pB,EAAAulB,EAAA,IACA,IAAA8pC,GAAA,EAAAjwD,EAAAsqB,YAAA1pB,EAAAulB,EAAA,IACAstC,EAAAyB,KAAAjF,EACA,IAAAtG,KACAh6B,EAAAxJ,EAAA,GAEA,QAAAtsB,EAAA,EAA6BA,EAAAo2D,EAAqBp2D,IAAA,CAClD,IAAAyvD,GACAuG,UAAA,OAAAjvD,EAAA+uB,IACAkyC,YAAA,IAAAjhE,EAAA+uB,IACAikC,MAAAhzD,EAAA+uB,EAAA,GACAskC,MAAArzD,EAAA+uB,EAAA,IAEAA,GAAA,EACA6jC,EAAAlK,EAAAmK,GACA9J,EAAAvsD,KAAAksD,GAGA+K,EAAAE,IAAAd,EACAY,EAAA1K,aACAyK,EAAAC,EAAA1K,GACA0K,EAAAuM,OACAvM,EAAAyM,OACA,MAEA,WACAzkE,GAAA,EAAA2D,EAAAsqB,YAAA1pB,EAAAulB,GACA,IAAA27C,KAIA,OAHAnyC,EAAAxJ,EAAA,EAGA,IAFAu7C,EAAA9gE,EAAA+uB,OAGA,OACAgyC,EAAA,EACA5B,GAAA,EACA,MAEA,OACA4B,EAAA,GACA5B,GAAA,EACA,MAEA,OACA4B,EAAA,GACA5B,GAAA,EACA,MAEA,QACA,UAAAvkE,MAAA,sBAAAkmE,GAQA,IALAI,EAAAC,eAAA,IAAAJ,EACAG,EAAA/B,kBACA+B,EAAA9B,UAAA0B,GAAA,EACA7B,KAEAlwC,EAAAtzB,EAAA8pB,GAAA,CACA,IAAA67C,KAEA,IAAAL,GACAK,EAAAzB,QAAA3/D,EAAA+uB,MAAA,EACAqyC,EAAA1B,GAAA,IAEA0B,EAAAzB,QAAA3/D,EAAA+uB,IAAA,EACAqyC,EAAA1B,IAAA,EAAA1/D,EAAA+uB,KAAA,EAAA/uB,EAAA+uB,EAAA,GACAA,GAAA,GAGAkwC,EAAAziE,KAAA4kE,GAGAF,EAAAhC,OAAAD,EAEAxL,EAAAuN,WACAvN,EAAAwM,IAAAiB,GAEAzN,EAAA8G,YAAA0F,IAAAiB,EACAzN,EAAA8G,YAAAyF,QAGA,MAEA,WACAvkE,GAAA,EAAA2D,EAAAsqB,YAAA1pB,EAAAulB,GACA,IAEA87C,EAFAC,KAaA,OAZAvyC,EAAAxJ,EAAA,EAGAkuC,EAAAE,IAAAW,KAAA,IACA+M,EAAArhE,EAAA+uB,MAEAsyC,GAAA,EAAAjiE,EAAAsqB,YAAA1pB,EAAA+uB,GACAA,GAAA,GAKA,IAFA+xC,EAAA9gE,EAAA+uB,OAGA,OACAgyC,EAAA,EACA5B,GAAA,EACA,MAEA,OACA4B,EAAA,GACA5B,GAAA,EACA,MAEA,OACA4B,EAAA,GACA5B,GAAA,EACA,MAEA,QACA,UAAAvkE,MAAA,sBAAAkmE,GAQA,IALAQ,EAAAH,eAAA,IAAAJ,EACAO,EAAAnC,kBACAmC,EAAAlC,UAAA0B,GAAA,EACA7B,KAEAlwC,EAAAtzB,EAAA8pB,GACA67C,KAEA,IAAAL,GACAK,EAAAzB,QAAA3/D,EAAA+uB,MAAA,EACAqyC,EAAA1B,GAAA,IAEA0B,EAAAzB,QAAA3/D,EAAA+uB,IAAA,EACAqyC,EAAA1B,IAAA,EAAA1/D,EAAA+uB,KAAA,EAAA/uB,EAAA+uB,EAAA,GACAA,GAAA,GAGAkwC,EAAAziE,KAAA4kE,GAGAE,EAAApC,OAAAD,EAEAxL,EAAAuN,WACAvN,EAAAuM,IAAAqB,GAAAC,EAEA7N,EAAA8G,YAAAyF,IAAAqB,GAAAC,EAGA,MAEA,WACA7lE,GAAA,EAAA2D,EAAAsqB,YAAA1pB,EAAAulB,GACA,IAAAg8C,KACAxyC,EAAAxJ,EAAA,EACA,IAAAi8C,EAAAxhE,EAAA+uB,KACAwyC,EAAAxM,mCAAA,EAAAyM,GACAD,EAAAzF,iBAAA,EAAA0F,GACAD,EAAAvF,iBAAA,EAAAwF,GACAD,EAAA5G,iBAAA36D,EAAA+uB,KACAwyC,EAAAzG,aAAA,EAAA17D,EAAAsqB,YAAA1pB,EAAA+uB,GACAA,GAAA,EACAwyC,EAAAE,2BAAAzhE,EAAA+uB,KACAwyC,EAAA5H,yBAAA35D,EAAA+uB,KACAwyC,EAAAnM,IAAA,MAAAp1D,EAAA+uB,MACAwyC,EAAAjM,IAAA,MAAAt1D,EAAA+uB,MACA,IAAA2yC,EAAA1hE,EAAA+uB,KASA,GARAwyC,EAAAI,mCAAA,EAAAD,GACAH,EAAAK,6BAAA,EAAAF,GACAH,EAAAM,+BAAA,EAAAH,GACAH,EAAAO,oBAAA,EAAAJ,GACAH,EAAAQ,0BAAA,GAAAL,GACAH,EAAA/D,0BAAA,GAAAkE,GACAH,EAAAlC,yBAAAr/D,EAAA+uB,KAEAwyC,EAAAxM,gCAAA,CAGA,IAFA,IAAAE,KAEAlmC,EAAAtzB,EAAA8pB,GAAA,CACA,IAAAy8C,EAAAhiE,EAAA+uB,KACAkmC,EAAAz4D,MACAw4D,IAAA,GAAAgN,EACA9M,IAAA8M,GAAA,IAIAT,EAAAtM,iBAGA,IAAAgN,KAsBA,GApBAV,EAAAI,iCACAM,EAAAzlE,KAAA,mCAGA+kE,EAAAK,2BACAK,EAAAzlE,KAAA,6BAGA+kE,EAAAM,6BACAI,EAAAzlE,KAAA,+BAGA+kE,EAAAO,kBACAG,EAAAzlE,KAAA,oBAGA+kE,EAAAQ,wBACAE,EAAAzlE,KAAA,0BAGAylE,EAAAxmE,OAAA,EAEA,MADAolE,GAAA,EACA,IAAAjmE,MAAA,4BAAAqnE,EAAAlhE,KAAA,WAGA0yD,EAAAuN,WACAvN,EAAAsI,IAAAwF,GAEA9N,EAAA8G,YAAAwB,IAAAwF,EACA9N,EAAA8G,YAAA2F,QAGA,MAEA,WACAzkE,GAAA,EAAA2D,EAAAsqB,YAAA1pB,EAAAulB,IACAmuC,MACA9nD,OAAA,EAAAxM,EAAAsqB,YAAA1pB,EAAAulB,EAAA,GACAmuC,EAAAj4D,QAAA,EAAA2D,EAAAuqB,YAAA3pB,EAAAulB,EAAA,GACAmuC,EAAA9N,QAAA8N,EAAAj4D,OAAA8pB,EAAA,EACAmuC,EAAAwO,UAAAliE,EAAAulB,EAAA,GACAmuC,EAAAyO,WAAAniE,EAAAulB,EAAA,GACAkuC,EAAAuN,YAAA,EAEA,IAAAtN,EAAAwO,YACAxO,EAAAqI,IAAAtI,EAAAsI,IACArI,EAAAwM,IAAAzM,EAAAyM,IAAAhiD,MAAA,GACAw1C,EAAAuM,IAAAxM,EAAAwM,IACAvM,EAAAsM,IAAAvM,EAAAuM,IAAA9hD,MAAA,IAGAu1C,EAAA8G,YAAA7G,EACA,MAEA,WAGA,KAFAA,EAAAD,EAAA8G,aAEA2H,YACApC,EAAArM,EAAAC,EAAA9nD,OACAyuD,EAAA5G,IAIA8H,EAAA9H,EAAAzzD,EAAAulB,EADA9pB,EAAAi4D,EAAA9N,QAAArgC,GAEA,MAEA,WACA,WACA,WACA,WACA9pB,GAAA,EAAA2D,EAAAsqB,YAAA1pB,EAAAulB,GACA,MAEA,WACA,UAAA3qB,MAAA,mDAEA,QACA,UAAAA,MAAA,4BAAAyN,EAAAS,SAAA,KAGAyc,GAAA9pB,GAEO,MAAAR,GACP,GAAA4lE,GAAA3lE,KAAAy3D,qBACA,UAAAN,EAAAp3D,EAAA4N,UAEA,EAAA/J,EAAAoF,MAAA,gCAAAjJ,EAAA4N,SAIA3N,KAAAu2D,MA+/BA,SAAAgC,GAMA,IALA,IAAAZ,EAAAY,EAAAE,IACA5K,EAAA0K,EAAA1K,WACAsG,EAAAwD,EAAAyB,KACA8N,KAEAnpE,EAAA,EAAAymB,EAAA+zC,EAAAhC,MAAAh2D,OAA8CxC,EAAAymB,EAAQzmB,IAAA,CACtD,IAEAK,EAFAo6D,EAAAD,EAAAhC,MAAAx4D,GACAopE,KAGA,IAAA/oE,EAAA,EAAiBA,EAAA+1D,EAAqB/1D,IACtC+oE,EAAA/oE,GAAAylE,EAAAtL,EAAAC,EAAAp6D,GAGA,IASAw6B,EAAArK,EAEAsF,EACAyH,EACA28B,EACAG,EACAgP,EAfAC,EAAAF,EAAA,GACAG,EAAA,IAAAz8C,kBAAAw8C,EAAA7uC,MAAAj4B,OAAA4zD,GACAlwC,GACAwtB,KAAA41B,EAAA51B,KACAolB,IAAAwQ,EAAAxQ,IACAre,MAAA6uB,EAAA7uB,MACAC,OAAA4uB,EAAA5uB,OACAjgB,MAAA8uC,GAGAt4D,EAAA,EAOA,GAAAwpD,EAAAkH,6BAAA6G,2BAAA,CACA,IAAAgB,EAAA,IAAApT,EACAqT,EAAAL,EAAA,GAAA3uC,MACAivC,EAAAN,EAAA,GAAA3uC,MACAkvC,EAAAP,EAAA,GAAA3uC,MACAmvC,EAAAJ,EAAAJ,EAAA,GAAA3uC,MAAA,KACAI,EAAAi1B,EAAA,GAAAkG,UAAA,EACAxlC,EAAA,SAAAqK,GACA,IAAAgvC,EAAApP,EAAA3K,WAAA,GACAga,EAAA1T,EAAA,EAGA,GAFA74B,EAAAksC,EAAAjnE,OAEAqnE,EAAAhO,sBAAAuK,yBAUA,IAAAtwC,EAAA,EAAqBA,EAAAyH,EAAQzH,IAAA7kB,GAAA64D,EAAA,CAC7B5P,EAAAuP,EAAA3zC,GAAAtF,EACA6pC,EAAAqP,EAAA5zC,GACAuzC,EAAAM,EAAA7zC,GACA,MAAApR,EAAAw1C,GAAAmP,EAAAhP,GAAA,GACAkP,EAAAt4D,KAAAyT,EAAA2kD,GAAAxuC,EACA0uC,EAAAt4D,KAAAyT,GAAAmW,EACA0uC,EAAAt4D,KAAAyT,EAAA21C,GAAAx/B,OAhBA,IAAA/E,EAAA,EAAqBA,EAAAyH,EAAQzH,IAAA7kB,GAAA64D,EAC7B5P,EAAAuP,EAAA3zC,GAAAtF,EACA6pC,EAAAqP,EAAA5zC,GACAuzC,EAAAM,EAAA7zC,GACAyzC,EAAAt4D,KAAAipD,EAAA,MAAAmP,GAAAxuC,EACA0uC,EAAAt4D,KAAAipD,EAAA,OAAAG,EAAA,OAAAgP,GAAAxuC,EACA0uC,EAAAt4D,KAAAipD,EAAA,MAAAG,GAAAx/B,EAcA,GAAA2uC,EACA,IAAA1zC,EAAA,EAAA7kB,EAAA,EAA8B6kB,EAAAyH,EAAQzH,IAAA7kB,GAAA,EACtCs4D,EAAAt4D,GAAA24D,EAAA9zC,GAAAtF,GAAAqK,OAIA,IAAAx6B,EAAA,EAAmBA,EAAA+1D,EAAqB/1D,IAAA,CACxC,IAAAo6B,EAAA2uC,EAAA/oE,GAAAo6B,MAIA,IAHAI,EAAAi1B,EAAAzvD,GAAA21D,UAAA,EACAxlC,EAAA,SAAAqK,GAEA5pB,EAAA5Q,EAAAy1B,EAAA,EAAAyH,EAAA9C,EAAAj4B,OAAiDszB,EAAAyH,EAAQzH,IACzDyzC,EAAAt4D,GAAAwpB,EAAA3E,GAAAtF,GAAAqK,EACA5pB,GAAAmlD,EAKA+S,EAAA5lE,KAAA2iB,GAGA,OAAAijD,EArlCAY,CAAAvP,GACAv4D,KAAAw4C,MAAA+f,EAAAE,IAAAT,KAAAO,EAAAE,IAAAZ,MACA73D,KAAAy4C,OAAA8f,EAAAE,IAAAJ,KAAAE,EAAAE,IAAAP,MACAl4D,KAAAm0D,gBAAAoE,EAAAE,IAAAW,OAqmCA,IAAAkI,EAAA,WACA,SAAAA,EAAA9oB,EAAAC,GACA,IAAAsvB,GAAA,EAAA7jE,EAAAkqB,MAAAhlB,KAAAC,IAAAmvC,EAAAC,IAAA,EACAz4C,KAAAgoE,UAEA,QAAAjqE,EAAA,EAAqBA,EAAAgqE,EAAkBhqE,IAAA,CACvC,IAAAiU,GACAwmC,QACAC,SACAjgB,UAEAx4B,KAAAgoE,OAAA1mE,KAAA0Q,GACAwmC,EAAApvC,KAAAygB,KAAA2uB,EAAA,GACAC,EAAArvC,KAAAygB,KAAA4uB,EAAA,IAoDA,OAhDA6oB,EAAApiE,WACAy1B,MAAA,SAAA52B,EAAA81B,GAKA,IAJA,IAEA7hB,EAFAi2D,EAAA,EACA/kE,EAAA,EAGA+kE,EAAAjoE,KAAAgoE,OAAAznE,QAAA,CAEA,IAAAmQ,EAAA3S,EAAA81B,GADA7hB,EAAAhS,KAAAgoE,OAAAC,IACAzvB,MAEA,QAAAjpC,IAAAyC,EAAAwmB,MAAA9nB,GAAA,CACAxN,EAAA8O,EAAAwmB,MAAA9nB,GACA,MAGAsB,EAAAtB,QACA3S,IAAA,EACA81B,IAAA,EACAo0C,IAGAA,KACAj2D,EAAAhS,KAAAgoE,OAAAC,IACAzvC,MAAAxmB,EAAAtB,OAAAxN,EACAlD,KAAAioE,sBACAjoE,KAAAkD,OAEAq+D,eAAA,WACA,IAAAvvD,EAAAhS,KAAAgoE,OAAAhoE,KAAAioE,cACAj2D,EAAAwmB,MAAAxmB,EAAAtB,UAEA8wD,UAAA,WACA,IAAAyG,EAAAjoE,KAAAioE,aACAj2D,EAAAhS,KAAAgoE,OAAAC,GACA/kE,EAAA8O,EAAAwmB,MAAAxmB,EAAAtB,OAGA,QAFAu3D,EAEA,GACAjoE,KAAAkD,SACA,IAGAlD,KAAAioE,gBACAj2D,EAAAhS,KAAAgoE,OAAAC,IACAzvC,MAAAxmB,EAAAtB,OAAAxN,GACA,KAGAo+D,EAjEA,GAoEAD,EAAA,WACA,SAAAA,EAAA7oB,EAAAC,EAAAyvB,GACA,IAAAH,GAAA,EAAA7jE,EAAAkqB,MAAAhlB,KAAAC,IAAAmvC,EAAAC,IAAA,EACAz4C,KAAAgoE,UAEA,QAAAjqE,EAAA,EAAqBA,EAAAgqE,EAAkBhqE,IAAA,CAGvC,IAFA,IAAAy6B,EAAA,IAAAzzB,WAAAyzC,EAAAC,GAEA5kB,EAAA,EAAAyH,EAAA9C,EAAAj4B,OAA0CszB,EAAAyH,EAAQzH,IAClD2E,EAAA3E,GAAAq0C,EAGA,IAAAl2D,GACAwmC,QACAC,SACAjgB,SAEAx4B,KAAAgoE,OAAA1mE,KAAA0Q,GACAwmC,EAAApvC,KAAAygB,KAAA2uB,EAAA,GACAC,EAAArvC,KAAAygB,KAAA4uB,EAAA,IAgEA,OA5DA4oB,EAAAniE,WACAy1B,MAAA,SAAA52B,EAAA81B,EAAAs0C,GAGA,IAFA,IAAAF,EAAA,EAEAA,EAAAjoE,KAAAgoE,OAAAznE,QAAA,CACA,IAAAyR,EAAAhS,KAAAgoE,OAAAC,GACAv3D,EAAA3S,EAAA81B,EAAA7hB,EAAAwmC,MACAxmC,EAAAtB,QACA,IAAAxN,EAAA8O,EAAAwmB,MAAA9nB,GAEA,SAAAxN,EACA,MAGA,GAAAA,EAAAilE,EAGA,OAFAnoE,KAAAioE,eACAjoE,KAAAooE,mBACA,EAGArqE,IAAA,EACA81B,IAAA,EACAo0C,IAIA,OADAjoE,KAAAioE,eAAA,GACA,GAEA1G,eAAA,SAAA4G,GACA,IAAAn2D,EAAAhS,KAAAgoE,OAAAhoE,KAAAioE,cACAj2D,EAAAwmB,MAAAxmB,EAAAtB,OAAAy3D,EAAA,EACAnoE,KAAAooE,mBAEAA,gBAAA,WAKA,IAJA,IAAAC,EAAAroE,KAAAioE,aACAj2D,EAAAhS,KAAAgoE,OAAAK,GACAC,EAAAt2D,EAAAwmB,MAAAxmB,EAAAtB,SAEA23D,GAAA,IACAr2D,EAAAhS,KAAAgoE,OAAAK,IACA7vC,MAAAxmB,EAAAtB,OAAA43D,GAGA9G,UAAA,WACA,IAAAyG,EAAAjoE,KAAAioE,aACAj2D,EAAAhS,KAAAgoE,OAAAC,GACA/kE,EAAA8O,EAAAwmB,MAAAxmB,EAAAtB,OAIA,OAHAsB,EAAAwmB,MAAAxmB,EAAAtB,OAAA,QACAu3D,EAEA,KAIAjoE,KAAAioE,gBACAj2D,EAAAhS,KAAAgoE,OAAAC,IACAzvC,MAAAxmB,EAAAtB,OAAAxN,GACA,KAGAm+D,EAnFA,GAsFAwB,EAAA,WACA,IAEA0F,EAAA,IAAAxjE,YAAA,wJACAyjE,EAAA,IAAAzjE,YAAA,wJACA0jE,EAAA,IAAA1jE,YAAA,wJAEA,SAAA89D,EAAArqB,EAAAC,EAAA8iB,EAAAmG,EAAAU,GAGA,IAAAsG,EAFA1oE,KAAAw4C,QACAx4C,KAAAy4C,SAIAiwB,EADA,OAAAnN,EACAkN,EACO,OAAAlN,EACPiN,EAEAD,EAGAvoE,KAAA0oE,oBACA,IAAAC,EAAAnwB,EAAAC,EAGA,IAAA+qB,EAFAxjE,KAAA4oE,sBAAA,IAAA7jE,WAAA4jE,GACA3oE,KAAAsjE,gBAAA,IAAAv+D,WAAA4jE,GAIAnF,EADApB,EAAA,GACA,IAAAhgD,YAAAumD,GACOvG,EAAA,EACP,IAAAxvB,YAAA+1B,GAEA,IAAA5jE,WAAA4jE,GAGA3oE,KAAAwjE,uBACAxjE,KAAA6oE,gBAAA,IAAA9jE,WAAA4jE,GACA,IAAAlF,EAAA,IAAA1+D,WAAA4jE,GAEA,OAAAjH,EACA,QAAA3jE,EAAA,EAAuBA,EAAA4qE,EAAsB5qE,IAC7C0lE,EAAA1lE,GAAA2jE,EAIA1hE,KAAAyjE,cACAzjE,KAAA20B,QAuSA,OApSAkuC,EAAA3jE,WACA8jE,WAAA,SAAA5rB,GACAp3C,KAAAo3C,WAEAziB,MAAA,WACA30B,KAAAq3C,SAAA,IAAAM,UAAA,IACA33C,KAAAq3C,SAAA,KACAr3C,KAAAq3C,SAtDA,IAsDA,GACAr3C,KAAAq3C,SAtDA,IAsDA,GAEAyxB,yBAAA,SAAA3zB,EAAA4zB,EAAAr4D,GACA,IAKA3S,EALA6qE,EAAA5oE,KAAA4oE,sBACApwB,EAAAx4C,KAAAw4C,MACAC,EAAAz4C,KAAAy4C,OACAhH,EAAAs3B,EAAA,EACAxG,EAAAwG,EAAA,EAAAvwB,EAGArD,EAAA,IACAp3C,EAAA2S,EAAA8nC,EAEA/G,IACAm3B,EAAA7qE,EAAA,QAGAwkE,IACAqG,EAAA7qE,EAAA,QAGA6qE,EAAA7qE,IAAA,GAGAo3C,EAAA,EAAAsD,IACA16C,EAAA2S,EAAA8nC,EAEA/G,IACAm3B,EAAA7qE,EAAA,QAGAwkE,IACAqG,EAAA7qE,EAAA,QAGA6qE,EAAA7qE,IAAA,GAGA0zC,IACAm3B,EAAAl4D,EAAA,OAGA6xD,IACAqG,EAAAl4D,EAAA,OAGAk4D,EAAAl4D,IAAA,KAEAuyD,+BAAA,WAeA,IAdA,IAAA7rB,EAAAp3C,KAAAo3C,QACAoB,EAAAx4C,KAAAw4C,MACAC,EAAAz4C,KAAAy4C,OACA+qB,EAAAxjE,KAAAwjE,qBACAF,EAAAtjE,KAAAsjE,gBACAsF,EAAA5oE,KAAA4oE,sBACAC,EAAA7oE,KAAA6oE,gBACAxxB,EAAAr3C,KAAAq3C,SACA2xB,EAAAhpE,KAAA0oE,kBACAjF,EAAAzjE,KAAAyjE,YAKArpB,EAAA,EAAwBA,EAAA3B,EAAa2B,GAAA,EACrC,QAAAvmB,EAAA,EAAyBA,EAAA2kB,EAAW3kB,IAGpC,IAFA,IAAAnjB,EAAA0pC,EAAA5B,EAAA3kB,EAEAo1C,EAAA,EAA4BA,EAAA,EAAQA,IAAAv4D,GAAA8nC,EAAA,CACpC,IAAAz6C,EAAAq8C,EAAA6uB,EAEA,GAAAlrE,GAAA06C,EACA,MAKA,GAFAowB,EAAAn4D,KAfA,GAiBA8yD,EAAA9yD,IAAAk4D,EAAAl4D,GAAA,CAIA,IAAAsoC,EAAAgwB,EAAAJ,EAAAl4D,IAGA,GAFA0mC,EAAAK,QAAAJ,EAAA2B,GAEA,CACA,IAAAnO,EAAA7qC,KAAAkpE,cAAAnrE,EAAA81B,EAAAnjB,GACA4yD,EAAA5yD,GAAAm6B,EACA24B,EAAA9yD,GAAA,EACA1Q,KAAA8oE,yBAAA/qE,EAAA81B,EAAAnjB,GACAm4D,EAAAn4D,IA3BA,EA8BA+yD,EAAA/yD,KACAm4D,EAAAn4D,IAhCA,KAqCAw4D,cAAA,SAAA/zB,EAAA4zB,EAAAr4D,GACA,IAIAy4D,EAAAC,EAAAC,EAAAC,EACAtwB,EAAAuwB,EALA/wB,EAAAx4C,KAAAw4C,MACAC,EAAAz4C,KAAAy4C,OACA+qB,EAAAxjE,KAAAwjE,qBACAF,EAAAtjE,KAAAsjE,gBAGAgG,EAAAP,EAAA,OAAAvF,EAAA9yD,EAAA,GAEAq4D,EAAA,EAAAvwB,GAAA,IAAAgrB,EAAA9yD,EAAA,IACA24D,EAAA/F,EAAA5yD,EAAA,GAIAy4D,EAFAG,EAEA,EAAAD,GADAD,EAAA9F,EAAA5yD,EAAA,IAGA,EAAA24D,KAIAF,EAFSG,EAET,GADAF,EAAA9F,EAAA5yD,EAAA,IACA04D,EAEA,EAGA,IAAAI,EAAA,EAAAL,EA2BA,OA1BAG,EAAAn0B,EAAA,OAAAquB,EAAA9yD,EAAA8nC,GAEArD,EAAA,EAAAsD,GAAA,IAAA+qB,EAAA9yD,EAAA8nC,IACA6wB,EAAA/F,EAAA5yD,EAAA8nC,GAIA2wB,EAFAG,EAEA,EAAAD,GADAD,EAAA9F,EAAA5yD,EAAA8nC,IACAgxB,EAEA,EAAAH,IAAAG,GAIAL,EAFSG,EAET,GADAF,EAAA9F,EAAA5yD,EAAA8nC,IACA4wB,EAAAI,EAEAA,EAGAL,GAAA,GACAnwB,EAAA,EAAAmwB,EACAI,EAAAvpE,KAAAo3C,QAAAK,QAAAz3C,KAAAq3C,SAAA2B,KAEAA,EAAA,EAAAmwB,EACAI,EAAA,EAAAvpE,KAAAo3C,QAAAK,QAAAz3C,KAAAq3C,SAAA2B,IAGAuwB,GAEArG,2BAAA,WAcA,IAbA,IAaAuG,EAbAryB,EAAAp3C,KAAAo3C,QACAoB,EAAAx4C,KAAAw4C,MACAC,EAAAz4C,KAAAy4C,OACA+qB,EAAAxjE,KAAAwjE,qBACAoF,EAAA5oE,KAAA4oE,sBACAvxB,EAAAr3C,KAAAq3C,SACAosB,EAAAzjE,KAAAyjE,YACAoF,EAAA7oE,KAAA6oE,gBAGAtoE,EAAAi4C,EAAAC,EACAixB,EAAA,EAAAlxB,EAEAmxB,EAAA,EAAuCA,EAAAppE,EAAiBopE,EAAAF,EAAA,CACxDA,EAAArgE,KAAAwG,IAAArP,EAAAopE,EAAAD,GAEA,QAAA71C,EAAA,EAAyBA,EAAA2kB,EAAW3kB,IACpC,QAAAnjB,EAAAi5D,EAAA91C,EAAwCnjB,EAAA+4D,EAAmB/4D,GAAA8nC,EAC3D,GAAAgrB,EAAA9yD,IAAA,IAVA,EAUAm4D,EAAAn4D,IAAA,CAIA,IAAAsoC,EAAA,GAEA,OAfA,EAeA6vB,EAAAn4D,IACAm4D,EAAAn4D,IAhBA,EAkBAsoC,EAAA,KADA,IAAA4vB,EAAAl4D,IACA,MAGA,IAAA8mC,EAAAJ,EAAAK,QAAAJ,EAAA2B,GACAwqB,EAAA9yD,GAAA8yD,EAAA9yD,IAAA,EAAA8mC,EACAisB,EAAA/yD,KACAm4D,EAAAn4D,IAzBA,KA8BAyyD,eAAA,WAkBA,IAjBA,IAeAyG,EAfAxyB,EAAAp3C,KAAAo3C,QACAoB,EAAAx4C,KAAAw4C,MACAC,EAAAz4C,KAAAy4C,OACAmwB,EAAA5oE,KAAA4oE,sBACApF,EAAAxjE,KAAAwjE,qBACAF,EAAAtjE,KAAAsjE,gBACAjsB,EAAAr3C,KAAAq3C,SACA2xB,EAAAhpE,KAAA0oE,kBACAjF,EAAAzjE,KAAAyjE,YACAoF,EAAA7oE,KAAA6oE,gBAGAgB,EAAArxB,EACAsxB,EAAA,EAAAtxB,EACAuxB,EAAA,EAAAvxB,EAGA4B,EAAA,EAAwBA,EAAA3B,EAAa2B,EAAAwvB,EAAA,CACrCA,EAAAxgE,KAAAwG,IAAAwqC,EAAA,EAAA3B,GAIA,IAHA,IAAAuxB,EAAA5vB,EAAA5B,EACAyxB,EAAA7vB,EAAA,EAAA3B,EAEA5kB,EAAA,EAAyBA,EAAA2kB,EAAW3kB,IAAA,CACpC,IAKAgX,EALA8+B,EAAAK,EAAAn2C,EAEAo1C,EAAA,EACAv4D,EAAAi5D,EACA5rE,EAAAq8C,EAGA,GANA6vB,GAAA,IAAApB,EAAAc,IAAA,IAAAd,EAAAc,EAAAE,IAAA,IAAAhB,EAAAc,EAAAG,IAAA,IAAAjB,EAAAc,EAAAI,IAAA,IAAAnB,EAAAe,IAAA,IAAAf,EAAAe,EAAAE,IAAA,IAAAjB,EAAAe,EAAAG,IAAA,IAAAlB,EAAAe,EAAAI,GAMA,CAGA,IAFA3yB,EAAAK,QAAAJ,EApRA,IAsRA,CACAosB,EAAAkG,KACAlG,EAAAkG,EAAAE,KACApG,EAAAkG,EAAAG,KACArG,EAAAkG,EAAAI,KACA,SAKA,KAFAd,EAAA7xB,EAAAK,QAAAJ,EA/RA,KA+RA,EAAAD,EAAAK,QAAAJ,EA/RA,OAkSAt5C,EAAAq8C,EAAA6uB,EACAv4D,GAAAu4D,EAAAzwB,GAGA3N,EAAA7qC,KAAAkpE,cAAAnrE,EAAA81B,EAAAnjB,GACA4yD,EAAA5yD,GAAAm6B,EACA24B,EAAA9yD,GAAA,EACA1Q,KAAA8oE,yBAAA/qE,EAAA81B,EAAAnjB,GACAm4D,EAAAn4D,IAzCA,EA0CAA,EAAAi5D,EAEA,QAAAO,EAAA9vB,EAA+B8vB,GAAAnsE,EAASmsE,IAAAx5D,GAAA8nC,EACxCirB,EAAA/yD,KAGAu4D,IAGA,IAAAlrE,EAAAq8C,EAAA6uB,EAA6BlrE,EAAA6rE,EAAW7rE,IAAA2S,GAAA8nC,EACxC,IAAAgrB,EAAA9yD,IAAA,IArDA,EAqDAm4D,EAAAn4D,IAAA,CAIA,IAAAsoC,EAAAgwB,EAAAJ,EAAAl4D,IAGA,IAFA0mC,EAAAK,QAAAJ,EAAA2B,KAGAnO,EAAA7qC,KAAAkpE,cAAAnrE,EAAA81B,EAAAnjB,GACA4yD,EAAA5yD,GAAAm6B,EACA24B,EAAA9yD,GAAA,EACA1Q,KAAA8oE,yBAAA/qE,EAAA81B,EAAAnjB,GACAm4D,EAAAn4D,IAhEA,GAmEA+yD,EAAA/yD,SAKA0yD,wBAAA,WACA,IAAAhsB,EAAAp3C,KAAAo3C,QACAC,EAAAr3C,KAAAq3C,SAGA,SAFAD,EAAAK,QAAAJ,EA5UA,KA4UA,EAAAD,EAAAK,QAAAJ,EA5UA,KA4UA,EAAAD,EAAAK,QAAAJ,EA5UA,KA4UA,EAAAD,EAAAK,QAAAJ,EA5UA,KA+UA,UAAA8f,EAAA,iCAIA0L,EApVA,GAuVAsH,EAAA,WACA,SAAAA,KAsHA,OApHAA,EAAAjrE,UAAAylE,UAAA,SAAAlH,EAAA2M,EAAAxZ,GAGA,IAFA,IAAAyZ,EAAA5M,EAAA,GAEA1/D,EAAA,EAAAymB,EAAAi5C,EAAAl9D,OAA2CxC,EAAAymB,EAAQzmB,IACnDssE,EAAArqE,KAAAsqE,QAAAD,EAAA5M,EAAA1/D,GAAAqsE,EAAAxZ,GAGA,OAAAyZ,GAGAF,EAAAjrE,UAAAqrE,OAAA,SAAAloD,EAAAkM,EAAAkf,GACA,IAAAw7B,EAAA16C,EAAA,EACAi8C,EAAAj8C,EAAA,EACA27C,EAAA37C,EAAAkf,EAAA,EACAg9B,EAAAl8C,EAAAkf,EACAprB,EAAA4mD,KAAA5mD,EAAAmoD,KACAnoD,EAAAooD,KAAApoD,EAAA6nD,KACA7nD,EAAA4mD,KAAA5mD,EAAAmoD,KACAnoD,EAAAooD,KAAApoD,EAAA6nD,KACA7nD,EAAA4mD,KAAA5mD,EAAAmoD,KACAnoD,EAAAooD,KAAApoD,EAAA6nD,KACA7nD,EAAA4mD,GAAA5mD,EAAAmoD,GACAnoD,EAAAooD,GAAApoD,EAAA6nD,IAGAC,EAAAjrE,UAAAorE,QAAA,SAAAD,EAAAK,EAAAN,EAAAxZ,GACA,IAMA7yD,EAAA81B,EAAAoc,EAAAjyC,EAAA2sE,EAAAv6D,EANAw6D,EAAAP,EAAA7xB,MACAqyB,EAAAR,EAAA5xB,OACAqyB,EAAAT,EAAA7xC,MACAggB,EAAAkyB,EAAAlyB,MACAC,EAAAiyB,EAAAjyB,OACAjgB,EAAAkyC,EAAAlyC,MAGA,IAAAyX,EAAA,EAAAlyC,EAAA,EAAwBA,EAAA8sE,EAAc9sE,IAGtC,IAFAC,EAAA,EAAAD,EAAAy6C,EAEA3kB,EAAA,EAAmBA,EAAA+2C,EAAa/2C,IAAAoc,IAAAjyC,GAAA,EAChCw6B,EAAAx6B,GAAA8sE,EAAA76B,GAIA66B,EAAAT,EAAA7xC,MAAA,KACA,IACAuyC,EAAA,IAAAxG,aAAA/rB,EAAA,GAEA,OAAAA,GACA,SAAA4xB,GACA,IAAAh6D,EAAA,EAAA6/B,EAAA,EAA4B7/B,EAAAqoC,EAAYroC,IAAA6/B,GAAAuI,EACxChgB,EAAAyX,IAAA,QAIA,IAAA7/B,EAAA,EAAA6/B,EAAA,EAA0B7/B,EAAAqoC,EAAYroC,IAAA6/B,GAAAuI,EACtCuyB,EAAA37D,IAAAopB,EAAA3oB,SAAAogC,IAAAuI,GAXA,GAYAx4C,KAAAuqE,OAAAQ,EAZA,EAYAvyB,GACAx4C,KAAA6yB,OAAAk4C,EAbA,EAaAvyB,GACAhgB,EAAAppB,IAAA27D,EAAAl7D,SAdA,IAcA2oC,GAAAvI,GAIA,IAAA+6B,EAAA,GACAC,KAEA,IAAAltE,EAAA,EAAiBA,EAAAitE,EAAgBjtE,IACjCktE,EAAA3pE,KAAA,IAAAijE,aAAA9rB,EAAA,IAGA,IAAA/1B,EACAwoD,EAAA,EAGA,GAFAb,EA3BA,EA2BA5xB,EAEA,IAAAA,GACA,SAAAmY,GACA,IAAA+Z,EAAA,EAAqBA,EAAAnyB,EAAWmyB,IAChCnyC,EAAAmyC,IAAA,QAIA,IAAAA,EAAA,EAAmBA,EAAAnyB,EAAWmyB,IAAA,CAC9B,OAAAO,EAAA,CAGA,IAFAF,EAAA5hE,KAAAwG,IAAA4oC,EAAAmyB,EAAAK,GAEA/6B,EAAA06B,EAAA3sE,EAxCA,EAwC0CA,EAAAqsE,EAAQp6B,GAAAuI,EAAAx6C,IAClD,IAAA0kB,EAAA,EAAyBA,EAAAsoD,EAAgBtoD,IACzCuoD,EAAAvoD,GAAA1kB,GAAAw6B,EAAAyX,EAAAvtB,GAIAwoD,EAAAF,EAIA,IAAA3oD,EAAA4oD,IADAC,GAKA,GAHAlrE,KAAAuqE,OAAAloD,EAnDA,EAmDAo2B,GACAz4C,KAAA6yB,OAAAxQ,EApDA,EAoDAo2B,GAEA,IAAAyyB,EAGA,IAFAj7B,EAAA06B,EAAAK,EAAA,EAEAhtE,EAzDA,EAyDmCA,EAAAqsE,EAAQp6B,GAAAuI,EAAAx6C,IAC3C,IAAA0kB,EAAA,EAAyBA,EAAAsoD,EAAgBtoD,IACzC8V,EAAAyX,EAAAvtB,GAAAuoD,EAAAvoD,GAAA1kB,GAOA,OACAw6C,QACAC,SACAjgB,UAIA2xC,EAvHA,GA0HA9F,EAAA,WACA,SAAAA,IACA8F,EAAAjsE,KAAA8B,MAwFA,OArFAqkE,EAAAnlE,UAAAT,OAAA6E,OAAA6mE,EAAAjrE,WAEAmlE,EAAAnlE,UAAA2zB,OAAA,SAAAxE,EAAAE,EAAAhuB,GACA,IAEAszB,EAAA/0B,EAAAqsE,EAAAptC,EAFAp9B,EAAAJ,GAAA,EAGA6qE,GAAA,kBACAC,GAAA,iBACAC,EAAA,iBACAnJ,EAAA,iBACAvuB,EAAA,kBAIA,IAFA/f,GARAtF,GAAA,GAQA,EAEAzvB,EAAA6B,EAAA,EAAuB7B,IAAK+0B,GAAA,EAC5BxF,EAAAwF,IAJA,kBAUA,IAFAs3C,EAAAhJ,EAAA9zC,GADAwF,EAAAtF,EAAA,GACA,GAEAzvB,EAAA6B,EAAA,EAAuB7B,MACvBi/B,EAAAokC,EAAA9zC,EAAAwF,EAAA,GACAxF,EAAAwF,GAAA+f,EAAAvlB,EAAAwF,GAAAs3C,EAAAptC,EAEAj/B,KAJ4B+0B,GAAA,EAM5Bs3C,EAAAhJ,EAAA9zC,GADAwF,GAAA,GACA,GACAxF,EAAAwF,GAAA+f,EAAAvlB,EAAAwF,GAAAs3C,EAAAptC,EASA,IAFAotC,EAAAG,EAAAj9C,GADAwF,EAAAtF,EAAA,GACA,GAEAzvB,EAAA6B,EAAA,EAAuB7B,MACvBi/B,EAAAutC,EAAAj9C,EAAAwF,EAAA,GACAxF,EAAAwF,IAAAs3C,EAAAptC,EAEAj/B,KAJ4B+0B,GAAA,EAM5Bs3C,EAAAG,EAAAj9C,GADAwF,GAAA,GACA,GACAxF,EAAAwF,IAAAs3C,EAAAptC,EASA,IAFAotC,EAAAE,EAAAh9C,GADAwF,EAAAtF,GACA,GAEAzvB,EAAA6B,EAAA,EAAuB7B,MACvBi/B,EAAAstC,EAAAh9C,EAAAwF,EAAA,GACAxF,EAAAwF,IAAAs3C,EAAAptC,EAEAj/B,KAJ4B+0B,GAAA,EAM5Bs3C,EAAAE,EAAAh9C,GADAwF,GAAA,GACA,GACAxF,EAAAwF,IAAAs3C,EAAAptC,EAMA,OAAAp9B,EAIA,IAFAwqE,EAAAC,EAAA/8C,GADAwF,EAAAtF,EAAA,GACA,GAEAzvB,EAAA6B,EAAqB7B,MACrBi/B,EAAAqtC,EAAA/8C,EAAAwF,EAAA,GACAxF,EAAAwF,IAAAs3C,EAAAptC,EAEAj/B,KAJ0B+0B,GAAA,EAM1Bs3C,EAAAC,EAAA/8C,GADAwF,GAAA,GACA,GACAxF,EAAAwF,IAAAs3C,EAAAptC,GAQAsmC,EA1FA,GA6FAD,EAAA,WACA,SAAAA,IACA+F,EAAAjsE,KAAA8B,MAmBA,OAhBAokE,EAAAllE,UAAAT,OAAA6E,OAAA6mE,EAAAjrE,WAEAklE,EAAAllE,UAAA2zB,OAAA,SAAAxE,EAAAE,EAAAhuB,GACA,IAEAszB,EAAA/0B,EAFA6B,EAAAJ,GAAA,EAIA,IAAAszB,EAHAtF,GAAA,EAGAzvB,EAAA6B,EAAA,EAAmC7B,IAAK+0B,GAAA,EACxCxF,EAAAwF,IAAAxF,EAAAwF,EAAA,GAAAxF,EAAAwF,EAAA,QAGA,IAAAA,EAAAtF,EAAA,EAAAzvB,EAAA6B,EAAmC7B,IAAK+0B,GAAA,EACxCxF,EAAAwF,IAAAxF,EAAAwF,EAAA,GAAAxF,EAAAwF,EAAA,OAIAuwC,EArBA,GAwBA,OAAA/N,EAlwEA,GAqwEAx4D,EAAAw4D,YAIA,SAAAv4D,EAAAD,EAAAiF,GAEA,aAGArE,OAAAC,eAAAb,EAAA,cACAqF,OAAA,IAEArF,EAAA0tE,gBAAA1tE,EAAA2tE,gBAAA3tE,EAAA4tE,gBAAA5tE,EAAAk5B,aAAAl5B,EAAA6tE,MAAA7tE,EAAA8tE,MAAA9tE,EAAA0iC,uBAAA1iC,EAAA+tE,cAAA/tE,EAAAguE,aAAAhuE,EAAAiuE,kBAAA,EAEA,IAAAloE,EAAAd,EAAA,GAEAe,EAAAf,EAAA,GAEAqlB,EAAArlB,EAAA,IAEA8oE,EAAA,WACA,SAAAA,EAAAroE,GACAvD,KAAAojB,EAAA,EACApjB,KAAA0iB,EAAA,EACA,IACA3kB,EAEAinC,EAHA3lC,EAAA,IAAA0F,WAAA,KAEA8uB,EAAA,EAEAk4C,EAAAxoE,EAAAhD,OAEA,IAAAxC,EAAA,EAAeA,EAAA,MAASA,EACxBsB,EAAAtB,KAGA,IAAAA,EAAA,EAAeA,EAAA,MAASA,EAExB81B,KADAmR,EAAA3lC,EAAAtB,IACAwF,EAAAxF,EAAAguE,GAAA,IACA1sE,EAAAtB,GAAAsB,EAAAw0B,GACAx0B,EAAAw0B,GAAAmR,EAGAhlC,KAAAX,IA8BA,OA3BAusE,EAAA1sE,WACA8sE,aAAA,SAAAlnE,GACA,IAAA/G,EAEAinC,EACAinC,EAFAntE,EAAAgG,EAAAvE,OAGA6iB,EAAApjB,KAAAojB,EACAV,EAAA1iB,KAAA0iB,EACArjB,EAAAW,KAAAX,EACA01D,EAAA,IAAAhwD,WAAAjG,GAEA,IAAAf,EAAA,EAAiBA,EAAAe,IAAOf,EAIxBkuE,EAAA5sE,EADAqjB,KADAsiB,EAAA3lC,EADA+jB,IAAA,QAEA,KAEA/jB,EAAA+jB,GAAA6oD,EACA5sE,EAAAqjB,GAAAsiB,EACA+vB,EAAAh3D,GAAA+G,EAAA/G,GAAAsB,EAAA2lC,EAAAinC,EAAA,KAKA,OAFAjsE,KAAAojB,IACApjB,KAAA0iB,IACAqyC,IAGA6W,EAAA1sE,UAAAgtE,aAAAN,EAAA1sE,UAAA8sE,aACAJ,EAnDA,GAsDA/tE,EAAA+tE,gBAEA,IAAA70C,EAAA,WACA,IAAAh0B,EAAA,IAAAgC,YAAA,8KACAkrC,EAAA,IAAAnC,aAAA,yrBA6EA,OA3EA,SAAAhpC,EAAAypB,EAAAhuB,GACA,IAMAxC,EAAA81B,EAAA/0B,EANAqtE,EAAA,WACAC,GAAA,UACAC,GAAA,WACAC,EAAA,UACAC,EAAAhsE,EAAA,OACAisE,EAAA,IAAAznE,WAAAwnE,GAGA,IAAAxuE,EAAA,EAAeA,EAAAwC,IAAYxC,EAC3ByuE,EAAAzuE,GAAA+G,EAAAypB,KAMA,IAHAi+C,EAAAzuE,KAAA,IACAe,EAAAytE,EAAA,EAEAxuE,EAAAe,GACA0tE,EAAAzuE,KAAA,EAGAyuE,EAAAzuE,KAAAwC,GAAA,MACAisE,EAAAzuE,KAAAwC,GAAA,MACAisE,EAAAzuE,KAAAwC,GAAA,OACAisE,EAAAzuE,KAAAwC,GAAA,OACAisE,EAAAzuE,KAAAwC,IAAA,OACAisE,EAAAzuE,KAAA,EACAyuE,EAAAzuE,KAAA,EACAyuE,EAAAzuE,KAAA,EACA,IAAA0uE,EAAA,IAAA3+B,WAAA,IAEA,IAAA/vC,EAAA,EAAeA,EAAAwuE,GAAkB,CACjC,IAAA14C,EAAA,EAAiBA,EAAA,KAAQA,EAAA91B,GAAA,EACzB0uE,EAAA54C,GAAA24C,EAAAzuE,GAAAyuE,EAAAzuE,EAAA,MAAAyuE,EAAAzuE,EAAA,OAAAyuE,EAAAzuE,EAAA,OAGA,IAIA2uE,EACAjqD,EALAW,EAAA+oD,EACAzpD,EAAA0pD,EACAhuE,EAAAiuE,EACAhuE,EAAAiuE,EAIA,IAAAz4C,EAAA,EAAiBA,EAAA,KAAQA,EAAA,CACzBA,EAAA,IACA64C,EAAAhqD,EAAAtkB,GAAAskB,EAAArkB,EACAokB,EAAAoR,GACSA,EAAA,IACT64C,EAAAruE,EAAAqkB,GAAArkB,EAAAD,EACAqkB,EAAA,EAAAoR,EAAA,MACSA,EAAA,IACT64C,EAAAhqD,EAAAtkB,EAAAC,EACAokB,EAAA,EAAAoR,EAAA,OAEA64C,EAAAtuE,GAAAskB,GAAArkB,GACAokB,EAAA,EAAAoR,EAAA,IAGA,IAAAmR,EAAA3mC,EACAsuE,EAAAvpD,EAAAspD,EAAAz8B,EAAApc,GAAA44C,EAAAhqD,GAAA,EACA7Y,EAAA7G,EAAA8wB,GACAx1B,EAAAD,EACAA,EAAAskB,EACAA,KAAAiqD,GAAA/iE,EAAA+iE,IAAA,GAAA/iE,GAAA,EACAwZ,EAAA4hB,EAGAmnC,IAAA/oD,EAAA,EACAgpD,IAAA1pD,EAAA,EACA2pD,IAAAjuE,EAAA,EACAkuE,IAAAjuE,EAAA,EAGA,WAAA0G,YAAA,IAAAonE,KAAA,MAAAA,GAAA,OAAAA,IAAA,WAAAC,KAAA,MAAAA,GAAA,OAAAA,IAAA,WAAAC,KAAA,MAAAA,GAAA,OAAAA,IAAA,WAAAC,KAAA,MAAAA,GAAA,OAAAA,IAAA,UA5EA,GAkFAzuE,EAAAk5B,eAEA,IAAA61C,EAAA,WACA,SAAAA,EAAAC,EAAAC,GACA9sE,KAAA+sE,KAAA,EAAAF,EACA7sE,KAAAgtE,IAAA,EAAAF,EA+EA,OA5EAF,EAAA1tE,WACA+tE,IAAA,SAAAC,GACAltE,KAAA+sE,MAAAG,EAAAH,KACA/sE,KAAAgtE,KAAAE,EAAAF,KAEAG,IAAA,SAAAD,GACAltE,KAAA+sE,MAAAG,EAAAH,KACA/sE,KAAAgtE,KAAAE,EAAAF,KAEAI,GAAA,SAAAF,GACAltE,KAAA+sE,MAAAG,EAAAH,KACA/sE,KAAAgtE,KAAAE,EAAAF,KAEAK,WAAA,SAAAC,GACAA,GAAA,IACAttE,KAAAgtE,IAAAhtE,KAAA+sE,OAAAO,EAAA,KACAttE,KAAA+sE,KAAA,IAEA/sE,KAAAgtE,IAAAhtE,KAAAgtE,MAAAM,EAAAttE,KAAA+sE,MAAA,GAAAO,EACAttE,KAAA+sE,KAAA/sE,KAAA+sE,OAAAO,EAAA,IAGAC,UAAA,SAAAD,GACAA,GAAA,IACAttE,KAAA+sE,KAAA/sE,KAAAgtE,KAAAM,EAAA,GACAttE,KAAAgtE,IAAA,IAEAhtE,KAAA+sE,KAAA/sE,KAAA+sE,MAAAO,EAAAttE,KAAAgtE,MAAA,GAAAM,EACAttE,KAAAgtE,IAAAhtE,KAAAgtE,KAAAM,IAGAE,YAAA,SAAAF,GACA,IAAAN,EAAAD,EAEA,GAAAO,GACAP,EAAA/sE,KAAAgtE,IACAA,EAAAhtE,KAAA+sE,OAEAC,EAAAhtE,KAAAgtE,IACAD,EAAA/sE,KAAA+sE,MAGAO,GAAA,GACAttE,KAAAgtE,QAAAM,EAAAP,GAAA,GAAAO,EACAttE,KAAA+sE,SAAAO,EAAAN,GAAA,GAAAM,GAEAG,IAAA,WACAztE,KAAA+sE,MAAA/sE,KAAA+sE,KACA/sE,KAAAgtE,KAAAhtE,KAAAgtE,KAEAU,IAAA,SAAAR,GACA,IAAAS,GAAA3tE,KAAAgtE,MAAA,IAAAE,EAAAF,MAAA,GACAY,GAAA5tE,KAAA+sE,OAAA,IAAAG,EAAAH,OAAA,GAEAY,EAAA,aACAC,GAAA,GAGA5tE,KAAAgtE,IAAA,EAAAW,EACA3tE,KAAA+sE,KAAA,EAAAa,GAEAC,OAAA,SAAAljE,EAAA4jB,GACA5jB,EAAA4jB,GAAAvuB,KAAA+sE,OAAA,OACApiE,EAAA4jB,EAAA,GAAAvuB,KAAA+sE,MAAA,OACApiE,EAAA4jB,EAAA,GAAAvuB,KAAA+sE,MAAA,MACApiE,EAAA4jB,EAAA,OAAAvuB,KAAA+sE,KACApiE,EAAA4jB,EAAA,GAAAvuB,KAAAgtE,MAAA,OACAriE,EAAA4jB,EAAA,GAAAvuB,KAAAgtE,KAAA,OACAriE,EAAA4jB,EAAA,GAAAvuB,KAAAgtE,KAAA,MACAriE,EAAA4jB,EAAA,OAAAvuB,KAAAgtE,KAEAc,OAAA,SAAAZ,GACAltE,KAAA+sE,KAAAG,EAAAH,KACA/sE,KAAAgtE,IAAAE,EAAAF,MAGAJ,EAlFA,GAqFAnB,EAAA,WACA,SAAAsC,EAAA1/C,EAAAvvB,GACA,OAAAuvB,IAAAvvB,EAAAuvB,GAAA,GAAAvvB,EAGA,SAAA6vB,EAAAN,EAAA2pB,EAAAiY,GACA,OAAA5hC,EAAA2pB,GAAA3pB,EAAA4hC,EAGA,SAAA+d,EAAA3/C,EAAA2pB,EAAAiY,GACA,OAAA5hC,EAAA2pB,EAAA3pB,EAAA4hC,EAAAjY,EAAAiY,EAGA,SAAAge,EAAA5/C,GACA,OAAA0/C,EAAA1/C,EAAA,GAAA0/C,EAAA1/C,EAAA,IAAA0/C,EAAA1/C,EAAA,IAGA,SAAA6/C,EAAA7/C,GACA,OAAA0/C,EAAA1/C,EAAA,GAAA0/C,EAAA1/C,EAAA,IAAA0/C,EAAA1/C,EAAA,IAGA,SAAA8/C,EAAA9/C,GACA,OAAA0/C,EAAA1/C,EAAA,GAAA0/C,EAAA1/C,EAAA,IAAAA,IAAA,EAOA,IAAA4hB,GAAA,irBAmFA,OAjFA,SAAAnrC,EAAAypB,EAAAhuB,GACA,IAUAxC,EAAA81B,EAAA/0B,EAVAqtE,EAAA,WACAC,EAAA,WACAC,EAAA,WACAC,EAAA,WACA8B,EAAA,WACAC,EAAA,WACAC,EAAA,UACAC,EAAA,WACAhC,EAAA,GAAAnjE,KAAAygB,MAAAtpB,EAAA,OACAisE,EAAA,IAAAznE,WAAAwnE,GAGA,IAAAxuE,EAAA,EAAeA,EAAAwC,IAAYxC,EAC3ByuE,EAAAzuE,GAAA+G,EAAAypB,KAMA,IAHAi+C,EAAAzuE,KAAA,IACAe,EAAAytE,EAAA,EAEAxuE,EAAAe,GACA0tE,EAAAzuE,KAAA,EAGAyuE,EAAAzuE,KAAA,EACAyuE,EAAAzuE,KAAA,EACAyuE,EAAAzuE,KAAA,EACAyuE,EAAAzuE,KAAAwC,IAAA,OACAisE,EAAAzuE,KAAAwC,GAAA,OACAisE,EAAAzuE,KAAAwC,GAAA,OACAisE,EAAAzuE,KAAAwC,GAAA,MACAisE,EAAAzuE,KAAAwC,GAAA,MACA,IAtCA8tB,EAsCAo+C,EAAA,IAAArqD,YAAA,IAEA,IAAArkB,EAAA,EAAeA,EAAAwuE,GAAkB,CACjC,IAAA14C,EAAA,EAAiBA,EAAA,KAAQA,EACzB44C,EAAA54C,GAAA24C,EAAAzuE,IAAA,GAAAyuE,EAAAzuE,EAAA,OAAAyuE,EAAAzuE,EAAA,MAAAyuE,EAAAzuE,EAAA,GACAA,GAAA,EAGA,IAAA81B,EAAA,GAAkBA,EAAA,KAAQA,EAC1B44C,EAAA54C,GAAA,GA9CAk6C,EADA1/C,EA+CAo+C,EAAA54C,EAAA,GA9CA,IAAAk6C,EAAA1/C,EAAA,IAAAA,IAAA,IA8CAo+C,EAAA54C,EAAA,GAAAs6C,EAAA1B,EAAA54C,EAAA,KAAA44C,EAAA54C,EAAA,IAGA,IAQA26C,EACA9wB,EATAt6B,EAAA+oD,EACAzpD,EAAA0pD,EACAhuE,EAAAiuE,EACAhuE,EAAAiuE,EACAvsE,EAAAquE,EACA1B,EAAA2B,EACA5rD,EAAA6rD,EACA/e,EAAAgf,EAIA,IAAA16C,EAAA,EAAiBA,EAAA,KAAQA,EACzB26C,EAAAjf,EAAA2e,EAAAnuE,GAAA4uB,EAAA5uB,EAAA2sE,EAAAjqD,GAAAwtB,EAAApc,GAAA44C,EAAA54C,GACA6pB,EAAAuwB,EAAA7qD,GAAA4qD,EAAA5qD,EAAAV,EAAAtkB,GACAmxD,EAAA9sC,EACAA,EAAAiqD,EACAA,EAAA3sE,EACAA,EAAA1B,EAAAmwE,EAAA,EACAnwE,EAAAD,EACAA,EAAAskB,EACAA,EAAAU,EACAA,EAAAorD,EAAA9wB,EAAA,EAGAyuB,IAAA/oD,EAAA,EACAgpD,IAAA1pD,EAAA,EACA2pD,IAAAjuE,EAAA,EACAkuE,IAAAjuE,EAAA,EACA+vE,IAAAruE,EAAA,EACAsuE,IAAA3B,EAAA,EACA4B,IAAA7rD,EAAA,EACA8rD,IAAAhf,EAAA,EAGA,WAAAxqD,YAAAonE,GAAA,OAAAA,GAAA,OAAAA,GAAA,UAAAA,EAAAC,GAAA,OAAAA,GAAA,OAAAA,GAAA,UAAAA,EAAAC,GAAA,OAAAA,GAAA,OAAAA,GAAA,UAAAA,EAAAC,GAAA,OAAAA,GAAA,OAAAA,GAAA,UAAAA,EAAA8B,GAAA,OAAAA,GAAA,OAAAA,GAAA,UAAAA,EAAAC,GAAA,OAAAA,GAAA,OAAAA,GAAA,UAAAA,EAAAC,GAAA,OAAAA,GAAA,OAAAA,GAAA,UAAAA,EAAAC,GAAA,OAAAA,GAAA,OAAAA,GAAA,UAAAA,KA7GA,GAmHA1wE,EAAA4tE,kBAEA,IAAAF,EAAA,WACA,SAAA58C,EAAA1K,EAAAoK,EAAA2pB,EAAAiY,EAAAjrB,GACA/gB,EAAA6pD,OAAAz/C,GACApK,EAAAgpD,IAAAj1B,GACAhT,EAAA8oC,OAAAz/C,GACA2W,EAAAyoC,MACAzoC,EAAAioC,IAAAhd,GACAhsC,EAAAkpD,IAAAnoC,GAGA,SAAAgpC,EAAA/pD,EAAAoK,EAAA2pB,EAAAiY,EAAAjrB,GACA/gB,EAAA6pD,OAAAz/C,GACApK,EAAAgpD,IAAAj1B,GACAhT,EAAA8oC,OAAAz/C,GACA2W,EAAAioC,IAAAhd,GACAhsC,EAAAkpD,IAAAnoC,GACAA,EAAA8oC,OAAA91B,GACAhT,EAAAioC,IAAAhd,GACAhsC,EAAAkpD,IAAAnoC,GAGA,SAAAipC,EAAAhqD,EAAAoK,EAAA2W,GACA/gB,EAAA6pD,OAAAz/C,GACApK,EAAAupD,YAAA,IACAxoC,EAAA8oC,OAAAz/C,GACA2W,EAAAwoC,YAAA,IACAvpD,EAAAkpD,IAAAnoC,GACAA,EAAA8oC,OAAAz/C,GACA2W,EAAAwoC,YAAA,IACAvpD,EAAAkpD,IAAAnoC,GAGA,SAAAkpC,EAAAjqD,EAAAoK,EAAA2W,GACA/gB,EAAA6pD,OAAAz/C,GACApK,EAAAupD,YAAA,IACAxoC,EAAA8oC,OAAAz/C,GACA2W,EAAAwoC,YAAA,IACAvpD,EAAAkpD,IAAAnoC,GACAA,EAAA8oC,OAAAz/C,GACA2W,EAAAwoC,YAAA,IACAvpD,EAAAkpD,IAAAnoC,GAGA,SAAAmpC,EAAAlqD,EAAAoK,EAAA2W,GACA/gB,EAAA6pD,OAAAz/C,GACApK,EAAAupD,YAAA,GACAxoC,EAAA8oC,OAAAz/C,GACA2W,EAAAwoC,YAAA,GACAvpD,EAAAkpD,IAAAnoC,GACAA,EAAA8oC,OAAAz/C,GACA2W,EAAAqoC,WAAA,GACAppD,EAAAkpD,IAAAnoC,GAGA,SAAAypC,EAAAxqD,EAAAoK,EAAA2W,GACA/gB,EAAA6pD,OAAAz/C,GACApK,EAAAupD,YAAA,IACAxoC,EAAA8oC,OAAAz/C,GACA2W,EAAAwoC,YAAA,IACAvpD,EAAAkpD,IAAAnoC,GACAA,EAAA8oC,OAAAz/C,GACA2W,EAAAqoC,WAAA,GACAppD,EAAAkpD,IAAAnoC,GAGA,IAAAiL,GAAA,IAAA28B,EAAA,2BAAAA,EAAA,0BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,0BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,0BAAAA,EAAA,0BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,0BAAAA,EAAA,0BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,0BAAAA,EAAA,0BAAAA,EAAA,0BAAAA,EAAA,0BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,0BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,0BAAAA,EAAA,yBAAAA,EAAA,0BAAAA,EAAA,0BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,0BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,0BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,yBAAAA,EAAA,0BAAAA,EAAA,0BAAAA,EAAA,0BAAAA,EAAA,0BAAAA,EAAA,0BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,0BAAAA,EAAA,0BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,0BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,0BAAAA,EAAA,0BAAAA,EAAA,0BAAAA,EAAA,yBAAAA,EAAA,yBAAAA,EAAA,0BAAAA,EAAA,0BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,2BAAAA,EAAA,0BAAAA,EAAA,wBAkKA,OAhKA,SAAA9nE,EAAAypB,EAAAhuB,EAAAmuE,GAEA,IAAAvC,EAAAC,EAAAC,EAAAC,EAAA8B,EAAAC,EAAAC,EAAAC,GADAG,QAaAvC,EAAA,IAAAS,EAAA,uBACAR,EAAA,IAAAQ,EAAA,sBACAP,EAAA,IAAAO,EAAA,sBACAN,EAAA,IAAAM,EAAA,sBACAwB,EAAA,IAAAxB,EAAA,uBACAyB,EAAA,IAAAzB,EAAA,uBACA0B,EAAA,IAAA1B,EAAA,uBACA2B,EAAA,IAAA3B,EAAA,yBAhBAT,EAAA,IAAAS,EAAA,uBACAR,EAAA,IAAAQ,EAAA,uBACAP,EAAA,IAAAO,EAAA,uBACAN,EAAA,IAAAM,EAAA,uBACAwB,EAAA,IAAAxB,EAAA,uBACAyB,EAAA,IAAAzB,EAAA,sBACA0B,EAAA,IAAA1B,EAAA,sBACA2B,EAAA,IAAA3B,EAAA,uBAYA,IAEA7uE,EAAA81B,EAAA/0B,EAFAytE,EAAA,IAAAnjE,KAAAygB,MAAAtpB,EAAA,SACAisE,EAAA,IAAAznE,WAAAwnE,GAGA,IAAAxuE,EAAA,EAAeA,EAAAwC,IAAYxC,EAC3ByuE,EAAAzuE,GAAA+G,EAAAypB,KAMA,IAHAi+C,EAAAzuE,KAAA,IACAe,EAAAytE,EAAA,GAEAxuE,EAAAe,GACA0tE,EAAAzuE,KAAA,EAGAyuE,EAAAzuE,KAAA,EACAyuE,EAAAzuE,KAAA,EACAyuE,EAAAzuE,KAAA,EACAyuE,EAAAzuE,KAAA,EACAyuE,EAAAzuE,KAAA,EACAyuE,EAAAzuE,KAAA,EACAyuE,EAAAzuE,KAAA,EACAyuE,EAAAzuE,KAAA,EACAyuE,EAAAzuE,KAAA,EACAyuE,EAAAzuE,KAAA,EACAyuE,EAAAzuE,KAAA,EACAyuE,EAAAzuE,KAAAwC,IAAA,OACAisE,EAAAzuE,KAAAwC,GAAA,OACAisE,EAAAzuE,KAAAwC,GAAA,OACAisE,EAAAzuE,KAAAwC,GAAA,MACAisE,EAAAzuE,KAAAwC,GAAA,MACA,IAAAksE,EAAA,IAAArrE,MAAA,IAEA,IAAArD,EAAA,EAAeA,EAAA,GAAQA,IACvB0uE,EAAA1uE,GAAA,IAAA6uE,EAAA,KAGA,IAYA+B,EA8DA1qD,EA1EAb,EAAA,IAAAwpD,EAAA,KACAlqD,EAAA,IAAAkqD,EAAA,KACAxuE,EAAA,IAAAwuE,EAAA,KACAvuE,EAAA,IAAAuuE,EAAA,KACA7sE,EAAA,IAAA6sE,EAAA,KACAF,EAAA,IAAAE,EAAA,KACAnqD,EAAA,IAAAmqD,EAAA,KACArd,EAAA,IAAAqd,EAAA,KACA4B,EAAA,IAAA5B,EAAA,KACAlvB,EAAA,IAAAkvB,EAAA,KACAgC,EAAA,IAAAhC,EAAA,KACAX,EAAA,IAAAW,EAAA,KAGA,IAAA7uE,EAAA,EAAeA,EAAAwuE,GAAkB,CACjC,IAAA14C,EAAA,EAAiBA,EAAA,KAAQA,EACzB44C,EAAA54C,GAAAk5C,KAAAP,EAAAzuE,IAAA,GAAAyuE,EAAAzuE,EAAA,OAAAyuE,EAAAzuE,EAAA,MAAAyuE,EAAAzuE,EAAA,GACA0uE,EAAA54C,GAAAm5C,IAAAR,EAAAzuE,EAAA,OAAAyuE,EAAAzuE,EAAA,OAAAyuE,EAAAzuE,EAAA,MAAAyuE,EAAAzuE,EAAA,GACAA,GAAA,EAGA,IAAA81B,EAAA,GAAkBA,EAAA,KAAQA,EAE1B46C,EADAE,EAAAlC,EAAA54C,GACA44C,EAAA54C,EAAA,GAAAo4C,GACA0C,EAAAjB,IAAAjB,EAAA54C,EAAA,IACAs6C,EAAAS,EAAAnC,EAAA54C,EAAA,IAAAo4C,GACA0C,EAAAjB,IAAAkB,GACAD,EAAAjB,IAAAjB,EAAA54C,EAAA,KAYA,IATAzQ,EAAA0qD,OAAA3B,GACAzpD,EAAAorD,OAAA1B,GACAhuE,EAAA0vE,OAAAzB,GACAhuE,EAAAyvE,OAAAxB,GACAvsE,EAAA+tE,OAAAM,GACA1B,EAAAoB,OAAAO,GACA5rD,EAAAqrD,OAAAQ,GACA/e,EAAAue,OAAAS,GAEA16C,EAAA,EAAiBA,EAAA,KAAQA,EACzB26C,EAAAV,OAAAve,GACA2e,EAAAU,EAAA7uE,EAAAksE,GACAuC,EAAAd,IAAAkB,GACAjgD,EAAAigD,EAAA7uE,EAAA2sE,EAAAjqD,EAAAwpD,GACAuC,EAAAd,IAAAkB,GACAJ,EAAAd,IAAAz9B,EAAApc,IACA26C,EAAAd,IAAAjB,EAAA54C,IACAo6C,EAAAvwB,EAAAt6B,EAAA6oD,GACA+B,EAAAY,EAAAxrD,EAAAV,EAAAtkB,EAAA6tE,GACAvuB,EAAAgwB,IAAAkB,GACAD,EAAApf,EACAA,EAAA9sC,EACAA,EAAAiqD,EACAA,EAAA3sE,EACA1B,EAAAqvE,IAAAc,GACAzuE,EAAA1B,EACAA,EAAAD,EACAA,EAAAskB,EACAA,EAAAU,EACAurD,EAAAb,OAAAU,GACAG,EAAAjB,IAAAhwB,GACAt6B,EAAAurD,EAGAxC,EAAAuB,IAAAtqD,GACAgpD,EAAAsB,IAAAhrD,GACA2pD,EAAAqB,IAAAtvE,GACAkuE,EAAAoB,IAAArvE,GACA+vE,EAAAV,IAAA3tE,GACAsuE,EAAAX,IAAAhB,GACA4B,EAAAZ,IAAAjrD,GACA8rD,EAAAb,IAAAne,GAyBA,OApBAmf,GAWAzqD,EAAA,IAAAlf,WAAA,IACAonE,EAAA0B,OAAA5pD,EAAA,GACAmoD,EAAAyB,OAAA5pD,EAAA,GACAooD,EAAAwB,OAAA5pD,EAAA,IACAqoD,EAAAuB,OAAA5pD,EAAA,IACAmqD,EAAAP,OAAA5pD,EAAA,IACAoqD,EAAAR,OAAA5pD,EAAA,MAhBAA,EAAA,IAAAlf,WAAA,IACAonE,EAAA0B,OAAA5pD,EAAA,GACAmoD,EAAAyB,OAAA5pD,EAAA,GACAooD,EAAAwB,OAAA5pD,EAAA,IACAqoD,EAAAuB,OAAA5pD,EAAA,IACAmqD,EAAAP,OAAA5pD,EAAA,IACAoqD,EAAAR,OAAA5pD,EAAA,IACAqqD,EAAAT,OAAA5pD,EAAA,IACAsqD,EAAAV,OAAA5pD,EAAA,KAWAA,GAhOA,GAsOApmB,EAAA0tE,kBAEA,IAAAC,EAAA,WAKA,OAJA,SAAA1mE,EAAAypB,EAAAhuB,GACA,OAAAgrE,EAAAzmE,EAAAypB,EAAAhuB,GAAA,IAFA,GAQA1C,EAAA2tE,kBAEA,IAAAqD,EAAA,WACA,SAAAA,KAOA,OALAA,EAAA3vE,WACAgtE,aAAA,SAAApnE,GACA,OAAAA,IAGA+pE,EARA,SAWAC,EACAtqE,cACAxE,KAAA+hB,cAAA+sD,IACA,EAAAlrE,EAAAmP,aAAA,oCAGA/S,KAAA+uE,GAAA,IAAAhqE,YAAA,o5BACA/E,KAAAgvE,OAAA,IAAAjqE,YAAA,o5BACA/E,KAAAivE,KAAA,IAAA7sD,aAAA,0rFACApiB,KAAAkvE,QAAA,IAAAnqE,WAAA,KAEA,QAAAhH,EAAA,EAAmBA,EAAA,IAASA,IAE5BiC,KAAAkvE,QAAAnxE,GADAA,EAAA,IACAA,GAAA,EAEAA,GAAA,KAIAiC,KAAAqiB,OAAA,IAAAtd,WAAA,IACA/E,KAAAmvE,eAAA,EAGA3qE,WAAA4qE,IACA,EAAAxrE,EAAAmP,aAAA,8CAGAvO,SAAAytC,EAAA1uC,GACA,IAAAJ,EAAAwnE,EAAAv6D,EACA,MAAAi3B,EAAA,IAAAtiC,WAAA,IACAsiC,EAAAj4B,IAAA6iC,GAEA,QAAApe,EAAA,EAAAoc,EAAAjwC,KAAAqvE,SAAsCx7C,EAAA,KAAQA,IAAAoc,EAC9C5I,EAAAxT,IAAAtwB,EAAA0sC,GAGA,QAAAlyC,EAAAiC,KAAAsvE,oBAAA,EAA8CvxE,GAAA,IAAQA,EAAA,CACtDoF,EAAAkkC,EAAA,IACAA,EAAA,IAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAlkC,EACAA,EAAAkkC,EAAA,IACAsjC,EAAAtjC,EAAA,IACAA,EAAA,IAAAA,EAAA,GACAA,EAAA,IAAAA,EAAA,GACAA,EAAA,GAAAlkC,EACAkkC,EAAA,GAAAsjC,EACAxnE,EAAAkkC,EAAA,IACAsjC,EAAAtjC,EAAA,IACAj3B,EAAAi3B,EAAA,GACAA,EAAA,IAAAA,EAAA,GACAA,EAAA,IAAAlkC,EACAkkC,EAAA,GAAAsjC,EACAtjC,EAAA,GAAAj3B,EAEA,QAAAyjB,EAAA,EAAqBA,EAAA,KAAQA,EAC7BwT,EAAAxT,GAAA7zB,KAAAgvE,OAAA3nC,EAAAxT,IAGA,QAAAA,EAAA,EAAAoc,EAAA,GAAAlyC,EAAiC81B,EAAA,KAAQA,IAAAoc,EACzC5I,EAAAxT,IAAAtwB,EAAA0sC,GAGA,QAAApc,EAAA,EAAqBA,EAAA,GAAQA,GAAA,GAC7B,MAAA07C,EAAAvvE,KAAAivE,KAAA5nC,EAAAxT,IACA27C,EAAAxvE,KAAAivE,KAAA5nC,EAAAxT,EAAA,IACA4pB,EAAAz9C,KAAAivE,KAAA5nC,EAAAxT,EAAA,IACA47C,EAAAzvE,KAAAivE,KAAA5nC,EAAAxT,EAAA,IACA1wB,EAAAosE,EAAAC,IAAA,EAAAA,GAAA,GAAA/xB,IAAA,GAAAA,GAAA,GAAAgyB,IAAA,GAAAA,GAAA,EACApoC,EAAAxT,GAAA1wB,IAAA,OACAkkC,EAAAxT,EAAA,GAAA1wB,GAAA,OACAkkC,EAAAxT,EAAA,GAAA1wB,GAAA,MACAkkC,EAAAxT,EAAA,OAAA1wB,GAIAA,EAAAkkC,EAAA,IACAA,EAAA,IAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAlkC,EACAA,EAAAkkC,EAAA,IACAsjC,EAAAtjC,EAAA,IACAA,EAAA,IAAAA,EAAA,GACAA,EAAA,IAAAA,EAAA,GACAA,EAAA,GAAAlkC,EACAkkC,EAAA,GAAAsjC,EACAxnE,EAAAkkC,EAAA,IACAsjC,EAAAtjC,EAAA,IACAj3B,EAAAi3B,EAAA,GACAA,EAAA,IAAAA,EAAA,GACAA,EAAA,IAAAlkC,EACAkkC,EAAA,GAAAsjC,EACAtjC,EAAA,GAAAj3B,EAEA,QAAAyjB,EAAA,EAAmBA,EAAA,KAAQA,EAC3BwT,EAAAxT,GAAA7zB,KAAAgvE,OAAA3nC,EAAAxT,IACAwT,EAAAxT,IAAAtwB,EAAAswB,GAGA,OAAAwT,EAGA7iC,SAAAytC,EAAA1uC,GACA,MAAAlE,EAAAW,KAAA+uE,GACA,IAAA5rE,EAAAwnE,EAAAv6D,EACA,MAAAi3B,EAAA,IAAAtiC,WAAA,IACAsiC,EAAAj4B,IAAA6iC,GAEA,QAAApe,EAAA,EAAmBA,EAAA,KAAQA,EAC3BwT,EAAAxT,IAAAtwB,EAAAswB,GAGA,QAAA91B,EAAA,EAAmBA,EAAAiC,KAAAsvE,oBAA8BvxE,IAAA,CACjD,QAAA81B,EAAA,EAAqBA,EAAA,KAAQA,EAC7BwT,EAAAxT,GAAAx0B,EAAAgoC,EAAAxT,IAGAzjB,EAAAi3B,EAAA,GACAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,IACAA,EAAA,IAAAj3B,EACAA,EAAAi3B,EAAA,GACAsjC,EAAAtjC,EAAA,GACAA,EAAA,GAAAA,EAAA,IACAA,EAAA,GAAAA,EAAA,IACAA,EAAA,IAAAj3B,EACAi3B,EAAA,IAAAsjC,EACAv6D,EAAAi3B,EAAA,GACAsjC,EAAAtjC,EAAA,GACAlkC,EAAAkkC,EAAA,IACAA,EAAA,GAAAA,EAAA,IACAA,EAAA,GAAAj3B,EACAi3B,EAAA,IAAAsjC,EACAtjC,EAAA,IAAAlkC,EAEA,QAAA0wB,EAAA,EAAqBA,EAAA,GAAQA,GAAA,GAC7B,MAAA07C,EAAAloC,EAAAxT,EAAA,GACA27C,EAAAnoC,EAAAxT,EAAA,GACA4pB,EAAApW,EAAAxT,EAAA,GACA47C,EAAApoC,EAAAxT,EAAA,GACA1wB,EAAAosE,EAAAC,EAAA/xB,EAAAgyB,EACApoC,EAAAxT,EAAA,IAAA1wB,EAAAnD,KAAAkvE,QAAAK,EAAAC,GACAnoC,EAAAxT,EAAA,IAAA1wB,EAAAnD,KAAAkvE,QAAAM,EAAA/xB,GACApW,EAAAxT,EAAA,IAAA1wB,EAAAnD,KAAAkvE,QAAAzxB,EAAAgyB,GACApoC,EAAAxT,EAAA,IAAA1wB,EAAAnD,KAAAkvE,QAAAO,EAAAF,GAGA,QAAA17C,EAAA,EAAAoc,EAAA,GAAAlyC,EAAiC81B,EAAA,KAAQA,IAAAoc,EACzC5I,EAAAxT,IAAAtwB,EAAA0sC,GAIA,QAAApc,EAAA,EAAmBA,EAAA,KAAQA,EAC3BwT,EAAAxT,GAAAx0B,EAAAgoC,EAAAxT,IAGAzjB,EAAAi3B,EAAA,GACAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,IACAA,EAAA,IAAAj3B,EACAA,EAAAi3B,EAAA,GACAsjC,EAAAtjC,EAAA,GACAA,EAAA,GAAAA,EAAA,IACAA,EAAA,GAAAA,EAAA,IACAA,EAAA,IAAAj3B,EACAi3B,EAAA,IAAAsjC,EACAv6D,EAAAi3B,EAAA,GACAsjC,EAAAtjC,EAAA,GACAlkC,EAAAkkC,EAAA,IACAA,EAAA,GAAAA,EAAA,IACAA,EAAA,GAAAj3B,EACAi3B,EAAA,IAAAsjC,EACAtjC,EAAA,IAAAlkC,EAEA,QAAA0wB,EAAA,EAAAoc,EAAAjwC,KAAAqvE,SAAsCx7C,EAAA,KAAQA,IAAAoc,EAC9C5I,EAAAxT,IAAAtwB,EAAA0sC,GAGA,OAAA5I,EAGA7iC,eAAAM,EAAA4qE,GACA,MAAAC,EAAA7qE,EAAAvE,OACA,IAAA8hB,EAAAriB,KAAAqiB,OACA8qB,EAAAntC,KAAAmvE,eACA,MAAAlrD,KACA,IAAA2rD,EAAA5vE,KAAA4vE,GAEA,QAAA7xE,EAAA,EAAmBA,EAAA4xE,IAAkB5xE,EAAA,CAIrC,GAHAskB,EAAA8qB,GAAAroC,EAAA/G,KACAovC,EAEA,GACA,SAGA,MAAA0iC,EAAA7vE,KAAA8vE,SAAAztD,EAAAriB,KAAA+vE,MAEA,QAAAl8C,EAAA,EAAqBA,EAAA,KAAQA,EAC7Bg8C,EAAAh8C,IAAA+7C,EAAA/7C,GAGA+7C,EAAAvtD,EACA4B,EAAA3iB,KAAAuuE,GACAxtD,EAAA,IAAAtd,WAAA,IACAooC,EAAA,EAOA,GAJAntC,KAAAqiB,SACAriB,KAAAmtC,eACAntC,KAAA4vE,KAEA,IAAA3rD,EAAA1jB,OACA,WAAAwE,WAAA,GAGA,IAAAirE,EAAA,GAAA/rD,EAAA1jB,OAEA,GAAAmvE,EAAA,CACA,MAAAO,EAAAhsD,IAAA1jB,OAAA,GACA,IAAA2vE,EAAAD,EAAA,IAEA,GAAAC,GAAA,IACA,QAAAnyE,EAAA,GAAAymB,EAAA,GAAA0rD,EAAyCnyE,GAAAymB,IAASzmB,EAClD,GAAAkyE,EAAAlyE,KAAAmyE,EAAA,CACAA,EAAA,EACA,MAIAF,GAAAE,EACAjsD,IAAA1jB,OAAA,GAAA0vE,EAAApgE,SAAA,KAAAqgE,IAIA,MAAAnb,EAAA,IAAAhwD,WAAAirE,GAEA,QAAAjyE,EAAA,EAAA81B,EAAA,EAAArP,EAAAP,EAAA1jB,OAA8CxC,EAAAymB,IAAQzmB,EAAA81B,GAAA,GACtDkhC,EAAA3lD,IAAA6U,EAAAlmB,GAAA81B,GAGA,OAAAkhC,EAGAvwD,aAAAM,EAAA4qE,EAAAE,EAAA,MACA,MAAAD,EAAA7qE,EAAAvE,OACA8hB,EAAAriB,KAAAqiB,OACA,IAAA8qB,EAAAntC,KAAAmvE,eAEA,GAAAS,EACA5vE,KAAA4vE,SACK,CACL,QAAA7xE,EAAA,EAAqBovC,EAAA,IAAApvC,EAAA4xE,IAAuC5xE,IAAAovC,EAC5D9qB,EAAA8qB,GAAAroC,EAAA/G,GAGA,GAAAovC,EAAA,GAEA,OADAntC,KAAAmtC,eACA,IAAApoC,WAAA,GAGA/E,KAAA4vE,GAAAvtD,EACAvd,IAAA+K,SAAA,IAMA,OAHA7P,KAAAqiB,OAAA,IAAAtd,WAAA,IACA/E,KAAAmtC,aAAA,EACAntC,KAAAksE,aAAAlsE,KAAAmwE,eACAnwE,KAAAksE,aAAApnE,EAAA4qE,GAGAlrE,QAAAM,EAAA8qE,GACA,MAAAD,EAAA7qE,EAAAvE,OACA,IAAA8hB,EAAAriB,KAAAqiB,OACA8qB,EAAAntC,KAAAmvE,eACA,MAAAlrD,KAEA2rD,IACAA,EAAA,IAAA7qE,WAAA,KAGA,QAAAhH,EAAA,EAAmBA,EAAA4xE,IAAkB5xE,EAAA,CAIrC,GAHAskB,EAAA8qB,GAAAroC,EAAA/G,KACAovC,EAEA,GACA,SAGA,QAAAtZ,EAAA,EAAqBA,EAAA,KAAQA,EAC7BxR,EAAAwR,IAAA+7C,EAAA/7C,GAGA,MAAAu8C,EAAApwE,KAAAqwE,SAAAhuD,EAAAriB,KAAA+vE,MAEAH,EAAAQ,EACAnsD,EAAA3iB,KAAA8uE,GACA/tD,EAAA,IAAAtd,WAAA,IACAooC,EAAA,EAOA,GAJAntC,KAAAqiB,SACAriB,KAAAmtC,eACAntC,KAAA4vE,KAEA,IAAA3rD,EAAA1jB,OACA,WAAAwE,WAAA,GAGA,MAAAirE,EAAA,GAAA/rD,EAAA1jB,OACAw0D,EAAA,IAAAhwD,WAAAirE,GAEA,QAAAjyE,EAAA,EAAA81B,EAAA,EAAArP,EAAAP,EAAA1jB,OAA8CxC,EAAAymB,IAAQzmB,EAAA81B,GAAA,GACtDkhC,EAAA3lD,IAAA6U,EAAAlmB,GAAA81B,GAGA,OAAAkhC,SAKA+W,UAAAgD,EACAtqE,YAAAjB,GACAye,QACAhiB,KAAAsvE,oBAAA,GACAtvE,KAAAqvE,SAAA,IACArvE,KAAAswE,MAAA,IAAAvrE,YAAA,q4BACA/E,KAAA+vE,KAAA/vE,KAAAuwE,WAAAhtE,GAGAiB,WAAA4qE,GACA,MACA/vE,EAAAW,KAAA+uE,GACAyB,EAAAxwE,KAAAswE,MACArsD,EAAA,IAAAlf,WAHA,KAIAkf,EAAA7U,IAAAggE,GAEA,QAAAv7C,EAAA,GAAA91B,EAAA,EAA2B81B,EAN3B,MAMkC91B,EAAA,CAClC,IAAAywE,EAAAvqD,EAAA4P,EAAA,GACA6pB,EAAAz5B,EAAA4P,EAAA,GACA48C,EAAAxsD,EAAA4P,EAAA,GACA68C,EAAAzsD,EAAA4P,EAAA,GACA26C,EAAAnvE,EAAAmvE,GACA9wB,EAAAr+C,EAAAq+C,GACA+yB,EAAApxE,EAAAoxE,GACAC,EAAArxE,EAAAqxE,GACAlC,GAAAgC,EAAAzyE,GAEA,QAAAe,EAAA,EAAqBA,EAAA,IAAOA,EAC5BmlB,EAAA4P,GAAA26C,GAAAvqD,EAAA4P,EAAA,IAEA5P,IADA4P,GACA6pB,GAAAz5B,EAAA4P,EAAA,IAEA5P,IADA4P,GACA48C,GAAAxsD,EAAA4P,EAAA,IAEA5P,IADA4P,GACA68C,GAAAzsD,EAAA4P,EAAA,IACAA,IAIA,OAAA5P,GAKApmB,EAAAiuE,qBAEAD,UAAAiD,EACAtqE,YAAAjB,GACAye,QACAhiB,KAAAsvE,oBAAA,GACAtvE,KAAAqvE,SAAA,IACArvE,KAAA+vE,KAAA/vE,KAAAuwE,WAAAhtE,GAGAiB,WAAA4qE,GACA,MACA/vE,EAAAW,KAAA+uE,GACA9qD,EAAA,IAAAlf,WAFA,KAGAkf,EAAA7U,IAAAggE,GACA,IACAZ,EAAA9wB,EAAA+yB,EAAAC,EADA3tE,EAAA,EAGA,QAAA8wB,EAAA,GAAA91B,EAAA,EAA2B81B,EAP3B,MAOkC91B,EAAA,CAClC81B,EAAA,QACA26C,EAAAnvE,EAAAmvE,GACA9wB,EAAAr+C,EAAAq+C,GACA+yB,EAAApxE,EAAAoxE,GACAC,EAAArxE,EAAAqxE,IACO78C,EAAA,QACP26C,EAAAvqD,EAAA4P,EAAA,GACA6pB,EAAAz5B,EAAA4P,EAAA,GACA48C,EAAAxsD,EAAA4P,EAAA,GACA68C,EAAAzsD,EAAA4P,EAAA,GACA26C,EAAAnvE,EAAAmvE,GACA9wB,EAAAr+C,EAAAq+C,GACA+yB,EAAApxE,EAAAoxE,GACAC,EAAArxE,EAAAqxE,GACAlC,GAAAzrE,GAEAA,IAAA,UACAA,EAAA,QAAAA,KAIA,QAAAjE,EAAA,EAAqBA,EAAA,IAAOA,EAC5BmlB,EAAA4P,GAAA26C,GAAAvqD,EAAA4P,EAAA,IAEA5P,IADA4P,GACA6pB,GAAAz5B,EAAA4P,EAAA,IAEA5P,IADA4P,GACA48C,GAAAxsD,EAAA4P,EAAA,IAEA5P,IADA4P,GACA68C,GAAAzsD,EAAA4P,EAAA,IACAA,IAIA,OAAA5P,GAKApmB,EAAAguE,eAEA,IAAAF,EAAA,WACA,SAAAgF,EAAAC,EAAAC,GACA,GAAAD,EAAArwE,SAAAswE,EAAAtwE,OACA,SAGA,QAAAxC,EAAA,EAAmBA,EAAA6yE,EAAArwE,OAAmBxC,IACtC,GAAA6yE,EAAA7yE,KAAA8yE,EAAA9yE,GACA,SAIA,SAGA,SAAA4tE,KAoCA,OAlCAA,EAAAzsE,WACA4xE,mBAAA,SAAAxpE,EAAAypE,EAAAC,EAAAC,GACA,IAAAC,EAAA,IAAAnsE,WAAAuC,EAAA/G,OAAA,IAKA,OAJA2wE,EAAA9hE,IAAA9H,EAAA,GACA4pE,EAAA9hE,IAAA2hE,EAAAzpE,EAAA/G,QACA2wE,EAAA9hE,IAAA4hE,EAAA1pE,EAAA/G,OAAAwwE,EAAAxwE,QAEAowE,EADAlF,EAAAyF,EAAA,EAAAA,EAAA3wE,QACA0wE,IAEAE,kBAAA,SAAA7pE,EAAA8pE,EAAAC,GACA,IAAAH,EAAA,IAAAnsE,WAAAuC,EAAA/G,OAAA,GAIA,OAHA2wE,EAAA9hE,IAAA9H,EAAA,GACA4pE,EAAA9hE,IAAAgiE,EAAA9pE,EAAA/G,QAEAowE,EADAlF,EAAAyF,EAAA,EAAAA,EAAA3wE,QACA8wE,IAEAC,YAAA,SAAAhqE,EAAAiqE,EAAAP,EAAAQ,GACA,IAAAN,EAAA,IAAAnsE,WAAAuC,EAAA/G,OAAA,IACA2wE,EAAA9hE,IAAA9H,EAAA,GACA4pE,EAAA9hE,IAAAmiE,EAAAjqE,EAAA/G,QACA2wE,EAAA9hE,IAAA4hE,EAAA1pE,EAAA/G,OAAAgxE,EAAAhxE,QACA,IAAAgD,EAAAkoE,EAAAyF,EAAA,EAAAA,EAAA3wE,QAEA,OADA,IAAAsrE,EAAAtoE,GACA2oE,aAAAsF,GAAA,MAAAzsE,WAAA,MAEA0sE,WAAA,SAAAnqE,EAAAoqE,EAAAC,GACA,IAAAT,EAAA,IAAAnsE,WAAAuC,EAAA/G,OAAA,GACA2wE,EAAA9hE,IAAA9H,EAAA,GACA4pE,EAAA9hE,IAAAsiE,EAAApqE,EAAA/G,QACA,IAAAgD,EAAAkoE,EAAAyF,EAAA,EAAAA,EAAA3wE,QAEA,OADA,IAAAsrE,EAAAtoE,GACA2oE,aAAAyF,GAAA,MAAA5sE,WAAA,OAGA4mE,EAnDA,GAsDA9tE,EAAA8tE,QAEA,IAAAD,EAAA,WACA,SAAAkG,EAAAhB,EAAAC,GACA,IAAA1tE,EAAA,IAAA4B,WAAA6rE,EAAArwE,OAAAswE,EAAAtwE,QAGA,OAFA4C,EAAAiM,IAAAwhE,EAAA,GACAztE,EAAAiM,IAAAyhE,EAAAD,EAAArwE,QACA4C,EAGA,SAAA0uE,EAAAvqE,EAAA2qC,EAAA++B,GAKA,IAJA,IAAA/gC,EAAAw7B,EAAAx5B,EAAA,EAAAA,EAAA1xC,QAAAsP,SAAA,MACA9P,GAAA,GACAhC,EAAA,EAEAA,EAAA,IAAAgC,IAAAQ,OAAA,GAAAxC,EAAA,KACA,IAAA+zE,EAAAxqE,EAAA/G,OAAA0vC,EAAA1vC,OAAAywE,EAAAzwE,OACAwxE,EAAA,IAAAhtE,WAAA,GAAA+sE,GACA9wE,EAAA4wE,EAAAtqE,EAAA2oC,GACAjvC,EAAA4wE,EAAA5wE,EAAAgwE,GAEA,QAAAn9C,EAAA,EAAA7kB,EAAA,EAA8B6kB,EAAA,GAAQA,IAAA7kB,GAAA8iE,EACtCC,EAAA3iE,IAAApO,EAAAgO,GAIAjP,EADA,IAAA+rE,EAAA77B,EAAApgC,SAAA,OACAmoB,QAAA+5C,EAAA9hC,EAAApgC,SAAA,QAGA,IAFA,IAAAmiE,EAAA,EAEA/hB,EAAA,EAAqBA,EAAA,GAAQA,IAC7B+hB,GAAA,EACAA,GAAA,EACAA,IAAAjyE,EAAAkwD,KAAA,KACA+hB,GAAA,EAGA,IAAAA,EACA/hC,EAAAw7B,EAAA1rE,EAAA,EAAAA,EAAAQ,QACO,IAAAyxE,EACP/hC,EAAAu7B,EAAAzrE,EAAA,EAAAA,EAAAQ,QACO,IAAAyxE,IACP/hC,EAAAs7B,EAAAxrE,EAAA,EAAAA,EAAAQ,SAGAxC,IAGA,OAAAkyC,EAAApgC,SAAA,MAGA,SAAA67D,KAEA,SAAAiF,EAAAC,EAAAC,GACA,GAAAD,EAAArwE,SAAAswE,EAAAtwE,OACA,SAGA,QAAAxC,EAAA,EAAmBA,EAAA6yE,EAAArwE,OAAmBxC,IACtC,GAAA6yE,EAAA7yE,KAAA8yE,EAAA9yE,GACA,SAIA,SAwCA,OArCA2tE,EAAAxsE,WACA03B,KAAA,SAAAtvB,EAAA2qE,EAAAjB,GACA,OAAAa,EAAAvqE,EAAA2qE,EAAAjB,IAEAF,mBAAA,SAAAxpE,EAAAypE,EAAAC,EAAAC,GACA,IAAAC,EAAA,IAAAnsE,WAAAuC,EAAA/G,OAAA,IAKA,OAJA2wE,EAAA9hE,IAAA9H,EAAA,GACA4pE,EAAA9hE,IAAA2hE,EAAAzpE,EAAA/G,QACA2wE,EAAA9hE,IAAA4hE,EAAA1pE,EAAA/G,OAAAwwE,EAAAxwE,QAEAowE,EADAkB,EAAAvqE,EAAA4pE,EAAAF,GACAC,IAEAE,kBAAA,SAAA7pE,EAAA8pE,EAAAC,GACA,IAAAH,EAAA,IAAAnsE,WAAAuC,EAAA/G,OAAA,GAIA,OAHA2wE,EAAA9hE,IAAA9H,EAAA,GACA4pE,EAAA9hE,IAAAgiE,EAAA9pE,EAAA/G,QAEAowE,EADAkB,EAAAvqE,EAAA4pE,MACAG,IAEAC,YAAA,SAAAhqE,EAAAiqE,EAAAP,EAAAQ,GACA,IAAAN,EAAA,IAAAnsE,WAAAuC,EAAA/G,OAAA,IACA2wE,EAAA9hE,IAAA9H,EAAA,GACA4pE,EAAA9hE,IAAAmiE,EAAAjqE,EAAA/G,QACA2wE,EAAA9hE,IAAA4hE,EAAA1pE,EAAA/G,OAAAgxE,EAAAhxE,QACA,IAAAgD,EAAAsuE,EAAAvqE,EAAA4pE,EAAAF,GAEA,OADA,IAAAnF,EAAAtoE,GACA2oE,aAAAsF,GAAA,MAAAzsE,WAAA,MAEA0sE,WAAA,SAAAnqE,EAAAoqE,EAAAC,GACA,IAAAT,EAAA,IAAAnsE,WAAAuC,EAAA/G,OAAA,GACA2wE,EAAA9hE,IAAA9H,EAAA,GACA4pE,EAAA9hE,IAAAsiE,EAAApqE,EAAA/G,QACA,IAAAgD,EAAAsuE,EAAAvqE,EAAA4pE,MAEA,OADA,IAAArF,EAAAtoE,GACA2oE,aAAAyF,GAAA,MAAA5sE,WAAA,OAGA2mE,EArGA,GAwGA7tE,EAAA6tE,QAEA,IAAAwG,EAAA,WACA,SAAAA,EAAAC,EAAAC,GACApyE,KAAAqyE,wBAAAF,EACAnyE,KAAAsyE,wBAAAF,EAiBA,OAdAF,EAAAhzE,WACA0pC,aAAA,SAAAl+B,EAAAnK,GACA,IAAA6vE,EAAA,IAAApwE,KAAAsyE,wBACA,WAAAnqD,EAAA0kB,cAAAniC,EAAAnK,EAAA,SAAAuE,EAAA4qE,GACA,OAAAU,EAAAlE,aAAApnE,EAAA4qE,MAGAvoC,cAAA,SAAA9nC,GACA,IAAA+wE,EAAA,IAAApwE,KAAAqyE,wBACAvtE,GAAA,EAAAlB,EAAAsL,eAAA7P,GAEA,OADAyF,EAAAsrE,EAAAlE,aAAApnE,GAAA,IACA,EAAAlB,EAAA0L,eAAAxK,KAGAotE,EApBA,GAuBA3xC,EAAA,WACA,IAAAgyC,EAAA,IAAAxtE,YAAA,6GA2BA,SAAAytE,EAAAlyC,EAAAh5B,EAAA2pE,EAAAI,EAAAp4C,EAAAw5C,EAAA1G,EAAA9zC,GACA,IAGApE,EACA/0B,EAJA4zE,EAAA,GAAAzB,EAAA1wE,OAAA+/B,EAAA//B,OACA2wE,EAAA,IAAAnsE,WAAA2tE,GACA30E,EAAA,EAIA,GAAAuJ,EAGA,IAFAxI,EAAAsK,KAAAwG,IAAA,GAAAtI,EAAA/G,QAEYxC,EAAAe,IAAOf,EACnBmzE,EAAAnzE,GAAAuJ,EAAAvJ,GAMA,IAFA81B,EAAA,EAEA91B,EAAA,IACAmzE,EAAAnzE,KAAAw0E,EAAA1+C,KAGA,IAAAA,EAAA,EAAA/0B,EAAAmyE,EAAA1wE,OAAyCszB,EAAA/0B,IAAO+0B,EAChDq9C,EAAAnzE,KAAAkzE,EAAAp9C,GAQA,IALAq9C,EAAAnzE,KAAA,IAAAk7B,EACAi4C,EAAAnzE,KAAAk7B,GAAA,MACAi4C,EAAAnzE,KAAAk7B,GAAA,OACAi4C,EAAAnzE,KAAAk7B,IAAA,OAEApF,EAAA,EAAA/0B,EAAAwhC,EAAA//B,OAAkCszB,EAAA/0B,IAAO+0B,EACzCq9C,EAAAnzE,KAAAuiC,EAAAzM,GAGA4+C,GAAA,IAAAx6C,IACAi5C,EAAAnzE,KAAA,IACAmzE,EAAAnzE,KAAA,IACAmzE,EAAAnzE,KAAA,IACAmzE,EAAAnzE,KAAA,KAGA,IAAA64B,EAAAG,EAAAm6C,EAAA,EAAAnzE,GACA40E,EAAA5G,GAAA,EAEA,GAAA0G,GAAA,EACA,IAAA5+C,EAAA,EAAiBA,EAAA,KAAQA,EACzB+C,EAAAG,EAAAH,EAAA,EAAA+7C,GAIA,IACAC,EADAC,EAAAj8C,EAAA/mB,SAAA,EAAA8iE,GAGA,GAAAF,GAAA,GACA,IAAA10E,EAAA,EAAiBA,EAAA,KAAQA,EACzBmzE,EAAAnzE,GAAAw0E,EAAAx0E,GAGA,IAAA81B,EAAA,EAAA/0B,EAAAwhC,EAAA//B,OAAoCszB,EAAA/0B,IAAO+0B,EAC3Cq9C,EAAAnzE,KAAAuiC,EAAAzM,GAIA++C,EADA,IAAAhH,EAAAiH,GACA7G,aAAAj1C,EAAAm6C,EAAA,EAAAnzE,IACAe,EAAA+zE,EAAAtyE,OACA,IACA0vC,EADA6iC,EAAA,IAAA/tE,WAAAjG,GAGA,IAAA+0B,EAAA,EAAiBA,GAAA,KAASA,EAAA,CAC1B,IAAAoc,EAAA,EAAmBA,EAAAnxC,IAAOmxC,EAC1B6iC,EAAA7iC,GAAA4iC,EAAA5iC,GAAApc,EAIA++C,EADA,IAAAhH,EAAAkH,GACA9G,aAAA4G,GAGA,IAAA/+C,EAAA,EAAA/0B,EAAA8zE,EAAAryE,OAAuCszB,EAAA/0B,IAAO+0B,EAC9C,GAAAw9C,EAAAx9C,KAAA++C,EAAA/+C,GACA,iBAOA,IAAAA,EAAA,EAAA/0B,GAFA8zE,EADA,IAAAhH,EAAAiH,GACA7G,aAAAuG,IAEAhyE,OAAuCszB,EAAA/0B,IAAO+0B,EAC9C,GAAAw9C,EAAAx9C,KAAA++C,EAAA/+C,GACA,YAKA,OAAAg/C,EAoDA,IAAAE,EAAAlvE,EAAAihB,KAAAjmB,IAAA,YAEA,SAAA0hC,EAAA/Y,EAAA8Y,EAAAh5B,GACA,IAAAurB,EAAArL,EAAA3oB,IAAA,UAEA,OAAAgF,EAAAuhB,QAAAyN,EAAA,YACA,UAAAjvB,EAAAuP,YAAA,6BAGAnT,KAAAwnB,OACA,IAAAwrD,EAAAxrD,EAAA3oB,IAAA,KAEA,IAAAoT,OAAAC,UAAA8gE,IAAA,IAAAA,GAAA,IAAAA,GAAA,IAAAA,GAAA,IAAAA,EACA,UAAApvE,EAAAuP,YAAA,oCAGAnT,KAAAgzE,YACA,IAAAjH,EAAAvkD,EAAA3oB,IAAA,UAEA,IAAAktE,EACA,GAAAiH,GAAA,EACAjH,EAAA,OACO,CACP,IAAAkH,EAAAzrD,EAAA3oB,IAAA,MACAq0E,EAAA1rD,EAAA3oB,IAAA,QAEA,MAAAgF,EAAAshB,QAAA8tD,KAAA,EAAApvE,EAAAuhB,QAAA8tD,GAAA,CACAD,EAAA5sD,oBAAA,EACA,IAAA8sD,EAAAF,EAAAp0E,IAAAq0E,EAAA50E,OACAytE,EAAAoH,KAAAt0E,IAAA,gBAEA,KACAktE,IAAA,IAMA,IAAA95D,OAAAC,UAAA65D,MAAA,IAAAA,EAAA,KACA,UAAAnoE,EAAAuP,YAAA,sBAGA,IAAA89D,GAAA,EAAArtE,EAAAsL,eAAAsY,EAAA3oB,IAAA,MAAAgR,SAAA,MACAwhE,GAAA,EAAAztE,EAAAsL,eAAAsY,EAAA3oB,IAAA,MAAAgR,SAAA,MACAopB,EAAAzR,EAAA3oB,IAAA,KACA4zE,EAAAjrD,EAAA3oB,IAAA,KACAo5B,GAAA,IAAA+6C,GAAA,IAAAA,KAAA,IAAAxrD,EAAA3oB,IAAA,mBACAmB,KAAAi4B,kBACA,IACAm7C,EAcAP,EAfAQ,GAAA,EAAAzvE,EAAAsL,eAAAoxB,GAGA,GAAAh5B,EAAA,CACA,OAAAmrE,EACA,IACAnrE,GAAA,EAAA1D,EAAAgP,oBAAAtL,GACS,MAAAC,IACT,EAAA3D,EAAAoF,MAAA,oEAIAoqE,GAAA,EAAAxvE,EAAAsL,eAAA5H,GAKA,OAAA0rE,EACAH,EAAAL,EAAAa,EAAAD,EAAAnC,EAAAI,EAAAp4C,EAAAw5C,EAAA1G,EAAA9zC,OACK,CACL,IAAA84C,GAAA,EAAAntE,EAAAsL,eAAAsY,EAAA3oB,IAAA,MAAAgR,SAAA,OACA0hE,GAAA,EAAA3tE,EAAAsL,eAAAsY,EAAA3oB,IAAA,MAAAgR,SAAA,OACAyjE,GAAA,EAAA1vE,EAAAsL,eAAAsY,EAAA3oB,IAAA,MAAAgR,SAAA,MACAuhE,GAAA,EAAAxtE,EAAAsL,eAAAsY,EAAA3oB,IAAA,MAAAgR,SAAA,OACA6hE,GAAA,EAAA9tE,EAAAsL,eAAAsY,EAAA3oB,IAAA,MAAAgR,SAAA,OACA2hE,GAAA,EAAA5tE,EAAAsL,eAAAsY,EAAA3oB,IAAA,OACA8yE,GAAA,EAAA/tE,EAAAsL,eAAAsY,EAAA3oB,IAAA,QACA,EAAA+E,EAAAsL,eAAAsY,EAAA3oB,IAAA,UACAg0E,EAtPA,SAAAJ,EAAAnrE,EAAA2pE,EAAAF,EAAAQ,EAAA+B,EAAAjC,EAAAD,EAAAM,EAAAF,EAAAG,EAAA4B,GACA,GAAAjsE,EAAA,CACA,IAAAksE,EAAApqE,KAAAwG,IAAA,IAAAtI,EAAA/G,QACA+G,IAAAuI,SAAA,EAAA2jE,QAEAlsE,KAGA,IAAAmsE,EAQA,OALAA,EADA,IAAAhB,EACA,IAAA/G,EAEA,IAAAC,GAGAwF,kBAAA7pE,EAAA8pE,EAAAC,GACAoC,EAAAhC,WAAAnqE,EAAAoqE,EAAAC,GACKrqE,EAAA/G,QAAAkzE,EAAA3C,mBAAAxpE,EAAAypE,EAAAuC,EAAArC,GACLwC,EAAAnC,YAAAhqE,EAAAiqE,EAAA+B,EAAA9B,GAGA,KAgOAkC,CAAAjB,EAAAW,EAAAnC,EAAAF,EAAAQ,EAAA+B,EAAAjC,EAAAD,EAAAM,EAAAF,EAAAG,GAGA,IAAAkB,IAAAvrE,EACA,UAAA1D,EAAAsJ,kBAAA,oBAAAtJ,EAAA4P,kBAAAkO,eAMA,IALKmxD,GAAAvrE,IAELurE,EAAAL,EAAAa,EApIA,SAAA/rE,EAAA2pE,EAAAwB,EAAA1G,GACA,IAEAl4C,EACA/0B,EAHAoyE,EAAA,IAAAnsE,WAAA,IACAhH,EAAA,EAKA,IAFAe,EAAAsK,KAAAwG,IAAA,GAAAtI,EAAA/G,QAEUxC,EAAAe,IAAOf,EACjBmzE,EAAAnzE,GAAAuJ,EAAAvJ,GAKA,IAFA81B,EAAA,EAEA91B,EAAA,IACAmzE,EAAAnzE,KAAAw0E,EAAA1+C,KAGA,IASAw9C,EATAz6C,EAAAG,EAAAm6C,EAAA,EAAAnzE,GACA40E,EAAA5G,GAAA,EAEA,GAAA0G,GAAA,EACA,IAAA5+C,EAAA,EAAiBA,EAAA,KAAQA,EACzB+C,EAAAG,EAAAH,EAAA,EAAAA,EAAAr2B,QAMA,GAAAkyE,GAAA,GACApB,EAAAJ,EACA,IACAhhC,EADA6iC,EAAA,IAAA/tE,WAAA4tE,GAGA,IAAA9+C,EAAA,GAAkBA,GAAA,EAAQA,IAAA,CAC1B,IAAAoc,EAAA,EAAmBA,EAAA0iC,IAAsB1iC,EACzC6iC,EAAA7iC,GAAArZ,EAAAqZ,GAAApc,EAIAw9C,EADA,IAAAzF,EAAAkH,GACA9G,aAAAqF,SAIAA,EADA,IAAAzF,EAAAh1C,EAAA/mB,SAAA,EAAA8iE,IACA3G,aAAAiF,GAGA,OAAAI,EAqFAsC,CAAAP,EAAAnC,EAAAwB,EAAA1G,GACAkF,EAAAI,EAAAp4C,EAAAw5C,EAAA1G,EAAA9zC,KAGA46C,EACA,UAAAjvE,EAAAsJ,kBAAA,qBAAAtJ,EAAA4P,kBAAAmO,oBAKA,GAFA3hB,KAAA6yE,gBAEAG,GAAA,GACA,IAAAY,EAAApsD,EAAA3oB,IAAA,OAEA,EAAAgF,EAAAshB,QAAAyuD,KACAA,EAAAvtD,oBAAA,GAGArmB,KAAA4zE,KACA5zE,KAAA6zE,KAAArsD,EAAA3oB,IAAA,SAAAk0E,EACA/yE,KAAA8zE,KAAAtsD,EAAA3oB,IAAA,SAAAk0E,EACA/yE,KAAA+zE,IAAAvsD,EAAA3oB,IAAA,QAAAmB,KAAA6zE,MAIA,SAAAG,EAAA/pE,EAAAC,EAAA2oE,EAAAoB,GACA,IACAl2E,EACAe,EAFAyE,EAAA,IAAAwB,WAAA8tE,EAAAtyE,OAAA,GAIA,IAAAxC,EAAA,EAAAe,EAAA+zE,EAAAtyE,OAAyCxC,EAAAe,IAAOf,EAChDwF,EAAAxF,GAAA80E,EAAA90E,GAiBA,OAdAwF,EAAAxF,KAAA,IAAAkM,EACA1G,EAAAxF,KAAAkM,GAAA,MACA1G,EAAAxF,KAAAkM,GAAA,OACA1G,EAAAxF,KAAA,IAAAmM,EACA3G,EAAAxF,KAAAmM,GAAA,MAEA+pE,IACA1wE,EAAAxF,KAAA,IACAwF,EAAAxF,KAAA,GACAwF,EAAAxF,KAAA,IACAwF,EAAAxF,KAAA,IAGAg5B,EAAAxzB,EAAA,EAAAxF,GACA8R,SAAA,EAAAzG,KAAAwG,IAAAijE,EAAAtyE,OAAA,OAGA,SAAA2zE,EAAAN,EAAAt1E,EAAA2L,EAAAC,EAAA3G,GACA,OAAAM,EAAAuhB,QAAA9mB,GACA,UAAAsF,EAAAuP,YAAA,8BAGA,IACAghE,EADAC,EAAAR,EAAA/0E,IAAAP,QAOA,GAJA,OAAA81E,QAAA7kE,IAAA6kE,IACAD,EAAAC,EAAAv1E,IAAA,SAGAs1E,GAAA,SAAAA,EAAA71E,KACA,kBACA,WAAAuwE,GAIA,UAAAsF,EAAA71E,KACA,kBACA,WAAAstE,EAAAoI,EAAA/pE,EAAAC,EAAA3G,GAAA,KAIA,aAAA4wE,EAAA71E,KACA,kBACA,WAAAwtE,EAAAkI,EAAA/pE,EAAAC,EAAA3G,GAAA,KAIA,aAAA4wE,EAAA71E,KACA,kBACA,WAAAutE,EAAAtoE,IAIA,UAAAK,EAAAuP,YAAA,yBAkBA,OAfAotB,EAAArhC,WACAwlC,sBAAA,SAAAz6B,EAAAC,GACA,OAAAlK,KAAAgzE,WAAA,IAAAhzE,KAAAgzE,UACA,WAAAd,EAAAgC,EAAAl0E,KAAA4zE,GAAA5zE,KAAA6zE,KAAA5pE,EAAAC,EAAAlK,KAAA6yE,eAAAqB,EAAAl0E,KAAA4zE,GAAA5zE,KAAA8zE,KAAA7pE,EAAAC,EAAAlK,KAAA6yE,gBAGA,IAAAtvE,EAAAywE,EAAA/pE,EAAAC,EAAAlK,KAAA6yE,eAAA,GAEAwB,EAAA,WACA,WAAAzI,EAAAroE,IAGA,WAAA2uE,EAAAmC,OAGA9zC,EAvWA,GA0WA1iC,EAAA0iC,0BAIA,SAAAziC,EAAAD,EAAAiF,GAEA,aAGArE,OAAAC,eAAAb,EAAA,cACAqF,OAAA,IAEArF,EAAAw7B,gBAAA,EAEA,IAAAz1B,EAAAd,EAAA,GAEAe,EAAAf,EAAA,SA6BAu2B,EACA70B,YAAAlG,EAAAg2E,GACAt0E,KAAA+hB,cAAAsX,IACA,EAAAz1B,EAAAmP,aAAA,iCAGA/S,KAAA1B,OACA0B,KAAAs0E,WAGA9vE,OAAAsyD,EAAAyd,GACA,MAAAh7C,EAAA,IAAA1O,kBAAA,GAEA,OADA7qB,KAAAw0E,WAAA1d,EAAAyd,EAAAh7C,EAAA,GACAA,EAGA/0B,WAAAsyD,EAAAyd,EAAA58C,EAAA88C,IACA,EAAA7wE,EAAAmP,aAAA,yCAGAvO,aAAAsyD,EAAAyd,EAAAp7C,EAAAxB,EAAA88C,EAAAjmC,EAAAq5B,IACA,EAAAjkE,EAAAmP,aAAA,2CAGAvO,gBAAAkwE,EAAA7M,IACA,EAAAjkE,EAAAmP,aAAA,8CAGAvO,cAAAgqC,GACA,SAGAhqC,gBAAAmwE,EAAAC,GACA,OAAAv7C,EAAAw7C,gBAAAF,EAAA30E,KAAAs0E,UAGA9vE,QAAAmzB,EAAAm9C,EAAAC,EAAAv8B,EAAAC,EAAAu8B,EAAAJ,EAAAK,EAAApN,GACA,MAAA1uC,EAAA27C,EAAAC,EACA,IAAAvyD,EAAA,KACA,MAAA0yD,EAAA,GAAAN,EACAO,EAAAJ,IAAAt8B,GAAAq8B,IAAAt8B,EAEA,GAAAx4C,KAAAo1E,cAAAR,GACApyD,EAAAyyD,OACK,OAAAj1E,KAAAs0E,UAAAn7C,EAAA+7C,GAAA,eAAAl1E,KAAA1B,MAAA,cAAA0B,KAAA1B,KAAA,CACL,MAAA+2E,EAAAT,GAAA,MAAA7vE,WAAAmwE,GAAA,IAAAtiC,YAAAsiC,GAEA,QAAAn3E,EAAA,EAAqBA,EAAAm3E,EAAwBn3E,IAC7Cs3E,EAAAt3E,KAGA,MAAAu3E,EAAA,IAAAzqD,kBAAA,EAAAqqD,GAGA,GAFAl1E,KAAAu1E,aAAAF,EAAA,EAAAH,EAAAI,EAAA,EAAAV,EAAA,GAEAO,EAUO,CACP3yD,EAAA,IAAAzd,WAAA,EAAAo0B,GACA,IAAAq8C,EAAA,EAEA,QAAAz3E,EAAA,EAAuBA,EAAAo7B,IAAWp7B,EAAA,CAClC,MAAAwF,EAAA,EAAA0xE,EAAAl3E,GACAykB,EAAAgzD,KAAAF,EAAA/xE,GACAif,EAAAgzD,KAAAF,EAAA/xE,EAAA,GACAif,EAAAgzD,KAAAF,EAAA/xE,EAAA,QAlBA,CACA,IAAAkyE,EAAA,EAEA,QAAA13E,EAAA,EAAuBA,EAAAo7B,IAAWp7B,EAAA,CAClC,MAAAwF,EAAA,EAAA0xE,EAAAl3E,GACA45B,EAAA89C,KAAAH,EAAA/xE,GACAo0B,EAAA89C,KAAAH,EAAA/xE,EAAA,GACAo0B,EAAA89C,KAAAH,EAAA/xE,EAAA,GACAkyE,GAAA5N,SAcAsN,GAGA3yD,EAAA,IAAAqI,kBAAA,EAAAsO,GACAn5B,KAAAu1E,aAAAN,EAAA,EAAA97C,EAAA3W,EAAA,EAAAoyD,EAAA,IAHA50E,KAAAu1E,aAAAN,EAAA,EAAAz8B,EAAAw8B,EAAAr9C,EAAA,EAAAi9C,EAAA/M,GAOA,GAAArlD,EACA,GAAA2yD,GAhHA,SAAAre,EAAAn/B,EAAA+9C,EAAAtJ,EAAAuJ,EAAAtJ,EAAAxE,GAEAA,EAAA,IAAAA,EAAA,EAAAA,EACA,MAAA+N,EAAAF,EAAAC,EACAE,EAAAzJ,EAAAC,EACA,IACAyJ,EADAC,EAAA,EAEA,MAAAC,EAAA,IAAApjC,YAAA+iC,GACAM,EAPA,EAOAP,EAEA,QAAA33E,EAAA,EAAiBA,EAAA43E,EAAQ53E,IACzBi4E,EAAAj4E,GAVA,EAUAqL,KAAA8gB,MAAAnsB,EAAA63E,GAGA,QAAA73E,EAAA,EAAiBA,EAAAsuE,EAAQtuE,IAAA,CACzB,MAAAqiE,EAAAh3D,KAAA8gB,MAAAnsB,EAAA83E,GAAAI,EAEA,QAAApiD,EAAA,EAAmBA,EAAA8hD,EAAQ9hD,IAC3BiiD,EAAA1V,EAAA4V,EAAAniD,GACA8D,EAAAo+C,KAAAjf,EAAAgf,KACAn+C,EAAAo+C,KAAAjf,EAAAgf,KACAn+C,EAAAo+C,KAAAjf,EAAAgf,KACAC,GAAAlO,GA2FAqO,CAAA1zD,EAAAmV,EAAAm9C,EAAAC,EAAAv8B,EAAAC,EAAAovB,OACO,CACP,IAAA4N,EAAA,EACAD,EAAA,EAEA,QAAAz3E,EAAA,EAAAymB,EAAAg0B,EAAAw8B,EAAkDj3E,EAAAymB,EAAQzmB,IAC1D45B,EAAA89C,KAAAjzD,EAAAgzD,KACA79C,EAAA89C,KAAAjzD,EAAAgzD,KACA79C,EAAA89C,KAAAjzD,EAAAgzD,KACAC,GAAA5N,GAMAsO,yBACA,SAAAvyE,EAAAuO,QAAAnS,KAAA,yBAGAwE,aAAA4xE,EAAAxrE,EAAAyrE,EAAAvmD,GACA,MAAAwmD,EAAAt2E,KAAAu2E,UAAAH,EAAAxrE,EAAAyrE,EAAAvmD,GACA,OAAA9vB,KAAAw2E,OAAAF,GAGA9xE,cAAA8xE,GACA,MAAAh4E,EAAA8C,MAAA0lB,QAAAwvD,KAAA,GAAAA,EACA,IAAAG,EAAAC,EAAApL,EAEA,OAAAhtE,GACA,mBACA,OAAA0B,KAAAs5B,WAAAq9C,KAEA,kBACA,OAAA32E,KAAAs5B,WAAAC,IAEA,mBACA,OAAAv5B,KAAAs5B,WAAAs9C,KAEA,gBAIA,OAHAH,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GACAhL,EAAAgL,EAAA,GACA,IAAAO,EAAAJ,EAAAC,EAAApL,GAEA,eACAmL,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GACAhL,EAAAgL,EAAA,GACA,MAAAQ,EAAAR,EAAA,GACA,WAAAS,EAAAN,EAAAC,EAAApL,EAAAwL,GAEA,gBACA,IAAAE,EAAAV,EAAA,GAMA,OAJAU,IACAA,EAAAh3E,KAAAw2E,OAAAQ,IAGA,IAAAC,EAAAD,GAEA,gBACA,MAAAE,EAAAZ,EAAA,GACAa,EAAAb,EAAA,GACA/oD,EAAA+oD,EAAA,GACA,WAAAc,EAAAp3E,KAAAw2E,OAAAU,GAAAC,EAAA5pD,GAEA,kBACA,MAAA+mD,EAAAgC,EAAA,GACAe,EAAAf,EAAA,GACAgB,EAAAhB,EAAA,GACA,WAAAiB,EAAAjD,EAAAt0E,KAAAw2E,OAAAa,GAAAC,GAEA,YACAb,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GACA,MAAA5pD,EAAA4pD,EAAA,GACA,WAAAkB,EAAAf,EAAAC,EAAAhqD,GAEA,QACA,UAAA9oB,EAAAuP,wCAAgE7U,MAIhEkG,iBAAA4xE,EAAAxrE,EAAAyrE,EAAA,KAAAvmD,GAGA,GAFAsmD,EAAAxrE,EAAAimB,WAAAulD,IAEA,EAAAvyE,EAAAuhB,QAAAgxD,GACA,OAAAA,EAAA93E,MACA,iBACA,QACA,qBAEA,gBACA,UACA,oBAEA,iBACA,WACA,qBAEA,cACA,yBAEA,QACA,MAAAuF,EAAAshB,QAAAkxD,GAAA,CACA,MAAAoB,EAAApB,EAAAx3E,IAAA,cAEA,MAAAgF,EAAAshB,QAAAsyD,GAAA,CACA,MAAAC,EAAAD,EAAA54E,IAAAu3E,EAAA93E,MAEA,GAAAo5E,EAAA,CACA,MAAA7zE,EAAAuhB,QAAAsyD,GACA,OAAA13E,KAAAu2E,UAAAmB,EAAA9sE,EAAAyrE,EAAAvmD,GAGAsmD,EAAAsB,EACA,QAKA,UAAA9zE,EAAAuP,uCAAiEijE,EAAA93E,QAIjE,GAAA8C,MAAA0lB,QAAAsvD,GAAA,CACA,MAAAhzE,EAAAwH,EAAAimB,WAAAulD,EAAA,IAAA93E,KACA,IAAAg2E,EAAA11C,EAAAy4C,EAAAZ,EAAAC,EAAApL,EAEA,OAAAloE,GACA,iBACA,QACA,qBAEA,gBACA,UACA,oBAEA,iBACA,WACA,qBAEA,cAKA,mBAHAqzE,GADA73C,EAAAh0B,EAAAimB,WAAAulD,EAAA,KACA3oD,SAAA,cACAipD,EAAA93C,EAAAnR,SAAA,cACA69C,EAAA1sC,EAAA//B,IAAA,UAGA,aAMA,kBAJA43E,GADA73C,EAAAh0B,EAAAimB,WAAAulD,EAAA,KACA3oD,SAAA,cACAipD,EAAA93C,EAAAnR,SAAA,cACA69C,EAAA1sC,EAAAnR,SAAA,SACAmR,EAAAnR,SAAA,WAGA,eACA,MACAjG,EADA5c,EAAAimB,WAAAulD,EAAA,IACA5uD,KAIA,GAHA8sD,EAAA9sD,EAAA3oB,IAAA,KACAw4E,EAAA7vD,EAAA3oB,IAAA,aAEA,CACA,MAAA84E,EAAA33E,KAAAu2E,UAAAc,EAAAzsE,EAAAyrE,EAAAvmD,GAGA,GAFA9vB,KAAAw2E,OAAAmB,EAAA7nD,GAEAwkD,aACA,OAAAqD,GAGA,EAAA/zE,EAAAoF,MAAA,8DAGA,OAAAsrE,EACA,qBACW,OAAAA,EACX,oBACW,OAAAA,EACX,qBAGA,MAEA,cACA,IAAA0C,EAAAZ,EAAA,SAMA,OAJAY,IACAA,EAAAh3E,KAAAu2E,UAAAS,EAAApsE,EAAAyrE,EAAAvmD,KAGA,YAAAknD,GAEA,cACA,QACA,MAAAE,EAAAl3E,KAAAu2E,UAAAH,EAAA,GAAAxrE,EAAAyrE,EAAAvmD,GACAqnD,EAAAvsE,EAAAimB,WAAAulD,EAAA,MACA,IAAA7oD,EAAA3iB,EAAAimB,WAAAulD,EAAA,IAMA,OAJA,EAAAvyE,EAAA4hB,UAAA8H,KACAA,IAAA7H,aAGA,YAAAwxD,EAAAC,EAAA5pD,GAEA,iBACA,cACA,MAAAjvB,EAAAsM,EAAAimB,WAAAulD,EAAA,IAIA,qBAHA9B,EAAAlzE,MAAA0lB,QAAAxoB,KAAAiC,OAAA,EACA82E,EAAAr3E,KAAAu2E,UAAAH,EAAA,GAAAxrE,EAAAyrE,EAAAvmD,GACAA,EAAAxsB,OAAAsH,EAAAimB,WAAAulD,EAAA,MAGA,UAKA,eAHAK,GADA73C,EAAAh0B,EAAAimB,WAAAulD,EAAA,KACA3oD,SAAA,cACAipD,EAAA93C,EAAAnR,SAAA,cACAmR,EAAAnR,SAAA,UAGA,QACA,UAAA7pB,EAAAuP,iDAA2E/P,OAI3E,UAAAQ,EAAAuP,iDAAqEijE,MAGrE5xE,uBAAAo4C,EAAA03B,GACA,IAAAlzE,MAAA0lB,QAAA81B,GACA,SAGA,KAAA03B,IAAA13B,EAAAr8C,OAEA,OADA,EAAAqD,EAAAoF,MAAA,6CACA,EAGA,QAAAjL,EAAA,EAAAymB,EAAAo4B,EAAAr8C,OAAuCxC,EAAAymB,EAAQzmB,GAAA,EAC/C,OAAA6+C,EAAA7+C,IAAA,IAAA6+C,EAAA7+C,EAAA,GACA,SAIA,SAGAu7B,wBACA,SAAA11B,EAAAuO,QAAAnS,KAAA,cACA22E,WACA,SAAA/yE,EAAAuO,QAAAnS,KAAA,WAAA43E,IAGAr+C,UACA,SAAA31B,EAAAuO,QAAAnS,KAAA,UAAA63E,IAGAjB,WACA,SAAAhzE,EAAAuO,QAAAnS,KAAA,WAAA83E,OAQAj6E,EAAAw7B,mBAEAk+C,UAAAl+C,EACA70B,YAAA8vE,EAAAnjE,EAAAmmE,GACAt1D,MAAA,YAAAsyD,GACAt0E,KAAAmR,OACAnR,KAAAs3E,SACAt3E,KAAA+3E,OAAA,IAAAxT,aAAApzD,EAAAmjE,UAGA9vE,WAAAsyD,EAAAyd,EAAA58C,EAAA88C,GACA,MAAAsD,EAAA/3E,KAAA+3E,OACA/3E,KAAAs3E,OAAAxgB,EAAAyd,EAAAwD,EAAA,GACA/3E,KAAAmR,KAAAqjE,WAAAuD,EAAA,EAAApgD,EAAA88C,GAGAjwE,aAAAsyD,EAAAyd,EAAAp7C,EAAAxB,EAAA88C,EAAAjmC,EAAAq5B,GACA,MAAAyP,EAAAt3E,KAAAs3E,OACAnmE,EAAAnR,KAAAmR,KACA4tD,EAAA,OAAAvwB,GAAA,GACAwpC,EAAA7mE,EAAAmjE,SACA6B,EAAAhlE,EAAAglE,mBACAf,GAAAjkE,EAAAikE,cAAA,KAAAe,IAAA,IAAAtO,EACA,IAAA74D,EAAAomE,EAAAX,EAAA,EACA,MAAAwD,EAAA7C,EAAAz9C,EAAA,IAAA9M,kBAAAmtD,EAAA7+C,GACAm7C,EAAAt0E,KAAAs0E,SACA4D,EAAA,IAAA3T,aAAA+P,GACA6D,EAAA,IAAA5T,aAAAyT,GACA,IAAAj6E,EAAA81B,EAEA,IAAA91B,EAAA,EAAeA,EAAAo7B,EAAWp7B,IAAA,CAC1B,IAAA81B,EAAA,EAAiBA,EAAAygD,EAAczgD,IAC/BqkD,EAAArkD,GAAAijC,EAAAyd,KAAAxV,EAKA,GAFAuY,EAAAY,EAAA,EAAAC,EAAA,GAEAhC,EACA,IAAAtiD,EAAA,EAAmBA,EAAAmkD,EAAkBnkD,IACrCokD,EAAAjpE,KAAA,IAAAmpE,EAAAtkD,QAGA1iB,EAAAqjE,WAAA2D,EAAA,EAAAF,EAAAjpE,GACAA,GAAAgpE,EAIA5C,GACAjkE,EAAAokE,aAAA0C,EAAA,EAAA9+C,EAAAxB,EAAA88C,EAAA,EAAA5M,GAIArjE,gBAAAkwE,EAAA7M,GACA,OAAA7nE,KAAAmR,KAAAinE,gBAAA1D,EAAA10E,KAAAmR,KAAAmjE,SAAAt0E,KAAAs0E,SAAAzM,UAKAoP,UAAA59C,EACA70B,YAAA6zE,GACAr2D,MAAA,gBACAhiB,KAAAmR,KAAAknE,EAGA7zE,gBAAAmwE,EAAAC,IACA,EAAAhxE,EAAAmP,aAAA,oDAKAqkE,UAAA/9C,EACA70B,YAAA2M,EAAAmnE,EAAA/qD,GACAvL,MAAA,aACAhiB,KAAAmR,OACAnR,KAAAs4E,UACA,MACA/3E,EADA4Q,EAAAmjE,SACAgE,EAEA,MAAAz0E,EAAA4hB,UAAA8H,GAAA,CACAvtB,KAAAutB,OAAA,IAAAxoB,WAAAxE,GACA,MAAAoK,EAAA4iB,EAAA7H,SAAAnlB,GACAP,KAAAutB,OAAAne,IAAAzE,QACK,MAAA/G,EAAAmN,UAAAwc,GAAA,CACLvtB,KAAAutB,OAAA,IAAAxoB,WAAAxE,GAEA,QAAAxC,EAAA,EAAqBA,EAAAwC,IAAYxC,EACjCiC,KAAAutB,OAAAxvB,GAAAwvB,EAAAjb,WAAAvU,OAEK,MAAAwvB,aAAAxoB,YAGL,UAAAnB,EAAAuP,0CAAgEoa,KAFhEvtB,KAAAutB,UAMA/oB,WAAAsyD,EAAAyd,EAAA58C,EAAA88C,GACA,MAAAH,EAAAt0E,KAAAmR,KAAAmjE,SACArpE,EAAA6rD,EAAAyd,GAAAD,EACAt0E,KAAAmR,KAAAokE,aAAAv1E,KAAAutB,OAAAtiB,EAAA,EAAA0sB,EAAA88C,EAAA,KAGAjwE,aAAAsyD,EAAAyd,EAAAp7C,EAAAxB,EAAA88C,EAAAjmC,EAAAq5B,GACA,MAAA12D,EAAAnR,KAAAmR,KACAmjE,EAAAnjE,EAAAmjE,SACAiE,EAAApnE,EAAAinE,gBAAA9D,EAAAzM,GACAt6C,EAAAvtB,KAAAutB,OAEA,QAAAxvB,EAAA,EAAmBA,EAAAo7B,IAAWp7B,EAAA,CAC9B,MAAAy6E,EAAA1hB,EAAAyd,KAAAD,EACAnjE,EAAAokE,aAAAhoD,EAAAirD,EAAA,EAAA7gD,EAAA88C,EAAA,EAAA5M,GACA4M,GAAA8D,GAIA/zE,gBAAAkwE,EAAA7M,GACA,OAAA7nE,KAAAmR,KAAAinE,gBAAA1D,EAAA10E,KAAAmR,KAAAmjE,SAAAzM,GAGArjE,gBAAAmwE,EAAAC,GACA,OAAAxzE,MAAA0lB,QAAA6tD,KAIA,IAAAA,EAAAp0E,SACA,EAAAqD,EAAAoF,MAAA,qCACA,IAGAiJ,OAAAC,UAAA0iE,MAAA,IACA,EAAAhxE,EAAAoF,MAAA,sCACA,GAGA,IAAA2rE,EAAA,IAAAA,EAAA,SAAAC,GAAA,UAKAgD,UAAAv+C,EACA70B,cACAwd,MAAA,gBAGAxd,WAAAsyD,EAAAyd,EAAA58C,EAAA88C,GACA,MAAAr2E,EAAA,IAAA04D,EAAAyd,GACA58C,EAAA88C,GAAA98C,EAAA88C,EAAA,GAAA98C,EAAA88C,EAAA,GAAAr2E,EAGAoG,aAAAsyD,EAAAyd,EAAAp7C,EAAAxB,EAAA88C,EAAAjmC,EAAAq5B,GACA,MAAA9I,EAAA,SAAAvwB,GAAA,GACA,IAAA3a,EAAA0gD,EACArhC,EAAAuhC,EAEA,QAAA12E,EAAA,EAAmBA,EAAAo7B,IAAWp7B,EAAA,CAC9B,MAAAK,EAAA2gE,EAAAjI,EAAAjjC,KACA8D,EAAAub,KAAA90C,EACAu5B,EAAAub,KAAA90C,EACAu5B,EAAAub,KAAA90C,EACA80C,GAAA20B,GAIArjE,gBAAAkwE,EAAA7M,GACA,OAAA6M,GAAA,EAAA7M,UAKAgQ,UAAAx+C,EACA70B,cACAwd,MAAA,eAGAxd,WAAAsyD,EAAAyd,EAAA58C,EAAA88C,GACA98C,EAAA88C,GAAA,IAAA3d,EAAAyd,GACA58C,EAAA88C,EAAA,OAAA3d,EAAAyd,EAAA,GACA58C,EAAA88C,EAAA,OAAA3d,EAAAyd,EAAA,GAGA/vE,aAAAsyD,EAAAyd,EAAAp7C,EAAAxB,EAAA88C,EAAAjmC,EAAAq5B,GACA,OAAAr5B,GAAA,IAAAq5B,EAEA,YADAlwC,EAAAvoB,IAAA0nD,EAAAjnD,SAAA0kE,IAAA,EAAAp7C,GAAAs7C,GAIA,MAAA1V,EAAA,SAAAvwB,GAAA,GACA,IAAA3a,EAAA0gD,EACArhC,EAAAuhC,EAEA,QAAA12E,EAAA,EAAmBA,EAAAo7B,IAAWp7B,EAC9B45B,EAAAub,KAAA6rB,EAAAjI,EAAAjjC,KACA8D,EAAAub,KAAA6rB,EAAAjI,EAAAjjC,KACA8D,EAAAub,KAAA6rB,EAAAjI,EAAAjjC,KACAqf,GAAA20B,EAIArjE,gBAAAkwE,EAAA7M,GACA,OAAA6M,GAAA,EAAA7M,GAAA,IAGArjE,cAAAgqC,GACA,WAAAA,GAKA,MAAAspC,EAAA,WACA,SAAAW,EAAA3hB,EAAAyd,EAAAmE,EAAA/gD,EAAA88C,GACA,MAAAr2E,EAAA04D,EAAAyd,GAAAmE,EACAv6E,EAAA24D,EAAAyd,EAAA,GAAAmE,EACA1gC,EAAA8e,EAAAyd,EAAA,GAAAmE,EACAzoC,EAAA6mB,EAAAyd,EAAA,GAAAmE,EACA/gD,EAAA88C,GAAA,IAAAr2E,IAAA,kBAAAA,EAAA,kBAAAD,EAAA,kBAAA65C,EAAA,mBAAA/H,EAAA,mBAAA9xC,GAAA,mBAAAA,EAAA,mBAAA65C,GAAA,mBAAA/H,EAAA,mBAAA+H,IAAA,mBAAAA,EAAA,mBAAA/H,EAAA,kBAAAA,IAAA,kBAAAA,EAAA,oBACAtY,EAAA88C,EAAA,OAAAr2E,GAAA,kBAAAA,EAAA,mBAAAD,EAAA,kBAAA65C,EAAA,mBAAA/H,EAAA,kBAAA9xC,IAAA,mBAAAA,EAAA,mBAAA65C,EAAA,mBAAA/H,EAAA,mBAAA+H,GAAA,kBAAAA,EAAA,gBAAA/H,EAAA,mBAAAA,IAAA,mBAAAA,EAAA,oBACAtY,EAAA88C,EAAA,OAAAr2E,GAAA,kBAAAA,EAAA,kBAAAD,EAAA,kBAAA65C,EAAA,mBAAA/H,EAAA,oBAAA9xC,GAAA,kBAAAA,EAAA,kBAAA65C,EAAA,mBAAA/H,EAAA,oBAAA+H,GAAA,mBAAAA,EAAA,mBAAA/H,EAAA,oBAAAA,IAAA,kBAAAA,EAAA,oBA4BA,qBAzBA5W,EACA70B,cACAwd,MAAA,gBAGAxd,WAAAsyD,EAAAyd,EAAA58C,EAAA88C,GACAgE,EAAA3hB,EAAAyd,EAAA,EAAA58C,EAAA88C,GAGAjwE,aAAAsyD,EAAAyd,EAAAp7C,EAAAxB,EAAA88C,EAAAjmC,EAAAq5B,GACA,MAAA9I,EAAA,OAAAvwB,GAAA,GAEA,QAAAzwC,EAAA,EAAqBA,EAAAo7B,EAAWp7B,IAChC06E,EAAA3hB,EAAAyd,EAAAxV,EAAApnC,EAAA88C,GACAF,GAAA,EACAE,GAAA,EAAA5M,EAIArjE,gBAAAkwE,EAAA7M,GACA,OAAA6M,EAAA,KAAA7M,GAAA,IA/BA,GAuCAgP,EAAA,WACA,SAAA4B,EAAArC,EAAAtf,EAAAyd,EAAA58C,EAAA88C,EAAA1V,GACA,MACA4Z,GADA7hB,EAAAyd,GAAAxV,IACAqX,EAAAwC,EACAC,EAAAzC,EAAA0C,GAAAH,EACA1pC,EAAA7lC,KAAAC,IAAA,MAAAwvE,GAAA,0BACAlhD,EAAA88C,GAAAxlC,EACAtX,EAAA88C,EAAA,GAAAxlC,EACAtX,EAAA88C,EAAA,GAAAxlC,EA4DA,qBAzDA5V,EACA70B,YAAAiyE,EAAAC,EAAApL,GAGA,GAFAtpD,MAAA,cAEAy0D,EACA,UAAA7yE,EAAAuP,YAAA,yDAaA,GAVAujE,MAAA,OACApL,KAAA,EACAtrE,KAAA+4E,GAAAtC,EAAA,GACAz2E,KAAA84E,GAAArC,EAAA,GACAz2E,KAAAg5E,GAAAvC,EAAA,GACAz2E,KAAAi5E,GAAAvC,EAAA,GACA12E,KAAAk5E,GAAAxC,EAAA,GACA12E,KAAAm5E,GAAAzC,EAAA,GACA12E,KAAA44E,EAAAtN,EAEAtrE,KAAA+4E,GAAA,GAAA/4E,KAAAg5E,GAAA,OAAAh5E,KAAA84E,GACA,UAAAl1E,EAAAuP,iDAAyEnT,KAAA1B,OAAU,4BAGnF0B,KAAAi5E,GAAA,GAAAj5E,KAAAk5E,GAAA,GAAAl5E,KAAAm5E,GAAA,MACA,EAAAv1E,EAAA6H,gCAAkDzL,KAAA1B,kCAClD0B,KAAAi5E,GAAAj5E,KAAAk5E,GAAAl5E,KAAAm5E,GAAA,GAGA,IAAAn5E,KAAAi5E,IAAA,IAAAj5E,KAAAk5E,IAAA,IAAAl5E,KAAAm5E,KACA,EAAAv1E,EAAAoF,SAA2BhJ,KAAA1B,yBAA8B0B,KAAAi5E,WAAgBj5E,KAAAk5E,cAAqBl5E,KAAAm5E,0CAG9Fn5E,KAAA44E,EAAA,KACA,EAAAh1E,EAAA6H,wBAA0CzL,KAAA44E,SAAc54E,KAAA1B,SAAU,4BAClE0B,KAAA44E,EAAA,GAIAp0E,WAAAsyD,EAAAyd,EAAA58C,EAAA88C,GACAgE,EAAAz4E,KAAA82D,EAAAyd,EAAA58C,EAAA88C,EAAA,GAGAjwE,aAAAsyD,EAAAyd,EAAAp7C,EAAAxB,EAAA88C,EAAAjmC,EAAAq5B,GACA,MAAA9I,EAAA,OAAAvwB,GAAA,GAEA,QAAAzwC,EAAA,EAAqBA,EAAAo7B,IAAWp7B,EAChC06E,EAAAz4E,KAAA82D,EAAAyd,EAAA58C,EAAA88C,EAAA1V,GACAwV,GAAA,EACAE,GAAA,EAAA5M,EAIArjE,gBAAAkwE,EAAA7M,GACA,OAAA6M,GAAA,EAAA7M,KA/DA,GAuEAkP,EAAA,WACA,MAAAqC,EAAA,IAAA7U,cAAA,6DACA8U,EAAA,IAAA9U,cAAA,qFACA+U,EAAA,IAAA/U,cAAA,yFACAgV,EAAA,IAAAhV,cAAA,QACAiV,EAAA,IAAAjV,aAAA,GACAkV,EAAA,IAAAlV,aAAA,GACAmV,EAAA,IAAAnV,aAAA,GACAoV,GAAA,aAEA,SAAAC,EAAAx2D,EAAAV,EAAAuB,GACAA,EAAA,GAAAb,EAAA,GAAAV,EAAA,GAAAU,EAAA,GAAAV,EAAA,GAAAU,EAAA,GAAAV,EAAA,GACAuB,EAAA,GAAAb,EAAA,GAAAV,EAAA,GAAAU,EAAA,GAAAV,EAAA,GAAAU,EAAA,GAAAV,EAAA,GACAuB,EAAA,GAAAb,EAAA,GAAAV,EAAA,GAAAU,EAAA,GAAAV,EAAA,GAAAU,EAAA,GAAAV,EAAA,GAkBA,SAAAm3D,EAAA3gD,GACA,OACA4gD,EAAA,IADA5gD,GAAA,SACA,MAAAA,EAGA,MAAAA,IAAA,aAGA,SAAA4gD,EAAAlqE,EAAAvG,EAAAnG,GACA,OAAAkG,KAAAC,IAAAuG,EAAAxG,KAAAwG,IAAAvG,EAAAnG,IAGA,SAAA62E,EAAAlB,GACA,OAAAA,EAAA,GACAkB,GAAAlB,GAGAA,EAAA,IACAA,EAAA,YAGAA,EAAAc,EAoDA,SAAAlB,EAAArC,EAAAtf,EAAAyd,EAAA58C,EAAA88C,EAAA1V,GACA,MAAAib,EAAAF,EAAA,IAAAhjB,EAAAyd,GAAAxV,GACAkb,EAAAH,EAAA,IAAAhjB,EAAAyd,EAAA,GAAAxV,GACAmb,EAAAJ,EAAA,IAAAhjB,EAAAyd,EAAA,GAAAxV,GACAob,EAAAH,GAAA5D,EAAAgE,GACAC,EAAAJ,GAAA7D,EAAAkE,GACAC,EAAAL,GAAA9D,EAAAoE,GACAC,EAAArE,EAAAsE,IAAAP,EAAA/D,EAAAuE,IAAAN,EAAAjE,EAAAwE,IAAAL,EACA7kB,EAAA0gB,EAAAyE,IAAAV,EAAA/D,EAAA0E,IAAAT,EAAAjE,EAAA2E,IAAAR,EACAS,EAAA5E,EAAA6E,IAAAd,EAAA/D,EAAA8E,IAAAb,EAAAjE,EAAA+E,IAAAZ,EACAa,EAAA3B,EACA2B,EAAA,GAAAX,EACAW,EAAA,GAAA1lB,EACA0lB,EAAA,GAAAJ,EACA,MAAAK,EAAA3B,GArCA,SAAA4B,EAAAC,EAAAt3D,GACA,OAAAq3D,EAAA,QAAAA,EAAA,GAIA,OAHAr3D,EAAA,GAAAs3D,EAAA,GACAt3D,EAAA,GAAAs3D,EAAA,QACAt3D,EAAA,GAAAs3D,EAAA,IAIA,MAAAC,EAAAv3D,EACA21D,EAAAR,EAAAmC,EAAAC,GACA,MAAAC,EAAAjC,GA3EA,SAAA8B,EAAAE,EAAAv3D,GACAA,EAAA,KAAAu3D,EAAA,GAAAF,EAAA,GACAr3D,EAAA,KAAAu3D,EAAA,GAAAF,EAAA,GACAr3D,EAAA,KAAAu3D,EAAA,GAAAF,EAAA,GAyEAI,CAAAJ,EAAAE,EAAAC,GACA7B,EAAAP,EAAAoC,EAAAx3D,GA0BA03D,CAAAvF,EAAAK,WAAA2E,EAAAC,GACA,MAAAO,EAAAnC,GAjEA,SAAAoC,EAAAR,EAAAp3D,GACA,OAAA43D,EAAA,QAAAA,EAAA,QAAAA,EAAA,GAIA,OAHA53D,EAAA,GAAAo3D,EAAA,GACAp3D,EAAA,GAAAo3D,EAAA,QACAp3D,EAAA,GAAAo3D,EAAA,IAIA,MAAAS,EAAA/B,EAAA,GAOAgC,GAAA,EANAD,IAMA,EALA/B,EAAA8B,EAAA,KAMAG,EAAA,EAAAD,EACAE,GAAA,EANAH,IAMA,EALA/B,EAAA8B,EAAA,KAMAK,EAAA,EAAAD,EACAE,GAAA,EANAL,IAMA,EALA/B,EAAA8B,EAAA,KAMAO,EAAA,EAAAD,EACAl4D,EAAA,GAAAo3D,EAAA,GAAAU,EAAAC,EACA/3D,EAAA,GAAAo3D,EAAA,GAAAY,EAAAC,EACAj4D,EAAA,GAAAo3D,EAAA,GAAAc,EAAAC,EA2CAC,CAAAjG,EAAAM,WAAA2E,EAAAO,GACA,MAAAU,EAAA5C,GA1BA,SAAA4B,EAAAC,EAAAt3D,GACA,MAAAu3D,EAAAv3D,EACA21D,EAAAR,EAAAmC,EAAAC,GACA,MAAAe,EAAA/C,GA7EA,SAAA8B,EAAAE,EAAAv3D,GAIAA,EAAA,GAHA,OAGAu3D,EAAA,GAAAF,EAAA,GACAr3D,EAAA,GAHA,EAGAu3D,EAAA,GAAAF,EAAA,GACAr3D,EAAA,GAHA,QAGAu3D,EAAA,GAAAF,EAAA,GAwEAkB,CAAAlB,EAAAE,EAAAe,GACA3C,EAAAP,EAAAkD,EAAAt4D,GAsBAw4D,CAAAlD,EAAAqC,EAAAU,GACA,MAAAI,EAAAjD,EACAG,EAAAN,EAAAgD,EAAAI,GACA/kD,EAAA88C,GAAA,IAAAoF,EAAA6C,EAAA,IACA/kD,EAAA88C,EAAA,OAAAoF,EAAA6C,EAAA,IACA/kD,EAAA88C,EAAA,OAAAoF,EAAA6C,EAAA,IAsEA,qBAnEArjD,EACA70B,YAAAiyE,EAAAC,EAAApL,EAAAwL,GAGA,GAFA90D,MAAA,aAEAy0D,EACA,UAAA7yE,EAAAuP,YAAA,wDAGAujE,KAAA,IAAAnS,aAAA,GACA+G,KAAA,IAAA/G,cAAA,QACAuS,KAAA,IAAAvS,cAAA,oBACA,MAAAwU,EAAAtC,EAAA,GACAqC,EAAArC,EAAA,GACAuC,EAAAvC,EAAA,GACAz2E,KAAAy2E,aACA,MAAAwC,EAAAvC,EAAA,GACAwC,EAAAxC,EAAA,GACAyC,EAAAzC,EAAA,GAeA,GAdA12E,KAAA02E,aACA12E,KAAAo6E,GAAA9O,EAAA,GACAtrE,KAAAs6E,GAAAhP,EAAA,GACAtrE,KAAAw6E,GAAAlP,EAAA,GACAtrE,KAAA06E,IAAA5D,EAAA,GACA92E,KAAA66E,IAAA/D,EAAA,GACA92E,KAAAi7E,IAAAnE,EAAA,GACA92E,KAAA26E,IAAA7D,EAAA,GACA92E,KAAA86E,IAAAhE,EAAA,GACA92E,KAAAk7E,IAAApE,EAAA,GACA92E,KAAA46E,IAAA9D,EAAA,GACA92E,KAAA+6E,IAAAjE,EAAA,GACA92E,KAAAm7E,IAAArE,EAAA,GAEAiC,EAAA,GAAAC,EAAA,OAAAF,EACA,UAAAl1E,EAAAuP,iDAAyEnT,KAAA1B,OAAU,4BAGnF26E,EAAA,GAAAC,EAAA,GAAAC,EAAA,MACA,EAAAv1E,EAAA6H,gCAAkDzL,KAAA1B,SAAc26E,MAAOC,MAAOC,OAAG,4BACjFn5E,KAAA02E,WAAA,IAAAnS,aAAA,KAGAvkE,KAAAo6E,GAAA,GAAAp6E,KAAAs6E,GAAA,GAAAt6E,KAAAw6E,GAAA,MACA,EAAA52E,EAAA6H,wBAA0CzL,KAAAo6E,OAAYp6E,KAAAs6E,OAAYt6E,KAAAw6E,cAAqBx6E,KAAA1B,kCACvF0B,KAAAo6E,GAAAp6E,KAAAs6E,GAAAt6E,KAAAw6E,GAAA,GAIAh2E,WAAAsyD,EAAAyd,EAAA58C,EAAA88C,GACAgE,EAAAz4E,KAAA82D,EAAAyd,EAAA58C,EAAA88C,EAAA,GAGAjwE,aAAAsyD,EAAAyd,EAAAp7C,EAAAxB,EAAA88C,EAAAjmC,EAAAq5B,GACA,MAAA9I,EAAA,OAAAvwB,GAAA,GAEA,QAAAzwC,EAAA,EAAqBA,EAAAo7B,IAAWp7B,EAChC06E,EAAAz4E,KAAA82D,EAAAyd,EAAA58C,EAAA88C,EAAA1V,GACAwV,GAAA,EACAE,GAAA,EAAA5M,EAIArjE,gBAAAkwE,EAAA7M,GACA,OAAA6M,GAAA,EAAA7M,GAAA,MAjMA,GAyMA2P,EAAA,WACA,SAAAmF,EAAAtuD,GACA,IAAApK,EAQA,OALAA,EADAoK,GAAA,KACAA,MAEA,SAAAA,EAAA,MAMA,SAAAuuB,EAAA15C,EAAA05E,EAAAC,EAAAC,GACA,OAAAD,EAAA35E,GAAA45E,EAAAD,GAAAD,EAGA,SAAAnE,EAAArC,EAAAtf,EAAAyd,EAAAwI,EAAAplD,EAAA88C,GACA,IAAAuI,EAAAlmB,EAAAyd,GACA0I,EAAAnmB,EAAAyd,EAAA,GACA2I,EAAApmB,EAAAyd,EAAA,IAEA,IAAAwI,IACAC,EAAApgC,EAAAogC,EAAAD,EAAA,OACAE,EAAArgC,EAAAqgC,EAAAF,EAAA3G,EAAA+G,KAAA/G,EAAAgH,MACAF,EAAAtgC,EAAAsgC,EAAAH,EAAA3G,EAAAiH,KAAAjH,EAAAkH,OAGAL,EAAA7G,EAAAgH,KACAH,EAAA7G,EAAAgH,KACKH,EAAA7G,EAAA+G,OACLF,EAAA7G,EAAA+G,MAGAD,EAAA9G,EAAAkH,KACAJ,EAAA9G,EAAAkH,KACKJ,EAAA9G,EAAAiH,OACLH,EAAA9G,EAAAiH,MAGA,MAAAE,GAAAP,EAAA,QACAnE,EAAA0E,EAAAN,EAAA,IACAO,EAAAD,EAAAL,EAAA,IACAzC,EAAArE,EAAA2C,GAAA4D,EAAA9D,GACAnjB,EAAA0gB,EAAA0C,GAAA6D,EAAAY,GACAvC,EAAA5E,EAAA4C,GAAA2D,EAAAa,GACA,IAAAz6E,EAAA0f,EAAAC,EAEA0zD,EAAA4C,GAAA,GACAj2E,EAAA,OAAA03E,GAAA,MAAA/kB,GAAA,MAAAslB,EACAv4D,GAAA,MAAAg4D,EAAA,MAAA/kB,EAAA,MAAAslB,EACAt4D,EAAA,KAAA+3D,GAAA,KAAA/kB,EAAA,OAAAslB,IAEAj4E,EAAA,OAAA03E,GAAA,OAAA/kB,GAAA,MAAAslB,EACAv4D,GAAA,MAAAg4D,EAAA,OAAA/kB,EAAA,MAAAslB,EACAt4D,EAAA,MAAA+3D,GAAA,KAAA/kB,EAAA,MAAAslB,GAGArjD,EAAA88C,GAAA,IAAArrE,KAAAma,KAAAxgB,GACA40B,EAAA88C,EAAA,OAAArrE,KAAAma,KAAAd,GACAkV,EAAA88C,EAAA,OAAArrE,KAAAma,KAAAb,GAsEA,qBAnEA2W,EACA70B,YAAAiyE,EAAAC,EAAAhqD,GAGA,GAFA1K,MAAA,UAEAy0D,EACA,UAAA7yE,EAAAuP,YAAA,qDAgBA,GAbAujE,MAAA,OACAhqD,OAAA,kBACA1sB,KAAA+4E,GAAAtC,EAAA,GACAz2E,KAAA84E,GAAArC,EAAA,GACAz2E,KAAAg5E,GAAAvC,EAAA,GACAz2E,KAAAm9E,KAAAzwD,EAAA,GACA1sB,KAAAo9E,KAAA1wD,EAAA,GACA1sB,KAAAq9E,KAAA3wD,EAAA,GACA1sB,KAAAs9E,KAAA5wD,EAAA,GACA1sB,KAAAi5E,GAAAvC,EAAA,GACA12E,KAAAk5E,GAAAxC,EAAA,GACA12E,KAAAm5E,GAAAzC,EAAA,GAEA12E,KAAA+4E,GAAA,GAAA/4E,KAAAg5E,GAAA,OAAAh5E,KAAA84E,GACA,UAAAl1E,EAAAuP,YAAA,yDAGAnT,KAAAi5E,GAAA,GAAAj5E,KAAAk5E,GAAA,GAAAl5E,KAAAm5E,GAAA,MACA,EAAAv1E,EAAA6H,MAAA,+CACAzL,KAAAi5E,GAAAj5E,KAAAk5E,GAAAl5E,KAAAm5E,GAAA,IAGAn5E,KAAAm9E,KAAAn9E,KAAAo9E,MAAAp9E,KAAAq9E,KAAAr9E,KAAAs9E,SACA,EAAA15E,EAAA6H,MAAA,2CACAzL,KAAAm9E,MAAA,IACAn9E,KAAAo9E,KAAA,IACAp9E,KAAAq9E,MAAA,IACAr9E,KAAAs9E,KAAA,KAIA94E,WAAAsyD,EAAAyd,EAAA58C,EAAA88C,GACAgE,EAAAz4E,KAAA82D,EAAAyd,GAAA,EAAA58C,EAAA88C,GAGAjwE,aAAAsyD,EAAAyd,EAAAp7C,EAAAxB,EAAA88C,EAAAjmC,EAAAq5B,GACA,MAAAkV,GAAA,GAAAvuC,GAAA,EAEA,QAAAzwC,EAAA,EAAqBA,EAAAo7B,EAAWp7B,IAChC06E,EAAAz4E,KAAA82D,EAAAyd,EAAAwI,EAAAplD,EAAA88C,GACAF,GAAA,EACAE,GAAA,EAAA5M,EAIArjE,gBAAAkwE,EAAA7M,GACA,OAAA6M,GAAA,EAAA7M,GAAA,IAGArjE,gBAAAmwE,EAAAC,GACA,SAGAuB,yBACA,SAAAvyE,EAAAuO,QAAAnS,KAAA,2BA7HA,IAuIA,SAAAlC,EAAAD,EAAAiF,GAEA,aAGArE,OAAAC,eAAAb,EAAA,cACAqF,OAAA,IAEArF,EAAA4/E,gBACA5/E,EAAA6/E,iBAAA7/E,EAAA+0B,kBAAA/0B,EAAA8/E,sBAAA9/E,EAAA+/E,gBAAA,EAEA,IAAAh6E,EAAAd,EAAA,GAEAgsB,EAAAhsB,EAAA,GAEAe,EAAAf,EAAA,GAEA20B,EAAA30B,EAAA,IAEAoB,EAAApB,EAAA,GAEAosB,EAAApsB,EAAA,IAEAqlB,EAAArlB,EAAA,IAiHA,SAAA26E,EAAAj2D,EAAA9D,GACA,IAAA8D,EAAAN,IAAA,cACA,YAGA,MAAA22D,EAAAr2D,EAAAiG,SAAA,cAEA,IAAArsB,MAAA0lB,QAAA+2D,MAAAt9E,OAAA,IACA,YAGA,MAAAu9E,KAEA,QAAA//E,EAAA,EAAAymB,EAAAq5D,EAAAt9E,OAAA,EAA6CxC,EAAAymB,EAAQzmB,IAAA,CACrD+/E,EAAAx8E,SAEA,QAAAuyB,EAAA,EAAA91B,EAAAu9B,EAAA,EAAAv9B,EAAA,EAAuC81B,EAAAyH,EAAQzH,GAAA,GAC/C,MAAAxF,EAAAwvD,EAAAhqD,GACAmkB,EAAA6lC,EAAAhqD,EAAA,GAEA,GAAAxF,EAAA3K,EAAA,IAAA2K,EAAA3K,EAAA,IAAAs0B,EAAAt0B,EAAA,IAAAs0B,EAAAt0B,EAAA,GACA,YAGAo6D,EAAA//E,GAAAuD,MACA+sB,IACA2pB,OAKA,OAAA8lC,EAjCAjgF,EAAA+0B,wBA5GApuB,cAAAoG,EAAAf,EAAAtE,EAAA0qB,GACA,OAAA1qB,EAAAoE,OAAA3J,KAAA,WAAA4K,EAAAf,EAAAtE,EAAA0qB,IAGAzrB,eAAAoG,EAAAf,EAAAtE,EAAA0qB,GACA,MAAAzI,EAAA5c,EAAAimB,WAAAhnB,GAEA,OAAAhG,EAAAshB,QAAAqC,GACA,OAGA,MAAAjd,GAAA,EAAA1G,EAAAwhB,OAAAxb,KAAA+D,oBAAuEqiB,EAAAC,gBACvE,IAAAgI,EAAA1Q,EAAA3oB,IAAA,WAEA,MAAAk/E,GACAnzE,OACA4c,OACA0Q,QAJAA,GAAA,EAAAr0B,EAAAuhB,QAAA8S,KAAA55B,KAAA,KAKAiM,KACAhF,cAGA,OAAA2yB,GACA,WACA,WAAA8lD,EAAAD,GAEA,WACA,WAAAE,EAAAF,GAEA,aACA,IAAAG,GAAA,EAAAh6E,EAAAspB,yBACAhG,OACAjkB,IAAA,OAIA,OAFA26E,GAAA,EAAAr6E,EAAAuhB,QAAA84D,KAAA5/E,KAAA,MAGA,SACA,WAAA6/E,EAAAJ,GAEA,UACA,WAAAK,EAAAL,GAEA,SACA,WAAAM,EAAAN,GAIA,OADA,EAAAn6E,EAAAoF,MAAA,oCAAAk1E,EAAA,uCACA,IAAAI,EAAAP,GAEA,YACA,WAAAQ,EAAAR,GAEA,eACA,WAAAS,EAAAT,GAEA,WACA,WAAAU,EAAAV,GAEA,aACA,WAAAW,EAAAX,GAEA,aACA,WAAAY,EAAAZ,GAEA,eACA,WAAAa,EAAAb,GAEA,cACA,WAAAc,EAAAd,GAEA,YACA,WAAAe,EAAAf,GAEA,UACA,WAAAgB,EAAAhB,GAEA,gBACA,WAAAiB,EAAAjB,GAEA,gBACA,WAAAkB,EAAAlB,GAEA,eACA,WAAAmB,EAAAnB,GAEA,gBACA,WAAAoB,EAAApB,GAEA,YACA,WAAAqB,EAAArB,GAEA,qBACA,WAAAsB,EAAAtB,GAEA,QAOA,OANA7lD,GAGA,EAAAt0B,EAAAoF,MAAA,kCAAAkvB,EAAA,wCAFA,EAAAt0B,EAAAoF,MAAA,gDAKA,IAAA40E,EAAAG,YAsDAH,EACAp5E,YAAAo6B,GACA,MAAApX,EAAAoX,EAAApX,KACAxnB,KAAAs/E,YAAA93D,EAAA3oB,IAAA,aACAmB,KAAAu/E,oBAAA/3D,EAAA3oB,IAAA,MACAmB,KAAAw/E,SAAAh4D,EAAA3oB,IAAA,MACAmB,KAAAy/E,aAAAj4D,EAAAiG,SAAA,SACAztB,KAAA0/E,SAAAl4D,EAAAiG,SAAA,MACAztB,KAAA2/E,eAAAn4D,GACAxnB,KAAA4/E,cAAAp4D,GACAxnB,KAAA8E,MACA+6E,gBAAA7/E,KAAAi5B,MACA6mD,YAAA9/E,KAAA8/E,YACA5mD,MAAAl5B,KAAAk5B,MACA6mD,SAAA//E,KAAA+/E,SACAC,gBAAAhgF,KAAAigF,WACA11E,GAAAq0B,EAAAr0B,GACA21E,iBAAAlgF,KAAAkgF,iBACAx8D,KAAA1jB,KAAA4c,UACAsb,QAAA0G,EAAA1G,SAIA1zB,SAAAy0B,EAAAknD,GACA,SAAAlnD,EAAAknD,GAGA37E,YAAAy0B,GACA,OAAAj5B,KAAAogF,SAAAnnD,EAAAr1B,EAAAsQ,eAAAqB,aAAAvV,KAAAogF,SAAAnnD,EAAAr1B,EAAAsQ,eAAAkE,UAAApY,KAAAogF,SAAAnnD,EAAAr1B,EAAAsQ,eAAAqE,QAGA/T,aAAAy0B,GACA,OAAAj5B,KAAAogF,SAAAnnD,EAAAr1B,EAAAsQ,eAAAU,SAAA5U,KAAAogF,SAAAnnD,EAAAr1B,EAAAsQ,eAAAqB,aAAAvV,KAAAogF,SAAAnnD,EAAAr1B,EAAAsQ,eAAAkE,QAGAqX,eACA,WAAAzvB,KAAAi5B,OAIAj5B,KAAAqgF,YAAArgF,KAAAi5B,OAGAvJ,gBACA,WAAA1vB,KAAAi5B,OAIAj5B,KAAAsgF,aAAAtgF,KAAAi5B,OAGAz0B,YAAAu7E,GACA//E,KAAA+/E,UAAA,EAAAn8E,EAAAyO,mBAAA0tE,GAAA,IAGAv7E,oBAAA07E,GACAlgF,KAAAkgF,kBAAA,EAAAt8E,EAAAmN,UAAAmvE,KAAA,KAGA17E,SAAAy0B,GACAj5B,KAAAi5B,MAAAhnB,OAAAC,UAAA+mB,MAAA,EAAAA,EAAA,EAGAz0B,QAAA27E,GACA,OAAAngF,KAAAogF,SAAApgF,KAAAi5B,MAAAknD,GAGA37E,aAAAoY,GACAxb,MAAA0lB,QAAAlK,IAAA,IAAAA,EAAArc,OACAP,KAAA4c,UAAAhZ,EAAAwP,KAAA8Q,cAAAtH,GAEA5c,KAAA4c,WAAA,SAIApY,SAAA00B,GACA,MAAAE,EAAA,IAAAvO,kBAAA,GAEA,GAAAzpB,MAAA0lB,QAAAoS,GAKA,OAAAA,EAAA34B,QACA,OACAP,KAAAk5B,MAAA,KACA,MAEA,OACAzB,EAAA4B,WAAAC,WAAAq9C,KAAAnC,WAAAt7C,EAAA,EAAAE,EAAA,GAEAp5B,KAAAk5B,MAAAE,EACA,MAEA,OACA3B,EAAA4B,WAAAC,WAAAC,IAAAi7C,WAAAt7C,EAAA,EAAAE,EAAA,GAEAp5B,KAAAk5B,MAAAE,EACA,MAEA,OACA3B,EAAA4B,WAAAC,WAAAs9C,KAAApC,WAAAt7C,EAAA,EAAAE,EAAA,GAEAp5B,KAAAk5B,MAAAE,EACA,MAEA,QACAp5B,KAAAk5B,MAAAE,OA5BAp5B,KAAAk5B,MAAAE,EAiCA50B,eAAAs7E,GAGA,GAFA9/E,KAAA8/E,YAAA,IAAAnC,GAEA,EAAA95E,EAAAshB,QAAA26D,GAIA,GAAAA,EAAA54D,IAAA,OACA,MAAAM,EAAAs4D,EAAAjhF,IAAA,MACA0hF,EAAA/4D,EAAA3oB,IAAA,QAEA0hF,KAAA,EAAA18E,EAAAuhB,QAAAm7D,EAAA,YACAvgF,KAAA8/E,YAAAU,SAAAh5D,EAAA3oB,IAAA,KAAAmB,KAAA4c,WACA5c,KAAA8/E,YAAAW,SAAAj5D,EAAA3oB,IAAA,MACAmB,KAAA8/E,YAAAY,aAAAl5D,EAAAiG,SAAA,YAEK,GAAAqyD,EAAA54D,IAAA,WACL,MAAAlmB,EAAA8+E,EAAAryD,SAAA,UAEArsB,MAAA0lB,QAAA9lB,MAAAT,QAAA,IACAP,KAAA8/E,YAAAa,0BAAA3/E,EAAA,IACAhB,KAAA8/E,YAAAc,wBAAA5/E,EAAA,IACAhB,KAAA8/E,YAAAU,SAAAx/E,EAAA,GAAAhB,KAAA4c,WAEA,IAAA5b,EAAAT,QACAP,KAAA8/E,YAAAY,aAAA1/E,EAAA,UAIAhB,KAAA8/E,YAAAU,SAAA,GAIAh8E,cAAAgjB,GACAxnB,KAAAigF,WAAA,KACA,MAAAY,EAAAr5D,EAAA3oB,IAAA,MAEA,OAAAgF,EAAAshB,QAAA07D,GACA,OAGA,MAAAC,EAAAD,EAAAhiF,IAAA,KAEA,MAAAgF,EAAA4hB,UAAAq7D,GAEA,YADA9gF,KAAAigF,WAAAa,GAIA,OAAAj9E,EAAAshB,QAAA27D,GACA,OAGA,MAAA7D,EAAAz1D,EAAA3oB,IAAA,OAEA,EAAAgF,EAAAuhB,QAAA63D,IAAA6D,EAAA55D,IAAA+1D,EAAA3+E,QAIA0B,KAAAigF,WAAAa,EAAAjiF,IAAAo+E,EAAA3+E,OAGAkG,cAAAyiB,GACA,OAAAjnB,KAAAigF,WAAAz4D,KAAAgX,SAAA,aAAAz2B,KAAAsoB,IACA,IAAAA,EACA,OAIA,OADA,IAAAvB,EAAAkC,aAAAX,EAAApJ,EAAAoJ,EAAAzlB,MACAqmB,OAAAlpB,KAAA,WACA,OAAAsoB,MAKA7rB,gBAAAu8E,EAAA36E,EAAA46E,GACA,IAAAhhF,KAAAigF,WACA,OAAAl5E,QAAAtC,QAAA,IAAAyqB,EAAAwC,cAGA,MAAA5sB,EAAA9E,KAAA8E,KACAm8E,EAAAjhF,KAAAigF,WAAAz4D,KACAuI,EAAA/vB,KAAAmxB,eAAA,gEACA+vD,EAAAD,EAAAxzD,SAAA,mBACAqpD,EAAAmK,EAAAxzD,SAAA,yBACApR,EAhNA,SAAAqH,EAAAw9D,EAAApK,GACA,MAAAj9B,EAAAE,EAAAD,EAAAqnC,GAAAv9E,EAAAwP,KAAAguE,2BAAAF,EAAApK,GAEA,GAAAj9B,IAAAC,GAAAC,IAAAonC,EACA,eAAAz9D,EAAA,GAAAA,EAAA,IAGA,MAAAkyD,GAAAlyD,EAAA,GAAAA,EAAA,KAAAo2B,EAAAD,GACAg8B,GAAAnyD,EAAA,GAAAA,EAAA,KAAAy9D,EAAApnC,GACA,OAAA67B,EAAA,IAAAC,EAAAnyD,EAAA,GAAAm2B,EAAA+7B,EAAAlyD,EAAA,GAAAq2B,EAAA87B,GAuMAwL,CAAAv8E,EAAA4e,KAAAw9D,EAAApK,GACA,OAAA/mD,EAAAhoB,KAAAsoB,IACA,MAAAoB,EAAA,IAAAvC,EAAAwC,aAEA,OADAD,EAAAY,MAAAzuB,EAAAyQ,IAAAoM,iBAAA3b,EAAA4e,KAAArH,EAAAy6D,IACAiK,EAAAz1E,iBACAZ,OAAA1K,KAAAigF,WACA75E,OACAiqB,YACAwB,aAAAJ,IACO1pB,KAAA,KACP0pB,EAAAY,MAAAzuB,EAAAyQ,IAAAqM,kBACA1gB,KAAAigF,WAAAtrD,QACAlD,OAOA5zB,EAAA+/E,mBAEAD,EACAn5E,cACAxE,KAAAw4C,MAAA,EACAx4C,KAAAy6B,MAAA72B,EAAAwQ,0BAAA0F,MACA9Z,KAAAshF,WAAA,GACAthF,KAAAuhF,uBAAA,EACAvhF,KAAAwhF,qBAAA,EAGAh9E,SAAAg0C,EAAA90B,GAAA,UACA,MAAA7f,EAAAuhB,QAAAozB,GACAx4C,KAAAw4C,MAAA,OAIA,GAAAvmC,OAAAC,UAAAsmC,GAAA,CACA,GAAAA,EAAA,GACA,MAAAsF,GAAAp6B,EAAA,GAAAA,EAAA,MACA+9D,GAAA/9D,EAAA,GAAAA,EAAA,MAEAo6B,EAAA,GAAA2jC,EAAA,IAAAjpC,EAAAsF,GAAAtF,EAAAipC,MACA,EAAA79E,EAAAoF,0DAA8EwvC,KAC9EA,EAAA,GAIAx4C,KAAAw4C,SAIAh0C,SAAAi2B,GACA,MAAA52B,EAAAuhB,QAAAqV,GAIA,OAAAA,EAAAn8B,MACA,QACA0B,KAAAy6B,MAAA72B,EAAAwQ,0BAAA0F,MACA,MAEA,QACA9Z,KAAAy6B,MAAA72B,EAAAwQ,0BAAA2F,OACA,MAEA,QACA/Z,KAAAy6B,MAAA72B,EAAAwQ,0BAAA4F,QACA,MAEA,QACAha,KAAAy6B,MAAA72B,EAAAwQ,0BAAA6F,MACA,MAEA,QACAja,KAAAy6B,MAAA72B,EAAAwQ,0BAAAsC,WAQAlS,aAAA88E,GACA,GAAAlgF,MAAA0lB,QAAAw6D,MAAA/gF,OAAA,GACA,IAAAmhF,GAAA,EACAC,GAAA,EAEA,UAAAlxE,KAAA6wE,EAAA,CAGA,MAFA7wE,GAAA,GAEA,CACAixE,GAAA,EACA,MACSjxE,EAAA,IACTkxE,GAAA,GAIAD,IAAAC,EACA3hF,KAAAshF,YAEAthF,KAAAw4C,MAAA,OAEK8oC,IACLthF,KAAAw4C,MAAA,GAIAh0C,0BAAAo9E,GACA3vE,OAAAC,UAAA0vE,KACA5hF,KAAAuhF,uBAAAK,GAIAp9E,wBAAAo9E,GACA3vE,OAAAC,UAAA0vE,KACA5hF,KAAAwhF,qBAAAI,IAMA/jF,EAAA8/E,8BAEAD,UAAAE,EACAp5E,YAAAu5E,GACA/7D,MAAA+7D,GACA,MAAAv2D,EAAAu2D,EAAAv2D,KAEA,GAAAA,EAAAN,IAAA,QACA,MAAA26D,EAAAr6D,EAAAT,OAAA,OACA/mB,KAAA8E,KAAAg9E,WAAA,EAAAj+E,EAAAwhB,OAAAw8D,KAAAj0E,WAAA,KACA,MAAAm0E,EAAAv6D,EAAA3oB,IAAA,MACAmB,KAAA8E,KAAAk9E,WAAA,EAAAn+E,EAAAuhB,QAAA28D,KAAAzjF,KAAAsF,EAAAoQ,oBAAAmE,MAGA,GAAAnY,KAAA8E,KAAAk9E,YAAAp+E,EAAAoQ,oBAAAkE,MAAA,CACA,MAAAugB,EAAAjR,EAAA3oB,IAAA,OACAmB,KAAA8E,KAAAtD,OAAA,EAAAoC,EAAAyO,mBAAAomB,EAAA55B,IAAA,UACAmB,KAAAs/E,YAAA7mD,EAAA55B,IAAA,aACAmB,KAAA8E,KAAAi7E,SAAA//E,KAAA+/E,SAEAtnD,EAAAvR,IAAA,iBAGAlnB,KAAAiiF,gBAAAxpD,EAAA55B,IAAA,iBACAmB,KAAA8E,KAAAo9E,aAAAliF,KAAAkiF,cAHAliF,KAAA8E,KAAAo9E,aAAA,KAMAzpD,EAAAvR,IAAA,MAGAlnB,KAAAu/E,oBAAA9mD,EAAA55B,IAAA,MACAmB,KAAA8E,KAAAo7E,iBAAAlgF,KAAAkgF,kBAHAlgF,KAAA8E,KAAAo7E,iBAAA,KAMAlgF,KAAA8E,KAAAq9E,SAAA1pD,EAAAvR,IAAA,SAEAuR,EAAAvR,IAAA,MAGAlnB,KAAA0/E,SAAAjnD,EAAAhL,SAAA,MACAztB,KAAA8E,KAAAo0B,MAAAl5B,KAAAk5B,OAHAl5B,KAAA8E,KAAAo0B,MAAA,UAMAl5B,KAAA8E,KAAAtD,OAAA,EAAAoC,EAAAyO,mBAAAmV,EAAA3oB,IAAA,UACAmB,KAAAiiF,gBAAAz6D,EAAA3oB,IAAA,iBACAmB,KAAA8E,KAAAo9E,aAAAliF,KAAAkiF,aACAliF,KAAA8E,KAAAq9E,SAAA36D,EAAAN,IAAA,SAEAM,EAAAN,IAAA,OACAlnB,KAAA8E,KAAAo0B,MAAA,MAKA10B,gBAAA09E,GACAliF,KAAAkiF,cAAA,EAAAt+E,EAAAmN,UAAAmxE,KAAA,MAKArkF,EAAA6/E,yBAEAY,UAAAV,EACAp5E,YAAAo6B,GACA5c,MAAA4c,GACA,MAAApX,EAAAoX,EAAApX,KACA1iB,EAAA9E,KAAA8E,KACAA,EAAAs9E,eAAAx+E,EAAAiQ,eAAAuD,OACAtS,EAAAu9E,UAAAriF,KAAAsiF,oBAAA96D,GACA1iB,EAAAy9E,YAAA,EAAAr+E,EAAAspB,yBACAhG,OACAjkB,IAAA,IACAkqB,UAAA,IAEA3oB,EAAA09E,iBAAA,EAAA5+E,EAAAyO,mBAAAmV,EAAA3oB,IAAA,WACAiG,EAAA29E,mBAAA,EAAAv+E,EAAAspB,yBACAhG,OACAjkB,IAAA,QACK,GACL,MAAA26E,GAAA,EAAAh6E,EAAAspB,yBACAhG,OACAjkB,IAAA,OAEAuB,EAAAo5E,WAAA,EAAAr6E,EAAAuhB,QAAA84D,KAAA5/E,KAAA,KACA0B,KAAA0iF,gBAAA,EAAAx+E,EAAAspB,yBACAhG,OACAjkB,IAAA,QACKM,EAAAgiB,KAAAuB,MACLtiB,EAAA69E,YAAA,EAAAz+E,EAAAspB,yBACAhG,OACAjkB,IAAA,SAGA0O,OAAAC,UAAApN,EAAA69E,aAAA79E,EAAA69E,WAAA,KACA79E,EAAA69E,WAAA,GAGA79E,EAAA89E,SAAA5iF,KAAA6iF,aAAAj/E,EAAAuQ,oBAAAqE,UAEA,QAAA1T,EAAAo5E,YACAp5E,EAAAy9E,WAAA,KACAviF,KAAAw/E,SAAA57E,EAAAsQ,eAAAkE,SAIA5T,oBAAAgjB,GACA,IAAAA,EAAAN,IAAA,OAAAM,EAAAN,IAAA,UAEA,OADA,EAAAtjB,EAAAoF,MAAA,yDACA,GAGA,IAAAwe,EAAAN,IAAA,UACA,SAAAtjB,EAAAyO,mBAAAmV,EAAA3oB,IAAA,MAGA,MAAAwjF,KAEA76D,EAAAN,IAAA,MACAm7D,EAAAS,SAAA,EAAAl/E,EAAAyO,mBAAAmV,EAAA3oB,IAAA,OAGA,IAAAkkF,EAAAv7D,EAEA,KAAAu7D,EAAA77D,IAAA,YACA67D,IAAAlkF,IAAA,WAEA,EAAAgF,EAAAshB,QAAA49D,KAIAA,EAAA77D,IAAA,MACAm7D,EAAAS,SAAA,EAAAl/E,EAAAyO,mBAAA0wE,EAAAlkF,IAAA,OAIA,OAAAwjF,EAAAx8E,KAAA,KAGArB,aAAA27E,GACA,SAAAngF,KAAA8E,KAAA69E,WAAAxC,GAGA37E,gBAAAu8E,EAAA36E,EAAA46E,GACA,OAAAA,EACAj6E,QAAAtC,QAAA,IAAAyqB,EAAAwC,cAGA1P,MAAA1W,gBAAAy1E,EAAA36E,EAAA46E,UAKA7C,UAAAG,EACA95E,YAAAo6B,GACA5c,MAAA4c,GACA,MAAApX,EAAAoX,EAAApX,KACAxnB,KAAA8E,KAAAy9E,YAAA,EAAA3+E,EAAAyO,mBAAArS,KAAA8E,KAAAy9E,YAAA,IACA,IAAAS,GAAA,EAAA9+E,EAAAspB,yBACAhG,OACAjkB,IAAA,QAGA0O,OAAAC,UAAA8wE,MAAA,GAAAA,EAAA,KACAA,EAAA,MAGAhjF,KAAA8E,KAAAm+E,cAAAD,EACA,IAAAE,GAAA,EAAAh/E,EAAAspB,yBACAhG,OACAjkB,IAAA,aAGA0O,OAAAC,UAAAgxE,MAAA,KACAA,EAAA,MAGAljF,KAAA8E,KAAA8pC,OAAAs0C,EACAljF,KAAA8E,KAAAq+E,UAAAnjF,KAAA6iF,aAAAj/E,EAAAuQ,oBAAA2E,WACA9Y,KAAA8E,KAAAs+E,KAAApjF,KAAA6iF,aAAAj/E,EAAAuQ,oBAAAuF,QAAA1Z,KAAA6iF,aAAAj/E,EAAAuQ,oBAAA2E,aAAA9Y,KAAA6iF,aAAAj/E,EAAAuQ,oBAAA4E,YAAA/Y,KAAA6iF,aAAAj/E,EAAAuQ,oBAAAmF,aAAA,OAAAtZ,KAAA8E,KAAA8pC,OAGApqC,gBAAAu8E,EAAA36E,EAAA46E,GACA,GAAAA,GAAAhhF,KAAAigF,WACA,OAAAj+D,MAAA1W,gBAAAy1E,EAAA36E,EAAA46E,GAGA,MAAAnvD,EAAA,IAAA3C,EAAAwC,aAEA,IAAA1xB,KAAA8E,KAAA29E,kBACA,OAAA17E,QAAAtC,QAAAotB,GAGA,MAAAnnB,EAAA,IAAAyd,EAAAQ,QAAA,EAAA/kB,EAAAsL,eAAAlP,KAAA8E,KAAA29E,oBACA,OAAA1B,EAAAz1E,iBACAZ,SACAtE,OACAiqB,UAAArwB,KAAA0iF,eACA7wD,iBACK9pB,KAAA,WACL,OAAA8pB,WAMAusD,UAAAE,EACA95E,YAAAo6B,GACA5c,MAAA4c,GACA5+B,KAAA8E,KAAAu+E,UAAArjF,KAAA6iF,aAAAj/E,EAAAuQ,oBAAA8E,SAAAjZ,KAAA6iF,aAAAj/E,EAAAuQ,oBAAA+E,YACAlZ,KAAA8E,KAAAw+E,YAAAtjF,KAAA6iF,aAAAj/E,EAAAuQ,oBAAA8E,SAAAjZ,KAAA6iF,aAAAj/E,EAAAuQ,oBAAA+E,YACAlZ,KAAA8E,KAAAy+E,WAAAvjF,KAAA6iF,aAAAj/E,EAAAuQ,oBAAA+E,YAEAlZ,KAAA8E,KAAAu+E,SACArjF,KAAAwjF,iBAAA5kD,GACK5+B,KAAA8E,KAAAw+E,YACLtjF,KAAAyjF,oBAAA7kD,GACK5+B,KAAA8E,KAAAy+E,WACLvjF,KAAA0jF,mBAAA9kD,IAEA,EAAAh7B,EAAAoF,MAAA,oDAIAxE,iBAAAo6B,IACA,EAAA/6B,EAAAuhB,QAAAplB,KAAA8E,KAAAy9E,cACAviF,KAAA8E,KAAAy9E,WAAAviF,KAAA8E,KAAAy9E,WAAAjkF,MAGA,MAAAqlF,EAAA/kD,EAAApX,KAAA3oB,IAAA,MAEA,OAAAgF,EAAAshB,QAAAw+D,GACA,OAGA,MAAAC,EAAAD,EAAA9kF,IAAA,KAEA,OAAAgF,EAAAshB,QAAAy+D,GACA,OAGA,MAAAC,EAAAD,EAAA58D,UACA,IAAA68D,EAAAtjF,SAMAP,KAAA8E,KAAAg/E,YAAA,QAAAD,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAGAr/E,oBAAAo6B,GACA5+B,KAAA8E,KAAAy9E,WAAAviF,KAAA8E,KAAAi/E,YAAA,KACA,MAAAC,EAAAplD,EAAApX,KAAA3oB,IAAA,UAEA,MAAAgF,EAAAshB,QAAA6+D,MAAA98D,IAAA,MACA,MAAA+8D,EAAAD,EAAAnlF,IAAA,MAEA,EAAAgF,EAAAuhB,QAAA6+D,KACAjkF,KAAA8E,KAAAy9E,WAAA0B,EAAA3lF,MAIA,MAAAuiF,EAAAjiD,EAAApX,KAAA3oB,IAAA,MAEA,OAAAgF,EAAAshB,QAAA07D,GACA,OAGA,MAAAC,EAAAD,EAAAhiF,IAAA,KAEA,MAAAgF,EAAAshB,QAAA27D,GAIA,UAAAv9E,KAAAu9E,EAAA95D,UACA,WAAAzjB,EAAA,CACAvD,KAAA8E,KAAAi/E,YAAAxgF,EACA,OAKAiB,mBAAAo6B,GACAA,EAAApX,KAAAN,IAAA,KAKA4H,EAAAwG,QAAAwD,qBACAC,SAAA6F,EAAApX,KACAwR,UAAAh5B,KAAA8E,KACAiB,WAAA64B,EAAAr5B,WAAAQ,cAPA,EAAAnC,EAAAoF,MAAA,qEAaAq1E,UAAAC,EACA95E,YAAAo6B,GACA5c,MAAA4c,GACA5+B,KAAA8E,KAAAwsB,WACA,MAAAA,GAAA,EAAAptB,EAAAspB,yBACAhG,KAAAoX,EAAApX,KACAjkB,IAAA,QAGA,GAAAnC,MAAA0lB,QAAAwK,GAAA,CACA,MAAA1mB,EAAAg0B,EAAAh0B,KAEA,QAAA7M,EAAA,EAAAymB,EAAA8M,EAAA/wB,OAA0CxC,EAAAymB,EAAQzmB,IAAA,CAClD,MAAAmmF,EAAAt5E,EAAAimB,WAAAS,EAAAvzB,IACAomF,EAAA/iF,MAAA0lB,QAAAo9D,GACAlkF,KAAA8E,KAAAwsB,QAAAvzB,IACA+lF,YAAAK,EAAAv5E,EAAAimB,WAAAqzD,EAAA,IAAAA,EACAE,cAAA,EAAAxgF,EAAAyO,mBAAA8xE,EAAAv5E,EAAAimB,WAAAqzD,EAAA,IAAAA,KAKA9iF,MAAA0lB,QAAA9mB,KAAA8E,KAAAy9E,cACAviF,KAAA8E,KAAAy9E,YAAAviF,KAAA8E,KAAAy9E,aAGAviF,KAAA8E,KAAAu/E,MAAArkF,KAAA6iF,aAAAj/E,EAAAuQ,oBAAAgF,OACAnZ,KAAA8E,KAAAw/E,YAAAtkF,KAAA6iF,aAAAj/E,EAAAuQ,oBAAAoF,oBAKA0kE,UAAAP,EACAl5E,YAAAu5E,GAEA/7D,MAAA+7D,GACA,MAAAv2D,EAAAu2D,EAAAv2D,KACAxnB,KAAA8E,KAAAs9E,eAAAx+E,EAAAiQ,eAAAoC,KAEAjW,KAAA8E,KAAAk7E,cACAhgF,KAAA8E,KAAAxG,KAAA,UAEA0B,KAAA8E,KAAA4e,KAAA,GAAA1jB,KAAA8E,KAAA4e,KAAA,GARA,GASA1jB,KAAA8E,KAAA4e,KAAA,GAAA1jB,KAAA8E,KAAA4e,KAAA,GATA,GAUA1jB,KAAA8E,KAAAxG,KAAAkpB,EAAAN,IAAA,QAAAM,EAAA3oB,IAAA,QAAAP,KAAA,QAGAkpB,EAAAN,IAAA,UACAlnB,KAAA8E,KAAAuiC,MAAA7f,EAAA3oB,IAAA,eACAmB,KAAA8E,KAAAy/E,WAAA/8D,EAAA3oB,IAAA,sBAEAmB,KAAA8E,KAAAuiC,MAAA,KACArnC,KAAA8E,KAAAy/E,WAAA,aAMAvG,UAAAJ,EACAp5E,YAAAo6B,GACA5c,MAAA4c,GACA5+B,KAAA8E,KAAAs9E,eAAAx+E,EAAAiQ,eAAAqC,KACA,MAAA2nE,EAAAJ,EAAA7+C,EAAApX,KAAAxnB,KAAA4c,WAEAihE,IACA79E,KAAA8E,KAAA+4E,cAGA/uD,EAAAwG,QAAAwD,qBACAC,SAAA6F,EAAApX,KACAwR,UAAAh5B,KAAA8E,KACAiB,WAAA64B,EAAAr5B,WAAAQ,oBAMAw4E,UAAAX,EACAp5E,YAAAu5E,GACA/7D,MAAA+7D,GACA/9E,KAAA8E,KAAAs9E,eAAAx+E,EAAAiQ,eAAAmD,MACA,IAAAwtE,EAAAzG,EAAAv2D,KAAA3oB,IAAA,UAEA,IAAA2lF,EAEA,YADA,EAAA5gF,EAAAoF,MAAA,gEAIA,MAAAy7E,EAAAD,EAAA3lF,IAAA,WACAmB,KAAA8E,KAAA4/E,YAAA,EAAA7gF,EAAAuhB,QAAAq/D,KAAAnmF,KAAA,KACA,MAAAqmF,EAAA5G,EAAAv2D,KAAAT,OAAA,UACA/mB,KAAA8E,KAAA8/E,UAAA,EAAA/gF,EAAAwhB,OAAAs/D,KAAA/2E,WAAA,KACA,MAAAm0E,EAAAyC,EAAA3lF,IAAA,MAoBA,IAlBA,EAAAgF,EAAAuhB,QAAA28D,EAAAn+E,EAAAoQ,oBAAAkE,SACAssE,IAAA3lF,IAAA,QAGA2lF,EAAAt9D,IAAA,MAGAlnB,KAAAu/E,oBAAAiF,EAAA3lF,IAAA,MACAmB,KAAA8E,KAAAo7E,iBAAAlgF,KAAAkgF,kBAHAlgF,KAAA8E,KAAAo7E,iBAAA,KAMAsE,EAAAt9D,IAAA,MAGAlnB,KAAA0/E,SAAA8E,EAAA/2D,SAAA,MACAztB,KAAA8E,KAAAo0B,MAAAl5B,KAAAk5B,OAHAl5B,KAAA8E,KAAAo0B,MAAA,MAMAl5B,KAAAyvB,SAAA,CACA,MAAAo1D,EAAAL,EAAA3lF,IAAA,KAEAmB,KAAAqgF,YAAAwE,IACA7kF,KAAAw/E,SAAAqF,GAIA7kF,KAAA8E,KAAAtD,OAAA,EAAAoC,EAAAyO,mBAAAmyE,EAAA3lF,IAAA,UACAmB,KAAA8E,KAAAi7E,UAAA,EAAAn8E,EAAAyO,mBAAAmyE,EAAA3lF,IAAA,wBAKA2/E,UAAAd,EACAl5E,YAAAu5E,GACA/7D,MAAA+7D,GACA/9E,KAAA8E,KAAAs9E,eAAAx+E,EAAAiQ,eAAAsC,gBAKAsoE,UAAAf,EACAl5E,YAAAu5E,GACA/7D,MAAA+7D,GACA/9E,KAAA8E,KAAAs9E,eAAAx+E,EAAAiQ,eAAAuC,KACApW,KAAA8E,KAAAggF,gBAAAlhF,EAAAwP,KAAA8Q,cAAA65D,EAAAv2D,KAAAiG,SAAA,aAKAixD,UAAAhB,EACAl5E,YAAAu5E,GACA/7D,MAAA+7D,GACA/9E,KAAA8E,KAAAs9E,eAAAx+E,EAAAiQ,eAAAwC,cAKAsoE,UAAAjB,EACAl5E,YAAAu5E,GACA/7D,MAAA+7D,GACA/9E,KAAA8E,KAAAs9E,eAAAx+E,EAAAiQ,eAAAyC,cAKAsoE,UAAAlB,EACAl5E,YAAAu5E,GACA/7D,MAAA+7D,GACA/9E,KAAA8E,KAAAs9E,eAAAx+E,EAAAiQ,eAAA2C,SACA,MAAAuuE,EAAAhH,EAAAv2D,KAAAiG,SAAA,YACAztB,KAAA8E,KAAAkgF,YAEA,QAAAjnF,EAAA,EAAAymB,EAAAugE,EAAAxkF,OAA4CxC,EAAAymB,EAAQzmB,GAAA,EACpDiC,KAAA8E,KAAAkgF,SAAA1jF,MACA+sB,EAAA02D,EAAAhnF,GACAi6C,EAAA+sC,EAAAhnF,EAAA,YAOA8gF,UAAAD,EACAp6E,YAAAu5E,GACA/7D,MAAA+7D,GACA/9E,KAAA8E,KAAAs9E,eAAAx+E,EAAAiQ,eAAA0C,eAKAuoE,UAAApB,EACAl5E,YAAAu5E,GACA/7D,MAAA+7D,GACA/9E,KAAA8E,KAAAs9E,eAAAx+E,EAAAiQ,eAAAiD,aAKAioE,UAAArB,EACAl5E,YAAAu5E,GACA/7D,MAAA+7D,GACA/9E,KAAA8E,KAAAs9E,eAAAx+E,EAAAiQ,eAAAkD,IACA,MAAAnM,EAAAmzE,EAAAnzE,KACAq6E,EAAAlH,EAAAv2D,KAAAiG,SAAA,WACAztB,KAAA8E,KAAAogF,YAEA,QAAAnnF,EAAA,EAAAymB,EAAAygE,EAAA1kF,OAAiDxC,EAAAymB,IAAQzmB,EAAA,CACzDiC,KAAA8E,KAAAogF,SAAA5jF,SAEA,QAAAuyB,EAAA,EAAAyH,EAAA2pD,EAAAlnF,GAAAwC,OAAsDszB,EAAAyH,EAAQzH,GAAA,EAC9D7zB,KAAA8E,KAAAogF,SAAAnnF,GAAAuD,MACA+sB,EAAAzjB,EAAAimB,WAAAo0D,EAAAlnF,GAAA81B,IACAmkB,EAAAptC,EAAAimB,WAAAo0D,EAAAlnF,GAAA81B,EAAA,cAQAmrD,UAAAtB,EACAl5E,YAAAu5E,GACA/7D,MAAA+7D,GACA/9E,KAAA8E,KAAAs9E,eAAAx+E,EAAAiQ,eAAA4C,UACA,MAAAonE,EAAAJ,EAAAM,EAAAv2D,KAAAxnB,KAAA4c,WAEAihE,IACA79E,KAAA8E,KAAA+4E,qBAMAoB,UAAAvB,EACAl5E,YAAAu5E,GACA/7D,MAAA+7D,GACA/9E,KAAA8E,KAAAs9E,eAAAx+E,EAAAiQ,eAAA6C,UACA,MAAAmnE,EAAAJ,EAAAM,EAAAv2D,KAAAxnB,KAAA4c,WAEAihE,IACA79E,KAAA8E,KAAA+4E,qBAMAqB,UAAAxB,EACAl5E,YAAAu5E,GACA/7D,MAAA+7D,GACA/9E,KAAA8E,KAAAs9E,eAAAx+E,EAAAiQ,eAAA8C,SACA,MAAAknE,EAAAJ,EAAAM,EAAAv2D,KAAAxnB,KAAA4c,WAEAihE,IACA79E,KAAA8E,KAAA+4E,qBAMAsB,UAAAzB,EACAl5E,YAAAu5E,GACA/7D,MAAA+7D,GACA/9E,KAAA8E,KAAAs9E,eAAAx+E,EAAAiQ,eAAA+C,UACA,MAAAinE,EAAAJ,EAAAM,EAAAv2D,KAAAxnB,KAAA4c,WAEAihE,IACA79E,KAAA8E,KAAA+4E,qBAMAuB,UAAA1B,EACAl5E,YAAAu5E,GACA/7D,MAAA+7D,GACA/9E,KAAA8E,KAAAs9E,eAAAx+E,EAAAiQ,eAAAgD,aAKAwoE,UAAA3B,EACAl5E,YAAAu5E,GACA/7D,MAAA+7D,GACA,MAAAoH,EAAA,IAAAr2D,EAAA0I,SAAAumD,EAAAv2D,KAAA3oB,IAAA,MAAAk/E,EAAAnzE,MACA5K,KAAA8E,KAAAs9E,eAAAx+E,EAAAiQ,eAAAoD,eACAjX,KAAA8E,KAAAqgF,OAAAjoD,gBAOA,SAAAp/B,EAAAD,EAAAiF,GAEA,aAGArE,OAAAC,eAAAb,EAAA,cACAqF,OAAA,IAEArF,EAAA6zB,kBAAA,EAEA,IAAA9tB,EAAAd,EAAA,GAEAsiF,EAAA,WACA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAGA,IAFA,IAAAr+C,EAAAi+C,EAEAvnF,EAAA,EAAAymB,EAAA+gE,EAAAhlF,OAAA,EAA4CxC,EAAAymB,EAAQzmB,IAAA,CACpD,IAAAkR,EAAAs2E,EAAAxnF,GACAspC,IAAAp4B,KAAAo4B,EAAAp4B,OAGAo4B,EAAAk+C,IAAAhlF,OAAA,KACAilF,UACAC,YACAC,aAsBA,IAAAC,KAwWA,SAAAP,EAAAjlF,GACAH,KAAAG,QACAH,KAAAqnC,MAAA,KACArnC,KAAAu4D,SACAqtB,MAAA,EACAC,QAAA1lF,EAAA0lF,QACAC,UAAA3lF,EAAA2lF,WAEA9lF,KAAA+lF,MAAA,KACA/lF,KAAAgmF,cAAA,EAsFA,OAtcAX,EAAAM,GAAA/hF,EAAAyQ,IAAA8H,KAAAvY,EAAAyQ,IAAAgI,UAAAzY,EAAAyQ,IAAA0M,wBAAAnd,EAAAyQ,IAAA+H,SAAA,cAAAm8C,EAAAx6D,GACA,IAAA8nF,EAAAttB,EAAAstB,QAEA72E,GAAAjR,GADAw6D,EAAAqtB,MAAA,IACA,EAEA,OAAA52E,GACA,OACA,OAAA62E,EAAA9nF,KAAA6F,EAAAyQ,IAAA8H,KAEA,OACA,OAAA0pE,EAAA9nF,KAAA6F,EAAAyQ,IAAAgI,UAEA,OACA,OAAAwpE,EAAA9nF,KAAA6F,EAAAyQ,IAAA0M,wBAEA,OACA,OAAA8kE,EAAA9nF,KAAA6F,EAAAyQ,IAAA+H,QAGA,UAAA1c,gDAA8DsP,MAC3D,SAAAupD,EAAAx6D,GACH,IAIA8nF,EAAAttB,EAAAstB,QACAC,EAAAvtB,EAAAutB,UACAG,EAAA1tB,EAAAqtB,MACAM,EAAAD,EAAA,EACAE,EAAAF,EAAA,EACAG,EAAAH,EAAA,EACA9sD,EAAA/vB,KAAAwG,IAAAxG,KAAA8gB,OAAAnsB,EAAAmoF,GAAA,GATA,KAWA,GAAA/sD,EAZA,GAaA,OAAAp7B,KAAAmoF,GAAA,EAGA,IAKAhzC,EALA4G,EAAA,EACAusC,KACAC,EAAA,EACAC,EAhBA,EAiBAC,EAjBA,EAoBA,IAAAtzC,EAAA,EAAeA,EAAA/Z,EAAW+Z,IAAA,CAC1B,IAAA72B,EAAAypE,EAAAK,GAAAjzC,GAAA,IACAuzC,EAAAX,EAAAM,GAAAlzC,GAAA,OAEAqzC,EAAAE,EAAAjuC,MAzBA,MA0BAsB,EAAA1wC,KAAAC,IAAAywC,EAAAysC,GACAC,GAAAF,EAAA,EACAC,EAAA,EACAD,EAAA,GAGAD,EAAA/kF,MACA+a,YACAgS,EAAAk4D,EACAvuC,EAAAwuC,EACA/Z,EAAAga,EAAAjuC,MACA+W,EAAAk3B,EAAAhuC,SAEA8tC,GAAAE,EAAAjuC,MAAA,EACA8tC,EAAAl9E,KAAAC,IAAAi9E,EAAAG,EAAAhuC,QAGA,IAAAiuC,EAAAt9E,KAAAC,IAAAywC,EAAAysC,GA1CA,EA2CAI,EAAAH,EAAAF,EA3CA,EA4CAt8B,EAAA,IAAAn/B,kBAAA67D,EAAAC,EAAA,GACA1vB,EAAAyvB,GAAA,EAEA,IAAAxzC,EAAA,EAAeA,EAAA/Z,EAAW+Z,IAAA,CAC1B,IAAApuC,EAAAghF,EAAAM,GAAAlzC,GAAA,OAAApuC,KACAi/C,EAAAsiC,EAAAnzC,GAAAu5B,GAAA,EACAma,EAAA,EACAr4D,EAAA83D,EAAAnzC,GAAA7kB,EAAAg4D,EAAAnzC,GAAA8E,EAAA0uC,GAAA,EACA18B,EAAA56C,IAAAtK,EAAA+K,SAAA,EAAAk0C,GAAAx1B,EAAA0oC,GAEA,QAAAhnB,EAAA,EAAAoB,EAAAg1C,EAAAnzC,GAAAqc,EAAoCtf,EAAAoB,EAAQpB,IAC5C+Z,EAAA56C,IAAAtK,EAAA+K,SAAA+2E,IAAA7iC,GAAAx1B,GACAq4D,GAAA7iC,EACAx1B,GAAA0oC,EAKA,IAFAjN,EAAA56C,IAAAtK,EAAA+K,SAAA+2E,EAAA7iC,EAAA6iC,GAAAr4D,GAEAA,GAAA,GACAzpB,EAAAypB,EAAA,GAAAzpB,EAAAypB,GACAzpB,EAAAypB,EAAA,GAAAzpB,EAAAypB,EAAA,GACAzpB,EAAAypB,EAAA,GAAAzpB,EAAAypB,EAAA,GACAzpB,EAAAypB,EAAA,GAAAzpB,EAAAypB,EAAA,GACAzpB,EAAAypB,EAAAw1B,GAAAj/C,EAAAypB,EAAAw1B,EAAA,GACAj/C,EAAAypB,EAAAw1B,EAAA,GAAAj/C,EAAAypB,EAAAw1B,EAAA,GACAj/C,EAAAypB,EAAAw1B,EAAA,GAAAj/C,EAAAypB,EAAAw1B,EAAA,GACAj/C,EAAAypB,EAAAw1B,EAAA,GAAAj/C,EAAAypB,EAAAw1B,EAAA,GACAx1B,GAAA0oC,EAWA,OAPA4uB,EAAAr/E,OAAA0/E,EAAA,EAAA/sD,EAAAv1B,EAAAyQ,IAAA2M,8BACA8kE,EAAAt/E,OAAA0/E,EAAA,EAAA/sD,IACAqf,MAAAkuC,EACAjuC,OAAAkuC,EACAE,KAAAjjF,EAAA+P,UAAAqC,WACAlR,KAAAklD,GACKq8B,IACLH,EAAA,IAEAb,EAAAM,GAAA/hF,EAAAyQ,IAAA8H,KAAAvY,EAAAyQ,IAAAgI,UAAAzY,EAAAyQ,IAAAuM,sBAAAhd,EAAAyQ,IAAA+H,SAAA,cAAAm8C,EAAAx6D,GACA,IAAA8nF,EAAAttB,EAAAstB,QAEA72E,GAAAjR,GADAw6D,EAAAqtB,MAAA,IACA,EAEA,OAAA52E,GACA,OACA,OAAA62E,EAAA9nF,KAAA6F,EAAAyQ,IAAA8H,KAEA,OACA,OAAA0pE,EAAA9nF,KAAA6F,EAAAyQ,IAAAgI,UAEA,OACA,OAAAwpE,EAAA9nF,KAAA6F,EAAAyQ,IAAAuM,sBAEA,OACA,OAAAilE,EAAA9nF,KAAA6F,EAAAyQ,IAAA+H,QAGA,UAAA1c,8CAA4DsP,MACzD,SAAAupD,EAAAx6D,GACH,IAgBAm1C,EAbA2yC,EAAAttB,EAAAstB,QACAC,EAAAvtB,EAAAutB,UACAG,EAAA1tB,EAAAqtB,MACAM,EAAAD,EAAA,EACAE,EAAAF,EAAA,EACAa,EAAAb,EAAA,EACA9sD,EAAA/vB,KAAA8gB,OAAAnsB,EAAAmoF,GAAA,GAGA,IAFA/sD,EA9JA,SAAA+sD,EAAA/sD,EAAA0sD,EAAAC,GAGA,IAFA,IAAAgB,EAAAZ,EAAA,EAEAnoF,EAAA,EAAmBA,EAAAo7B,EAAWp7B,IAAA,CAC9B,IAAA+1B,EAAAgyD,EAAAgB,EAAA,EAAA/oF,GACAgpF,EAAA,IAAAjzD,EAAAvzB,QAAAuzB,EAAA,GAEA,IAAAizD,GAAA,IAAAA,EAAAvuC,OAAA,IAAAuuC,EAAAtuC,QAAAsuC,EAAAjiF,KAAAvE,SAAA,IAAAwmF,EAAAjiF,KAAAvE,QAAA,IAAAwmF,EAAAjiF,KAAA,IAKA,MAJA+gF,EAAAiB,EAAA,EAAA/oF,GAAA6F,EAAAyQ,IAAA8M,yBAOA,OAAAgY,EAAAp7B,EA+IAipF,CAAAd,EAAA/sD,EAAA0sD,EAAAC,IAVA,GAaA,OAAA/nF,KAAAmoF,GAAA,EAIA,IACAe,EAAAC,EADAC,GAAA,EAEAC,EAAAtB,EAAAgB,GAAA,GAEA,OAAAhB,EAAAK,GAAA,QAAAL,EAAAK,GAAA,IACAgB,GAAA,EACA,IAAAE,EAAAvB,EAAAK,GAAA,GACAmB,EAAAxB,EAAAK,GAAA,GACAc,EAAAd,EAAA,EACA,IAAAoB,EAAAT,EAAA,EAEA,IAAA5zC,EAAA,EAAiBA,EAAA/Z,EAAW+Z,IAAA+zC,GAAA,EAAAM,GAAA,EAG5B,GAFAL,EAAApB,EAAAmB,GAEAnB,EAAAyB,GAAA,KAAAH,GAAAF,EAAA,KAAAG,GAAA,IAAAH,EAAA,QAAAA,EAAA,IAAAA,EAAA,KAAAI,EAAA,CACAp0C,EAhCA,GAiCAi0C,GAAA,EAEAhuD,EAAA+Z,EAGA,OAKA,GAAAi0C,EAAA,CACAhuD,EAAA/vB,KAAAwG,IAAAupB,EA1CA,KA2CA,IAAAquD,EAAA,IAAAjjB,aAAA,EAAAprC,GAGA,IAFA8tD,EAAAd,EAEAjzC,EAAA,EAAiBA,EAAA/Z,EAAW+Z,IAAA+zC,GAAA,EAC5BC,EAAApB,EAAAmB,GACAO,EAAAt0C,GAAA,GAAAg0C,EAAA,GACAM,EAAA,GAAAt0C,GAAA,IAAAg0C,EAAA,GAGArB,EAAAr/E,OAAA0/E,EAAA,EAAA/sD,EAAAv1B,EAAAyQ,IAAA6M,6BACA4kE,EAAAt/E,OAAA0/E,EAAA,EAAA/sD,GAAAiuD,EAAAC,EAAAC,EAAAE,QACK,CACLruD,EAAA/vB,KAAAwG,IAAAupB,EAxDA,KAyDA,IAAAsuD,KAEA,IAAAv0C,EAAA,EAAiBA,EAAA/Z,EAAW+Z,IAAA,CAC5Bg0C,EAAApB,EAAAK,GAAAjzC,GAAA,IACA,IAAAw0C,EAAA5B,EAAAgB,GAAA5zC,GAAA,OACAu0C,EAAAnmF,MACAwD,KAAA4iF,EAAA5iF,KACA0zC,MAAAkvC,EAAAlvC,MACAC,OAAAivC,EAAAjvC,OACAp8B,UAAA6qE,IAIArB,EAAAr/E,OAAA0/E,EAAA,EAAA/sD,EAAAv1B,EAAAyQ,IAAAwM,4BACAilE,EAAAt/E,OAAA0/E,EAAA,EAAA/sD,GAAAsuD,IAGA,OAAAvB,EAAA,IAEAb,EAAAM,GAAA/hF,EAAAyQ,IAAA8H,KAAAvY,EAAAyQ,IAAAgI,UAAAzY,EAAAyQ,IAAAyM,kBAAAld,EAAAyQ,IAAA+H,SAAA,SAAAm8C,GACA,IAAAutB,EAAAvtB,EAAAutB,UACAK,EAAA5tB,EAAAqtB,MAAA,EACA,WAAAE,EAAAK,GAAA,QAAAL,EAAAK,GAAA,IACG,SAAA5tB,EAAAx6D,GACH,IAAA8nF,EAAAttB,EAAAstB,QACAC,EAAAvtB,EAAAutB,UAEA92E,GAAAjR,GADAw6D,EAAAqtB,MAAA,IACA,EAEA,OAAA52E,GACA,OACA,OAAA62E,EAAA9nF,KAAA6F,EAAAyQ,IAAA8H,KAEA,OACA,GAAA0pE,EAAA9nF,KAAA6F,EAAAyQ,IAAAgI,UACA,SAGA,IAAA8pE,EAAA5tB,EAAAqtB,MAAA,EACAyB,EAAAvB,EAAAK,GAAA,GACAmB,EAAAxB,EAAAK,GAAA,GAEA,OAAAL,EAAA/nF,GAAA,KAAAspF,GAAA,IAAAvB,EAAA/nF,GAAA,QAAA+nF,EAAA/nF,GAAA,IAAA+nF,EAAA/nF,GAAA,KAAAupF,EAMA,OACA,GAAAzB,EAAA9nF,KAAA6F,EAAAyQ,IAAAyM,kBACA,SAGA,IACA6mE,EAAA7B,EADAvtB,EAAAqtB,MAAA,GACA,GAEA,OAAAE,EAAA/nF,GAAA,KAAA4pF,EAMA,OACA,OAAA9B,EAAA9nF,KAAA6F,EAAAyQ,IAAA+H,QAGA,UAAA1c,0CAAwDsP,MACrD,SAAAupD,EAAAx6D,GACH,IAEA8nF,EAAAttB,EAAAstB,QACAC,EAAAvtB,EAAAutB,UACAG,EAAA1tB,EAAAqtB,MACAM,EAAAD,EAAA,EACAE,EAAAF,EAAA,EAEA0B,EAAA7B,EADAG,EAAA,GACA,GACAoB,EAAAvB,EAAAK,GAAA,GACAmB,EAAAxB,EAAAK,GAAA,GACAhtD,EAAA/vB,KAAAwG,IAAAxG,KAAA8gB,OAAAnsB,EAAAmoF,GAAA,GAVA,KAYA,GAAA/sD,EAbA,EAcA,OAAAp7B,KAAAmoF,GAAA,EAMA,IAHA,IAAAsB,EAAA,IAAAjjB,aAAA,EAAAprC,GACA8tD,EAAAd,EAEAjzC,EAAA,EAAmBA,EAAA/Z,EAAW+Z,IAAA+zC,GAAA,GAC9B,IAAAC,EAAApB,EAAAmB,GACAO,EAAAt0C,GAAA,GAAAg0C,EAAA,GACAM,EAAA,GAAAt0C,GAAA,IAAAg0C,EAAA,GAGA,IAAA/lF,GAAAwmF,EAAAN,EAAAC,EAAAE,GAGA,OAFA3B,EAAAr/E,OAAA0/E,EAAA,EAAA/sD,EAAAv1B,EAAAyQ,IAAA4M,yBACA6kE,EAAAt/E,OAAA0/E,EAAA,EAAA/sD,EAAAh4B,GACA+kF,EAAA,IAEAb,EAAAM,GAAA/hF,EAAAyQ,IAAAmJ,UAAA5Z,EAAAyQ,IAAAyJ,QAAAla,EAAAyQ,IAAA8J,cAAAva,EAAAyQ,IAAAgK,SAAAza,EAAAyQ,IAAAoJ,SAAA,cAAA86C,EAAAx6D,GACA,IAAA8nF,EAAAttB,EAAAstB,QACAC,EAAAvtB,EAAAutB,UAEA92E,GAAAjR,GADAw6D,EAAAqtB,MAAA,IACA,EAEA,OAAA52E,GACA,OACA,OAAA62E,EAAA9nF,KAAA6F,EAAAyQ,IAAAmJ,UAEA,OACA,OAAAqoE,EAAA9nF,KAAA6F,EAAAyQ,IAAAyJ,QAEA,OACA,OAAA+nE,EAAA9nF,KAAA6F,EAAAyQ,IAAA8J,cAEA,OACA,GAAA0nE,EAAA9nF,KAAA6F,EAAAyQ,IAAAgK,SACA,SAGA,IAAAupE,EAAArvB,EAAAqtB,MAAA,EACAiC,EAAA/B,EAAA8B,GAAA,GACAE,EAAAhC,EAAA8B,GAAA,GAEA,OAAA9B,EAAA/nF,GAAA,KAAA8pF,GAAA/B,EAAA/nF,GAAA,KAAA+pF,EAMA,OACA,OAAAjC,EAAA9nF,KAAA6F,EAAAyQ,IAAAoJ,QAGA,UAAA/d,6CAA2DsP,MACxD,SAAAupD,EAAAx6D,GACH,IAEA8nF,EAAAttB,EAAAstB,QACAC,EAAAvtB,EAAAutB,UACAG,EAAA1tB,EAAAqtB,MACAmC,EAAA9B,EAAA,EACA2B,EAAA3B,EAAA,EACA+B,EAAA/B,EAAA,EACAgC,EAAAhC,EAAA,EACAiC,EAAAjC,EACA4B,EAAA/B,EAAA8B,GAAA,GACAE,EAAAhC,EAAA8B,GAAA,GACAzuD,EAAA/vB,KAAAwG,IAAAxG,KAAA8gB,OAAAnsB,EAAAgqF,GAAA,GAXA,KAaA,GAAA5uD,EAdA,EAeA,OAAAp7B,KAAAgqF,GAAA,EAGA,IAAAI,EAAAJ,EAEAA,GAAA,GAAAlC,EAAAkC,EAAA,KAAAlC,EAAA+B,IAAA/B,EAAAkC,EAAA,KAAAlC,EAAAmC,IAAAnC,EAAAkC,EAAA,KAAAlC,EAAAoC,IAAApC,EAAAkC,EAAA,KAAAlC,EAAAqC,IAAApC,EAAAiC,EAAA,QAAAF,GAAA/B,EAAAiC,EAAA,QAAAD,IACA3uD,IACAgvD,GAAA,GAKA,IAFA,IAAAC,EAAAD,EAAA,EAEAj1C,EAAA,EAAmBA,EAAA/Z,EAAW+Z,IAC9B2yC,EAAAr/E,OAAA4hF,EAAA,GACAtC,EAAAt/E,OAAA4hF,EAAA,GACAA,GAAA,EAGA,OAAAA,EAAA,IAeAhD,EAAAlmF,WACAsF,YACA,MAAAqhF,EAAA7lF,KAAAG,MAAA0lF,QACA,IAAA9nF,EAAAiC,KAAAgmF,cACAxhE,EAAAqhE,EAAAtlF,OACA8mC,EAAArnC,KAAAqnC,MACA0+C,EAAA/lF,KAAA+lF,MAEA,IAAA1+C,IAAA0+C,GAAAhoF,EAAA,IAAAymB,IAAAmhE,EAAAE,EAAA9nF,IAEA,YADAiC,KAAAgmF,cAAAxhE,GAIA,MAAA+zC,EAAAv4D,KAAAu4D,QAEA,KAAAx6D,EAAAymB,GAAA,CACA,GAAAuhE,EAAA,CAGA,IAFA,EAAAA,EAAAN,WAAAltB,EAAAx6D,GAEA,CACAA,IACA,SAQA,GALAA,GAAA,EAAAgoF,EAAAL,WAAAntB,EAAAx6D,EAAA,GAEAgoF,EAAA,KACA1+C,EAAA,KAEAtpC,IAJAymB,EAAAqhE,EAAAtlF,QAKA,OAIA8mC,MAAAs+C,GAAAE,EAAA9nF,OAEAqD,MAAA0lB,QAAAugB,IAKAkxB,EAAAqtB,MAAA7nF,EACAA,KAEAspC,EAAAm+C,UAAA,EAAAn+C,EAAAm+C,SAAAjtB,IAKAwtB,EAAA1+C,EACAA,EAAA,MALAA,EAAA,MARAtpC,IAgBAiC,KAAAqnC,QACArnC,KAAA+lF,QACA/lF,KAAAgmF,cAAAjoF,GAGAyG,KAAA6jF,EAAAlnF,GACAnB,KAAAG,MAAA0lF,QAAAvkF,KAAA+mF,GACAroF,KAAAG,MAAA2lF,UAAAxkF,KAAAH,GAEAnB,KAAAsoF,aAGA9jF,QACA,KAAAxE,KAAA+lF,OAAA,CACA,MAAAxlF,EAAAP,KAAAG,MAAA0lF,QAAAtlF,OACAP,KAAAgmF,eAAA,EAAAhmF,KAAA+lF,MAAAL,WAAA1lF,KAAAu4D,QAAAh4D,GACAP,KAAA+lF,MAAA,KACA/lF,KAAAqnC,MAAA,KAEArnC,KAAAsoF,cAIA9jF,QACAxE,KAAAqnC,MAAA,KACArnC,KAAA+lF,MAAA,KACA/lF,KAAAgmF,cAAA,IAIAZ,EAzeA,GA4eAmD,EAAA,WACA,SAAAA,EAAApoF,GACAH,KAAAG,QAcA,OAXAooF,EAAArpF,WACAsF,KAAA6jF,EAAAlnF,GACAnB,KAAAG,MAAA0lF,QAAAvkF,KAAA+mF,GACAroF,KAAAG,MAAA2lF,UAAAxkF,KAAAH,IAGAqD,UAEAA,WAGA+jF,EAhBA,GAmBA72D,EAAA,WAIA,SAAAA,EAAA5mB,EAAA09E,EAAA/+E,GACAzJ,KAAAyoF,YAAAD,EACAxoF,KAAA6lF,WACA7lF,KAAA8lF,aAGA9lF,KAAA0oF,UADAF,GAAA,WAAA19E,EACA,IAAAs6E,EAAAplF,MAEA,IAAAuoF,EAAAvoF,MAGAA,KAAA2oF,aAAAlqF,OAAA6E,OAAA,MACAtD,KAAA4oF,aAAA,EACA5oF,KAAAyJ,YACAzJ,KAAA8K,SACA9K,KAAA6oF,OAAA,EACA7oF,KAAA8oF,UAAAN,EAAA,KAAAzhF,QAAAtC,UA2GA,OAxGAitB,EAAAxyB,WACAqB,aACA,OAAAP,KAAA8lF,UAAAvlF,QAGAwoF,YACA,OAAA/oF,KAAA8oF,WAAA9oF,KAAAyoF,YAAAM,OAGA72D,kBACA,OAAAlyB,KAAA4oF,aAAA5oF,KAAAO,QAGAiE,MAAA6jF,EAAAlnF,GACAnB,KAAA0oF,UAAApnF,KAAA+mF,EAAAlnF,GACAnB,KAAA6oF,SAEA7oF,KAAAyoF,cACAzoF,KAAA6oF,QAxCA,IAyCA7oF,KAAAiyB,QACSjyB,KAAA6oF,QAzCTG,MAyCSX,IAAAzkF,EAAAyQ,IAAA+H,SAAAisE,IAAAzkF,EAAAyQ,IAAAoJ,UACTzd,KAAAiyB,UAKAztB,cAAAkX,GACAA,KAAA1b,KAAA2oF,eAIA3oF,KAAA2oF,aAAAjtE,IAAA,EACA1b,KAAAqyB,MAAAzuB,EAAAyQ,IAAAqH,kBAGAlX,gBAAAmkF,GACA,QAAAplF,KAAAolF,EACA3oF,KAAAipF,cAAA1lF,IAIAiB,UAAAitB,GACAhzB,OAAAqvE,OAAA9tE,KAAA2oF,aAAAl3D,EAAAk3D,cAEA,QAAA5qF,EAAA,EAAAymB,EAAAiN,EAAAlxB,OAAyCxC,EAAAymB,EAAQzmB,IACjDiC,KAAAqyB,MAAAZ,EAAAo0D,QAAA9nF,GAAA0zB,EAAAq0D,UAAA/nF,KAIAyG,QACA,OACAqhF,QAAA7lF,KAAA6lF,QACAC,UAAA9lF,KAAA8lF,UACAvlF,OAAAP,KAAAO,SAIA2oF,iBACA,MAAAC,MACAtD,QACAA,EAAAC,UACAA,EAAAvlF,OACAA,GACOP,KAEP,QAAAjC,EAAA,EAAqBA,EAAAwC,EAAYxC,IACjC,OAAA8nF,EAAA9nF,IACA,KAAA6F,EAAAyQ,IAAA0M,wBACA,KAAAnd,EAAAyQ,IAAA2M,6BACA,KAAApd,EAAAyQ,IAAAuM,sBACA,MAAAkT,EAAAgyD,EAAA/nF,GAAA,GAGA+1B,EAAAs1D,QACAD,EAAA7nF,KAAAwyB,EAAAhvB,KAAAud,QAOA,OAAA8mE,GAGA3kF,MAAA2oB,GAAA,GACAntB,KAAA0oF,UAAAz2D,QACA,MAAA1xB,EAAAP,KAAAO,OACAP,KAAA4oF,cAAAroF,EAEAP,KAAAyoF,YAAAY,SACAxD,QAAA7lF,KAAA6lF,QACAC,UAAA9lF,KAAA8lF,UACA34D,YACA5sB,UACO,EAAAP,KAAAkpF,YAEPlpF,KAAA2oF,aAAAlqF,OAAA6E,OAAA,MACAtD,KAAA6lF,QAAAtlF,OAAA,EACAP,KAAA8lF,UAAAvlF,OAAA,EACAP,KAAA6oF,OAAA,EACA7oF,KAAA0oF,UAAA/zD,UAIAjD,EA/HA,GAkIA7zB,EAAA6zB,gBAIA,SAAA5zB,EAAAD,EAAAiF,GAEA,aAGArE,OAAAC,eAAAb,EAAA,cACAqF,OAAA,IAEArF,EAAAwzB,sBAAA,EAEA,IAAAztB,EAAAd,EAAA,GAEAwmF,EAAAxmF,EAAA,IAEAe,EAAAf,EAAA,GAEAymF,EAAAzmF,EAAA,IAEA0mF,EAAA1mF,EAAA,IAEAoB,EAAApB,EAAA,GAEA2mF,EAAA3mF,EAAA,IAEA4mF,EAAA5mF,EAAA,IAEA6mF,EAAA7mF,EAAA,IAEAmsB,EAAAnsB,EAAA,IAEA8mF,EAAA9mF,EAAA,IAEA20B,EAAA30B,EAAA,IAEAqlB,EAAArlB,EAAA,IAEA+mF,EAAA/mF,EAAA,IAEAgnF,EAAAhnF,EAAA,IAEAssB,EAAAtsB,EAAA,IAEA0jC,EAAA1jC,EAAA,IAEAinF,EAAAjnF,EAAA,IAEAknF,EAAAlnF,EAAA,IAEAosB,EAAApsB,EAAA,IAEAmnF,EAAAnnF,EAAA,IAEAuuB,EAAA,WACA,MAAA64D,GACAp8E,iBAAA,EACAE,cAAA,EACAC,iBAAA,EACAC,0BAAAtK,EAAA6P,oBAAAiB,OACAvG,cAAA,EACAC,iBAAA,GAGA,SAAAijB,GAAAzmB,KACAA,EAAAjG,QACAA,EAAA8E,UACAA,EAAAwmB,UACAA,EAAAL,UACAA,EAAAC,iBACAA,EAAAyB,QACAA,EAAA,KAAAxB,mBACAA,IAEA9vB,KAAA4K,OACA5K,KAAA2E,UACA3E,KAAAyJ,YACAzJ,KAAAiwB,YACAjwB,KAAA4vB,YACA5vB,KAAA6vB,mBACA7vB,KAAAsxB,WAAA44D,EACAlqF,KAAA8vB,qBACA9vB,KAAAmqF,kBAAA,EAEAnqF,KAAAoqF,iBAAA3jF,WACA,GAAAzG,KAAA6vB,iBAAA3I,IAAA5oB,GACA,OAAA0B,KAAA6vB,iBAAAhxB,IAAAP,GAGA,MAGA2oD,EAHAjnD,KAAA2E,QAAA0lF,eAAA,oBACA/rF,SAEAgsF,YACAxlF,QAAA,IAAAiC,QAAA,SAAAtC,EAAA+C,IACA,SAAA+iF,IACAtjC,EAAA39C,OAAAvB,KAAA,UAAA7E,MACAA,EAAA2F,KACAA,IAEAA,IAIApE,EAAAvB,GACAqnF,MACW/iF,GAGX+iF,KAOA,OAJAzlF,EAAA0lF,kBAAA5mF,EAAA8P,oBAAAe,MACAzU,KAAA6vB,iBAAAzgB,IAAA9Q,EAAAwG,GAGAA,IAOA,SAAA2lF,IACAzqF,KAAA20B,QAkBA,SAAA+1D,EAAAxnF,EAAAynF,GAAA,GACA,GAAAvpF,MAAA0lB,QAAA5jB,GAAA,CACA,QAAAnF,EAAA,EAAAymB,EAAAthB,EAAA3C,OAAwCxC,EAAAymB,EAAQzmB,IAAA,CAChD,MAAA6sF,EAAAF,EAAAxnF,EAAAnF,IAAA,GAEA,GAAA6sF,EACA,OAAAA,EAKA,OADA,EAAAhnF,EAAAoF,uCAAuD9F,KACvD,cAGA,OAAAW,EAAAuhB,QAAAliB,GACA,OAAAynF,EACA,KAGA,cAGA,OAAAznF,EAAA5E,MACA,aACA,iBACA,oBAEA,eACA,iBAEA,aACA,eAEA,cACA,gBAEA,aACA,eAEA,cACA,gBAEA,iBACA,oBAEA,gBACA,mBAEA,gBACA,mBAEA,gBACA,mBAEA,iBACA,mBAEA,gBACA,kBAEA,UACA,YAEA,iBACA,mBAEA,YACA,cAEA,iBACA,mBAGA,OAAAqsF,EACA,OAGA,EAAA/mF,EAAAoF,iCAA+C9F,EAAA5E,QAC/C,eA7FAmsF,EAAAvrF,WACAixC,MAAA,WACA,UAAAnwC,KAAA6qF,QARA,OAYA7qF,KAAA6qF,QAAA,EACA7qF,KAAA8qF,SAAA1/E,KAAAC,QAEAspB,MAAA,WACA30B,KAAA8qF,QAAA1/E,KAAAC,MAjBA,GAkBArL,KAAA6qF,QAAA,IAqFA,IAAAE,EAAAhkF,QAAAtC,UAkjFA,OA/iFA4sB,EAAAnyB,WACAsF,MAAAwmF,EAAAd,GACA,IAAAe,EAAAxsF,OAAA6E,OAAAtD,MAEA,OADAirF,EAAA35D,QAAA05D,EACAC,GAGAr5D,cAAA,SAAAvB,GACA,KAAAA,aAAAxsB,EAAAgiB,MACA,SAGA,IAAA6S,EAAAj6B,OAAA6E,OAAA,MAEA+sB,EAAAjK,QACAsS,EAAArI,EAAAjK,QAAA,GAMA,IAHA,IAAA8kE,GAAA76D,GACAzlB,EAAA5K,KAAA4K,KAEAsgF,EAAA3qF,QAAA,CACA,IAAAg+B,EAAA2sD,EAAAtyD,QACAuyD,EAAA5sD,EAAA1/B,IAAA,aAEA,GAAAssF,aAAAtnF,EAAAgiB,KAAA,CACA,IAAAulE,EAAAD,EAAAnkE,UAEA,QAAAjpB,EAAA,EAAAymB,EAAA4mE,EAAA7qF,OAAwDxC,EAAAymB,EAAQzmB,IAAA,CAChE,MAAAwF,EAAA6nF,EAAArtF,GACA,IAAAstF,EAAAF,EAAApkE,OAAAxjB,GAEA,GAAA8nF,aAAAxnF,EAAAmG,IAAA,CACA,GAAA0uB,EAAA2yD,EAAAz9E,YACA,SAGA,IACAy9E,EAAAzgF,EAAAgc,MAAAykE,GACe,MAAA9jF,GACf,GAAAA,aAAArD,EAAAglB,qBACA,MAAA3hB,EAGA,GAAAvH,KAAAsxB,QAAAnjB,aAAA,CACAk9E,aAAAxnF,EAAAmG,MACA0uB,EAAA2yD,EAAAz9E,aAAA,GAGA5N,KAAA2E,QAAAK,KAAA,sBACA2G,UAAA/H,EAAAgI,qBAAAC,WAEA,EAAAjI,EAAAoF,8CAA0EzB,OAC1E,SAGA,MAAAA,GAIA,KAAA8jF,aAAAxnF,EAAAgiB,MACA,SAGAwlE,EAAAjlE,QACAsS,EAAA2yD,EAAAjlE,QAAA,GAGA,MAAAklE,EAAAD,EAAAxsF,IAAA,MAEA,GAAAysF,aAAAznF,EAAAihB,MACA,cAAAwmE,EAAAhtF,KACA,cAMA,QAAAiR,IAAA+7E,GAAAlqF,MAAA0lB,QAAAwkE,GACA,QAAAz3D,EAAA,EAAAyH,EAAAgwD,EAAA/qF,OAA6CszB,EAAAyH,EAAQzH,IACrD,GAAAy3D,EAAAz3D,aAAAhwB,EAAAihB,MAAA,WAAAwmE,EAAAz3D,GAAAv1B,KACA,UAOA,IAAAitF,EAAAhtD,EAAA1/B,IAAA,WAEA,GAAA0sF,aAAA1nF,EAAAgiB,KAAA,CAIA,IAAA2lE,EAAAD,EAAAvkE,UAEA,QAAAjpB,EAAA,EAAAymB,EAAAgnE,EAAAjrF,OAAiDxC,EAAAymB,EAAQzmB,IAAA,CACzD,MAAAwF,EAAAioF,EAAAztF,GACA,IAAA0tF,EAAAF,EAAAxkE,OAAAxjB,GAEA,GAAAkoF,aAAA5nF,EAAAmG,IAAA,CACA,GAAA0uB,EAAA+yD,EAAA79E,YACA,SAGA,IACA69E,EAAA7gF,EAAAgc,MAAA6kE,GACa,MAAAlkF,GACb,GAAAA,aAAArD,EAAAglB,qBACA,MAAA3hB,EAGA,GAAAvH,KAAAsxB,QAAAnjB,aAAA,CACAs9E,aAAA5nF,EAAAmG,MACA0uB,EAAA+yD,EAAA79E,aAAA,GAGA5N,KAAA2E,QAAAK,KAAA,sBACA2G,UAAA/H,EAAAgI,qBAAAC,WAEA,EAAAjI,EAAAoF,4CAAsEzB,OACtE,SAGA,MAAAA,GAIA,MAAA1D,EAAA4hB,UAAAgmE,GAAA,CAIA,GAAAA,EAAAjkE,KAAApB,MAAA,CACA,GAAAsS,EAAA+yD,EAAAjkE,KAAApB,OACA,SAGAsS,EAAA+yD,EAAAjkE,KAAApB,QAAA,EAGA,IAAAslE,EAAAD,EAAAjkE,KAAA3oB,IAAA,eAEA6sF,aAAA7nF,EAAAgiB,OAAA6lE,EAAAtlE,OAAAsS,EAAAgzD,EAAAtlE,SACA8kE,EAAA5pF,KAAAoqF,GAEAA,EAAAtlE,QACAsS,EAAAgzD,EAAAtlE,QAAA,OAMA,UAGA5hB,uBAAA6rB,EAAAs7D,EAAApqE,EAAAsQ,EAAAzrB,EAAAwlF,GACA,IAAApkE,EAAAmkE,EAAAnkE,KACAsvD,EAAAtvD,EAAAiG,SAAA,UACAyzD,EAAA15D,EAAAiG,SAAA,QAGAyzD,EADA9/E,MAAA0lB,QAAAo6D,IAAA,IAAAA,EAAA3gF,OACAqD,EAAAwP,KAAA8Q,cAAAg9D,GAEA,KAGA,IAAA2K,EAAArkE,EAAA3oB,IAAA,SAEA,GAAAgtF,EAAA,CACA,IAAAC,GACAhV,SACAoK,OACA3/D,QACAwqE,UAAA,EACAC,UAAA,GAEAC,EAAAJ,EAAAhtF,IAAA,KACAqtF,EAAA,MAEA,EAAAroF,EAAAuhB,QAAA6mE,EAAA,kBACAH,EAAAC,SAAAF,EAAAhtF,IAAA,SACAitF,EAAAE,SAAAH,EAAAhtF,IAAA,SAEAgtF,EAAA3kE,IAAA,QACAglE,QAAAlsF,KAAAmsF,iBACA/V,GAAAyV,EAAAhtF,IAAA,MACAwxB,gBAKA9O,KAAA6qE,WACAF,KAAAz0D,EAAA4B,WAAAC,WAAAC,IACAhY,EAAA6qE,SAAAF,EAAA1yD,OAAAjY,EAAA6qE,SAAA,IAGAv6D,EAAAQ,MAAAzuB,EAAAyQ,IAAAgM,YAAAyrE,IAIA,OADAj6D,EAAAQ,MAAAzuB,EAAAyQ,IAAA8L,uBAAA22D,EAAAoK,IACAlhF,KAAAsL,iBACAZ,OAAAihF,EACAvlF,OACAiqB,UAAA7I,EAAA3oB,IAAA,cAAAwxB,EACAwB,eACA+5D,iBACO7jF,KAAA,WACP8pB,EAAAQ,MAAAzuB,EAAAyQ,IAAA+L,wBAEAyrE,GACAh6D,EAAAQ,MAAAzuB,EAAAyQ,IAAAiM,UAAAwrE,OAKAtnF,8BAAA6rB,UACAA,EAAAg8D,MACAA,EAAAC,SACAA,GAAA,EAAAz6D,aACAA,EAAA0W,SACAA,EAAAzB,WACAA,EAAAylD,+BACAA,GAAA,IAEA,IAAA/kE,EAAA6kE,EAAA7kE,KACAilD,EAAAjlD,EAAA3oB,IAAA,aACA0wD,EAAA/nC,EAAA3oB,IAAA,cAEA,KAAA4tE,IAAA,EAAA7oE,EAAAkN,OAAA27D,IAAAld,IAAA,EAAA3rD,EAAAkN,OAAAy+C,IAEA,YADA,EAAA3rD,EAAAoF,MAAA,iDAIA,IAQAghD,EAAA7oD,EARA6M,EAAAhO,KAAAsxB,QAAAtjB,aAEA,QAAAA,GAAAy+D,EAAAld,EAAAvhD,EAEA,YADA,EAAApK,EAAAoF,MAAA,wDAOA,GAHAwe,EAAA3oB,IAAA,sBAGA,CACA,IAAA25C,EAAAhxB,EAAA3oB,IAAA,aACA45C,EAAAjxB,EAAA3oB,IAAA,cACA2tF,EAAAh0C,EAAA,KACAi0C,EAAAJ,EAAA3mE,SAAA8mE,EAAA/zC,GAAA,GACAmE,EAAAp1B,EAAAiG,SAAA,cAmBA,OAlBAu8B,EAAAigC,EAAAyC,SAAAC,YACAF,WACAj0C,QACAC,SACAm0C,wBAAAP,aAAAlkE,EAAAykB,aACAigD,gBAAAjwC,KAAA,QAEAwsC,SAAA7gD,EACApnC,GAAA6oD,GACAn4B,EAAAQ,MAAAzuB,EAAAyQ,IAAAuM,sBAAAzf,QAEAonC,IACAzB,EAAAyB,IACA8/C,GAAAzkF,EAAAyQ,IAAAuM,sBACAzf,UAOA,IAAA2rF,EAAAtlE,EAAA3oB,IAAA,kBACAqlD,EAAA18B,EAAA3oB,IAAA,YAGA,GAAAytF,IAAAQ,IAAA5oC,KAAAmoC,aAAA7lD,EAAAuD,aAAA0iC,EAAAld,EAFA,IAEA,CAUA,OAFAvF,EAPA,IAAAigC,EAAAyC,UACA9hF,KAAA5K,KAAA4K,KACAyrE,IAAAhmD,EACAg8D,QACAC,WACAx8D,mBAAA9vB,KAAA8vB,qBAEAi9D,iBAAA,QACAl7D,EAAAQ,MAAAzuB,EAAAyQ,IAAA0M,yBAAAipC,IAIA,MAAA97C,EAAAq+E,EAAA3oF,EAAA6P,oBAAAgB,KAAAzU,KAAAsxB,QAAApjB,0BACA,IAAAkY,SAAyBpmB,KAAAiwB,UAAAC,gBAOzB,GALAlwB,KAAAmqF,oBACA,EAAAvmF,EAAAyL,QAAAnB,IAAAtK,EAAA6P,oBAAAgB,KAAA,qEACA2R,KAAmBpmB,KAAAiwB,UAAAE,uBAAsC/J,KAGzDlY,IAAAtK,EAAA6P,oBAAAgB,OAAAq4E,IAAA5oC,GAAAmoC,aAAA7lD,EAAAuD,YAAAigD,EAAAgD,mBAAAC,YAAAZ,EAAArsF,KAAA4K,KAAAylB,EAAArwB,KAAA8vB,qBAAAu8D,EAAAa,qBACA,OAAAltF,KAAA2E,QAAAyI,gBAAA,OAAAgZ,EAAApmB,KAAAyJ,UAAA,aAAA4iF,EAAA9/B,MAAAvsD,KAAAsxB,QAAAxjB,mBAAA/F,KAAA,WACA8pB,EAAAo3D,cAAA7iE,GACAjlB,GAAAilB,EAAAqmD,EAAAld,GACA19B,EAAAQ,MAAAzuB,EAAAyQ,IAAAsM,iBAAAxf,GAEAonC,IACAzB,EAAAyB,IACA8/C,GAAAzkF,EAAAyQ,IAAAsM,iBACAxf,UAGSsH,KACT,EAAA7E,EAAAoF,MAAA,sDAAAP,KAAAkF,UACA3N,KAAAmtF,wBACA98D,YACAg8D,QACAC,WACAz6D,eACA0W,WACAzB,aACAylD,gCAAA,MAKA,IAAAa,EAAA,KAEAl/E,IAAAtK,EAAA6P,oBAAAiB,SAAA23E,aAAA7lD,EAAAuD,YAAAma,aAAA1d,EAAAuD,YAAA+iD,aAAAtmD,EAAAuD,cACAqjD,EAAA,IAAApD,EAAAgD,oBACApiF,KAAA5K,KAAA4K,KACAylB,YACA1rB,QAAA3E,KAAA2E,QACAmJ,gBAAA9N,KAAAsxB,QAAAxjB,gBACAgiB,mBAAA9vB,KAAA8vB,sBAIA+B,EAAAo3D,cAAA7iE,GACAjlB,GAAAilB,EAAAqmD,EAAAld,GAEA,MAAA89B,EAAApD,EAAAyC,SAAAY,YACA3oF,QAAA3E,KAAA2E,QACAiG,KAAA5K,KAAA4K,KACAyrE,IAAAhmD,EACAg8D,QACAC,WACAiB,cAAAH,EACAt9D,mBAAA9vB,KAAA8vB,qBACO/nB,KAAAylF,IACP,IAAAxjC,EAAAwjC,EAAAT,iBAAA,GAEA,GAAA/sF,KAAAmqF,iBACA,OAAAnqF,KAAA2E,QAAAyI,gBAAA,aAAAgZ,EAAA,eAAA4jC,MAAAllD,KAAAud,SAGAriB,KAAA2E,QAAAK,KAAA,OAAAohB,EAAApmB,KAAAyJ,UAAA,QAAAugD,MAAAllD,KAAAud,WAEO7Z,MAAAC,IAGP,IAFA,EAAA7E,EAAAoF,MAAA,2BAAAP,GAEAzI,KAAAmqF,iBACA,OAAAnqF,KAAA2E,QAAAyI,gBAAA,aAAAgZ,EAAA,sBAGApmB,KAAA2E,QAAAK,KAAA,OAAAohB,EAAApmB,KAAAyJ,UAAA,iBAIAzJ,KAAAmqF,wBACAkD,EAGAx7D,EAAAQ,MAAAzuB,EAAAyQ,IAAAyM,kBAAA3f,GAEAonC,IACAzB,EAAAyB,IACA8/C,GAAAzkF,EAAAyQ,IAAAyM,kBACA3f,UAOAssF,YAAA,SAAAlsE,EAAA8O,EAAAwB,EAAAzrB,EAAAsnF,GACA,IAAAC,EAAApsE,EAAA1iB,IAAA,KACA+uF,GACA11D,QAAA3W,EAAA1iB,IAAA,KAAAP,KACA8tF,SAAA7qE,EAAA1iB,IAAA,OAEAgvF,EAAAtsE,EAAA1iB,IAAA,MAEA,MAAAuwB,EAAA0+D,eAAAD,GAAA,CACA,MAAAE,EAAA/tF,KAAA8vB,mBAAAxsB,OAAAuqF,GAIA,IAHA,IAAAG,EAAA,IAAAjpF,WAAA,KACAigC,EAAA,IAAAu/B,aAAA,GAEAxmE,EAAA,EAAuBA,EAAA,IAASA,IAChCinC,EAAA,GAAAjnC,EAAA,IACAgwF,EAAA/oD,EAAA,EAAAA,EAAA,GACAgpD,EAAAjwF,GAAA,IAAAinC,EAAA,KAGA4oD,EAAAI,cAGA,OAAAhuF,KAAAiuF,iBAAA59D,EAAAs9D,EAAAC,EAAA/7D,EAAAzrB,EAAAsnF,EAAArmD,MAAA6mD,UAGA1pF,iBAAA6jF,EAAAlnF,EAAAkvB,EAAAk1D,EAAA4I,EAAAt8D,EAAAzrB,GACA,MAAAgoF,EAAA,IAAAl/D,EAAAwC,aACA28D,GAAAF,EAAAtvF,IAAA,aAAAwxB,GAEAi+D,EAAAzqF,EAAAgiB,KAAAwB,MAAArnB,KAAA4K,KAAAyjF,GAEA,OAAAruF,KAAAsL,iBACAZ,OAAA66E,EACAn/E,OACAiqB,UAAAi+D,EACAz8D,aAAAu8D,IACOrmF,KAAA,WACP,SAAA4hF,EAAA4E,qBACA1I,QAAAuI,EAAAvI,QACAC,UAAAsI,EAAAtI,WACSqI,EAAAhtF,KACF4G,KAAA,SAAAymF,GACP38D,EAAA48D,gBAAAL,EAAAzF,cACA92D,EAAAQ,MAAAg2D,EAAAmG,IACO/lF,IACP,KAAAA,aAAA7E,EAAA6I,gBAAA,CAIA,GAAAzM,KAAAsxB,QAAAnjB,aAKA,OAJAnO,KAAA2E,QAAAK,KAAA,sBACA2G,UAAA/H,EAAAgI,qBAAAC,eAEA,EAAAjI,EAAAoF,+CAAmEP,OAInE,MAAAA,MAIAimF,cAAA,SAAAr+D,EAAAs+D,EAAAC,EAAA/8D,EAAAzrB,EAAAihC,GACA,IAAAwnD,EAOA,OALAF,IAEAE,GADAF,IAAA3rE,SACA,GAAA1kB,MAGA0B,KAAA8uF,SAAAD,EAAAD,EAAAv+D,GAAAtoB,KAAA41B,GACAA,EAAAlc,KAAAstE,YAIApxD,EAAAqxD,cAAAhvF,KAAAqwB,EAAAwB,EAAAzrB,GAAA2B,KAAA,WACA,OAAA41B,IACSn1B,MAAAC,IACTzI,KAAA2E,QAAAK,KAAA,sBACA2G,UAAA/H,EAAAgI,qBAAA6V,OAEA,IAAAwtE,EAAA,mBAAA1F,EAAA2F,UAAA,0BAAAzmF,GAAAk1B,EAAAlc,QATAkc,GAWO51B,KAAA41B,IACP0J,EAAA5lB,KAAAkc,EAAAlc,KACAkc,EAAA34B,KAAAhF,KAAA2E,SACAg5B,EAAAF,cAIAj5B,WAAA2qF,EAAA9nD,GACA,MAAA5lB,EAAA4lB,EAAA5lB,KACA2tE,EAAA3tE,EAAA4tE,cAAAF,GAEA,GAAA1tE,EAAA3c,KAAA,KACAuiC,EAAAioD,kBAAA1rF,EAAAyP,kBAAAwC,mBAEA,YAAAwxB,EAAAkoD,eAAAjxF,MAAAmjB,EAAAxT,iBAAAjO,KAAAsxB,QAAArjB,kBACAojB,EAAAm+D,eAAA/tE,EAAA2tE,EAAApvF,KAAA2E,SAIA,OAAAyqF,GAGA5qF,gBAAA6iC,GACA,GAAAA,EAAA5lB,KACA,OAGA,MAAAhZ,EAAA,IAAA7E,EAAAuP,YAAA,iEAEA,GAAAnT,KAAAsxB,QAAAnjB,aAKA,OAJAnO,KAAA2E,QAAAK,KAAA,sBACA2G,UAAA/H,EAAAgI,qBAAA6V,YAEA,EAAA7d,EAAAoF,2BAA6CP,OAI7C,MAAAA,GAGAyT,UAAA,SAAAmU,EAAAo/D,EAAA59D,EAAAzrB,EAAAsnF,GAKA,IAJA,IAAAgC,KACAC,EAAAF,EAAAzoE,UACAziB,EAAAwC,QAAAtC,UAEA1G,EAAA,EAAAymB,EAAAmrE,EAAApvF,OAA6CxC,EAAAymB,EAAQzmB,IAAA,CACrD,MAAAwF,EAAAosF,EAAA5xF,GACAmF,EAAAusF,EAAA5wF,IAAA0E,GAEA,OAAAA,GACA,WACA,MAEA,SACA,SACA,SACA,SACA,QACA,SACA,SACA,SACA,SACAmsF,EAAApuF,MAAAiC,EAAAL,IACA,MAEA,WACAqB,IAAAwD,KAAA,IACA/H,KAAA0uF,cAAAr+D,EAAA,KAAAntB,EAAA,GAAA2uB,EAAAzrB,EAAAsnF,EAAArmD,OAAAt/B,KAAA,SAAA01B,GACA5L,EAAAo3D,cAAAxrD,GACAiyD,EAAApuF,MAAAiC,GAAAk6B,EAAAv6B,EAAA,SAGA,MAEA,SACAwsF,EAAApuF,MAAAiC,EAAAmnF,EAAAxnF,KACA,MAEA,YACA,MAAAW,EAAAuhB,QAAAliB,EAAA,SACAwsF,EAAApuF,MAAAiC,GAAA,IACA,OAGA,EAAAM,EAAAshB,QAAAjiB,IACAqB,IAAAwD,KAAA,IACA/H,KAAAytF,YAAAvqF,EAAAmtB,EAAAwB,EAAAzrB,EAAAsnF,IAEAgC,EAAApuF,MAAAiC,GAAA,MAEA,EAAAK,EAAAoF,MAAA,0BAGA,MAEA,SACA,SACA,UACA,SACA,UACA,UACA,WACA,SACA,UACA,SACA,SACA,SACA,UACA,UACA,EAAApF,EAAA6H,MAAA,0BAAAlI,GACA,MAEA,SACA,EAAAK,EAAA6H,MAAA,kCAAAlI,IAKA,OAAAgB,EAAAwD,KAAA,WACA2nF,EAAAnvF,OAAA,GACAsxB,EAAAQ,MAAAzuB,EAAAyQ,IAAA6H,WAAAwzE,OAIAZ,SAAA,SAAAD,EAAAptE,EAAA4O,GACA,SAAAu/D,IACA,OAAA7oF,QAAAtC,QAAA,IAAAwqF,EAAA,mBAAA1F,EAAA2F,UAAA,QAAAL,EAAA,qBAAAptE,IAGA,IAAAmtE,EACAhkF,EAAA5K,KAAA4K,KAEA,GAAA6W,EAAA,CACA,OAAA5d,EAAAwhB,OAAA5D,GACA,UAAA7d,EAAAuP,YAAA,4CAGAy7E,EAAAntE,MACO,CACP,IAAAouE,EAAAx/D,EAAAxxB,IAAA,QAEAgxF,IACAjB,EAAAiB,EAAA9oE,OAAA8nE,IAIA,IAAAD,EAAA,CACA,MAAAkB,WAAoCjB,GAAAptE,KAAA7T,+BAEpC,IAAA5N,KAAAsxB,QAAAnjB,eAAAnO,KAAAmqF,iBAEA,OADA,EAAAvmF,EAAAoF,SAA6B8mF,MAC7BF,IAGA5vF,KAAA2E,QAAAK,KAAA,sBACA2G,UAAA/H,EAAAgI,qBAAA6V,QAEA,EAAA7d,EAAAoF,SAA2B8mF,kDAC3BlB,EAAAv9D,EAAA0+D,sBAGA,GAAA/vF,KAAA4vB,UAAA1I,IAAA0nE,GACA,OAAA5uF,KAAA4vB,UAAA/wB,IAAA+vF,GAKA,GAFAntE,EAAA7W,EAAAimB,WAAA+9D,KAEA,EAAA/qF,EAAAshB,QAAA1D,GACA,OAAAmuE,IAGA,GAAAnuE,EAAAkc,WACA,OAAAlc,EAAAkc,WAGA,IAAAqyD,GAAA,EAAApsF,EAAAS,2BACA4rF,EAAAjwF,KAAAkwF,gBAAAzuE,GACA,MAAA0uE,WACAA,EAAAv5D,KACAA,GACOq5D,EACP,IACAG,EA8CAC,EA/CAC,GAAA,EAAAzsF,EAAAwhB,OAAAupE,GAOA,GAJA0B,IACAF,EAAAxB,EAAAhhF,YAGAgpB,IAAA,EAAA/yB,EAAAshB,QAAAgrE,GAAA,CACAA,EAAAI,cACAJ,EAAAI,YAAA9xF,OAAA6E,OAAA,OAGA,IAAAitF,EAAAJ,EAAAI,YAEA,GAAAA,EAAA35D,GAAA,CACA,IAAA45D,EAAAD,EAAA35D,GAAA7O,SAEA,GAAAuoE,GAAAE,GAAAxwF,KAAA4vB,UAAA1I,IAAAspE,GAEA,OADAxwF,KAAA4vB,UAAA9H,SAAA8mE,EAAA4B,GACAxwF,KAAA4vB,UAAA/wB,IAAA+vF,QAGA2B,EAAA35D,IACAw5D,OAAA7G,EAAAkH,KAAAC,aAIAJ,IACAC,EAAA35D,GAAA7O,SAAA6mE,GAGAwB,EAAAG,EAAA35D,GAAAw5D,OAGAE,EACAtwF,KAAA4vB,UAAAhI,IAAAgnE,EAAAoB,EAAAzrF,UAEA6rF,IACAA,EAAApwF,KAAAiwB,UAAAC,eAGAlwB,KAAA4vB,UAAAhI,UAAiCwoE,IAAOJ,EAAAzrF,WAGxC,EAAAX,EAAAyL,QAAA+gF,EAAA,iCACA3uE,EAAAgc,cAA2Bz9B,KAAAiwB,UAAAE,eAA8BigE,IACzD3uE,EAAAkc,WAAAqyD,EAAAzrF,QAGA,IACA8rF,EAAArwF,KAAA2wF,cAAAV,GACO,MAAAlwF,GACPswF,EAAAtpF,QAAAS,OAAAzH,GAyBA,OAtBAswF,EAAAtoF,KAAA,SAAAy1B,QACAjuB,IAAAiuB,EAAAozD,WACAhmF,EAAAC,MAAAm1B,UACAxC,EAAAozD,WAAA,GAGAZ,EAAAvrF,QAAA,IAAAwqF,EAAAxtE,EAAAgc,WAAAD,EAAA/b,MACOjZ,MAAAC,IACPzI,KAAA2E,QAAAK,KAAA,sBACA2G,UAAA/H,EAAAgI,qBAAA6V,OAGA,IACA,IAAAovE,EAAAV,KAAAtxF,IAAA,aACAq5B,EAAA24D,KAAAhyF,IAAA,WACA+xF,GAAA,EAAArH,EAAAuH,aAAAb,EAAA1rE,KAAA2T,KAAA55B,MACAsM,EAAAC,MAAAm1B,UACA4wD,IAAA,EACS,MAAArpF,IAETyoF,EAAAvrF,QAAA,IAAAwqF,EAAAxtE,EAAAgc,WAAA,IAAA8rD,EAAA2F,UAAAzmF,aAAA/I,MAAA+I,EAAAkF,QAAAlF,GAAAgZ,MAEAuuE,EAAAzrF,SAGAC,UAAAqtB,EAAAw2D,EAAAlnF,EAAA4vF,GAAA,GACA,IAAAC,EAAAn/D,EAAAtxB,OAAA,EAMA,GAJAY,IACAA,MAGA6vF,EAAA,GAAAn/D,EAAAg0D,QAAAmL,KAAAptF,EAAAyQ,IAAA+M,cACA2vE,KACA,EAAAntF,EAAAoF,oCAAwDq/E,+BACxDx2D,EAAAQ,MAAAzuB,EAAAyQ,IAAA8H,KAAA,OAGA0V,EAAAQ,MAAAzuB,EAAAyQ,IAAA+M,gBAAAinE,GAAAlnF,IAEA4vF,GACAl/D,EAAAQ,MAAAzuB,EAAAyQ,IAAA+H,QAAA,UAEO,CACP,IAAA60E,EAAAp/D,EAAAi0D,UAAAkL,GACAC,EAAA,GAAA3vF,KAAA+mF,GACAjnF,MAAAlC,UAAAoC,KAAAC,MAAA0vF,EAAA,GAAA9vF,KAIAqD,iBAAA4xE,GACAA,EAAA/lD,UACAA,IAEA,WAAAtpB,QAAAtC,IACAA,EAAAgzB,EAAA4B,WAAAhE,MAAA+gD,EAAAp2E,KAAA4K,KAAAylB,EAAArwB,KAAA8vB,uBACOtnB,MAAAC,IACP,GAAAA,aAAA7E,EAAA6I,eACA,YAGA,GAAAzM,KAAAsxB,QAAAnjB,aAKA,OAJAnO,KAAA2E,QAAAK,KAAA,sBACA2G,UAAA/H,EAAAgI,qBAAAC,WAEA,EAAAjI,EAAAoF,iDAAqEP,OACrE,KAGA,MAAAA,KAIAjE,mBAAAqtB,EAAAw2D,EAAAlnF,EAAAi1E,EAAA7uB,EAAAl3B,EAAAjqB,GACA,IACAm/E,EADA2L,EAAA/vF,IAAAZ,OAAA,GAGA,MAAAsD,EAAAuhB,QAAA8rE,KAAA3L,EAAAh+B,EAAA1oD,IAAAqyF,EAAA5yF,OAAA,CACA,IAAAkpB,GAAA,EAAA3jB,EAAA4hB,UAAA8/D,KAAA/9D,KAAA+9D,EACA4L,EAAA3pE,EAAA3oB,IAAA,eAEA,GA7wBA,IA6wBAsyF,EAAA,CACA,IAAAj4D,EAAAk9C,EAAAjlE,KAAAilE,EAAAjlE,KAAAqoB,OAAAr4B,EAAA,QACA,OAAAnB,KAAAoxF,iBAAA/I,EAAAnvD,EAAA7I,EAAAk1D,EAAA/9D,EAAAqK,EAAAzrB,GACS,GA/wBT,IA+wBS+qF,EAAA,CACT,IAAAE,EAAA7pE,EAAA3oB,IAAA,WACAi4E,EAAAtvD,EAAAiG,SAAA,UAGA,OAFA83D,EAAAoE,EAAA2H,QAAAC,aAAAF,EAAAva,EAAA92E,KAAA4K,KAAAylB,EAAArwB,KAAA2E,QAAA3E,KAAA8vB,yBACA+B,EAAAQ,MAAAg2D,EAAA9C,EAAAh5B,SAIA,UAAA3oD,EAAAuP,oCAA4Dg+E,KAG5D,UAAAvtF,EAAAuP,oCAA0D+9E,MAG1D1sF,iBAAAkG,OACAA,EAAAtE,KACAA,EAAAiqB,UACAA,EAAAwB,aACAA,EAAA+5D,aACAA,EAAA,OAKA,GAHAv7D,KAAAxsB,EAAAgiB,KAAAuB,MACAwkE,KAAA,IAAA4F,GAEA3/D,EACA,UAAAnyB,MAAA,qDAGA,IAAAiP,EAAA3O,KACA4K,EAAA5K,KAAA4K,KACA,IAAAmmF,GAAA,EACA,IAAAjqD,EAAAroC,OAAA6E,OAAA,MAEAmuF,EAAAphE,EAAAxxB,IAAA,YAAAgF,EAAAgiB,KAAAuB,MAEAmgC,EAAAl3B,EAAAxxB,IAAA,YAAAgF,EAAAgiB,KAAAuB,MAEAsmE,EAAA,IAAAgE,EAAA9F,GACA+F,EAAA,IAAAC,EAAAlnF,EAAAE,EAAA8iF,GACAmE,EAAA,IAAApH,EAEA,SAAAqH,EAAAC,GACA,QAAAh0F,EAAA,EAAAymB,EAAAmtE,EAAAK,iBAA2Dj0F,EAAAymB,EAAQzmB,IACnE8zB,EAAAQ,MAAAzuB,EAAAyQ,IAAA+H,YAIA,WAAArV,QAAA,SAAAkrF,EAAAxtF,EAAA+C,GACA,MAAAu2B,EAAA,SAAAx5B,GACAwC,QAAAC,KAAAzC,EAAAstB,EAAAk3D,QAAAhhF,KAAA,WACA,IACAkqF,EAAAxtF,EAAA+C,GACa,MAAAD,GACbC,EAAAD,KAEWC,IAGXpB,EAAAF,sBACA2rF,EAAAl9D,QAOA,IANA,IAAAu9D,EAEAn0F,EACAymB,EACA4xD,EAHA+b,OAKAD,EAAAL,EAAA1hD,WACAgiD,EAAAhxF,KAAA,KAEAwwF,EAAAroF,KAAA6oF,KAHA,CAOA,IAAAhxF,EAAAgxF,EAAAhxF,KACAknF,EAAA8J,EAAA9J,GAEA,SAAAA,GACA,KAAAzkF,EAAAyQ,IAAAsL,aACA,IAAArhB,EAAA6C,EAAA,GAAA7C,KAEA,GAAAA,QAAAiR,IAAAu3B,EAAAxoC,GAAA,CACAuzB,EAAAQ,MAAAyU,EAAAxoC,GAAA+pF,GAAAvhD,EAAAxoC,GAAA6C,MACAA,EAAA,KACA,SAgEA,YA7DA48B,EAAA,IAAAh3B,QAAA,SAAAqrF,EAAAC,GACA,IAAA/zF,EACA,UAAAsF,EAAAuP,YAAA,wCAGA,MAAAw4E,EAAA8F,EAAA5yF,IAAAP,GAEA,IAAAqtF,EAGA,OAFA95D,EAAAQ,MAAAg2D,EAAAlnF,QACAixF,IAIA,OAAAvuF,EAAA4hB,UAAAkmE,GACA,UAAA/nF,EAAAuP,YAAA,8BAGA,MAAAoR,EAAAonE,EAAAnkE,KAAA3oB,IAAA,WAEA,OAAAgF,EAAAuhB,QAAAb,GACA,UAAA3gB,EAAAuP,YAAA,sCAGA,YAAAoR,EAAAjmB,KAMA,OALAovF,EAAAvxE,YACAxN,EAAAs/E,iBAAA59D,EAAAs7D,EAAA,KAAA95D,EAAAzrB,EAAAsnF,EAAArmD,MAAA6mD,SAAAnmF,KAAA,WACA2lF,EAAAtxE,UACAg2E,KACmBC,GAEF,aAAA9tE,EAAAjmB,KAAA,CASA,UAAAimB,EAAAjmB,KAGjB,UAAAsF,EAAAuP,yCAA2EoR,EAAAjmB,SAF3E,EAAAsF,EAAA6H,MAAA,8BAKA2mF,SAdAzjF,EAAAw+E,wBACA98D,YACAg8D,MAAAV,EACA95D,eACA0W,SAAAjqC,EACAwoC,eACmB/+B,KAAAqqF,EAAAC,KASJ7pF,MAAA,SAAAC,GACf,KAAAA,aAAA7E,EAAA6I,gBAAA,CAIA,GAAAkC,EAAA2iB,QAAAnjB,aAKA,OAJAQ,EAAAhK,QAAAK,KAAA,sBACA2G,UAAA/H,EAAAgI,qBAAAC,eAEA,EAAAjI,EAAAoF,8CAA0EP,OAI1E,MAAAA,MAIA,KAAA7E,EAAAyQ,IAAAyJ,QACA,IAAAw0E,EAAAnxF,EAAA,GAKA,YAJA48B,EAAApvB,EAAA+/E,cAAAr+D,EAAAlvB,EAAA,KAAA0wB,EAAAzrB,EAAAsnF,EAAArmD,OAAAt/B,KAAA,SAAA01B,GACA5L,EAAAo3D,cAAAxrD,GACA5L,EAAAQ,MAAAzuB,EAAAyQ,IAAAyJ,SAAA2f,EAAA60D,OAIA,KAAA1uF,EAAAyQ,IAAAmJ,UACAuzE,GAAA,EACA,MAEA,KAAAntF,EAAAyQ,IAAAoJ,QACAszE,GAAA,EACA,MAEA,KAAAntF,EAAAyQ,IAAAqL,eACA,IAAA6oB,EAAApnC,EAAA,GAAAonC,SAEA,GAAAA,EAAA,CACA,IAAApE,EAAA2C,EAAAyB,GAEA,QAAAh5B,IAAA40B,EAAA,CACAtS,EAAAQ,MAAA8R,EAAAkkD,GAAAlkD,EAAAhjC,MACAA,EAAA,KACA,UAYA,YARA48B,EAAApvB,EAAAw+E,wBACA98D,YACAg8D,MAAAlrF,EAAA,GACAmrF,UAAA,EACAz6D,eACA0W,WACAzB,gBAIA,KAAAljC,EAAAyQ,IAAAgK,SACA,IAAAqvE,EAAArmD,MAAA5lB,KAAA,CACA9S,EAAA4jF,gBAAA7E,EAAArmD,OACA,SAGAlmC,EAAA,GAAAwN,EAAA6jF,WAAArxF,EAAA,GAAAusF,EAAArmD,OACA,MAEA,KAAAzjC,EAAAyQ,IAAAiK,eACA,IAAAovE,EAAArmD,MAAA5lB,KAAA,CACA9S,EAAA4jF,gBAAA7E,EAAArmD,OACA,SAGA,IAAAv4B,EAAA3N,EAAA,GACAsxF,KACAC,EAAA5jF,EAAAvO,OACA8mC,EAAAqmD,EAAArmD,MAEA,IAAAtpC,EAAA,EAAyBA,EAAA20F,IAAe30F,EAAA,CACxC,IAAA40F,EAAA7jF,EAAA/Q,IAEA,EAAA6F,EAAAmN,UAAA4hF,GACAvxF,MAAAlC,UAAAoC,KAAAC,MAAAkxF,EAAA9jF,EAAA6jF,WAAAG,EAAAtrD,KACiB,EAAAzjC,EAAAkN,OAAA6hF,IACjBF,EAAAnxF,KAAAqxF,GAIAxxF,EAAA,GAAAsxF,EACApK,EAAAzkF,EAAAyQ,IAAAgK,SACA,MAEA,KAAAza,EAAAyQ,IAAAkK,iBACA,IAAAmvE,EAAArmD,MAAA5lB,KAAA,CACA9S,EAAA4jF,gBAAA7E,EAAArmD,OACA,SAGAxV,EAAAQ,MAAAzuB,EAAAyQ,IAAA+J,UACAjd,EAAA,GAAAwN,EAAA6jF,WAAArxF,EAAA,GAAAusF,EAAArmD,OACAghD,EAAAzkF,EAAAyQ,IAAAgK,SACA,MAEA,KAAAza,EAAAyQ,IAAAmK,2BACA,IAAAkvE,EAAArmD,MAAA5lB,KAAA,CACA9S,EAAA4jF,gBAAA7E,EAAArmD,OACA,SAGAxV,EAAAQ,MAAAzuB,EAAAyQ,IAAA+J,UACAyT,EAAAQ,MAAAzuB,EAAAyQ,IAAAsJ,gBAAAxc,EAAAy3B,UACA/G,EAAAQ,MAAAzuB,EAAAyQ,IAAAqJ,gBAAAvc,EAAAy3B,UACAz3B,EAAA,GAAAwN,EAAA6jF,WAAArxF,EAAA,GAAAusF,EAAArmD,OACAghD,EAAAzkF,EAAAyQ,IAAAgK,SACA,MAEA,KAAAza,EAAAyQ,IAAA0J,qBACA2vE,EAAArmD,MAAAioD,kBAAAnuF,EAAA,GACA,MAEA,KAAAyC,EAAAyQ,IAAAuK,kBASA,YARAmf,EAAApvB,EAAAw9E,iBACA/V,GAAAj1E,EAAA,GACAkvB,cACetoB,KAAA,SAAAmkF,GACfA,IACAwB,EAAArmD,MAAAkoD,eAAArD,MAKA,KAAAtoF,EAAAyQ,IAAAsK,oBASA,YARAof,EAAApvB,EAAAw9E,iBACA/V,GAAAj1E,EAAA,GACAkvB,cACetoB,KAAA,SAAAmkF,GACfA,IACAwB,EAAArmD,MAAAurD,iBAAA1G,MAKA,KAAAtoF,EAAAyQ,IAAA0K,aACAq3D,EAAAsX,EAAArmD,MAAAkoD,eACApuF,EAAAi1E,EAAA58C,OAAAr4B,EAAA,GACAknF,EAAAzkF,EAAAyQ,IAAA+K,gBACA,MAEA,KAAAxb,EAAAyQ,IAAAwK,eACAu3D,EAAAsX,EAAArmD,MAAAurD,iBACAzxF,EAAAi1E,EAAA58C,OAAAr4B,EAAA,GACAknF,EAAAzkF,EAAAyQ,IAAA8K,kBACA,MAEA,KAAAvb,EAAAyQ,IAAA6K,YACAwuE,EAAArmD,MAAAkoD,eAAA93D,EAAA4B,WAAAC,WAAAq9C,KACAx1E,EAAAs2B,EAAA4B,WAAAC,WAAAq9C,KAAAn9C,OAAAr4B,EAAA,GACAknF,EAAAzkF,EAAAyQ,IAAA+K,gBACA,MAEA,KAAAxb,EAAAyQ,IAAA4K,cACAyuE,EAAArmD,MAAAurD,iBAAAn7D,EAAA4B,WAAAC,WAAAq9C,KACAx1E,EAAAs2B,EAAA4B,WAAAC,WAAAq9C,KAAAn9C,OAAAr4B,EAAA,GACAknF,EAAAzkF,EAAAyQ,IAAA8K,kBACA,MAEA,KAAAvb,EAAAyQ,IAAAiL,iBACAouE,EAAArmD,MAAAkoD,eAAA93D,EAAA4B,WAAAC,WAAAs9C,KACAz1E,EAAAs2B,EAAA4B,WAAAC,WAAAs9C,KAAAp9C,OAAAr4B,EAAA,GACAknF,EAAAzkF,EAAAyQ,IAAA+K,gBACA,MAEA,KAAAxb,EAAAyQ,IAAAgL,mBACAquE,EAAArmD,MAAAurD,iBAAAn7D,EAAA4B,WAAAC,WAAAs9C,KACAz1E,EAAAs2B,EAAA4B,WAAAC,WAAAs9C,KAAAp9C,OAAAr4B,EAAA,GACAknF,EAAAzkF,EAAAyQ,IAAA8K,kBACA,MAEA,KAAAvb,EAAAyQ,IAAA+K,gBACAsuE,EAAArmD,MAAAkoD,eAAA93D,EAAA4B,WAAAC,WAAAC,IACAp4B,EAAAs2B,EAAA4B,WAAAC,WAAAC,IAAAC,OAAAr4B,EAAA,GACA,MAEA,KAAAyC,EAAAyQ,IAAA8K,kBACAuuE,EAAArmD,MAAAurD,iBAAAn7D,EAAA4B,WAAAC,WAAAC,IACAp4B,EAAAs2B,EAAA4B,WAAAC,WAAAC,IAAAC,OAAAr4B,EAAA,GACA,MAEA,KAAAyC,EAAAyQ,IAAA2K,cAGA,gBAFAo3D,EAAAsX,EAAArmD,MAAAkoD,gBAEAjxF,KAEA,YADAy/B,EAAApvB,EAAAkkF,aAAAhhE,EAAAjuB,EAAAyQ,IAAA2K,cAAA7d,EAAAi1E,EAAA7uB,EAAAl3B,EAAAjqB,IAIAjF,EAAAi1E,EAAA58C,OAAAr4B,EAAA,GACAknF,EAAAzkF,EAAAyQ,IAAA+K,gBACA,MAEA,KAAAxb,EAAAyQ,IAAAyK,gBAGA,gBAFAs3D,EAAAsX,EAAArmD,MAAAurD,kBAEAt0F,KAEA,YADAy/B,EAAApvB,EAAAkkF,aAAAhhE,EAAAjuB,EAAAyQ,IAAAyK,gBAAA3d,EAAAi1E,EAAA7uB,EAAAl3B,EAAAjqB,IAIAjF,EAAAi1E,EAAA58C,OAAAr4B,EAAA,GACAknF,EAAAzkF,EAAAyQ,IAAA8K,kBACA,MAEA,KAAAvb,EAAAyQ,IAAAkL,YACA,IAAAuzE,EAAAziE,EAAAxxB,IAAA,WAEA,IAAAi0F,EACA,UAAAlvF,EAAAuP,YAAA,6BAGA,IAAAk+E,EAAAyB,EAAAj0F,IAAAsC,EAAA,GAAA7C,MAEA,IAAA+yF,EACA,UAAAztF,EAAAuP,YAAA,2BAGA,IAEA4/E,EAFApJ,EAAA2H,QAAAC,aAAAF,EAAA,KAAAzmF,EAAAylB,EAAA1hB,EAAAhK,QAAAgK,EAAAmhB,oBAEAy8B,QACAprD,GAAA4xF,GACA1K,EAAAzkF,EAAAyQ,IAAAkL,YACA,MAEA,KAAA3b,EAAAyQ,IAAA6H,UACA,IAAA82E,EAAA7xF,EAAA,GACA8xF,EAAA5iE,EAAAxxB,IAAA,aAEA,OAAAgF,EAAAshB,QAAA8tE,OAAA/rE,IAAA8rE,EAAA10F,MACA,MAGA,IAAAmxF,EAAAwD,EAAAp0F,IAAAm0F,EAAA10F,MAEA,YADAy/B,EAAApvB,EAAAuN,UAAAmU,EAAAo/D,EAAA59D,EAAAzrB,EAAAsnF,IAGA,KAAA9pF,EAAAyQ,IAAAiI,OACA,KAAA1Y,EAAAyQ,IAAAkI,OACA,KAAA3Y,EAAAyQ,IAAAmI,QACA,KAAA5Y,EAAAyQ,IAAAoI,SACA,KAAA7Y,EAAAyQ,IAAAqI,SACA,KAAA9Y,EAAAyQ,IAAAsI,UACA,KAAA/Y,EAAAyQ,IAAAuI,UACAjO,EAAAukF,UAAArhE,EAAAw2D,EAAAlnF,EAAA4vF,GACA,SAEA,KAAAntF,EAAAyQ,IAAAuL,UACA,KAAAhc,EAAAyQ,IAAAwL,eACA,KAAAjc,EAAAyQ,IAAAyL,mBACA,KAAAlc,EAAAyQ,IAAA0L,wBACA,KAAAnc,EAAAyQ,IAAA2L,iBACA,KAAApc,EAAAyQ,IAAA4L,YACA,KAAArc,EAAAyQ,IAAA6L,UACA,SAEA,QACA,UAAA/e,EAAA,CACA,IAAApD,EAAA,EAAAymB,EAAArjB,EAAAZ,OAA6CxC,EAAAymB,KAC7CrjB,EAAApD,aAAA8F,EAAAgiB,MADqD9nB,KAMrD,GAAAA,EAAAymB,EAAA,EACA,EAAA5gB,EAAAoF,MAAA,wCAAAq/E,GACA,WAMAx2D,EAAAQ,MAAAg2D,EAAAlnF,GAGA+wF,EACAn0D,EAAAgtD,IAIA+G,IACArtF,OACO+D,MAAAC,IACP,KAAAA,aAAA7E,EAAA6I,gBAAA,CAIA,GAAAzM,KAAAsxB,QAAAnjB,aAMA,OALAnO,KAAA2E,QAAAK,KAAA,sBACA2G,UAAA/H,EAAAgI,qBAAAC,WAEA,EAAAjI,EAAAoF,mDAAuE5C,EAAA9H,mBAA0BmK,YACjGqpF,IAIA,MAAArpF,MAIAjE,gBAAAkG,OACAA,EAAAtE,KACAA,EAAAiqB,UACAA,EAAAq9D,aACAA,EAAA,KAAAvhF,oBACAA,GAAA,EAAAC,iBACAA,GAAA,EAAApB,KACAA,EAAAmoF,WACAA,EAAA10F,OAAA6E,OAAA,QAEA+sB,KAAAxsB,EAAAgiB,KAAAuB,MACAsmE,KAAA,IAAAgE,EAAA,IAAA0B,GACA,IA8BAC,EA9BAC,EAAA,MACAC,GACA/6D,SACAg7D,OAAA/0F,OAAA6E,OAAA,OAEAmwF,GACA1hD,aAAA,EACAlgC,OACA2mC,MAAA,EACAC,OAAA,EACAi7C,UAAA,EACAC,iBAAA,EACAC,kBAAA,EACAC,iBAAA,EACAC,WAAA,EACAC,aAAAC,IACAC,kBAAAD,IACAE,mBAAA,EACAC,qBAAA,EACA93E,UAAA,KACAwyE,SAAA,MAEAuF,EAAA,GACAC,EAAA,IACAC,EAAA,EACA3lF,EAAA3O,KACA4K,EAAA5K,KAAA4K,KACA6mF,EAAA,KACA8C,EAAA91F,OAAA6E,OAAA,MACAquF,EAAA,IAAAC,EAAAlnF,EAAAE,EAAA8iF,GAGA,SAAA8G,IACA,GAAAf,EAAA1hD,YACA,OAAA0hD,EAGA,IAAAhyE,EAAA4xE,EAAA5xE,KAEAA,EAAAgc,cAAA01D,IACAA,EAAA1xE,EAAAgc,aAAA,EACA81D,EAAAC,OAAA/xE,EAAAgc,aACAg3D,WAAAhzE,EAAAizE,aACAC,OAAAlzE,EAAAkzE,OACAC,QAAAnzE,EAAAmzE,QACAlB,WAAAjyE,EAAAiyE,WAIAD,EAAA5E,SAAAptE,EAAAgc,WACA,IAAAo3D,GAAAxB,EAAAf,SAAAe,EAAAyB,WAAA,IAAAzB,EAAAf,SAAA,EAAAe,EAAA0B,UAEA,GAAAtzE,EAAAstE,aAAAsE,EAAAf,UAAA,OAAA1uF,EAAAyM,cAAAgjF,EAAA2B,WAAApxF,EAAA2Q,sBAAA,CACA,MAAA0gF,EAAAxzE,EAAAy/D,KAAA,GAAAz/D,EAAAy/D,KAAA,GAEA+T,EAAA,IACAJ,EAAA,IAAAI,EAAA5B,EAAA2B,WAAA,IAIA,IAAAE,EAAAtxF,EAAAwP,KAAAiJ,UAAAg3E,EAAA8B,IAAAvxF,EAAAwP,KAAAiJ,UAAAg3E,EAAA+B,WAAAP,IAEApB,EAAAp3E,UAAA64E,EAEAzzE,EAAAiyE,UAKAD,EAAAj7C,MAAApvC,KAAAma,KAAA2xE,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAzB,EAAAh7C,OAAA,EACAg7C,EAAAC,UAAA,IANAD,EAAAj7C,MAAA,EACAi7C,EAAAh7C,OAAArvC,KAAAma,KAAA2xE,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAzB,EAAAC,UAAA,GAOA,IAAAtwE,EAAAiwE,EAAAgC,eAAA,GACA3yE,EAAA2wE,EAAAgC,eAAA,GACAC,EAAAlsF,KAAAma,KAAAH,IAAAV,KACAU,EAAAiwE,EAAA8B,IAAA,GACAzyE,EAAA2wE,EAAA8B,IAAA,GACA,IAAAI,EAAAnsF,KAAAma,KAAAH,IAAAV,KACA+wE,EAAAI,iBAAA0B,EAAAD,EACA7B,EAAAE,iBAAA,EACAF,EAAAG,kBAAA,EACA,IAAAE,EAAAryE,EAAAqyE,WAAA,IAAAT,EAAAf,SAiBA,OAfAwB,GACAL,EAAAK,aACAL,EAAAM,aAAAD,EAAAM,EACAX,EAAAQ,kBAAAH,EAAAO,EACAZ,EAAAS,kBAAAJ,EAAAQ,EACAb,EAAAU,qBAAA1yE,EAAA+zE,cAEA/B,EAAAK,WAAA,EACAL,EAAAM,aAAAC,IACAP,EAAAQ,kBAAAD,IACAP,EAAAS,kBAAA,EACAT,EAAAU,qBAAA,GAGAV,EAAA1hD,aAAA,EACA0hD,EAeA,SAAAgC,EAAAC,GACA,IAAA7jF,EAAA6jF,EAAA7jF,IAAAhM,KAAA,IACA8vF,GAAA,EAAA/L,EAAAgM,MAAA/jF,GAAA,EAAA6jF,EAAAhC,UACA,OACA7hF,IAAA1F,EAhBA,SAAA0F,GAKA,IAJA,IAEA1E,EAFApP,EAAA,EACAymB,EAAA3S,EAAAtR,OAGAxC,EAAAymB,IAAArX,EAAA0E,EAAAS,WAAAvU,KAAA,IAAAoP,GAAA,KACApP,IAGA,OAAAA,EAAAymB,EAAA3S,EAAAC,QAAAwhF,EAAA,KAAAzhF,EAOAgkF,CAAAF,EAAA9jF,KAAA8jF,EAAA9jF,IACAlP,IAAAgzF,EAAAhzF,IACA61C,MAAAk9C,EAAAl9C,MACAC,OAAAi9C,EAAAj9C,OACAp8B,UAAAq5E,EAAAr5E,UACAwyE,SAAA6G,EAAA7G,UAIA,SAAAH,EAAAG,EAAAD,GACA,OAAAjgF,EAAAmgF,SAAAD,EAAAD,EAAAv+D,GAAAtoB,KAAA,SAAA41B,GACA01D,EAAA5xE,KAAAkc,EAAAlc,KACA4xE,EAAA2B,WAAAr3D,EAAAlc,KAAAuzE,YAAApxF,EAAA2Q,uBAIA,SAAAuhF,EAAA3G,GAOA,IANA,IAAA1tE,EAAA4xE,EAAA5xE,KACAi0E,EAAAlB,IACAh8C,EAAA,EACAC,EAAA,EACA22C,EAAA3tE,EAAA4tE,cAAAF,GAEApxF,EAAA,EAAuBA,EAAAqxF,EAAA7uF,OAAmBxC,IAAA,CAC1C,IAAAg4F,EAAA3G,EAAArxF,GACAi4F,EAAA,KAGAA,EADAv0E,EAAAiyE,UAAAqC,EAAAE,QACAF,EAAAE,QAAA,GAEAF,EAAAv9C,MAGA,IAAA09C,EAAAH,EAAAI,QACAC,GAAA,EAAA3M,EAAA4M,8BAEA9mF,IAAA6mF,EAAAF,KACAA,EAAAE,EAAAF,IAGAA,GAAA,EAAAzM,EAAA6M,cAAAJ,GACA,IAAAK,EAAAlD,EAAAkD,YAEA,GAAAR,EAAAS,QAAA,CACA,IAAAC,EAAApD,EAAAoD,YACAF,GAAAE,EAEAA,EAAA,GACAC,EAAAD,EAAAf,EAAA7jF,KAIA,IAAA8kF,EAAA,EACAC,EAAA,EAEA,GAAAn1E,EAAAiyE,SAOAj7C,GADAm+C,EADAZ,EAAA3C,EAAA2B,WAAA,GACA3B,EAAAf,SAAAiE,OAHA/9C,GADAm+C,GADAX,EAAA3C,EAAA2B,WAAA,GACA3B,EAAAf,SAAAiE,GAAAlD,EAAAyB,WAQAzB,EAAAwD,oBAAAF,EAAAC,GACAlB,EAAA7jF,IAAAvQ,KAAA40F,GAWA,OARAz0E,EAAAiyE,UAIAgC,EAAA9B,kBAAAn7C,EACAi9C,EAAAj9C,QAAArvC,KAAA0tF,IAAAr+C,KAJAi9C,EAAA/B,iBAAAn7C,EACAk9C,EAAAl9C,UAMAk9C,EAGA,SAAAgB,EAAAl+C,EAAA9oC,GACA,KAAA8oC,EAAAi7C,EAAAM,cAIA,GAAAv7C,EAAAi7C,EAAAQ,kBACAvkF,EAAApO,KAAA,UAMA,IAFA,IAAAy1F,EAAA3tF,KAAA4tF,MAAAx+C,EAAAi7C,EAAAK,YAEAiD,KAAA,GACArnF,EAAApO,KAAA,KAIA,SAAA21F,IACAxD,EAAA1hD,cAIA0hD,EAAAC,SAGAD,EAAAh7C,QAAAg7C,EAAAI,iBAFAJ,EAAAj7C,OAAAi7C,EAAAI,iBAKAN,EAAA/6D,MAAAl3B,KAAAm0F,EAAAhC,IACAA,EAAA1hD,aAAA,EACA0hD,EAAA5hF,IAAAtR,OAAA,GAGA,SAAA22F,IACA,MAAA32F,EAAAgzF,EAAA/6D,MAAAj4B,OAEAA,EAAA,IACAyK,EAAAq+E,QAAAkK,EAAAhzF,GACAgzF,EAAA/6D,SACA+6D,EAAAC,OAAA/0F,OAAA6E,OAAA,OAIA,IAAAuuF,EAAA,IAAApH,EACA,WAAA1jF,QAAA,SAAAkrF,EAAAxtF,EAAA+C,GACA,MAAAu2B,EAAA,SAAAx5B,GACA2yF,IACAnwF,QAAAC,KAAAzC,EAAAyG,EAAA+9E,QAAAhhF,KAAA,WACA,IACAkqF,EAAAxtF,EAAA+C,GACa,MAAAD,GACbC,EAAAD,KAEWC,IAGXpB,EAAAF,sBACA2rF,EAAAl9D,QAKA,IAJA,IAAAu9D,EACAC,KACAhxF,OAEA+wF,EAAAL,EAAA1hD,WACAhvC,EAAAZ,OAAA,EACA4xF,EAAAhxF,OAEAwwF,EAAAroF,KAAA6oF,KAJA,CAQAkB,EAAA3F,EAAArmD,MACA,IAEA8vD,EAFA9O,EAAA8J,EAAA9J,GAIA,OAHAlnF,EAAAgxF,EAAAhxF,KAGA,EAAAknF,GACA,KAAAzkF,EAAAyQ,IAAAyJ,QACA,IAAAs5E,EAAAj2F,EAAA,GAAA7C,KACA+4F,EAAAl2F,EAAA,GAEA,GAAAkyF,EAAA5xE,MAAA21E,IAAA/D,EAAAxE,UAAAwI,IAAAhE,EAAAf,SACA,MAOA,OAJA2E,IACA5D,EAAAxE,SAAAuI,EACA/D,EAAAf,SAAA+E,OACAt5D,EAAA2wD,EAAA0I,EAAA,OAGA,KAAAxzF,EAAAyQ,IAAA2J,YACAi5E,IACA5D,EAAA0B,SAAA5zF,EAAA,GACA,MAEA,KAAAyC,EAAAyQ,IAAAuJ,UACAq5E,IACA5D,EAAAyB,WAAA3zF,EAAA,OACA,MAEA,KAAAyC,EAAAyQ,IAAAwJ,WACAo5E,IACA5D,EAAAiE,QAAAn2F,EAAA,GACA,MAEA,KAAAyC,EAAAyQ,IAAA4J,SACA,IAAAs5E,IAAAlE,EAAA5xE,MAAA,KAAA4xE,EAAA5xE,KAAAiyE,SAAAvyF,EAAA,GAAAA,EAAA,IAGA,GAFAg2F,EAAAh2F,EAAA,GAAAA,EAAA,GAEAiL,GAAAmrF,GAAA9D,EAAA1hD,aAAAolD,EAAA,GAAAA,GAAA1D,EAAAS,kBAAA,CACAb,EAAAmE,wBAAAr2F,EAAA,GAAAA,EAAA,IACAsyF,EAAAj7C,OAAAr3C,EAAA,GAAAsyF,EAAAE,iBACAF,EAAAh7C,QAAAt3C,EAAA,GAAAsyF,EAAAG,kBAEA8C,EADAv1F,EAAA,GAAAsyF,EAAAE,kBAAAxyF,EAAA,GAAAsyF,EAAAG,mBACAH,EAAA5hF,KACA,MAGAolF,IACA5D,EAAAmE,wBAAAr2F,EAAA,GAAAA,EAAA,IACAkyF,EAAA+B,WAAA/B,EAAAgC,eAAAryE,QACA,MAEA,KAAApf,EAAAyQ,IAAA6J,mBACA+4E,IACA5D,EAAAiE,SAAAn2F,EAAA,GACAkyF,EAAAmE,wBAAAr2F,EAAA,GAAAA,EAAA,IACAkyF,EAAA+B,WAAA/B,EAAAgC,eAAAryE,QACA,MAEA,KAAApf,EAAAyQ,IAAA+J,SACA64E,IACA5D,EAAAoE,iBACA,MAEA,KAAA7zF,EAAAyQ,IAAA8J,cAGA,GAFAg5E,EAAA9D,EAAAqE,0BAAAv2F,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAEAiL,GAAA,OAAA+qF,GAAA1D,EAAA1hD,aAAAolD,EAAAj0F,MAAA,GAAAi0F,EAAAj0F,OAAAuwF,EAAAS,kBAAA,CACAb,EAAAmE,wBAAAL,EAAA3+C,MAAA2+C,EAAA1+C,QACAg7C,EAAAj7C,OAAA2+C,EAAA3+C,MAAAi7C,EAAAE,iBACAF,EAAAh7C,QAAA0+C,EAAA1+C,OAAAg7C,EAAAG,kBAEA8C,EADAS,EAAA3+C,MAAAi7C,EAAAE,kBAAAwD,EAAA1+C,OAAAg7C,EAAAG,mBACAH,EAAA5hF,KACA,MAGAolF,IACA5D,EAAAl1E,cAAAhd,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAkyF,EAAAsE,kBAAAx2F,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACA,MAEA,KAAAyC,EAAAyQ,IAAAqJ,eACA21E,EAAAkD,YAAAp1F,EAAA,GACA,MAEA,KAAAyC,EAAAyQ,IAAAsJ,eACA01E,EAAAoD,YAAAt1F,EAAA,GACA,MAEA,KAAAyC,EAAAyQ,IAAAmJ,UACAy5E,IACA5D,EAAA+B,WAAAxxF,EAAA0Q,gBAAA0O,QACAqwE,EAAAgC,eAAAzxF,EAAA0Q,gBAAA0O,QACA,MAEA,KAAApf,EAAAyQ,IAAAiK,eACA,IAAAovE,EAAArmD,MAAA5lB,KAAA,CACA9S,EAAA4jF,gBAAA7E,EAAArmD,OACA,SAMA,IAHA,IACA9Y,EADAiK,EAAAr3B,EAAA,GAGA0yB,EAAA,EAAAyH,EAAA9C,EAAAj4B,OAAgDszB,EAAAyH,EAAQzH,IACxD,oBAAA2E,EAAA3E,GACAiiE,EAAAt9D,EAAA3E,SACiB,MAAAjwB,EAAAkN,OAAA0nB,EAAA3E,IAAA,CACjB2gE,IACA2C,EAAA3+D,EAAA3E,GAAAw/D,EAAAf,SAAA,IACA,IAAAsF,GAAA,EAEAvE,EAAA5xE,KAAAiyE,UACAnlE,EAAA4oE,EACA9D,EAAAwD,oBAAA,EAAAtoE,IACAqpE,EAAAnE,EAAAU,qBAAAgD,EAAA1D,EAAAS,qBAGAT,EAAAh7C,QAAAlqB,KAIAA,GADA4oE,MACA9D,EAAAyB,WACAzB,EAAAwD,oBAAAtoE,EAAA,IACAqpE,EAAAnE,EAAAU,qBAAAgD,EAAA1D,EAAAS,qBAGAT,EAAAj7C,OAAAjqB,IAIAqpE,EACAX,IACmBE,EAAA,GACnBT,EAAAS,EAAA1D,EAAA5hF,KAKA,MAEA,KAAAjO,EAAAyQ,IAAAgK,SACA,IAAAqvE,EAAArmD,MAAA5lB,KAAA,CACA9S,EAAA4jF,gBAAA7E,EAAArmD,OACA,SAGAyuD,EAAA30F,EAAA,IACA,MAEA,KAAAyC,EAAAyQ,IAAAkK,iBACA,IAAAmvE,EAAArmD,MAAA5lB,KAAA,CACA9S,EAAA4jF,gBAAA7E,EAAArmD,OACA,SAGA4vD,IACA5D,EAAAoE,iBACA3B,EAAA30F,EAAA,IACA,MAEA,KAAAyC,EAAAyQ,IAAAmK,2BACA,IAAAkvE,EAAArmD,MAAA5lB,KAAA,CACA9S,EAAA4jF,gBAAA7E,EAAArmD,OACA,SAGA4vD,IACA5D,EAAAoD,YAAAt1F,EAAA,GACAkyF,EAAAkD,YAAAp1F,EAAA,GACAkyF,EAAAoE,iBACA3B,EAAA30F,EAAA,IACA,MAEA,KAAAyC,EAAAyQ,IAAAsL,aACAs3E,IAEAxF,IACAA,EAAAphE,EAAAxxB,IAAA,YAAAgF,EAAAgiB,KAAAuB,OAGA,IAAA9oB,EAAA6C,EAAA,GAAA7C,KAEA,GAAAA,QAAAiR,IAAAglF,EAAAj2F,GACA,MAqFA,YAlFAy/B,EAAA,IAAAh3B,QAAA,SAAAqrF,EAAAC,GACA,IAAA/zF,EACA,UAAAsF,EAAAuP,YAAA,wCAGA,MAAAw4E,EAAA8F,EAAA5yF,IAAAP,GAEA,IAAAqtF,EAEA,YADAyG,IAIA,OAAAvuF,EAAA4hB,UAAAkmE,GACA,UAAA/nF,EAAAuP,YAAA,8BAGA,MAAAoR,EAAAonE,EAAAnkE,KAAA3oB,IAAA,WAEA,OAAAgF,EAAAuhB,QAAAb,GACA,UAAA3gB,EAAAuP,YAAA,sCAGA,YAAAoR,EAAAjmB,KAGA,OAFAi2F,EAAAj2F,IAAA,OACA8zF,IAIA,MAAAyF,EAAAnK,EAAArmD,MAAA6mD,QACA4J,EAAA,IAAApG,EAAAmG,GACA/gB,EAAA6U,EAAAnkE,KAAAiG,SAAA,UAEArsB,MAAA0lB,QAAAgwD,IAAA,IAAAA,EAAAv2E,QACAu3F,EAAAz7E,UAAAy6D,GAGAogB,IACA,MAAAa,GACAC,gBAAA,EAEAxzF,QAAAoE,EAAA6kC,GACAztC,KAAAg4F,gBAAA,EACAhtF,EAAAq+E,QAAAzgF,EAAA6kC,IAGAzhC,kBACA,OAAAhB,EAAAgB,aAGA+8E,YACA,OAAA/9E,EAAA+9E,QAIAp6E,EAAA4jB,gBACA7nB,OAAAihF,EACAvlF,OACAiqB,UAAAs7D,EAAAnkE,KAAA3oB,IAAA,cAAAwxB,EACAq9D,aAAAoK,EACA3rF,sBACAC,mBACApB,KAAA+sF,EACA5E,eACiBprF,KAAA,WACjBgwF,EAAAC,iBACAzD,EAAAj2F,IAAA,GAGA8zF,KACiBC,KACF7pF,MAAA,SAAAC,GACf,KAAAA,aAAA7E,EAAA6I,gBAAA,CAIA,IAAAkC,EAAA2iB,QAAAnjB,aAKA,MAAA1F,GAJA,EAAA7E,EAAAoF,6CAAyEP,WAQzE,KAAA7E,EAAAyQ,IAAA6H,UACA+6E,IACA,IAAAjE,EAAA7xF,EAAA,GACA8xF,EAAA5iE,EAAAxxB,IAAA,aAEA,OAAAgF,EAAAshB,QAAA8tE,MAAA,EAAApvF,EAAAuhB,QAAA4tE,GACA,MAGA,IAAAvD,EAAAwD,EAAAp0F,IAAAm0F,EAAA10F,MAEA,OAAAuF,EAAAshB,QAAAsqE,GACA,MAGA,IAAAwI,EAAAxI,EAAA5wF,IAAA,QAEA,GAAAo5F,EAIA,OAHA5E,EAAAxE,SAAA,KACAwE,EAAAf,SAAA2F,EAAA,QACAl6D,EAAA2wD,EAAA,KAAAuJ,EAAA,KAOA,GAAA1E,EAAA/6D,MAAAj4B,QAAAyK,EAAAgB,YAAA,CACAkmF,GAAA,EACA,OAIAA,EACAn0D,EAAAgtD,IAIAkM,IACAC,IACAzyF,OACO+D,MAAAC,IACP,KAAAA,aAAA7E,EAAA6I,gBAAA,CAIA,GAAAzM,KAAAsxB,QAAAnjB,aAIA,OAHA,EAAAvK,EAAAoF,kDAAsE5C,EAAA9H,mBAA0BmK,OAChGwuF,SACAC,IAIA,MAAAzuF,MAIAyvF,sBAAA,SAAA1wE,EAAA2wE,EAAAC,GACA,MAAAxtF,EAAA5K,KAAA4K,KACA,IAAAytF,EACA,IAAAC,EAAA9wE,EAAA3oB,IAAA,cAAAs5F,EAAAt5F,IAAA,aACA05F,EAAAD,EAAAt4F,KAAAw4F,cAAAF,GAAAvxF,QAAAtC,aAAA8K,GAEA,GAAA6oF,EAAAK,UAAA,CACA,IAAAC,EAAAlxE,EAAA3oB,IAAA,kBAEA,EAAAgF,EAAAshB,QAAAuzE,KACAN,EAAAM,eACAC,UAAA,EAAA/0F,EAAAyO,mBAAAqmF,EAAA75F,IAAA,aACA+5F,UAAA,EAAAh1F,EAAAyO,mBAAAqmF,EAAA75F,IAAA,aACAg6F,WAAAH,EAAA75F,IAAA,gBAIA,IAAAi6F,EAAAtxE,EAAA3oB,IAAA,gBAEA,EAAAgF,EAAA4hB,UAAAqzE,KACAT,EAAAS,EAAApzE,YAIA,IAEAgvB,EAFAqkD,KACAC,EAAA,KAGA,GAAAxxE,EAAAN,IAAA,aAGA,GAFAwtB,EAAAltB,EAAA3oB,IAAA,aAEA,EAAAgF,EAAAshB,QAAAuvB,IAIA,GAHAskD,EAAAtkD,EAAA71C,IAAA,gBACAm6F,GAAA,EAAAn1F,EAAAuhB,QAAA4zE,KAAA16F,KAAA,KAEAo2C,EAAAxtB,IAAA,eAIA,IAHA,IAAA+xE,EAAAvkD,EAAA71C,IAAA,eACA6R,EAAA,EAEAmjB,EAAA,EAAAyH,EAAA29D,EAAA14F,OAAqDszB,EAAAyH,EAAQzH,IAAA,CAC7D,IAAA/uB,EAAA8F,EAAAimB,WAAAooE,EAAAplE,IAEA,MAAAjwB,EAAAkN,OAAAhM,GACA4L,EAAA5L,MACe,QAAAjB,EAAAuhB,QAAAtgB,GAGf,UAAAlB,EAAAuP,qDAAqFrO,KAFrFi0F,EAAAroF,KAAA5L,EAAAxG,WAMS,QAAAuF,EAAAuhB,QAAAsvB,GAGT,UAAA9wC,EAAAuP,YAAA,qCAFA6lF,EAAAtkD,EAAAp2C,KAKA,qBAAA06F,GAAA,sBAAAA,GAAA,oBAAAA,IACAA,EAAA,MAIA,GAAAA,EACAZ,EAAAc,iBAAA,EAAA1P,EAAA2P,aAAAH,GAAAh2E,YACO,CACP,IAAAo2E,KAAAhB,EAAAn/D,MAAAswD,EAAA8P,UAAAC,UACAC,KAAAnB,EAAAn/D,MAAAswD,EAAA8P,UAAAG,aACA9kD,EAAA80C,EAAAiQ,iBAEA,aAAArB,EAAA7zE,MAAAg1E,IACA7kD,EAAA80C,EAAAkQ,iBAGAN,IACA1kD,EAAA80C,EAAAmQ,iBAEAvB,EAAAjT,OACA,UAAAjvD,KAAAkiE,EAAA95F,MACAo2C,EAAA80C,EAAAoQ,kBACa,sBAAA1jE,KAAAkiE,EAAA95F,QACbo2C,EAAA80C,EAAAqQ,wBAKAzB,EAAAc,gBAAAxkD,EAOA,OAJA0jD,EAAAW,cACAX,EAAAY,mBACAZ,EAAA0B,cAAAd,GAAAD,EAAAx4F,OAAA,EACA63F,EAAA5wE,OACA+wE,EAAAxwF,KAAAuwF,IACAF,EAAAE,YACAt4F,KAAA+5F,eAAA3B,KACOrwF,KAAAuwF,IACPF,EAAAE,YAEAD,IACAD,EAAAU,YAAA94F,KAAAg6F,gBAAA3B,EAAAC,IAGAF,KAIA5zF,0BAAA4zF,EAAA6B,GAAA,IACA,EAAAr2F,EAAAyL,SAAA+oF,EAAAK,UAAA,0BACA,MAAAH,KACA5jD,EAAA0jD,EAAAc,gBAAAl2E,QACAg2E,EAAAZ,EAAAY,iBACAD,EAAAX,EAAAW,YAEA,UAAAmB,KAAAnB,EAAA,CACA,MAAAoB,EAAApB,EAAAmB,GAEA,YAAAC,IAIAzlD,EAAAwlD,GAAAC,GAGA,MAAAC,GAAA,EAAAvQ,EAAAwQ,oBAEA,UAAAH,KAAAxlD,EAAA,CACA,IAAAylD,EAAAzlD,EAAAwlD,GAEA,QAAAC,EAES,QAAA5qF,IAAA6qF,EAAAD,GA8DT7B,EAAA4B,GAAA1qF,OAAAC,aAAA2qF,EAAAD,QA9DS,CACT,IAAAhtF,EAAA,EAEA,OAAAgtF,EAAA,IACA,QACA,IAAAA,EAAA55F,SACA4M,EAAA6nB,SAAAmlE,EAAAhlE,UAAA,QAGA,MAEA,QACA,IAAAglE,EAAA55F,SACA4M,EAAA6nB,SAAAmlE,EAAAhlE,UAAA,QAGA,MAEA,QACA,QACA,GAAAglE,EAAA55F,QAAA,GAAA45F,EAAA55F,QAAA,GACA,MAAA+5F,EAAAH,EAAAhlE,UAAA,GAEA,GAAA8kE,EAAA,CACA9sF,EAAA6nB,SAAAslE,EAAA,IACA,MAKA,GAFAntF,GAAAmtF,EAEAroF,OAAAgjB,MAAA9nB,IAAA8E,OAAAC,UAAA8iB,SAAAslE,EAAA,KACA,OAAAt6F,KAAAu6F,0BAAAnC,GAAA,GAIA,MAEA,QACA,MAAAjC,GAAA,EAAA1M,EAAA+Q,oBAAAL,EAAAC,IAEA,IAAAjE,IACAhpF,EAAAgpF,GAKA,GAAAhpF,EAAA,GAAA8E,OAAAC,UAAA/E,GAAA,CACA,GAAA6rF,GAAA7rF,KAAA+sF,EAAA,CACA,MAAAO,GAAA,EAAAjR,EAAA2P,aAAAH,GAEA,GAAAyB,IAAAN,EAAAM,EAAAP,IAAA,CACA5B,EAAA4B,GAAA1qF,OAAAC,aAAA2qF,EAAAD,IACA,UAIA7B,EAAA4B,GAAA1qF,OAAAkrF,cAAAvtF,KASA,WAAAo8E,EAAAoR,aAAArC,IAGA9zF,eAAA4zF,GAGA,GAFAA,EAAAwC,0BAAAxC,EAAAE,WAAAF,EAAAE,UAAA/3F,OAAA,EAEA63F,EAAAwC,wBAKA,OAJAxC,EAAAK,WAAAL,EAAA0B,cACA1B,EAAAyC,kBAAA76F,KAAAu6F,0BAAAnC,IAGArxF,QAAAtC,QAAA2zF,EAAAE,WAGA,IAAAF,EAAAK,UACA,OAAA1xF,QAAAtC,QAAAzE,KAAAu6F,0BAAAnC,IAGA,GAAAA,EAAAK,YAAAL,EAAA0C,KAAAC,eAAA3C,EAAA0C,gBAAAxR,EAAA0R,eAAA,UAAA5C,EAAAM,cAAAC,WAAA,QAAAP,EAAAM,cAAAE,UAAA,SAAAR,EAAAM,cAAAE,UAAA,WAAAR,EAAAM,cAAAE,UAAA,WAAAR,EAAAM,cAAAE,WAAA,CACA,MAAAD,EAAAP,EAAAM,cAAAC,SACAC,EAAAR,EAAAM,cAAAE,SAEAqC,EAAAp3F,EAAAihB,KAAAjmB,IAAA85F,EAAA,IAAAC,EAAA,SAEA,OAAAtP,EAAA4R,YAAA53F,QACAoxC,SAAAumD,EACA7Q,iBAAApqF,KAAAoqF,iBACA+Q,QAAA,OACSpzF,KAAA,SAAAqzF,GACT,MACA9C,KAYA,OAbAF,EAAA0C,KAEAluF,QAAA,SAAAstF,EAAAmB,GACA,GAAAA,EAAA,MACA,UAAAz3F,EAAAuP,YAAA,6BAGA,MAAAmoF,EAAAF,EAAA7tE,OAAA8tE,GAEAC,IACAhD,EAAA4B,GAAA1qF,OAAAC,cAAA6rF,EAAAhpF,WAAA,OAAAgpF,EAAAhpF,WAAA,OAGA,IAAAi3E,EAAAoR,aAAArC,KAIA,OAAAvxF,QAAAtC,QAAA,IAAA8kF,EAAAgS,qBAAAnD,EAAAoD,UAAApD,EAAAqD,YAGAjD,cAAA,SAAAF,GACA,IAAAoD,EAAApD,EAEA,SAAAz0F,EAAAuhB,QAAAs2E,GACApS,EAAA4R,YAAA53F,QACAoxC,SAAAgnD,EACAtR,iBAAApqF,KAAAoqF,iBACA+Q,QAAA,OACSpzF,KAAA,SAAA4zF,GACT,OAAAA,aAAArS,EAAA0R,aACA,IAAAzR,EAAAgS,qBAAA,SAGA,IAAAhS,EAAAoR,aAAAgB,EAAAC,aAEO,EAAA/3F,EAAA4hB,UAAAi2E,GACPpS,EAAA4R,YAAA53F,QACAoxC,SAAAgnD,EACAtR,iBAAApqF,KAAAoqF,iBACA+Q,QAAA,OACSpzF,KAAA,SAAA4zF,GACT,GAAAA,aAAArS,EAAA0R,aACA,WAAAzR,EAAAgS,qBAAA,SAGA,IAAAlV,EAAA,IAAAjlF,MAAAu6F,EAAAp7F,QAmBA,OAlBAo7F,EAAA/uF,QAAA,SAAAivF,EAAAt5D,GAGA,IAFA,IAAA1wB,KAEAo+B,EAAA,EAA2BA,EAAA1N,EAAAhiC,OAAkB0vC,GAAA,GAC7C,IAAAylC,EAAAnzC,EAAAjwB,WAAA29B,IAAA,EAAA1N,EAAAjwB,WAAA29B,EAAA,GAEA,iBAAAylC,GAAA,CAKAzlC,GAAA,EACA,IAAA0lC,EAAApzC,EAAAjwB,WAAA29B,IAAA,EAAA1N,EAAAjwB,WAAA29B,EAAA,GACAp+B,EAAAvQ,OAAA,KAAAo0E,IAAA,UAAAC,GAAA,YANA9jE,EAAAvQ,KAAAo0E,GASA2Q,EAAAwV,GAAArsF,OAAAkrF,cAAAn5F,MAAAiO,OAAAqC,KAEA,IAAA03E,EAAAoR,aAAAtU,IACS59E,IACT,GAAAA,aAAA7E,EAAA6I,eACA,YAGA,GAAAzM,KAAAsxB,QAAAnjB,aAKA,OAJAnO,KAAA2E,QAAAK,KAAA,sBACA2G,UAAA/H,EAAAgI,qBAAA6V,QAEA,EAAA7d,EAAAoF,mDAAyEP,OACzE,KAGA,MAAAA,IAIA1B,QAAAtC,QAAA,OAGAD,gBAAAs3F,EAAAxD,GAGA,IAFA,IAAAr0E,KAEA4P,EAAA,EAAAyH,EAAAwgE,EAAAv7F,OAA6CszB,EAAAyH,EAAQzH,IAAA,CACrD,IAAAkoE,EAAAD,EAAAjoE,MAAA,EAAAioE,EAAAjoE,GACA,MAAA1mB,EAAA0mB,GAAA,GAEA,IAAAkoE,GAAAzD,EAAApxE,IAAA/Z,MAIA8W,EAAA9W,GAAA4uF,GAGA,OAAA93E,GAGA+3E,cAAA,SAAAx0E,EAAA2oE,EAAAiI,GACA,IAIA6D,EACAl+F,EAAAymB,EAAAqP,EAAAyH,EAAArwB,EAAAkC,EAAA+uF,EALAtxF,EAAA5K,KAAA4K,KACAuxF,KACAC,EAAA,EACAC,KAIA,GAAAjE,EAAAK,UAAA,CAIA,GAHA2D,EAAA50E,EAAAN,IAAA,MAAAM,EAAA3oB,IAAA,UACAq9F,EAAA10E,EAAA3oB,IAAA,KAGA,IAAAd,EAAA,EAAAymB,EAAA03E,EAAA37F,OAAyCxC,EAAAymB,EAAQzmB,IAIjD,GAHAkN,EAAAL,EAAAimB,WAAAqrE,EAAAn+F,MACAoP,EAAAvC,EAAAimB,WAAAqrE,EAAAn+F,IAEAqD,MAAA0lB,QAAA3Z,GACA,IAAA0mB,EAAA,EAAAyH,EAAAnuB,EAAA5M,OAA2CszB,EAAAyH,EAAQzH,IACnDsoE,EAAAlxF,KAAAL,EAAAimB,WAAA1jB,EAAA0mB,QAEa,CACb,IAAA2kB,EAAA5tC,EAAAimB,WAAAqrE,IAAAn+F,IAEA,IAAA81B,EAAA5oB,EAA6B4oB,GAAA1mB,EAAW0mB,IACxCsoE,EAAAtoE,GAAA2kB,EAMA,GAAA4/C,EAAA1E,SAAA,CACA,IAAA4I,EAAA90E,EAAAiG,SAAA,mBAIA,GAHAwuE,GAAAK,EAAA,MAAAF,EAAAE,EAAA,IACAA,EAAA90E,EAAA3oB,IAAA,MAGA,IAAAd,EAAA,EAAAymB,EAAA83E,EAAA/7F,OAA6CxC,EAAAymB,EAAQzmB,IAIrD,GAHAkN,EAAAL,EAAAimB,WAAAyrE,EAAAv+F,MACAoP,EAAAvC,EAAAimB,WAAAyrE,EAAAv+F,IAEAqD,MAAA0lB,QAAA3Z,GACA,IAAA0mB,EAAA,EAAAyH,EAAAnuB,EAAA5M,OAA6CszB,EAAAyH,EAAQzH,IACrDwoE,EAAApxF,MAAAL,EAAAimB,WAAA1jB,EAAA0mB,MAAAjpB,EAAAimB,WAAA1jB,EAAA0mB,MAAAjpB,EAAAimB,WAAA1jB,EAAA0mB,SAEe,CACf,IAAAoiE,GAAArrF,EAAAimB,WAAAyrE,IAAAv+F,IAAA6M,EAAAimB,WAAAyrE,IAAAv+F,IAAA6M,EAAAimB,WAAAyrE,IAAAv+F,KAEA,IAAA81B,EAAA5oB,EAA+B4oB,GAAA1mB,EAAW0mB,IAC1CwoE,EAAAxoE,GAAAoiE,QAMO,CACP,IAAAuF,EAAApD,EAAAoD,UAGA,GAFAU,EAAA10E,EAAA3oB,IAAA,UAEA,CAGA,IAFAg1B,EAAA2nE,EAEAz9F,EAAA,EAAAymB,EAAA03E,EAAA37F,OAAyCxC,EAAAymB,EAAQzmB,IACjDo+F,EAAAtoE,KAAAjpB,EAAAimB,WAAAqrE,EAAAn+F,IAGAq+F,EAAAG,WAAApM,EAAAtxF,IAAA,wBACS,CACT,IAAA29F,EAAAh1E,EAAA3oB,IAAA,YAEA,MAAAgF,EAAAuhB,QAAAo3E,GAAA,CACA,IAAAC,EAAAz8F,KAAA08F,mBAAAF,EAAAl+F,MACA69F,EAAAn8F,KAAA28F,qBAAAF,EAAAP,OAAA9D,GACAgE,EAAAK,EAAAL,eAKA,IAAA5G,GAAA,EACAoH,EAAAR,EAEA,QAAArG,KAAAoG,EAAA,CACA,IAAAnG,EAAAmG,EAAApG,GAEA,GAAAC,EAIA,GAAA4G,GAKA,GAAAA,IAAA5G,EAAA,CACAR,GAAA,EACA,YANAoH,EAAA5G,EAUAR,IACA4C,EAAAn/D,OAAAswD,EAAA8P,UAAAwD,YAGAzE,EAAAgE,eACAhE,EAAA8D,OAAAC,EACA/D,EAAA6D,kBACA7D,EAAAkE,SAAAD,GAEAS,YAAA,SAAAN,GACA,IAAAO,EAAAP,EAAAr9D,MAAA,QACA,OAAA49D,KAAA,EAAArT,EAAAsT,mBAAA,IAAAD,EAAAE,OAAA,YAEAP,mBAAA,SAAAp+F,GACA,IAAA89F,EAAA,EACAF,KACAgB,GAAA,EAEAC,GADA,EAAAzT,EAAA0T,iBACA9+F,MACA++F,GAAA,EAAAvT,EAAAwT,cAEAH,KAAAE,IAEAF,EADAn9F,KAAA88F,YAAAx+F,GACA,cAEA,aAIA,IAAAi/F,EAAAF,EAAAF,GASA,OAPA,EAAAv5F,EAAAkN,OAAAysF,IACAnB,EAAAmB,EACAL,GAAA,GAEAhB,EAAAqB,KAIAnB,eACAc,YACAhB,WAGAS,qBAAA,SAAAa,EAAApF,GAKA,IAJA,IAAA8D,EAAAz9F,OAAA6E,OAAA,MACAy1F,EAAAX,EAAAW,YACArkD,EAAA0jD,EAAAc,gBAEA2C,EAAA,EAA4BA,EAAA,IAAgBA,IAC5CA,KAAA9C,GAAAyE,EAAAzE,EAAA8C,IACAK,EAAAL,GAAA2B,EAAAzE,EAAA8C,IAIAA,KAAAnnD,GAAA8oD,EAAA9oD,EAAAmnD,MACAK,EAAAL,GAAA2B,EAAA9oD,EAAAmnD,KAKA,OAAAK,GAEAhM,gBAAA,SAAA1oE,GACA,IAAA2wE,EAAA3wE,EACAjD,EAAAiD,EAAA3oB,IAAA,WAEA,OAAAgF,EAAAuhB,QAAAb,GACA,UAAA3gB,EAAAuP,YAAA,wBAGA,IACAsqF,EADAhF,GAAA,EAGA,aAAAl0E,EAAAjmB,KAAA,CACA,IAAAo/F,EAAAl2E,EAAA3oB,IAAA,mBAEA,IAAA6+F,EACA,UAAA95F,EAAAuP,YAAA,sCAMA,GAFAoR,GADAiD,EAAApmB,MAAA0lB,QAAA42E,GAAA19F,KAAA4K,KAAAimB,WAAA6sE,EAAA,IAAAA,GACA7+F,IAAA,aAEA,EAAAgF,EAAAuhB,QAAAb,GACA,UAAA3gB,EAAAuP,YAAA,wBAGAslF,GAAA,EAGA,IAAAtI,EAAA3oE,EAAA3oB,IAAA,kBAEA,GAAAsxF,EAAA,CACA,IAAAv5D,EAAA,IAAAmzD,EAAA4T,eACAjpD,EAAAyjD,EAAApxE,OAAA,YAEA,MAAAljB,EAAAuhB,QAAAsvB,GACA9d,EAAAgnE,OAAAlpD,EAAAp2C,WACS,MAAAuF,EAAAwhB,OAAAqvB,GACT9d,EAAAgnE,OAAAlpD,EAAA9mC,iBACS,MAAA/J,EAAAshB,QAAAuvB,GAGT,IAFA,IAAAztB,EAAAytB,EAAA1tB,UAEAjpB,EAAA,EAAAymB,EAAAyC,EAAA1mB,OAA2CxC,EAAAymB,EAAQzmB,IAAA,CACnD,IAAAujC,EAAAoT,EAAA3tB,OAAAE,EAAAlpB,IAEA,MAAA8F,EAAAuhB,QAAAkc,GACA1K,EAAAgnE,OAAAt8D,EAAAhjC,WACa,MAAAuF,EAAAwhB,OAAAic,GACb1K,EAAAgnE,OAAAt8D,EAAA1zB,iBACa,GAAAxM,MAAA0lB,QAAAwa,GAAA,CAIb,IAHA,IAAAu8D,EAAAv8D,EAAA/gC,OACAu9F,EAAA,IAAA18F,MAAAy8F,GAEAhqE,EAAA,EAA6BA,EAAAgqE,EAAgBhqE,IAAA,CAC7C,IAAAkqE,EAAAz8D,EAAAzN,IAEA,EAAAhwB,EAAAuhB,QAAA24E,GACAD,EAAAjqE,GAAAkqE,EAAAz/F,OACiB,EAAAsF,EAAAkN,OAAAitF,KAAA,EAAAl6F,EAAAwhB,OAAA04E,MACjBD,EAAAjqE,GAAAkqE,EAAAnwF,YAIAgpB,EAAAgnE,OAAAE,EAAAj4F,SAKA,MAAA21F,EAAAh0E,EAAA3oB,IAAA,gBACA48F,EAAAj0E,EAAA3oB,IAAA,cAAA45F,EAAA,WACA7hE,EAAAgnE,UAAuBpC,KAAaC,KACpC,IAAAnD,EAAA9wE,EAAA3oB,IAAA,cAAAs5F,EAAAt5F,IAAA,aAEA,MAAAgF,EAAA4hB,UAAA6yE,GAAA,CACA,IAAA5tF,EAAA4tF,EAAAzmF,KAAAymF,EACAmF,EAAA/yF,EAAA2X,OAAA,IAAAtd,WAAA2F,EAAA2X,cAAA,EAAA3X,EAAAyiC,cAAA,IAAApoC,WAAA2F,EAAAC,MAAA0X,OAAA3X,EAAAO,MAAAP,EAAAge,IAAAhe,EAAAO,OACA2rB,EAAAgnE,OAAAH,QACS,EAAA55F,EAAAuhB,QAAAkzE,IACT1hE,EAAAgnE,OAAAtF,EAAAh6F,MAGA,IAAA49F,EAAA10E,EAAA3oB,IAAA,WAAAs5F,EAAAt5F,IAAA,UAEAq9F,IACAuB,EAAA,IAAA14F,WAAA,IAAAqd,YAAA85E,GAAA75E,QACAuU,EAAAgnE,OAAAH,IAIA,OACAtN,aACA3oE,OACA2wE,WACAM,YACAl0E,OAAAjmB,KACAs4B,SAAAonE,YAAA,KAGArN,cAAA,SAAAV,GACA,IAMAmI,EANAD,EAAAlI,EAAAkI,SACA3wE,EAAAyoE,EAAAzoE,KACAixE,EAAAxI,EAAAwI,UACAtI,EAAAF,EAAAE,WACA5rE,EAAA0rE,EAAA1rE,KACA05E,EAAAxF,EAAA,UAEA,MAAA+C,EAAAh0E,EAAA3oB,IAAA,gBACA48F,EAAAj0E,EAAA3oB,IAAA,aAAAo/F,EAEA,IAAA9N,EAAA,CACA,aAAA5rE,EAIS,CACT,IAAAi4E,EAAAh1E,EAAA3oB,IAAA,YAEA,OAAAgF,EAAAuhB,QAAAo3E,GACA,UAAA54F,EAAAuP,YAAA,8BAGAqpF,IAAAl+F,KAAAwT,QAAA,aACA,IAAA2qF,EAAAz8F,KAAA08F,mBAAAF,GACAO,EAAAP,EAAAr9D,MAAA,QACAlG,GAAAj5B,KAAA88F,YAAAC,GAAAxT,EAAA8P,UAAA6E,MAAA,IAAAzB,EAAAS,UAAA3T,EAAA8P,UAAAwD,WAAA,OAAAnT,EAAAyU,mBAAApB,GAAAxT,EAAA8P,UAAAC,SAAA/P,EAAA8P,UAAAG,aACApB,GACA7zE,OACAjmB,KAAAk+F,EACAN,OAAAO,EAAAP,OACAE,aAAAK,EAAAL,aACAnjE,QACAuiE,YACAC,YAEA,MAAAS,EAAA10E,EAAA3oB,IAAA,UACA,OAAAmB,KAAAk4F,sBAAA1wE,IAAA4wE,GAAArwF,KAAAqwF,IACA,GAAA8D,EAAA,CACA,MAAAqB,KACA,IAAA1pE,EAAA2nE,EAEA,QAAAz9F,EAAA,EAAAymB,EAAA03E,EAAA37F,OAAiDxC,EAAAymB,EAAQzmB,IACzDw/F,EAAA1pE,KAAA7zB,KAAA4K,KAAAimB,WAAAqrE,EAAAn+F,IAGAq6F,EAAA8D,OAAAqB,OAEAnF,EAAA8D,OAAAl8F,KAAA28F,qBAAAF,EAAAP,OAAA9D,GAGA,WAAA7O,EAAAkH,KAAA+L,EAAA,KAAApE,MAtCAjI,EAAA,IAAAtsF,EAAAgiB,KAAA,OACAzW,IAAA,WAAAvL,EAAAihB,KAAAjmB,IAAA0lB,IACA4rE,EAAA/gF,IAAA,WAAAoY,EAAAiG,SAAA,wBAyCA,IAAAohE,EAAAsB,EAAAtxF,IAAA,YACAu/F,EAAA52E,EAAA3oB,IAAA,YAUA,IARA,EAAA+E,EAAAmN,UAAA89E,KACAA,EAAAhrF,EAAAihB,KAAAjmB,IAAAgwF,KAGA,EAAAjrF,EAAAmN,UAAAqtF,KACAA,EAAAv6F,EAAAihB,KAAAjmB,IAAAu/F,IAGA,UAAA75E,EAAA,CACA,IAAA85E,EAAAxP,KAAAvwF,KACAggG,EAAAF,KAAA9/F,KAEA+/F,IAAAC,KACA,EAAA16F,EAAA6H,2CAAgE4yF,wDAAqEC,OAErID,GAAAC,KAAAv/D,WAAAs/D,KACAxP,EAAAuP,IAOA,GAFAvP,KAAAuP,IAEA,EAAAv6F,EAAAuhB,QAAAypE,GACA,UAAAjrF,EAAAuP,YAAA,qBAGA,IAwCAorF,EAxCAC,EAAArO,EAAAtxF,IAAA,oCAEA,GAAA2/F,GACAA,EAAAh3E,KAAA,CACA,IAAA0Q,EAAAsmE,EAAAh3E,KAAA3oB,IAAA,WAEAq5B,IACAA,IAAA55B,MAGA,IAAAmgG,EAAAD,EAAAh3E,KAAA3oB,IAAA,WACA6/F,EAAAF,EAAAh3E,KAAA3oB,IAAA,WACA8/F,EAAAH,EAAAh3E,KAAA3oB,IAAA,WA8BA,GA1BAu5F,GACA7zE,OACAjmB,KAAAuwF,EAAAvwF,KACA45B,UACAitD,KAAAqZ,EACAC,UACAC,UACAC,UACAlhE,WAAA06D,EAAA16D,WACAg7D,YACAmG,UAAAnG,EACAoG,YAAA,EACA7J,WAAAxtE,EAAAiG,SAAA,eAAA7pB,EAAA2Q,qBACAinF,aAAA,EACAC,YAAAwC,EACA/c,KAAAiP,EAAA1iE,SAAA,YACAknE,OAAAxE,EAAAtxF,IAAA,UACA+1F,QAAAzE,EAAAtxF,IAAA,WACAigG,QAAA3O,EAAAtxF,IAAA,WACAkgG,UAAA5O,EAAAtxF,IAAA,aACAo6B,MAAAk3D,EAAAtxF,IAAA,SACAmgG,YAAA7O,EAAAtxF,IAAA,eACAkwF,aAAA,GAIA0J,EAAA,CACA,IAAAwG,EAAA9G,EAAAt5F,IAAA,aAEA,EAAAgF,EAAAuhB,QAAA65E,KACA7G,EAAA6G,cAAA3gG,MAGAigG,EAAAjV,EAAA4R,YAAA53F,QACAoxC,SAAAuqD,EACA7U,iBAAApqF,KAAAoqF,iBACA+Q,QAAA,OACSpzF,KAAA,SAAA+yF,GACT1C,EAAA0C,OACA1C,EAAA1E,SAAA0E,EAAA0C,KAAApH,gBAGA6K,EAAAx3F,QAAAtC,aAAA8K,GAGA,OAAAgvF,EAAAx2F,KAAA,IACA/H,KAAAk4F,sBAAA1wE,EAAA2wE,EAAAC,IACOrwF,KAAAqwF,IACPp4F,KAAAg8F,cAAAx0E,EAAA2oE,EAAAiI,GAEA,UAAA7zE,IACA6zE,EAAArJ,aAAA,GAGA,IAAAxF,EAAAkH,KAAA5B,EAAAvwF,KAAAkgG,EAAApG,OAKA/mE,EAAAm+D,eAAA,SAAA/tE,EAAA2tE,EAAAzqF,GACA,SAAAuuF,EAAAgM,GACAz9E,EAAA09E,SAAAC,aAAAF,IAIAv6F,EAAAK,KAAA,gBAAoCyc,EAAAgc,mBAAwByhE,IAAS,WAAAz9E,EAAA09E,SAAAE,UAAAH,KAGrE,UAAAnJ,KAAA3G,EAAA,CACA8D,EAAA6C,EAAAmJ,UACA,MAAAI,EAAAvJ,EAAAuJ,OAEAA,KAAAJ,UACAhM,EAAAoM,EAAAJ,YAKA7tE,EAAA0+D,oBAAA,WACA,GAAA/vF,KAAAu/F,kBACA,OAAAv/F,KAAAu/F,kBAGA,MAAA/3E,EAAA,IAAA3jB,EAAAgiB,KAKA,OAJA2B,EAAApY,IAAA,WAAAvL,EAAAihB,KAAAjmB,IAAA,uBACA2oB,EAAApY,IAAA,OAAAvL,EAAAihB,KAAAjmB,IAAA,iBACA2oB,EAAApY,IAAA,UAAAvL,EAAAihB,KAAAjmB,IAAA,iBACA2oB,EAAApY,IAAA,WAAAvL,EAAAihB,KAAAjmB,IAAA,oBACAmB,KAAAu/F,kBAAA/3E,GAGA6J,EA1tFA,GA6tFAxzB,EAAAwzB,mBAEA,IAAA49D,EAAA,WACA,SAAAA,EAAAxxD,EAAAhc,EAAA+F,GACAxnB,KAAAy9B,aACAz9B,KAAAyhB,OACAzhB,KAAAwnB,OACAxnB,KAAAw/F,YAAA,KACAx/F,KAAAy/F,MAAA,EAwEA,OArEAxQ,EAAA/vF,WACAsF,KAAAG,GACA3E,KAAAy/F,OAIAz/F,KAAAy/F,MAAA,EACA96F,EAAAK,KAAA,aAAAhF,KAAAy9B,WAAA,OAAAz9B,KAAAyhB,KAAAi+E,iBAGAl7F,SAAAG,GACA,IAAA3E,KAAAyhB,KAAA3c,KACA,OAGA9E,KAAAyhB,KAAAxT,iBAAA,EACA,MAAAmhF,EAAApvF,KAAAyhB,KAAAk+E,iBACAtuE,EAAAm+D,eAAAxvF,KAAAyhB,KAAA2tE,EAAAzqF,IAGAH,cAAAu8E,EAAA1wD,EAAAuvE,EAAAx5F,GACA,IAAApG,KAAAyhB,KAAAstE,YACA,UAAArvF,MAAA,yBAGA,GAAAM,KAAAw/F,YACA,OAAAx/F,KAAAw/F,YAGA,IAAAK,EAAAphG,OAAA6E,OAAAy9E,EAAAzvD,SACAuuE,EAAA1xF,cAAA,EACA0xF,EAAA3xF,0BAAAtK,EAAA6P,oBAAAgB,KACA,IAAAqrF,EAAA/e,EAAAmN,MAAA2R,GACAC,EAAA3V,kBAAA,EAQA,IAPA,IAAA3sD,EAAAx9B,KAAAyhB,KACAs+E,EAAAh5F,QAAAtC,UACAu7F,EAAAhgG,KAAAwnB,KAAA3oB,IAAA,aACAohG,EAAAjgG,KAAAwnB,KAAA3oB,IAAA,cAAAwxB,EACA6vE,EAAAF,EAAAh5E,UACAm5E,EAAA1hG,OAAA6E,OAAA,MAEAvF,EAAA,EAAAe,EAAAohG,EAAA3/F,OAA8CxC,EAAAe,IAAOf,EAAA,CACrD,MAAAwF,EAAA28F,EAAAniG,GACAgiG,IAAAh4F,KAAA,WACA,IAAAq4F,EAAAJ,EAAAnhG,IAAA0E,GACAsuB,EAAA,IAAA3C,EAAAwC,aACA,OAAAouE,EAAAx0F,iBACAZ,OAAA01F,EACAh6F,OACAiqB,UAAA4vE,EACApuE,iBACW9pB,KAAA,WACXo4F,EAAA58F,GAAAsuB,EAAA06B,QACAqzC,EAAAnR,gBAAA58D,EAAA82D,gBACWngF,MAAA,SAAAC,IACX,EAAA7E,EAAAoF,8BAAoDzF,wBACpD,IAAAsuB,EAAA,IAAA3C,EAAAwC,aACAyuE,EAAA58F,GAAAsuB,EAAA06B,YAQA,OAHAvsD,KAAAw/F,YAAAO,EAAAh4F,KAAA,WACAy1B,EAAA2iE,yBAEAngG,KAAAw/F,cAIAvQ,EA9EA,GAiFAyC,EAAA,WACA,SAAAA,EAAA9F,GACA5rF,KAAAqnC,MAAAukD,EACA5rF,KAAAqgG,cAuBA,OApBA3O,EAAAxyF,WACAsF,OACA,IAAA87F,EAAAtgG,KAAAqnC,MACArnC,KAAAqgG,WAAA/+F,KAAAtB,KAAAqnC,OACArnC,KAAAqnC,MAAAi5D,EAAApS,SAGA1pF,UACA,IAAA+yC,EAAAv3C,KAAAqgG,WAAApiE,MAEAsZ,IACAv3C,KAAAqnC,MAAAkQ,IAIA/yC,UAAArD,GACAnB,KAAAqnC,MAAA8tD,IAAAvxF,EAAAwP,KAAAiJ,UAAArc,KAAAqnC,MAAA8tD,IAAAh0F,KAIAuwF,EA1BA,GA6BA0B,EAAA,WACA,SAAAA,IACApzF,KAAAm1F,IAAA,IAAA5wB,aAAA3gE,EAAA0Q,iBACAtU,KAAA6uF,SAAA,KACA7uF,KAAAsyF,SAAA,EACAtyF,KAAAyhB,KAAA,KACAzhB,KAAAg1F,WAAApxF,EAAA2Q,qBACAvU,KAAAo1F,WAAAxxF,EAAA0Q,gBAAA0O,QACAhjB,KAAAq1F,eAAAzxF,EAAA0Q,gBAAA0O,QACAhjB,KAAAu2F,YAAA,EACAv2F,KAAAy2F,YAAA,EACAz2F,KAAAs3F,QAAA,EACAt3F,KAAA80F,WAAA,EACA90F,KAAA+0F,SAAA,EAsFA,OAnFA3B,EAAAl0F,WACAif,cAAA,SAAAiF,EAAAV,EAAAtkB,EAAAC,EAAA0B,EAAA2sE,GACA,IAAAvuE,EAAA6B,KAAAo1F,WACAj3F,EAAA,GAAAilB,EACAjlB,EAAA,GAAAukB,EACAvkB,EAAA,GAAAC,EACAD,EAAA,GAAAE,EACAF,EAAA,GAAA4B,EACA5B,EAAA,GAAAuuE,GAEAirB,kBAAA,SAAAv0E,EAAAV,EAAAtkB,EAAAC,EAAA0B,EAAA2sE,GACA,IAAAvuE,EAAA6B,KAAAq1F,eACAl3F,EAAA,GAAAilB,EACAjlB,EAAA,GAAAukB,EACAvkB,EAAA,GAAAC,EACAD,EAAA,GAAAE,EACAF,EAAA,GAAA4B,EACA5B,EAAA,GAAAuuE,GAEAmqB,oBAAA,SAAAxoE,EAAA2pB,GACA,IAAA75C,EAAA6B,KAAAo1F,WACAj3F,EAAA,GAAAA,EAAA,GAAAkwB,EAAAlwB,EAAA,GAAA65C,EAAA75C,EAAA,GACAA,EAAA,GAAAA,EAAA,GAAAkwB,EAAAlwB,EAAA,GAAA65C,EAAA75C,EAAA,IAEAq5F,wBAAA,SAAAnpE,EAAA2pB,GACA,IAAA75C,EAAA6B,KAAAq1F,eACAl3F,EAAA,GAAAA,EAAA,GAAAkwB,EAAAlwB,EAAA,GAAA65C,EAAA75C,EAAA,GACAA,EAAA,GAAAA,EAAA,GAAAkwB,EAAAlwB,EAAA,GAAA65C,EAAA75C,EAAA,IAEAu5F,0BAAA,SAAAt0E,EAAAV,EAAAtkB,EAAAC,EAAA0B,EAAA2sE,GACA,IAAAjrD,EAAAzhB,KAAAyhB,KAEA,IAAAA,EACA,YAGA,IAAAtjB,EAAA6B,KAAAq1F,eAEA,GAAAjyE,IAAAjlB,EAAA,IAAAukB,IAAAvkB,EAAA,IAAAC,IAAAD,EAAA,IAAAE,IAAAF,EAAA,GACA,YAGA,IAAAoiG,EAAAxgG,EAAA5B,EAAA,GACAqiG,EAAA9zB,EAAAvuE,EAAA,GAEA,GAAAsjB,EAAAiyE,UAAA,IAAA6M,IAAA9+E,EAAAiyE,UAAA,IAAA8M,EACA,YAGA,IAAA7J,EACAC,EACA6J,EAAAr9E,EAAA/kB,EAAAqkB,EAAAtkB,EAUA,OARAqjB,EAAAiyE,UACAiD,GAAA6J,EAAApiG,EAAAqiG,EACA7J,EAAA4J,EAAAp9E,EAAAq9E,IAEA9J,EAAA4J,EAAAliG,EAAAoiG,EACA7J,GAAA2J,EAAA79E,EAAA+9E,IAIAjoD,MAAAm+C,EACAl+C,OAAAm+C,EACA1zF,MAAAue,EAAAiyE,SAAAkD,EAAAD,IAGA+J,iBAAA,SAAAvL,GACA,IAAAN,GAAA70F,KAAAsyF,SAAAtyF,KAAA80F,WAAA,IAAA90F,KAAAsyF,SAAA,EAAAtyF,KAAA+0F,UACA,OAAAnxF,EAAAwP,KAAAiJ,UAAA84E,EAAAvxF,EAAAwP,KAAAiJ,UAAArc,KAAAo1F,WAAAP,KAEA4C,eAAA,WACAz3F,KAAAw3F,wBAAA,GAAAx3F,KAAAs3F,SACAt3F,KAAAo1F,WAAAp1F,KAAAq1F,eAAAryE,SAEAkrE,MAAA,WACA,IAAAA,EAAAzvF,OAAA6E,OAAAtD,MAIA,OAHAkuF,EAAAkH,WAAAp1F,KAAAo1F,WAAApyE,QACAkrE,EAAAmH,eAAAr1F,KAAAq1F,eAAAryE,QACAkrE,EAAA8G,WAAAh1F,KAAAg1F,WAAAhyE,QACAkrE,IAGAkF,EAnGA,GAsGA5B,EAAA,WACA,SAAAA,IACAxxF,KAAAm1F,IAAA,IAAA5wB,aAAA3gE,EAAA0Q,iBACAtU,KAAAyhB,KAAA,KACAzhB,KAAAsvF,kBAAA1rF,EAAAyP,kBAAA+B,KACApV,KAAAuvF,eAAA93D,EAAA4B,WAAAC,WAAAq9C,KACA32E,KAAA4yF,iBAAAn7D,EAAA4B,WAAAC,WAAAq9C,KAQA,OALA6a,EAAAtyF,WACAgvF,MAAA,WACA,OAAAzvF,OAAA6E,OAAAtD,QAGAwxF,EAdA,GAiBAI,EAAA,WACA,IAAA+O,GAAA,EAAAz8F,EAAAmpB,uBAAA,SAAAlqB,GACAA,EAAA,GACAoH,GAAA3G,EAAAyQ,IAAAsH,aACAilF,QAAA,EACAC,cAAA,GAEA19F,EAAA,GACAoH,GAAA3G,EAAAyQ,IAAAuH,WACAglF,QAAA,EACAC,cAAA,GAEA19F,EAAA,GACAoH,GAAA3G,EAAAyQ,IAAAwH,YACA+kF,QAAA,EACAC,cAAA,GAEA19F,EAAA,GACAoH,GAAA3G,EAAAyQ,IAAAyH,cACA8kF,QAAA,EACAC,cAAA,GAEA19F,EAAA,GACAoH,GAAA3G,EAAAyQ,IAAA0H,QACA6kF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAA2H,mBACA4kF,QAAA,EACAC,cAAA,GAEA19F,EAAA,GACAoH,GAAA3G,EAAAyQ,IAAA4H,YACA2kF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAA6H,UACA0kF,QAAA,EACAC,cAAA,GAEA19F,EAAA,GACAoH,GAAA3G,EAAAyQ,IAAA8H,KACAykF,QAAA,EACAC,cAAA,GAEA19F,EAAA,GACAoH,GAAA3G,EAAAyQ,IAAA+H,QACAwkF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAAgI,UACAukF,QAAA,EACAC,cAAA,GAEA19F,EAAA,GACAoH,GAAA3G,EAAAyQ,IAAAiI,OACAskF,QAAA,EACAC,cAAA,GAEA19F,EAAA,GACAoH,GAAA3G,EAAAyQ,IAAAkI,OACAqkF,QAAA,EACAC,cAAA,GAEA19F,EAAA,GACAoH,GAAA3G,EAAAyQ,IAAAmI,QACAokF,QAAA,EACAC,cAAA,GAEA19F,EAAA,GACAoH,GAAA3G,EAAAyQ,IAAAoI,SACAmkF,QAAA,EACAC,cAAA,GAEA19F,EAAA,GACAoH,GAAA3G,EAAAyQ,IAAAqI,SACAkkF,QAAA,EACAC,cAAA,GAEA19F,EAAA,GACAoH,GAAA3G,EAAAyQ,IAAAsI,UACAikF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAAuI,UACAgkF,QAAA,EACAC,cAAA,GAEA19F,EAAA,GACAoH,GAAA3G,EAAAyQ,IAAAwI,OACA+jF,QAAA,EACAC,cAAA,GAEA19F,EAAA,GACAoH,GAAA3G,EAAAyQ,IAAAyI,YACA8jF,QAAA,EACAC,cAAA,GAEA19F,EAAA,GACAoH,GAAA3G,EAAAyQ,IAAA0I,KACA6jF,QAAA,EACAC,cAAA,GAEA19F,EAAA,GACAoH,GAAA3G,EAAAyQ,IAAA0I,KACA6jF,QAAA,EACAC,cAAA,GAEA19F,EAAA,OACAoH,GAAA3G,EAAAyQ,IAAA2I,OACA4jF,QAAA,EACAC,cAAA,GAEA19F,EAAA,GACAoH,GAAA3G,EAAAyQ,IAAA4I,WACA2jF,QAAA,EACAC,cAAA,GAEA19F,EAAA,OACAoH,GAAA3G,EAAAyQ,IAAA6I,aACA0jF,QAAA,EACAC,cAAA,GAEA19F,EAAA,GACAoH,GAAA3G,EAAAyQ,IAAA8I,gBACAyjF,QAAA,EACAC,cAAA,GAEA19F,EAAA,OACAoH,GAAA3G,EAAAyQ,IAAA+I,kBACAwjF,QAAA,EACAC,cAAA,GAEA19F,EAAA,GACAoH,GAAA3G,EAAAyQ,IAAAgJ,QACAujF,QAAA,EACAC,cAAA,GAEA19F,EAAA,GACAoH,GAAA3G,EAAAyQ,IAAAiJ,KACAsjF,QAAA,EACAC,cAAA,GAEA19F,EAAA,OACAoH,GAAA3G,EAAAyQ,IAAAkJ,OACAqjF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAAmJ,UACAojF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAAoJ,QACAmjF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAAqJ,eACAkjF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAAsJ,eACAijF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAAuJ,UACAgjF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAAwJ,WACA+iF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAAyJ,QACA8iF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAA0J,qBACA6iF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAA2J,YACA4iF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAA4J,SACA2iF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAA6J,mBACA0iF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAA8J,cACAyiF,QAAA,EACAC,cAAA,GAEA19F,EAAA,OACAoH,GAAA3G,EAAAyQ,IAAA+J,SACAwiF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAAgK,SACAuiF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAAiK,eACAsiF,QAAA,EACAC,cAAA,GAEA19F,EAAA,MACAoH,GAAA3G,EAAAyQ,IAAAkK,iBACAqiF,QAAA,EACAC,cAAA,GAEA19F,EAAA,MACAoH,GAAA3G,EAAAyQ,IAAAmK,2BACAoiF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAAoK,aACAmiF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAAqK,sBACAkiF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAAsK,oBACAiiF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAAuK,kBACAgiF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAAwK,eACA+hF,QAAA,EACAC,cAAA,GAEA19F,EAAA,KACAoH,GAAA3G,EAAAyQ,IAAAyK,gBACA8hF,QAAA,GACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAA0K,aACA6hF,QAAA,EACAC,cAAA,GAEA19F,EAAA,KACAoH,GAAA3G,EAAAyQ,IAAA2K,cACA4hF,QAAA,GACAC,cAAA,GAEA19F,EAAA,GACAoH,GAAA3G,EAAAyQ,IAAA4K,cACA2hF,QAAA,EACAC,cAAA,GAEA19F,EAAA,GACAoH,GAAA3G,EAAAyQ,IAAA6K,YACA0hF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAA8K,kBACAyhF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAA+K,gBACAwhF,QAAA,EACAC,cAAA,GAEA19F,EAAA,GACAoH,GAAA3G,EAAAyQ,IAAAgL,mBACAuhF,QAAA,EACAC,cAAA,GAEA19F,EAAA,GACAoH,GAAA3G,EAAAyQ,IAAAiL,iBACAshF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAAkL,YACAqhF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAAmL,iBACAohF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAAoL,eACAmhF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAAqL,eACAkhF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAAsL,aACAihF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAAuL,UACAghF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAAwL,eACA+gF,QAAA,EACAC,cAAA,GAEA19F,EAAA,KACAoH,GAAA3G,EAAAyQ,IAAAyL,mBACA8gF,QAAA,EACAC,cAAA,GAEA19F,EAAA,KACAoH,GAAA3G,EAAAyQ,IAAA0L,wBACA6gF,QAAA,EACAC,cAAA,GAEA19F,EAAA,KACAoH,GAAA3G,EAAAyQ,IAAA2L,iBACA4gF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAA4L,YACA2gF,QAAA,EACAC,cAAA,GAEA19F,EAAA,IACAoH,GAAA3G,EAAAyQ,IAAA6L,UACA0gF,QAAA,EACAC,cAAA,GAEA19F,EAAA,QACAA,EAAA,QACAA,EAAA,UACAA,EAAA,QACAA,EAAA,SACAA,EAAA,UACAA,EAAA,WACAA,EAAA,QACAA,EAAA,SACAA,EAAA,YAIA,SAAAyuF,EAAAlnF,EAAAE,EAAA8iF,GACA1tF,KAAA8gG,MAAAH,IACA3gG,KAAAygC,OAAA,IAAAxR,EAAA0U,QACA9C,MAAA,IAAA5R,EAAA2U,MAAAl5B,EAAA1K,KAAA8gG,OACAl2F,SAEA5K,KAAA0tF,eACA1tF,KAAA+gG,oBACA/gG,KAAAghG,mBAAA,EAwGA,OArGApP,EAAA1yF,WACA8yF,uBACA,OAAAhyF,KAAA0tF,aAAA2S,WAAA9/F,QAGA+I,KAAA,SAAA6oF,GAGA,IAFA,IAAAhxF,EAAAgxF,EAAAhxF,OAEA,CACA,IAAA0P,EAAA7Q,KAAAygC,OAAAU,SAEA,GAAAtwB,aAAAhN,EAAA+gB,IAAA,CACA,IAAAM,EAAArU,EAAAqU,IACA+7E,EAAAjhG,KAAA8gG,MAAA57E,GAEA,IAAA+7E,EAAA,EACA,EAAAr9F,EAAAoF,0BAAgDkc,OAChD,SAGA,IAAAmjE,EAAA4Y,EAAA12F,GACAq2F,EAAAK,EAAAL,QACAM,EAAA,OAAA//F,IAAAZ,OAAA,EAEA,GAAA0gG,EAAAJ,aAkCWK,EAAAN,IACX,EAAAh9F,EAAA6H,iBAAuCyZ,mBAAqB07E,4BAAoCM,eAnChG,CACA,GAAAA,IAAAN,EAAA,CAGA,IAFA,IAAAG,EAAA/gG,KAAA+gG,iBAEAG,EAAAN,GACAG,EAAAz/F,KAAAH,EAAAy3B,SACAsoE,IAGA,KAAAA,EAAAN,GAAA,IAAAG,EAAAxgG,QACA,OAAAY,IACAA,MAGAA,EAAA2hF,QAAAie,EAAA9iE,OACAijE,IAIA,GAAAA,EAAAN,EAAA,CACA,MAAA9Q,aAA4C5qE,eAAiB07E,2BAAmCM,UAEhG,GAAA7Y,GAAAzkF,EAAAyQ,IAAAiI,QAAA+rE,GAAAzkF,EAAAyQ,IAAAgJ,WAAArd,KAAAghG,mBA3DA,GA4DA,UAAAp9F,EAAAuP,uBAAuD28E,MAGvD,EAAAlsF,EAAAoF,kBAA0C8mF,KAE1C,OAAA3uF,IACAA,EAAAZ,OAAA,GAGA,UASA,OAHAP,KAAAmhG,kBAAA9Y,EAAAlnF,GACAgxF,EAAA9J,KACA8J,EAAAhxF,QACA,EAGA,GAAA0P,IAAAhN,EAAAmhB,IACA,SAGA,UAAAnU,IACA,OAAA1P,IACAA,MAGAA,EAAAG,KAAAuP,GAEA1P,EAAAZ,OAAA,IACA,UAAAqD,EAAAuP,YAAA,wBAKAguF,kBAAA,SAAA9Y,EAAAlnF,GACA,SAAAknF,GACA,KAAAzkF,EAAAyQ,IAAA8H,KACAnc,KAAA0tF,aAAAvxE,OACA,MAEA,KAAAvY,EAAAyQ,IAAA+H,QACApc,KAAA0tF,aAAAtxE,UACA,MAEA,KAAAxY,EAAAyQ,IAAAgI,UACArc,KAAA0tF,aAAArxE,UAAAlb,MAKAywF,EA5eA,IAifA,SAAA9zF,EAAAD,EAAAiF,GAEA,aAGArE,OAAAC,eAAAb,EAAA,cACAqF,OAAA,IAEArF,EAAAq9F,YAAAr9F,EAAAm9F,aAAAn9F,EAAAujG,UAAA,EAEA,IAAAx9F,EAAAd,EAAA,GAEAe,EAAAf,EAAA,GAEAmsB,EAAAnsB,EAAA,IAEAoB,EAAApB,EAAA,GAEAqlB,EAAArlB,EAAA,IAEAu+F,GAAA,qyEAEAD,EACA58F,YAAAu2F,GAAA,GACA/6F,KAAAshG,8BACAthG,KAAAuhG,mBAAA,EACAvhG,KAAAmmB,QACAnmB,KAAA1B,KAAA,GACA0B,KAAA0zF,UAAA,EACA1zF,KAAAm7F,QAAA,KACAn7F,KAAA+6F,cAGAv2F,kBAAA1F,EAAAkuE,EAAAD,GACA/sE,KAAAshG,gBAAAxiG,EAAA,GAAAwC,KAAA0rE,EAAAD,GACA/sE,KAAAuhG,qBAGA/8F,YAAAwoE,EAAAD,EAAAy0B,GACA,KAAAx0B,GAAAD,GACA/sE,KAAAmmB,KAAA6mD,KAAAw0B,IAIAh9F,WAAAwoE,EAAAD,EAAAy0B,GAGA,IAFA,IAAAl4D,EAAAk4D,EAAAjhG,OAAA,EAEAysE,GAAAD,GACA/sE,KAAAmmB,KAAA6mD,KAAAw0B,EACAA,IAAArsE,UAAA,EAAAmU,GAAA95B,OAAAC,aAAA+xF,EAAAlvF,WAAAg3B,GAAA,GAIA9kC,kBAAAwoE,EAAAD,EAAA/rE,GACA,MAAAwjB,EAAAxjB,EAAAT,OACA,IAAAxC,EAAA,EAEA,KAAAivE,GAAAD,GAAAhvE,EAAAymB,GACAxkB,KAAAmmB,KAAA6mD,GAAAhsE,EAAAjD,OACAivE,EAIAxoE,OAAAsyD,EAAA2qC,GACAzhG,KAAAmmB,KAAA2wC,GAAA2qC,EAGAj9F,OAAA2I,GACA,OAAAnN,KAAAmmB,KAAAhZ,GAGA3I,SAAA2I,GACA,YAAAoC,IAAAvP,KAAAmmB,KAAAhZ,GAGA3I,QAAA2iB,GACA,MAAAk/D,EAAArmF,KAAAmmB,KACA5lB,EAAA8lF,EAAA9lF,OAEA,GAAAA,GAAA,MACA,QAAAxC,EAAA,EAAqBA,EAAAwC,EAAYxC,SACjCwR,IAAA82E,EAAAtoF,IACAopB,EAAAppB,EAAAsoF,EAAAtoF,SAIA,UAAAA,KAAAsoF,EACAl/D,EAAAppB,EAAAsoF,EAAAtoF,IAKAyG,WAAAtB,GACA,MAAAmjF,EAAArmF,KAAAmmB,KAEA,GAAAkgE,EAAA9lF,QAAA,MACA,OAAA8lF,EAAA9/E,QAAArD,GAGA,UAAA24F,KAAAxV,EACA,GAAAA,EAAAwV,KAAA34F,EACA,SAAA24F,EAIA,SAGAr3F,SACA,OAAAxE,KAAAmmB,KAGA3hB,aAAAqN,EAAA0c,EAAA+4C,GACA,IAAAlpE,EAAA,EACA,MAAAkjG,EAAAthG,KAAAshG,gBAEA,QAAAxiG,EAAA,EAAA4iG,EAAAJ,EAAA/gG,OAAgDzB,EAAA4iG,EAAQ5iG,IAAA,CACxDV,MAAA,EAAAyT,EAAAS,WAAAic,EAAAzvB,MAAA,EACA,MAAA6iG,EAAAL,EAAAxiG,GAEA,QAAAmxC,EAAA,EAAAoB,EAAAswD,EAAAphG,OAAiD0vC,EAAAoB,GAAQ,CACzD,MAAA27B,EAAA20B,EAAA1xD,KACA88B,EAAA40B,EAAA1xD,KAEA,GAAA7xC,GAAA4uE,GAAA5uE,GAAA2uE,EAGA,OAFAzF,EAAA4yB,SAAA97F,OACAkpE,EAAA/mE,OAAAzB,EAAA,IAMAwoE,EAAA4yB,SAAA,EACA5yB,EAAA/mE,OAAA,EAGAA,aACA,OAAAP,KAAAmmB,KAAA5lB,OAGAqhG,qBACA,kBAAA5hG,KAAA1B,MAAA,eAAA0B,KAAA1B,KACA,SAGA,WAAA0B,KAAAmmB,KAAA5lB,OACA,SAGA,QAAAxC,EAAA,EAAmBA,EAAA,MAAaA,IAChC,GAAAiC,KAAAmmB,KAAApoB,OACA,SAIA,UAKAF,EAAAujG,aAEApG,UAAAoG,EACA58F,YAAAkvF,EAAA50F,GACAkjB,QACAhiB,KAAA0zF,WACA1zF,KAAA6hG,kBAAA/iG,EAAA,SAGA0F,YAAAwoE,EAAAD,EAAAy0B,IACA,EAAA59F,EAAAmP,aAAA,+BAGAvO,WAAAwoE,EAAAD,EAAAy0B,IACA,EAAA59F,EAAAmP,aAAA,8BAGAvO,kBAAAwoE,EAAAD,EAAA/rE,IACA,EAAA4C,EAAAmP,aAAA,qCAGAvO,OAAAsyD,EAAA2qC,IACA,EAAA79F,EAAAmP,aAAA,6BAGAvO,OAAA2I,GACA,OAAA8E,OAAAC,UAAA/E,OAAA,MAAAA,OAAAoC,EAGA/K,SAAA2I,GACA,OAAA8E,OAAAC,UAAA/E,OAAA,MAGA3I,QAAA2iB,GACA,QAAAppB,EAAA,EAAmBA,GAAA,MAAaA,IAChCopB,EAAAppB,KAIAyG,WAAAtB,GACA,OAAA+O,OAAAC,UAAAhP,OAAA,MAAAA,GAAA,EAGAsB,SACA,MAAA6hF,EAAA,IAAAjlF,MAAA,OAEA,QAAArD,EAAA,EAAmBA,GAAA,MAAaA,IAChCsoF,EAAAtoF,KAGA,OAAAsoF,EAGA9lF,aACA,aAGAqhG,sBACA,EAAAh+F,EAAAmP,aAAA,sCAKAlV,EAAAm9F,eAEA,IAAA8G,EAAA,WACA,SAAAC,EAAA3+E,EAAAqqB,GAGA,IAFA,IAAA3uC,EAAA,EAEAf,EAAA,EAAmBA,GAAA0vC,EAAW1vC,IAC9Be,KAAA,EAAAskB,EAAArlB,GAGA,OAAAe,IAAA,EAGA,SAAAkjG,EAAA5+E,EAAAqqB,GACA,WAAAA,EACAj+B,OAAAC,aAAA2T,EAAA,GAAAA,EAAA,IAGA,IAAAqqB,EACAj+B,OAAAC,aAAA2T,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAGA5T,OAAAC,aAAAlO,MAAA,KAAA6hB,EAAAvT,SAAA,EAAA49B,EAAA,IAGA,SAAAw0D,EAAA7+E,EAAAV,EAAA+qB,GAGA,IAFA,IAAArvC,EAAA,EAEAL,EAAA0vC,EAAsB1vC,GAAA,EAAQA,IAC9BK,GAAAglB,EAAArlB,GAAA2kB,EAAA3kB,GACAqlB,EAAArlB,GAAA,IAAAK,EACAA,IAAA,EAIA,SAAA8jG,EAAA9+E,EAAAqqB,GAGA,IAFA,IAAArvC,EAAA,EAEAL,EAAA0vC,EAAsB1vC,GAAA,GAAAK,EAAA,EAAiBL,IACvCK,GAAAglB,EAAArlB,GACAqlB,EAAArlB,GAAA,IAAAK,EACAA,IAAA,EAIA,IAAA+jG,EAAA,GACAC,EAAA,GAEA,SAAAC,EAAAv9F,GACA9E,KAAAqiB,OAAAvd,EACA9E,KAAAgP,IAAA,EACAhP,KAAA0oB,IAAA5jB,EAAAvE,OACAP,KAAA+3E,OAAA,IAAAhzE,WAAAq9F,GAuRA,SAAAN,KAKA,OAzRAO,EAAAnjG,WACAsF,WACA,OAAAxE,KAAAgP,KAAAhP,KAAA0oB,KACA,EAGA1oB,KAAAqiB,OAAAriB,KAAAgP,QAGAxK,aACA,IACA25B,EADAr/B,EAAA,EAGA,GACA,IAAA4jB,EAAA1iB,KAAAsiG,WAEA,GAAA5/E,EAAA,EACA,UAAA9e,EAAAuP,YAAA,2BAGAgrB,IAAA,IAAAzb,GACA5jB,KAAA,MAAA4jB,SACOyb,GAEP,OAAAr/B,GAGA0F,aACA,IAAA1F,EAAAkB,KAAAuiG,aACA,SAAAzjG,QAAA,GAAAA,IAAA,GAGA0F,QAAAyF,EAAAwjC,GACAxjC,EAAAmF,IAAApP,KAAAqiB,OAAAxS,SAAA7P,KAAAgP,IAAAhP,KAAAgP,IAAAy+B,EAAA,IACAztC,KAAAgP,KAAAy+B,EAAA,GAGAjpC,cAAAyF,EAAAwjC,GACA,IAAAtP,EACAqkE,EAAAxiG,KAAA+3E,OACA0qB,EAAA,EAEA,GACA,IAAA//E,EAAA1iB,KAAAsiG,WAEA,GAAA5/E,EAAA,EACA,UAAA9e,EAAAuP,YAAA,2BAGAgrB,IAAA,IAAAzb,GACA8/E,EAAAC,KAAA,IAAA//E,SACOyb,GAMP,IAJA,IAAApgC,EAAA0vC,EACAprB,EAAA,EACAi+C,EAAA,EAEAviE,GAAA,IACA,KAAAuiE,EAAA,GAAAkiC,EAAAjiG,OAAA,GACA8hB,EAAAmgF,IAAAC,IAAAniC,EAAAj+C,EACAi+C,GAAA,EAGAr2D,EAAAlM,GAAA,IAAAskB,EACAtkB,IACAskB,IAAA,EACAi+C,GAAA,IAIA97D,cAAAyF,EAAAwjC,GACAztC,KAAA0iG,cAAAz4F,EAAAwjC,GAIA,IAHA,IAAA5C,EAAA,EAAA5gC,EAAAwjC,GAAA,MACArvC,EAAA,EAEAL,EAAA,EAAqBA,GAAA0vC,EAAW1vC,IAChCK,GAAA,EAAAA,IAAA,EAAA6L,EAAAlM,GACAkM,EAAAlM,GAAAK,GAAA,EAAAysC,GAIArmC,aAIA,IAHA,IAAA7D,EAAAX,KAAAuiG,aACAljG,EAAA,GAEAtB,EAAA,EAAqBA,EAAA4C,EAAS5C,IAC9BsB,GAAAmQ,OAAAC,aAAAzP,KAAAuiG,cAGA,OAAAljG,IA6LAyiG,EAAA5iG,WACAM,QAzLA,SAAAsF,EAAAg2F,EAAAvwB,GACA,WAAAxjE,QAAA,SAAAtC,EAAA+C,GACA,IAAAkD,EAAA,IAAA23F,EAAAv9F,GACAs6C,EAAA10C,EAAA43F,WACAxH,EAAApH,YAAA,EAAAt0C,GAUA,IATA,IAMAjyC,EACAuV,EAPAy4E,EAAA,KACAlwF,EAAA,IAAAlG,WAAAo9F,GACAz5E,EAAA,IAAA3jB,WAAAo9F,GACAQ,EAAA,IAAA59F,WAAAo9F,GACAtG,EAAA,IAAA92F,WAAAo9F,GACAn9D,EAAA,IAAAjgC,WAAAo9F,IAIAz/E,EAAAhY,EAAA43F,aAAA,IACA,IAAA/9E,EAAA7B,GAAA,EAEA,OAAA6B,EAAA,CAcA,IAAAq+E,KAAA,GAAAlgF,GACAmgF,EAAA,GAAAngF,EAEA,GAAAmgF,EAAA,EAAAV,EACA,UAAAziG,MAAA,wCAGA,IAEA3B,EADA+kG,EAAAp4F,EAAA63F,aAGA,OAAAh+E,GACA,OAMA,IALA7Z,EAAAq4F,QAAA93F,EAAA43F,GACAn4F,EAAAg4F,cAAAh6E,EAAAm6E,GACAZ,EAAAv5E,EAAAzd,EAAA43F,GACA/H,EAAA+G,kBAAAgB,EAAA,EAAAd,EAAA92F,EAAA43F,GAAAd,EAAAr5E,EAAAm6E,IAEA9kG,EAAA,EAAuBA,EAAA+kG,EAAmB/kG,IAC1CmkG,EAAAx5E,EAAAm6E,GACAn4F,EAAAg4F,cAAAz3F,EAAA43F,GACAZ,EAAAh3F,EAAAyd,EAAAm6E,GACAn4F,EAAAg4F,cAAAh6E,EAAAm6E,GACAZ,EAAAv5E,EAAAzd,EAAA43F,GACA/H,EAAA+G,kBAAAgB,EAAA,EAAAd,EAAA92F,EAAA43F,GAAAd,EAAAr5E,EAAAm6E,IAGA,MAEA,OAMA,IALAn4F,EAAAq4F,QAAA93F,EAAA43F,GACAn4F,EAAAg4F,cAAAh6E,EAAAm6E,GACAZ,EAAAv5E,EAAAzd,EAAA43F,GACAn4F,EAAA63F,aAEAxkG,EAAA,EAAuBA,EAAA+kG,EAAmB/kG,IAC1CmkG,EAAAx5E,EAAAm6E,GACAn4F,EAAAg4F,cAAAz3F,EAAA43F,GACAZ,EAAAh3F,EAAAyd,EAAAm6E,GACAn4F,EAAAg4F,cAAAh6E,EAAAm6E,GACAZ,EAAAv5E,EAAAzd,EAAA43F,GACAn4F,EAAA63F,aAGA,MAEA,OAKA,IAJA73F,EAAAq4F,QAAAJ,EAAAE,GACA11F,EAAAzC,EAAA63F,aACAzH,EAAAkI,OAAAjB,EAAAY,EAAAE,GAAA11F,GAEApP,EAAA,EAAuBA,EAAA+kG,EAAmB/kG,IAC1CmkG,EAAAS,EAAAE,GAEAD,IACAl4F,EAAAg4F,cAAA19D,EAAA69D,GACAZ,EAAAU,EAAA39D,EAAA69D,IAGA11F,EAAAzC,EAAAu4F,cAAA91F,EAAA,GACA2tF,EAAAkI,OAAAjB,EAAAY,EAAAE,GAAA11F,GAGA,MAEA,OAOA,IANAzC,EAAAq4F,QAAA93F,EAAA43F,GACAn4F,EAAAg4F,cAAAh6E,EAAAm6E,GACAZ,EAAAv5E,EAAAzd,EAAA43F,GACA11F,EAAAzC,EAAA63F,aACAzH,EAAAoI,YAAAnB,EAAA92F,EAAA43F,GAAAd,EAAAr5E,EAAAm6E,GAAA11F,GAEApP,EAAA,EAAuBA,EAAA+kG,EAAmB/kG,IAC1CmkG,EAAAx5E,EAAAm6E,GAEAD,EAIA33F,EAAAmE,IAAAsZ,IAHAhe,EAAAg4F,cAAAz3F,EAAA43F,GACAZ,EAAAh3F,EAAAyd,EAAAm6E,IAKAn4F,EAAAg4F,cAAAh6E,EAAAm6E,GACAZ,EAAAv5E,EAAAzd,EAAA43F,GACA11F,EAAAzC,EAAA63F,aACAzH,EAAAoI,YAAAnB,EAAA92F,EAAA43F,GAAAd,EAAAr5E,EAAAm6E,GAAA11F,GAGA,MAEA,OAKA,IAJAzC,EAAAq4F,QAAAJ,EApFA,GAqFAj4F,EAAAq4F,QAAAlH,EAAAgH,GACA/H,EAAAkI,OAAAjB,EAAAY,EAtFA,GAsFAX,EAAAnG,EAAAgH,IAEA9kG,EAAA,EAAuBA,EAAA+kG,EAAmB/kG,IAC1CmkG,EAAAS,EAzFA,GA2FAC,IACAl4F,EAAAg4F,cAAA19D,EA5FA,GA6FAi9D,EAAAU,EAAA39D,EA7FA,IAgGAk9D,EAAArG,EAAAgH,GACAn4F,EAAAy4F,cAAAn+D,EAAA69D,GACAZ,EAAApG,EAAA72D,EAAA69D,GACA/H,EAAAkI,OAAAjB,EAAAY,EAnGA,GAmGAX,EAAAnG,EAAAgH,IAGA,MAEA,OAOA,IANAn4F,EAAAq4F,QAAA93F,EAzGA,GA0GAP,EAAAg4F,cAAAh6E,EA1GA,GA2GAu5E,EAAAv5E,EAAAzd,EA3GA,GA4GAP,EAAAq4F,QAAAlH,EAAAgH,GACA/H,EAAAsI,WAAArB,EAAA92F,EA7GA,GA6GA82F,EAAAr5E,EA7GA,GA6GAs5E,EAAAnG,EAAAgH,IAEA9kG,EAAA,EAAuBA,EAAA+kG,EAAmB/kG,IAC1CmkG,EAAAx5E,EAhHA,GAkHAk6E,EAIA33F,EAAAmE,IAAAsZ,IAHAhe,EAAAg4F,cAAAz3F,EAnHA,GAoHAg3F,EAAAh3F,EAAAyd,EApHA,IAyHAhe,EAAAg4F,cAAAh6E,EAzHA,GA0HAu5E,EAAAv5E,EAAAzd,EA1HA,GA2HAP,EAAAq4F,QAAAlH,EAAAgH,GACA/H,EAAAsI,WAAArB,EAAA92F,EA5HA,GA4HA82F,EAAAr5E,EA5HA,GA4HAs5E,EAAAnG,EAAAgH,IAGA,MAEA,QAEA,YADAr7F,EAAA,IAAA9H,MAAA,oCAAA6kB,UAtJA,UAAA7B,GACA,OACAhY,EAAA24F,aACA,MAEA,OACAlI,EAAAzwF,EAAA24F,cAsJA5+F,EADA02F,EACA5wB,EAAA4wB,GAIAL,OASAgH,EA9UA,GAiVA5G,EAAA,WACA,SAAAoI,EAAAzxF,GAGA,IAFA,IAAAuR,EAAA,EAEArlB,EAAA,EAAmBA,EAAA8T,EAAAtR,OAAgBxC,IACnCqlB,KAAA,EAAAvR,EAAAS,WAAAvU,GAGA,OAAAqlB,IAAA,EAGA,SAAAmgF,EAAA1yF,GACA,OAAAjN,EAAAmN,UAAAF,GACA,UAAAjN,EAAAuP,YAAA,oCAIA,SAAAqwF,EAAA3yF,GACA,IAAAoB,OAAAC,UAAArB,GACA,UAAAjN,EAAAuP,YAAA,iCAIA,SAAAswF,EAAA3I,EAAAj6D,GACA,QACA,IAAAhwB,EAAAgwB,EAAAM,SAEA,MAAAt9B,EAAAkhB,OAAAlU,GACA,MAGA,MAAAhN,EAAAohB,OAAApU,EAAA,aACA,OAGA0yF,EAAA1yF,GACA,IAAAimD,EAAAwsC,EAAAzyF,GAEA0yF,EADA1yF,EAAAgwB,EAAAM,UAEA,IAAAsgE,EAAA5wF,EACAiqF,EAAAkI,OAAAlsC,EAAA2qC,IAIA,SAAAiC,EAAA5I,EAAAj6D,GACA,QACA,IAAAhwB,EAAAgwB,EAAAM,SAEA,MAAAt9B,EAAAkhB,OAAAlU,GACA,MAGA,MAAAhN,EAAAohB,OAAApU,EAAA,cACA,OAGA0yF,EAAA1yF,GACA,IAAAm8D,EAAAs2B,EAAAzyF,GAEA0yF,EADA1yF,EAAAgwB,EAAAM,UAEA,IAAA4rC,EAAAu2B,EAAAzyF,GAGA,GAFAA,EAAAgwB,EAAAM,SAEAlvB,OAAAC,UAAArB,KAAA,EAAAjN,EAAAmN,UAAAF,GAAA,CACA,IAAA2wF,EAAAvvF,OAAAC,UAAArB,GAAArB,OAAAC,aAAAoB,KACAiqF,EAAAsI,WAAAp2B,EAAAD,EAAAy0B,OACO,QAAA39F,EAAAohB,OAAApU,EAAA,KAWP,MAVAA,EAAAgwB,EAAAM,SAGA,IAFA,IAAAngC,OAEA,EAAA6C,EAAAohB,OAAApU,EAAA,UAAAhN,EAAAkhB,OAAAlU,IACA7P,EAAAM,KAAAuP,GACAA,EAAAgwB,EAAAM,SAGA25D,EAAA6I,kBAAA32B,EAAAD,EAAA/rE,IAMA,UAAA4C,EAAAuP,YAAA,qBAGA,SAAAywF,EAAA9I,EAAAj6D,GACA,QACA,IAAAhwB,EAAAgwB,EAAAM,SAEA,MAAAt9B,EAAAkhB,OAAAlU,GACA,MAGA,MAAAhN,EAAAohB,OAAApU,EAAA,cACA,OAGA0yF,EAAA1yF,GACA,IAAAimD,EAAAwsC,EAAAzyF,GAEA2yF,EADA3yF,EAAAgwB,EAAAM,UAEA,IAAAsgE,EAAA5wF,EACAiqF,EAAAkI,OAAAlsC,EAAA2qC,IAIA,SAAAoC,EAAA/I,EAAAj6D,GACA,QACA,IAAAhwB,EAAAgwB,EAAAM,SAEA,MAAAt9B,EAAAkhB,OAAAlU,GACA,MAGA,MAAAhN,EAAAohB,OAAApU,EAAA,eACA,OAGA0yF,EAAA1yF,GACA,IAAAm8D,EAAAs2B,EAAAzyF,GAEA0yF,EADA1yF,EAAAgwB,EAAAM,UAEA,IAAA4rC,EAAAu2B,EAAAzyF,GAEA2yF,EADA3yF,EAAAgwB,EAAAM,UAEA,IAAAqgE,EAAA3wF,EACAiqF,EAAAoI,YAAAl2B,EAAAD,EAAAy0B,IAIA,SAAAsC,EAAAhJ,EAAAj6D,GACA,QACA,IAAAhwB,EAAAgwB,EAAAM,SAEA,MAAAt9B,EAAAkhB,OAAAlU,GACA,MAGA,MAAAhN,EAAAohB,OAAApU,EAAA,qBACA,OAGA,OAAAjN,EAAAmN,UAAAF,GACA,MAGA,IAAAm8D,EAAAs2B,EAAAzyF,GAGA,GAFAA,EAAAgwB,EAAAM,WAEA,EAAAv9B,EAAAmN,UAAAF,GACA,MAGA,IAAAk8D,EAAAu2B,EAAAzyF,GACAiqF,EAAA+G,kBAAAhxF,EAAAtQ,OAAAysE,EAAAD,GAGA,UAAAnpE,EAAAuP,YAAA,4BAGA,SAAA4wF,EAAAjJ,EAAAj6D,GACA,IAAAhwB,EAAAgwB,EAAAM,SAEAlvB,OAAAC,UAAArB,KACAiqF,EAAApH,WAAA7iF,GAIA,SAAAmzF,EAAAlJ,EAAAj6D,GACA,IAAAhwB,EAAAgwB,EAAAM,UAEA,EAAAt9B,EAAAuhB,QAAAvU,KAAA,EAAAjN,EAAAmN,UAAAF,EAAAvS,QACAw8F,EAAAx8F,KAAAuS,EAAAvS,MAIA,SAAA2lG,EAAAnJ,EAAAj6D,EAAAupD,EAAA+Q,GACA,IAAA+I,EACAC,EAEAC,EAAA,OACA,IACA,IAAAvzF,EAAAgwB,EAAAM,SAEA,MAAAt9B,EAAAkhB,OAAAlU,GACA,MACS,MAAAhN,EAAAuhB,QAAAvU,GACT,UAAAA,EAAAvS,KACAylG,EAAAjJ,EAAAj6D,GACW,aAAAhwB,EAAAvS,MACX0lG,EAAAlJ,EAAAj6D,GAGAqjE,EAAArzF,OACS,MAAAhN,EAAAohB,OAAApU,GACT,OAAAA,EAAAqU,KACA,cACA,MAAAk/E,EAEA,eACA,EAAAvgG,EAAAuhB,QAAA8+E,KACAC,EAAAD,EAAA5lG,MAGA,MAEA,0BACAwlG,EAAAhJ,EAAAj6D,GACA,MAEA,kBACA4iE,EAAA3I,EAAAj6D,GACA,MAEA,mBACA+iE,EAAA9I,EAAAj6D,GACA,MAEA,mBACA6iE,EAAA5I,EAAAj6D,GACA,MAEA,oBACAgjE,EAAA/I,EAAAj6D,IAIO,MAAAt5B,GACP,GAAAA,aAAArD,EAAAglB,qBACA,MAAA3hB,GAGA,EAAA3D,EAAAoF,MAAA,sBAAAzB,GACA,SAQA,OAJA4zF,GAAAgJ,IACAhJ,EAAAgJ,GAGAhJ,EACAkJ,EAAAvJ,EAAA1Q,EAAA+Q,GAGAp0F,QAAAtC,QAAAq2F,GAGA,SAAAuJ,EAAAvJ,EAAA1Q,EAAA+Q,GACA,OAAAmJ,EAAAnJ,EAAA/Q,GAAAriF,KAAA,SAAAw8F,GAGA,GAFAzJ,EAAAK,QAAAoJ,EAEA,IAAAzJ,EAAAyG,mBAAA,CAGA,IAFA,IAAAiD,EAAA1J,EAAAK,QAAAmG,gBAEAvjG,EAAA,EAAuBA,EAAAymG,EAAAjkG,OAA+BxC,IACtD+8F,EAAAwG,gBAAAvjG,GAAAymG,EAAAzmG,GAAAilB,QAGA83E,EAAAyG,mBAAAzG,EAAAK,QAAAoG,mBAQA,OALAzG,EAAAK,QAAAvuF,QAAA,SAAArJ,EAAAL,GACA43F,EAAA2J,SAAAlhG,IACAu3F,EAAAkI,OAAAz/F,EAAAu3F,EAAAK,QAAA5tE,OAAAhqB,MAGAu3F,IAIA,SAAAwJ,EAAAhmG,EAAA8rF,GACA,qBAAA9rF,EACAyI,QAAAtC,QAAA,IAAAu2F,GAAA,MACK,eAAA18F,EACLyI,QAAAtC,QAAA,IAAAu2F,GAAA,MAGAqG,EAAA10E,SAAAruB,GAIA8rF,EAIAA,EAAA9rF,GAAAyJ,KAAA,SAAAjD,GACA,IAAA4/F,EAAA5/F,EAAA4/F,SACAla,EAAA1lF,EAAA0lF,gBACAsQ,EAAA,IAAAsG,GAAA,GAEA,GAAA5W,IAAA5mF,EAAA8P,oBAAA8H,OACA,WAAAsmF,GAAAtiG,QAAAklG,EAAA5J,EAAA,SAAAK,GACA,OAAAkJ,EAAAvJ,EAAA1Q,EAAA+Q,KAIA,GAAA3Q,IAAA5mF,EAAA8P,oBAAAe,KAAA,CACA,IAAAosB,EAAA,IAAA5R,EAAA2U,MAAA,IAAAzb,EAAAQ,OAAA+7E,IACA,OAAAT,EAAAnJ,EAAAj6D,EAAAupD,EAAA,MAGA,OAAArjF,QAAAS,OAAA,IAAA9H,MAAA,sEAnBAqH,QAAAS,OAAA,IAAA9H,MAAA,+CAJAqH,QAAAS,OAAA,IAAA9H,MAAA,sBAAApB,IA2BA,OACAkG,aAAAo6B,GACA,IAAA8V,EAAA9V,EAAA8V,SACA01C,EAAAxrD,EAAAwrD,iBACA+Q,EAAAv8D,EAAAu8D,QAEA,MAAAt3F,EAAAuhB,QAAAsvB,GACA,OAAA4vD,EAAA5vD,EAAAp2C,KAAA8rF,GACO,MAAAvmF,EAAA4hB,UAAAivB,GAGP,OAAAuvD,EAFA,IAAA7C,EACA,IAAAnyE,EAAA2U,MAAA8Q,GACA01C,EAAA+Q,GAAApzF,KAAA,SAAA48F,GACA,OAAAA,EAAA/C,eACA0C,EAAAK,EAAArmG,KAAA8rF,GAGAua,IAIA,UAAAjlG,MAAA,wBArUA,GA2UA7B,EAAAq9F,eAIA,SAAAp9F,EAAAD,EAAAiF,GAEA,aAGArE,OAAAC,eAAAb,EAAA,cACAqF,OAAA,IAEArF,EAAAizF,cACAjzF,EAAA09F,qBAAA19F,EAAA88F,aAAA98F,EAAAw7F,UAAAx7F,EAAA4yF,KAAA5yF,EAAAqxF,UAAArxF,EAAA+mG,2BAAA,EAEA,IAAAhhG,EAAAd,EAAA,GAEA+hG,EAAA/hG,EAAA,IAEA+mF,EAAA/mF,EAAA,IAEA0mF,EAAA1mF,EAAA,IAEA4mF,EAAA5mF,EAAA,IAEA2mF,EAAA3mF,EAAA,IAEAoB,EAAApB,EAAA,GAEAgiG,EAAAhiG,EAAA,IAEAwmF,EAAAxmF,EAAA,IAEAqlB,EAAArlB,EAAA,IAEAiiG,EAAAjiG,EAAA,IAEA,MAAAkiG,IAAA,gCACA,IAAAC,EAAA,IACAL,GAAA,EACA/mG,EAAA+mG,wBACA,IAAAvL,GACAwD,WAAA,EACAqB,MAAA,EACA5E,SAAA,EACA4L,OAAA,EACA1L,YAAA,GACA2L,OAAA,GACAC,OAAA,MACAC,SAAA,OACAC,UAAA,QAEAznG,EAAAw7F,YACA,IAAAkM,GAAA,+zEAEA,SAAAC,EAAApN,GACA,GAAAA,EAAApD,YAIAoD,EAAApD,WAAA,KAAApxF,EAAA2Q,qBAAA,IAIA,IAAAwqD,EAAA,KAAAq5B,EAAApD,WAAA,GACAmH,EAAA/D,EAAA8D,OAEA,QAAAnG,KAAAoG,EACAA,EAAApG,IAAAh3B,EAGAq5B,EAAAgE,cAAAr9B,GAmCA,SAAA+xB,EAAAvsE,EAAA2T,GACA,OAAA3T,GACA,YACA,iBAAA2T,EAAAt0B,EAAAgQ,SAAAiH,OAAAjX,EAAAgQ,SAAAgH,MAEA,mBACA,wBAAAsd,EAAAt0B,EAAAgQ,SAAAmH,cAAAnX,EAAAgQ,SAAAkH,aAEA,eACA,OAAAlX,EAAAgQ,SAAAuH,SAEA,eACA,OAAAvX,EAAAgQ,SAAAoH,SAEA,mBACA,OAAApX,EAAAgQ,SAAAqH,aAEA,cACA,OAAArX,EAAAgQ,SAAAyH,QAEA,YACA,OAAAzX,EAAAgQ,SAAAwH,MAEA,QACA,OAAAxX,EAAAgQ,SAAAsG,SAIA,SAAAurF,EAAAnnG,EAAA87F,GACA,QAAA7qF,IAAA6qF,EAAA97F,GACA,OAAAA,EAGA,IAAA63F,GAAA,EAAA1M,EAAA+Q,oBAAAl8F,EAAA87F,GAEA,QAAAjE,EACA,QAAA5yF,KAAA62F,EACA,GAAAA,EAAA72F,KAAA4yF,EACA,OAAA5yF,EAMA,OADA,EAAAK,EAAA6H,MAAA,gDAAAnN,GACAA,EAGA,IAAAonG,EAAA,WACA,SAAAA,EAAAxG,EAAA/I,EAAAmJ,EAAA9mD,EAAAy9C,EAAA0P,EAAAnP,EAAAoP,GACA5lG,KAAAk/F,WACAl/F,KAAAm2F,UACAn2F,KAAAs/F,SACAt/F,KAAAw4C,QACAx4C,KAAAi2F,UACAj2F,KAAA2lG,iBACA3lG,KAAAw2F,UACAx2F,KAAA4lG,WAOA,OAJAF,EAAAxmG,UAAA2mG,gBAAA,SAAA3G,EAAA/I,EAAAmJ,EAAA9mD,EAAAy9C,EAAA0P,EAAAnP,EAAAoP,GACA,OAAA5lG,KAAAk/F,cAAAl/F,KAAAm2F,aAAAn2F,KAAAs/F,YAAAt/F,KAAAw4C,WAAAx4C,KAAAi2F,aAAAj2F,KAAA2lG,oBAAA3lG,KAAAw2F,aAAAx2F,KAAA4lG,cAGAF,EAhBA,GAmBA/K,EAAA,WACA,SAAAA,EAAAgB,MACA37F,KAAAmmB,KAAAw1E,EA6CA,OA1CAhB,EAAAz7F,WACAqB,aACA,OAAAP,KAAAmmB,KAAA5lB,QAGAiE,QAAA2iB,GACA,QAAA00E,KAAA77F,KAAAmmB,KACAgB,EAAA00E,EAAA77F,KAAAmmB,KAAA01E,GAAAvpF,WAAA,KAIA9N,IAAAzG,GACA,YAAAwR,IAAAvP,KAAAmmB,KAAApoB,IAGAyG,IAAAzG,GACA,OAAAiC,KAAAmmB,KAAApoB,IAGAyG,WAAAtB,GACA,MAAAmjF,EAAArmF,KAAAmmB,KAEA,GAAAkgE,EAAA9lF,QAAA,MACA,OAAA8lF,EAAA9/E,QAAArD,GAGA,UAAA24F,KAAAxV,EACA,GAAAA,EAAAwV,KAAA34F,EACA,SAAA24F,EAIA,UAGAr3F,MAAA6hF,GACA,QAAAwV,KAAAxV,EACArmF,KAAAmmB,KAAA01E,GAAAxV,EAAAwV,KAKAlB,EA/CA,GAkDA98F,EAAA88F,eAEA,IAAAY,EAAA,WACA,SAAAA,EAAAC,EAAAC,GACAz7F,KAAAw7F,YACAx7F,KAAAy7F,WAmCA,OAhCAF,EAAAr8F,WACAqB,aACA,OAAAP,KAAAy7F,SAAA,EAAAz7F,KAAAw7F,WAGAh3F,QAAA2iB,GACA,QAAAppB,EAAAiC,KAAAw7F,UAAAh3E,EAAAxkB,KAAAy7F,SAAsD19F,GAAAymB,EAASzmB,IAC/DopB,EAAAppB,MAIAyG,IAAAzG,GACA,OAAAiC,KAAAw7F,WAAAz9F,MAAAiC,KAAAy7F,UAGAj3F,IAAAzG,GACA,GAAAiC,KAAAw7F,WAAAz9F,MAAAiC,KAAAy7F,SACA,OAAAjsF,OAAAC,aAAA1R,IAMAyG,WAAA4L,GACA,OAAA6B,OAAAC,UAAA9B,OAAApQ,KAAAw7F,WAAAprF,GAAApQ,KAAAy7F,SAAArrF,GAAA,GAGA5L,MAAA6hF,IACA,EAAAziF,EAAAmP,aAAA,6BAIAwoF,EAtCA,GAyCA19F,EAAA09F,uBAEA,IAAAuK,EAAA,WACA,SAAAC,EAAApuE,EAAApJ,EAAAtkB,GACA0tB,EAAApJ,GAAAtkB,GAAA,MACA0tB,EAAApJ,EAAA,OAAAtkB,EAGA,SAAA+7F,EAAAruE,EAAApJ,EAAAtkB,GACA0tB,EAAApJ,GAAAtkB,GAAA,OACA0tB,EAAApJ,EAAA,GAAAtkB,GAAA,OACA0tB,EAAApJ,EAAA,GAAAtkB,GAAA,MACA0tB,EAAApJ,EAAA,OAAAtkB,EAGA,SAAAg8F,EAAAtuE,EAAApJ,EAAAzpB,GACA,IAAA/G,EAAAymB,EAEA,GAAA1f,aAAAC,WACA4yB,EAAAvoB,IAAAtK,EAAAypB,QACK,oBAAAzpB,EACL,IAAA/G,EAAA,EAAAymB,EAAA1f,EAAAvE,OAAmCxC,EAAAymB,EAAQzmB,IAC3C45B,EAAApJ,KAAA,IAAAzpB,EAAAwN,WAAAvU,QAGA,IAAAA,EAAA,EAAAymB,EAAA1f,EAAAvE,OAAmCxC,EAAAymB,EAAQzmB,IAC3C45B,EAAApJ,KAAA,IAAAzpB,EAAA/G,GAKA,SAAA+nG,EAAAI,GACAlmG,KAAAkmG,OACAlmG,KAAAmmG,OAAA1nG,OAAA6E,OAAA,MAGAwiG,EAAAM,gBAAA,SAAAC,EAAAC,GAIA,IAHA,IAAAC,EAAA,EACAn4E,EAAA,GAEAm4E,EAAAF,GAAAE,GACAA,IAAA,EACAn4E,IAGA,IAAAo4E,EAAAD,EAAAD,EACA,OACA55E,MAAA85E,EACAllE,MAAAlT,EACAq4E,WAAAH,EAAAD,EAAAG,IA2EA,OArEAV,EAAA5mG,WACAwnG,QAAA,WACA,IAAAR,EAAAlmG,KAAAkmG,KACAC,EAAAnmG,KAAAmmG,OACAQ,EAAAloG,OAAAwoB,KAAAk/E,GACAQ,EAAA5iF,OACA,IACAhmB,EAAA81B,EAAAyH,EAAAoT,EAAAk4D,EADAC,EAAAF,EAAApmG,OAEAguB,EAVA,GACA,GASAs4E,EACAC,GAAAv4E,GAEA,IAAAxwB,EAAA,EAAiBA,EAAA8oG,EAAe9oG,IAAA,CAGhCwwB,KAFAmgB,EAAAy3D,EAAAQ,EAAA5oG,KACAwC,OAAA,UAEAumG,EAAAxlG,KAAAitB,GAGA,IAAA42D,EAAA,IAAApgF,WAAAwpB,GAEA,IAAAxwB,EAAA,EAAiBA,EAAA8oG,EAAe9oG,IAChC2wC,EAAAy3D,EAAAQ,EAAA5oG,IACAkoG,EAAA9gB,EAAA2hB,EAAA/oG,GAAA2wC,GAGA,SAAAw3D,IACAA,GAAA,EAAAtiG,EAAAwO,UAAA,QAGA+yE,EAAA,OAAA+gB,EAAA5zF,WAAA,GACA6yE,EAAA,OAAA+gB,EAAA5zF,WAAA,GACA6yE,EAAA,OAAA+gB,EAAA5zF,WAAA,GACA6yE,EAAA,OAAA+gB,EAAA5zF,WAAA,GACAyzF,EAAA5gB,EAAA,EAAA0hB,GACA,IAAAE,EAAAjB,EAAAM,gBAAAS,EAAA,IAMA,IALAd,EAAA5gB,EAAA,EAAA4hB,EAAAr6E,OACAq5E,EAAA5gB,EAAA,EAAA4hB,EAAAzlE,OACAykE,EAAA5gB,EAAA,GAAA4hB,EAAAN,YACAl4E,EAxCA,GA0CAxwB,EAAA,EAAiBA,EAAA8oG,EAAe9oG,IAAA,CAChC6oG,EAAAD,EAAA5oG,GACAonF,EAAA52D,GAAA,IAAAq4E,EAAAt0F,WAAA,GACA6yE,EAAA52D,EAAA,OAAAq4E,EAAAt0F,WAAA,GACA6yE,EAAA52D,EAAA,OAAAq4E,EAAAt0F,WAAA,GACA6yE,EAAA52D,EAAA,OAAAq4E,EAAAt0F,WAAA,GACA,IAAA00F,EAAA,EAEA,IAAAnzE,EAAAizE,EAAA/oG,GAAAu9B,EAAAwrE,EAAA/oG,EAAA,GAA2D81B,EAAAyH,EAAQzH,GAAA,GAEnEmzE,KADA,EAAA9iG,EAAAuqB,YAAA02D,EAAAtxD,KACA,EAGAmyE,EAAA7gB,EAAA52D,EAAA,EAAAy4E,GACAhB,EAAA7gB,EAAA52D,EAAA,EAAAu4E,EAAA/oG,IACAioG,EAAA7gB,EAAA52D,EAAA,GAAA43E,EAAAS,GAAArmG,QACAguB,GAzDA,GA4DA,OAAA42D,GAEA8hB,SAAA,SAAAC,EAAApiG,GACA,GAAAoiG,KAAAlnG,KAAAmmG,OACA,UAAAzmG,MAAA,SAAAwnG,EAAA,mBAGAlnG,KAAAmmG,OAAAe,GAAApiG,IAGAghG,EA1HA,GA6HArV,EAAA,WACA,SAAAA,EAAAnyF,EAAA6mF,EAAAiT,GACA,IAAAyD,EACA77F,KAAA1B,OACA0B,KAAAy9B,WAAA26D,EAAA36D,WACAz9B,KAAA+uF,YAAAqJ,EAAArJ,YACA/uF,KAAAmnG,SACAnnG,KAAAonG,aAAA,EACApnG,KAAAqnG,WAAA5oG,OAAA6E,OAAA,MACAtD,KAAA88F,eAAA1E,EAAAn/D,MAAAogE,EAAA6E,OACAl+F,KAAAo5F,kBAAAhB,EAAAn/D,MAAAogE,EAAAC,UACAt5F,KAAAw1F,eAAA4C,EAAAn/D,MAAAogE,EAAAwD,YACA,IAAAt4E,EAAA6zE,EAAA7zE,KACA2T,EAAAkgE,EAAAlgE,QACAl4B,KAAAukB,OACAvkB,KAAAk4B,UACA,IAAAw8D,EAAA,aAwBA,GAtBA10F,KAAAw1F,YACAd,EAAA,YACK10F,KAAA88F,cACLpI,EAAA,SAGA10F,KAAA00F,eACA10F,KAAA+4F,YAAAX,EAAAW,YACA/4F,KAAAk8F,OAAA9D,EAAA8D,OACAl8F,KAAAo8F,aAAAhE,EAAAgE,aACAp8F,KAAAy4F,UAAAL,EAAAK,UACAz4F,KAAA4+F,UAAAxG,EAAAwG,UACA5+F,KAAA86F,KAAA1C,EAAA0C,KACA96F,KAAA20F,OAAAyD,EAAAzD,OAAAsQ,EACAjlG,KAAA40F,QAAAwD,EAAAxD,QAAAqQ,EACAjlG,KAAAg1F,WAAAoD,EAAApD,WACAh1F,KAAAkhF,KAAAkX,EAAAlX,KACAlhF,KAAAk5F,gBAAAd,EAAAc,gBACAl5F,KAAAs4F,UAAAF,EAAAE,UACAt4F,KAAA66F,kBAAAzC,EAAAyC,mBAAA,IAAAF,EACA36F,KAAAsnG,cAEA,UAAAlP,EAAA7zE,KAAA,CAiBA,GARAvkB,KAAAi/F,YAAA7G,EAAA6G,YACAj/F,KAAA0zF,SAAA0E,EAAA1E,SAEA1zF,KAAA0zF,WACA1zF,KAAAs8F,SAAAlE,EAAAkE,SACAt8F,KAAAi8F,gBAAA7D,EAAA6D,kBAGA9W,KAAA76D,QAMA,OALA66D,IACA,EAAAvhF,EAAAoF,MAAA,0BAAA1K,EAAA,MAAA0B,KAAAy9B,WAAA,UAGAz9B,KAAAunG,wBAIAhjF,EAAA2T,GAmIA,SAAAitD,GAAA5gE,KACAA,EAAA2T,QACAA,EAAAugE,UACAA,IAEA,IAAA+O,EAAAC,GA5CA,SAAAtiB,GACA,IAAA/lC,EAAA+lC,EAAAzxD,UAAA,GACA,kBAAAxvB,EAAAuqB,YAAA2wB,EAAA,gBAAAx7C,EAAA0L,eAAA8vC,IA4CAsoD,CAAAviB,IAAAwiB,EAAAxiB,GAEAqiB,EADA/O,EACA,eAEA,YAxCA,SAAAtT,GACA,IAAA/lC,EAAA+lC,EAAAzxD,UAAA,GACA,kBAAA9vB,EAAA0L,eAAA8vC,GAwCKwoD,CAAAziB,IArCL,SAAAA,GACA,IAAA/lC,EAAA+lC,EAAAzxD,UAAA,GAEA,QAAA0rB,EAAA,SAAAA,EAAA,GACA,SAGA,SAAAA,EAAA,QAAAA,EAAA,GACA,SAGA,SAgCKyoD,CAAA1iB,IA7BL,SAAAA,GACA,MAAA/lC,EAAA+lC,EAAAzxD,UAAA,GAEA,GAAA0rB,EAAA,OAAAA,EAAA,OAAAA,EAAA,MACA,SAGA,SA4BK0oD,CAAA3iB,KASL,EAAAvhF,EAAAoF,MAAA,qEACAw+F,EAAAjjF,EACAkjF,EAAAvvE,GAVAugE,GACA+O,EAAA,eACAC,EAAA,kBAEAD,EAAA,YAAAjjF,EAAA,kBACAkjF,EAAA,UAVAD,EADA/O,EACA,eAEA,YAAAl0E,EAAA,kBARAijF,EADA/O,EACA,eAEA,WAsBA,OAAA+O,EAAAC,GA1KAM,CAAA5iB,EAAAiT,GAEA7zE,IAAAvkB,KAAAukB,MAAA2T,IAAAl4B,KAAAk4B,UACA,EAAAt0B,EAAA6H,MAAA,qDAA6EzL,KAAAukB,QAAavkB,KAAAk4B,sBAA2B3T,KAAQ2T,MAG7H,IACA,IAAApzB,EAEA,OAAAyf,GACA,eACA,EAAA3gB,EAAA6H,MAAA,iBAAAnN,EAAA,6BAEA,YACA,mBACA0B,KAAAgoG,SAAA,gBACA,IAAAC,EAAA,WAAA/vE,GAAA,kBAAAA,EAAA,IAAAgwE,EAAA/iB,EAAAiT,GAAA,IAAA+P,EAAA7pG,EAAA6mF,EAAAiT,GACAoN,EAAApN,GACAtzF,EAAA9E,KAAAooG,QAAA9pG,EAAA2pG,EAAA7P,GACA,MAEA,eACA,eACA,mBACAp4F,KAAAgoG,SAAA,gBACAljG,EAAA9E,KAAAqoG,eAAA/pG,EAAA6mF,EAAAiT,GAEAp4F,KAAAsoG,aACA9C,EAAApN,GACA7zE,EAAA,YAGA,MAEA,QACA,UAAA3gB,EAAAuP,oBAA8CoR,uBAEzC,MAAAxkB,GAGL,OAFA,EAAA6D,EAAAoF,MAAAjJ,QACAC,KAAAunG,uBAIAvnG,KAAA8E,OACA9E,KAAA4wF,SAAAE,EAAAvsE,EAAA2T,GACAl4B,KAAAg1F,WAAAoD,EAAApD,WACAh1F,KAAAk8F,OAAA9D,EAAA8D,OACAl8F,KAAAo8F,aAAAhE,EAAAgE,aACAp8F,KAAAs4F,UAAAF,EAAAE,UACAt4F,KAAA00C,SAAA0jD,EAAAqC,aACAz6F,KAAAuoG,QAAAnQ,EAAAmQ,YA5EA,CACA,IAAA1M,EAAA,EAAwBA,EAAA,IAAgBA,IACxC77F,KAAAsnG,WAAAzL,GAAA77F,KAAA+4F,YAAA8C,IAAAzD,EAAAc,gBAAA2C,GAGA77F,KAAA4wF,SAAAhtF,EAAAgQ,SAAAsH,OA0EA,IACAstF,EAMA,SAAAC,EAAAj+E,EAAA/F,GACA,OAAA+F,GAAA,GAAA/F,EAQA,SAAAikF,EAAAl+E,EAAA/F,GACA,IAAAvhB,GAAAsnB,GAAA,GAAA/F,EACA,aAAAvhB,IAAA,MAAAA,EAOA,SAAAylG,EAAAzlG,GACA,OAAAsM,OAAAC,aAAAvM,GAAA,UAAAA,GAGA,SAAA0lG,EAAA1lG,GAOA,OANAA,EAAA,MACAA,EAAA,MACKA,GAAA,QACLA,GAAA,OAGAsM,OAAAC,aAAAvM,GAAA,UAAAA,GAQA,SAAAykG,EAAAxiB,GACA,MAAA/lC,EAAA+lC,EAAAzxD,UAAA,GACA,kBAAA9vB,EAAA0L,eAAA8vC,GA0EA,SAAAypD,EAAAn0D,EAAA0lD,EAAArB,GAIA,IAHA,IACA5C,EADAmR,KAGAvpG,EAAA,EAAAymB,EAAAkwB,EAAAn0C,OAAyCxC,EAAAymB,EAAQzmB,KAGjD,KAFAo4F,GAAA,EAAA1M,EAAA+Q,oBAAA9lD,EAAA32C,GAAAq8F,MAGAkN,EAAAvpG,GAAAo4F,GAIA,QAAA0F,KAAA9C,GAGA,KAFA5C,GAAA,EAAA1M,EAAA+Q,oBAAAzB,EAAA8C,GAAAzB,MAGAkN,GAAAzL,GAAA1F,GAIA,OAAAmR,EAGA,SAAAwB,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAzqG,OAAA6E,OAAA,MACAgkG,KACA6B,EAAA,EACAC,EAAApE,EAAAmE,GAAA,GACAE,EAAArE,EAAAmE,GAAA,GAEA,QAAAG,KAAAP,EAAA,CAEA,IAAAQ,EAAAR,EADAO,GAAA,GAGA,GAAAN,EAAAO,GAAA,CAIA,GAAAH,EAAAC,EAAA,CAGA,KAFAF,GAEAnE,EAAAzkG,OAAA,EACA,EAAAqD,EAAAoF,MAAA,8CACA,MAGAogG,EAAApE,EAAAmE,GAAA,GACAE,EAAArE,EAAAmE,GAAA,GAGA,IAAAK,EAAAJ,IAEA,IAAAG,IACAA,EAAAN,GAGAC,EAAAM,GAAAD,EACAjC,EAAAgC,GAAAE,GAGA,OACAlC,aACAyB,kBAAAG,EACAE,6BAqDA,SAAAK,EAAAra,EAAAsa,GACA,IAGA3rG,EAAAymB,EAAAqP,EAAAyH,EAHA7O,EAlDA,SAAA2iE,EAAAsa,GACA,IAAA/6D,KAEA,QAAAktD,KAAAzM,EACAA,EAAAyM,IAAA6N,GAIA/6D,EAAArtC,MACAkoG,aAAA,EAAA3N,EACA0N,QAAAna,EAAAyM,KAIA,IAAAltD,EAAApuC,QACAouC,EAAArtC,MACAkoG,aAAA,EACAD,QAAA,IAIA56D,EAAA5qB,KAAA,SAAAX,EAAAV,GACA,OAAAU,EAAAomF,aAAA9mF,EAAA8mF,eAKA,IAHA,IAAA/8E,KACAlsB,EAAAouC,EAAApuC,OAEAzB,EAAA,EAAmBA,EAAAyB,GAAY,CAC/B,IAAA0K,EAAA0jC,EAAA7vC,GAAA0qG,aACAG,GAAAh7D,EAAA7vC,GAAAyqG,WACAzqG,EAGA,IAFA,IAAA4pB,EAAAzd,EAEAnM,EAAAyB,GAAAmoB,EAAA,IAAAimB,EAAA7vC,GAAA0qG,eACAG,EAAAroG,KAAAqtC,EAAA7vC,GAAAyqG,WAEAzqG,EAEA,SAHA4pB,KAQA+D,EAAAnrB,MAAA2J,EAAAyd,EAAAihF,IAGA,OAAAl9E,EAIAm9E,CAAAxa,EAAAsa,GACA7C,EAAAp6E,IAAAlsB,OAAA,gBACAo7F,EAAA,OAAAgN,EAAA9B,GAAA,YAAAjjG,EAAAwO,UAAA,IAAAy0F,GAGA,IAAA9oG,EAAA0uB,EAAAlsB,OAAA,EAA+BxC,GAAA,KAC/B0uB,EAAA1uB,GAAA,aADuCA,GAMvC,IAAA8rG,EAAA9rG,EAAA,EAEA0uB,EAAA1uB,GAAA,kBAAA0uB,EAAA1uB,GAAA,KACA0uB,EAAA1uB,GAAA,UAGA,IASA2uB,EAAAzhB,EAAAyd,EAAAimB,EATAm7D,EAAAr9E,EAAA1uB,GAAA,aACAgsG,EAAAF,EAAAC,EACA/C,EAAAjB,EAAAM,gBAAA2D,EAAA,GACAC,EAAA,GACAC,EAAA,GACAC,EAAA,GACAC,EAAA,GACAC,EAAA,GACAC,EAAA,EAGA,IAAAtsG,EAAA,EAAAymB,EAAAqlF,EAA+B9rG,EAAAymB,EAAQzmB,IAAA,CAEvCkN,GADAyhB,EAAAD,EAAA1uB,IACA,GACA2qB,EAAAgE,EAAA,GACAs9E,GAAArB,EAAA19F,GACAg/F,GAAAtB,EAAAjgF,GAEA,IAAA4hF,GAAA,EAEA,IAAAz2E,EAAA,EAAAyH,GAHAqT,EAAAjiB,EAAA,IAGAnsB,OAAoCszB,EAAAyH,IAAQzH,EAC5C,GAAA8a,EAAA9a,KAAA8a,EAAA9a,EAAA,MACAy2E,GAAA,EACA,MAIA,GAAAA,EASO,CAEPJ,GAAAvB,EADAh6D,EAAA,GACA1jC,EAAA,OACAk/F,GAAAxB,EAAA,OAZA,CACA,IAAAp6E,EAAA,GAAAw7E,EAAAhsG,GAAA,EAAAssG,EAKA,IAJAA,GAAA3hF,EAAAzd,EAAA,EACAi/F,GAAAvB,EAAA,GACAwB,GAAAxB,EAAAp6E,GAEAsF,EAAA,EAAAyH,EAAAqT,EAAApuC,OAAsCszB,EAAAyH,IAAQzH,EAC9Cu2E,GAAAzB,EAAAh6D,EAAA9a,KASAi2E,EAAA,IACAG,GAAA,KACAD,GAAA,KACAE,GAAA,MACAC,GAAA,QAGA,IAAAI,EAAA,OAAA5B,EAAA,EAAAoB,GAAApB,EAAA5B,EAAAr6E,OAAAi8E,EAAA5B,EAAAzlE,OAAAqnE,EAAA5B,EAAAN,YAAAwD,EAAA,OAAAD,EAAAE,EAAAC,EAAAC,EACAI,EAAA,GACAC,EAAA,GAEA,GAAA5D,EAAA,GAIA,IAHAlL,GAAA,aAAA/3F,EAAAwO,UAAA,IAAAy0F,EAAA,EAAA0D,EAAAhqG,QACAiqG,EAAA,GAEAzsG,EAAA,EAAAymB,EAAAiI,EAAAlsB,OAAqCxC,EAAAymB,EAAQzmB,IAAA,CAE7CkN,GADAyhB,EAAAD,EAAA1uB,IACA,GAEA,IAAAoP,GADAwhC,EAAAjiB,EAAA,IACA,GAEA,IAAAmH,EAAA,EAAAyH,EAAAqT,EAAApuC,OAAsCszB,EAAAyH,IAAQzH,EAC9C8a,EAAA9a,KAAA8a,EAAA9a,EAAA,OACAnL,EAAAgE,EAAA,GAAAmH,EAAA,EACA22E,IAAA,EAAA5mG,EAAAwO,UAAAnH,IAAA,EAAArH,EAAAwO,UAAAsW,IAAA,EAAA9kB,EAAAwO,UAAAjF,GACAlC,EAAAyd,EAAA,EACAvb,EAAAwhC,EAAA9a,IAIA22E,IAAA,EAAA5mG,EAAAwO,UAAAnH,IAAA,EAAArH,EAAAwO,UAAAsa,EAAA,OAAA9oB,EAAAwO,UAAAjF,GAGAs9F,EAAA,cAAA7mG,EAAAwO,UAAAo4F,EAAAjqG,OAAA,kBAAAqD,EAAAwO,UAAAo4F,EAAAjqG,OAAA,IAGA,OAAAo7F,EAAA,MAAAgN,EAAA4B,EAAAhqG,OAAA,GAAAgqG,EAAAE,EAAAD,EA+BA,SAAAE,EAAAtS,EAAAuS,EAAAC,GACAA,MACAC,WAAA,EACAC,KAAA,EACAC,KAAA,EACApW,OAAA,EACAC,QAAA,GAEA,IAAAoW,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,KACAC,EAAA,EAEA,GAAAV,EAAA,CACA,QAAAx9F,KAAAw9F,EAAA,EAGAS,GAFAj+F,GAAA,KAEAi+F,KACAA,EAAAj+F,GAGAk+F,EAAAl+F,IACAk+F,EAAAl+F,GAGA,IAAAkd,GAAA,EAAAo/D,EAAA6hB,oBAAAn+F,GAEA,GAAAkd,EAAA,GACA2gF,GAAA,GAAA3gF,OACS,GAAAA,EAAA,GACT4gF,GAAA,GAAA5gF,EAAA,QACS,GAAAA,EAAA,GACT6gF,GAAA,GAAA7gF,EAAA,OACS,MAAAA,EAAA,KAGT,UAAAzmB,EAAAuP,YAAA,6DAFAg4F,GAAA,GAAA9gF,EAAA,IAMAghF,EAAA,QACAA,EAAA,YAGAD,EAAA,EACAC,EAAA,IAGA,IAAAnqB,EAAAkX,EAAAlX,OAAA,SACA2pB,EAAAD,EAAAC,YAAA,GAAAzS,EAAApD,YAAApxF,EAAA2Q,sBAAA,GACAwqD,EAAAq5B,EAAAmT,aAAA,EAAAV,EAAA5F,EACAuG,EAAAZ,EAAAjW,QAAAvrF,KAAA4tF,MAAAj4B,GAAAq5B,EAAAzD,QAAAzT,EAAA,KACAuqB,EAAAb,EAAAhW,SAAAxrF,KAAA4tF,MAAAj4B,GAAAq5B,EAAAxD,SAAA1T,EAAA,KAEAuqB,EAAA,GAAArT,EAAAxD,QAAA,GAAA1T,EAAA,OACAuqB,MAGA,IAAAC,EAAAd,EAAAE,MAAAU,EACAG,GAAAf,EAAAG,OAAAU,EACA,4DAAAj8F,OAAAC,aAAA2oF,EAAAyG,WAAA,uBAAAj7F,EAAAwO,UAAA44F,IAAA,EAAApnG,EAAAwO,UAAA64F,IAAA,EAAArnG,EAAAwO,UAAA84F,IAAA,EAAAtnG,EAAAwO,UAAA+4F,GAAA,OAAAxC,EAAAvQ,EAAA4G,YAAA,KAAA2J,EAAAyC,GAAAhT,EAAAoD,WAAAmN,EAAA0C,GAAAjT,EAAAqD,UAAAkN,EAAA6C,GAAA7C,EAAA8C,GAAA,MAAA9C,EAAA+C,GAAA/C,EAAAgD,GAAA,mBAAAhD,EAAAvQ,EAAA0G,SAAA6J,EAAAvQ,EAAA2G,WAAA4J,EAAA,GAAAA,EAAAyC,GAAAhT,EAAAoD,WAAA,MAGA,SAAAoQ,EAAAxT,GACA,IAAAyT,EAAAziG,KAAA8gB,MAAA,MAAAkuE,EAAA4G,aACA,mBAAAp7F,EAAAwO,UAAAy5F,GAAA,cAAAjoG,EAAAwO,UAAAgmF,EAAAyG,YAAA,mCAGA,SAAAiN,EAAAxtG,EAAAytG,GACAA,IACAA,WAGA,IAEAhuG,EAAAymB,EAAAqP,EAAAyH,EAAAzpB,EAFAm6F,GAAAD,EAAA,0BAAAA,EAAA,OAAAztG,EAAAytG,EAAA,iBAAAA,EAAA,kBAAAA,EAAA,OAAAztG,EAAAytG,EAAA,sBAAAA,EAAA,UAAAA,EAAA,iBAAAA,EAAA,iBAAAA,EAAA,kBACAE,KAGA,IAAAluG,EAAA,EAAAymB,EAAAwnF,EAAAzrG,OAAoCxC,EAAAymB,EAAQzmB,IAAA,CAE5C,IAAAmuG,KAEA,IAAAr4E,EAAA,EAAAyH,GAHAzpB,EAAAk6F,EAAA,GAAAhuG,IAAAiuG,EAAAjuG,IAGAwC,OAAkCszB,EAAAyH,EAAQzH,IAC1Cq4E,EAAA5qG,KAAAqnG,EAAA92F,EAAAS,WAAAuhB,KAGAo4E,EAAA3qG,KAAA4qG,EAAArmG,KAAA,KAGA,IAAAu0B,GAAA4xE,EAAAC,GACAE,GAAA,aACAC,GAAA,cACAC,GAAA,cACAC,EAAAN,EAAAzrG,OAAA4rG,EAAA5rG,OACAgsG,EAAA,OAAA5D,EAAA2D,GAAA3D,EAAA,GAAA2D,EAAA,GACAE,EAAA,EAEA,IAAAzuG,EAAA,EAAAymB,EAAA2nF,EAAA5rG,OAAsCxC,EAAAymB,EAAQzmB,IAAA,CAC9C,IAAA0uG,EAAAryE,EAAAr8B,GAEA,IAAA81B,EAAA,EAAAyH,EAAAmxE,EAAAlsG,OAAmCszB,EAAAyH,EAAQzH,IAAA,CAC3ChiB,EAAA46F,EAAA54E,GAEA04E,GADAJ,EAAApuG,GAAAquG,EAAAruG,GAAAsuG,EAAAtuG,GAAA4qG,EAAA90E,GAAA80E,EAAA92F,EAAAtR,QAAAooG,EAAA6D,GAEAA,GAAA36F,EAAAtR,QAKA,OADAgsG,GAAAP,EAAAnmG,KAAA,IAAAomG,EAAApmG,KAAA,IA4tDA,OArrEA4qF,EAAAC,WACA8X,EAAA,EACA,WACA,OAAAh5F,OAAAg5F,OA0dA/X,EAAAvxF,WACAZ,KAAA,KACAmjB,KAAA,KACAumF,SAAA,KACAtzD,SAAA,KACAzmC,iBAAA,EAEAkxF,eACA,IAAAA,EAAA2F,EAAA4H,oBAAAppG,OAAAtD,KAAA4kG,GAEA,SAAAhhG,EAAAuO,QAAAnS,KAAA,WAAAm/F,IAGAO,WAAA,WACA,IAAA56F,KAEA,QAAA/G,KAAAiC,KACAA,KAAAb,eAAApB,KACA+G,EAAA/G,GAAAiC,KAAAjC,IAIA,OAAA+G,GAEAyiG,qBAAA,WAEA,IAAA1L,EAAA1F,EADAn2F,KAAAonG,aAAA,EAEA,IAAA9oG,EAAA0B,KAAA1B,KACAimB,EAAAvkB,KAAAukB,KACA2T,EAAAl4B,KAAAk4B,QACA,IAAA22D,EAAAvwF,EAAAwT,QAAA,aAAAA,QAAA,UACA,IAAA66F,GAAA,EAAAjjB,EAAA0T,iBACAwP,GAAA,EAAAljB,EAAAmjB,oBACAC,IAAAH,EAAA9d,OAAA+d,EAAA/d,KAAA8d,EAAAC,EAAA/d,KAOA,GANAA,EAAA8d,EAAA9d,IAAA+d,EAAA/d,MACA7uF,KAAA45B,MAAA,IAAAi1D,EAAAoO,OAAA,UACAj9F,KAAA65B,QAAA,IAAAg1D,EAAAoO,OAAA,mBAAApO,EAAAoO,OAAA,YACAj9F,KAAA+0C,OAAA,IAAAz2C,EAAA2+F,OAAA,UACAj9F,KAAA+sG,UAAAtuG,OAAAwoB,KAAAjnB,KAAAk8F,QAAA37F,OAAA,EAEAusG,GAAA,iBAAAvoF,GAAAvkB,KAAAi/F,YAAAlgE,WAAA,cACA,MAAAiuE,GAAA,EAAAtjB,EAAAujB,+BACA5mB,KAEA,IAAAwV,KAAAmR,EACA3mB,GAAAwV,GAAAmR,EAAAnR,GAGA,mBAAA3lE,KAAA53B,GAAA,CACA,IAAA4uG,GAAA,EAAAxjB,EAAAyjB,wCAEA,IAAAtR,KAAAqR,EACA7mB,GAAAwV,GAAAqR,EAAArR,QAES,cAAA3lE,KAAA53B,GAAA,CACT,MAAA8uG,GAAA,EAAA1jB,EAAA2jB,qCAEA,IAAAxR,KAAAuR,EACA/mB,GAAAwV,GAAAuR,EAAAvR,GAIA77F,KAAAs4F,qBAAAiD,GAGAv7F,KAAAs4F,UAAA1rF,QAAA,SAAAivF,EAAAyR,GACAjnB,GAAAwV,GAAAyR,IAIAttG,KAAAsnG,WAAAjhB,EACArmF,KAAAs4F,UAAA,IAAAqC,EAAAtU,QACO,aAAAnwD,KAAA24D,GACP7uF,KAAAsnG,WAAAuB,EAAArf,EAAAoQ,mBAAA,EAAA/P,EAAAwQ,oBAAAr6F,KAAA+4F,kBACO,eAAA7iE,KAAA24D,GACP,aAAA34D,KAAA53B,KACA,EAAAsF,EAAAoF,MAAA,8DAGAhJ,KAAAsnG,WAAAuB,EAAArf,EAAAqQ,sBAAA,EAAAhQ,EAAA0jB,4BAAAvtG,KAAA+4F,kBACO,GAAA+T,EACP9sG,KAAAsnG,WAAAuB,EAAA7oG,KAAAk5F,iBAAA,EAAArP,EAAAwQ,oBAAAr6F,KAAA+4F,iBACO,CACP,MAAAqB,GAAA,EAAAvQ,EAAAwQ,oBACAhU,KAcA,GAbArmF,KAAAs4F,UAAA1rF,QAAA,CAAAivF,EAAAyR,KACA,IAAAttG,KAAAy4F,UAAA,CACA,IAAA0B,EAAAn6F,KAAA+4F,YAAA8C,IAAA77F,KAAAk5F,gBAAA2C,IAGA,KAFA1F,GAAA,EAAA1M,EAAA+Q,oBAAAL,EAAAC,MAGAkT,EAAAnX,GAIA9P,GAAAwV,GAAAyR,IAGAttG,KAAAy4F,WAAAz4F,KAAAs4F,qBAAAiD,GACA,WAAArlE,KAAA53B,GAAA,CACA,MAAA0uG,GAAA,EAAAtjB,EAAAujB,+BAEA,IAAApR,KAAAmR,EACA3mB,GAAAwV,GAAAmR,EAAAnR,GAKA77F,KAAAsnG,WAAAjhB,EAGArmF,KAAAy9B,WAAAoxD,EAAA1vD,MAAA,QACAn/B,KAAA4wF,SAAAE,EAAAvsE,EAAA2T,IAEAmwE,eAAA,SAAA/pG,EAAAmjB,EAAA22E,GACA,MAAAoV,GAAA,mGAEA,SAAAC,EAAAtoB,EAAA0hB,GACA,MAAAV,EAAA1nG,OAAA6E,OAAA,MACA6iG,EAAA,aACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UAEA,QAAApoG,EAAA,EAAuBA,EAAA8oG,EAAe9oG,IAAA,CACtC,MAAA2wC,EAAAg/D,EAAAjsF,GAEA+rF,EAAA7gF,SAAA+hB,EAAAw4D,OAIA,IAAAx4D,EAAAnuC,SAIA4lG,EAAAz3D,EAAAw4D,KAAAx4D,IAGA,OAAAy3D,EAGA,SAAAuH,EAAAvoB,GACA,IAAA+hB,GAAA,EAAAtjG,EAAA0L,eAAA61E,EAAAz/D,SAAA,IACAshF,EAAA7hB,EAAAp4C,aAAA,EACAxe,EAAA42D,EAAAp4C,aAAA,EACAxsC,EAAA4kF,EAAAp4C,aAAA,EACA4gE,EAAAxoB,EAAAn2E,IACAm2E,EAAAn2E,IAAAm2E,EAAAl6E,MAAAk6E,EAAAl6E,MAAA,EACAk6E,EAAApwD,KAAAxG,GACA,IAAAzpB,EAAAqgF,EAAAz/D,SAAAnlB,GAQA,OAPA4kF,EAAAn2E,IAAA2+F,EAEA,SAAAzG,IACApiG,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAA,EAAA,MACAA,EAAA,UAIAoiG,MACAF,WACAzmG,SACAguB,SACAzpB,QAIA,SAAA8oG,EAAAC,GACA,OACAjsG,SAAA,EAAAgC,EAAA0L,eAAAu+F,EAAAnoF,SAAA,IACAmhF,UAAAgH,EAAAlmE,YACA6+D,YAAAqH,EAAAlmE,YACAmmE,cAAAD,EAAAlmE,YACA8+D,WAAAoH,EAAAlmE,aA8TA,SAAAomE,EAAA3mG,EAAA4mG,EAAAC,EAAAt2E,EAAAu2E,EAAAC,GACA,IAAAC,GACA7tG,OAAA,EACA8tG,mBAAA,GAGA,GAAAJ,EAAAD,GAAA,GACA,OAAAI,EAGA,IA18BAzjG,EAAA+F,EAAAxN,EA08BAorG,EAAAlnG,EAAAyI,SAAAm+F,EAAAC,GACAM,EAAA7F,EAAA4F,EAAA,GAAAA,EAAA,IAEA,GAAAC,EAAA,EAKA,OAl9BArrG,EA88BAqrG,GAAA,GA98BA5jG,EA+8BA2jG,IA/8BA59F,EA+8BA,GA98BA,GAAAxN,EACAyH,EAAA+F,GAAAxN,IAAA,EA88BAy0B,EAAAvoB,IAAAk/F,EAAAJ,GACAE,EAAA7tG,OAAA+tG,EAAA/tG,OACA6tG,EAGA,IAAArwG,EACA81B,EAAA,GACA26E,EAAA,EAEA,IAAAzwG,EAAA,EAAmBA,EAAAwwG,EAAmBxwG,IAAA,CAEtCywG,GADAF,EAAAz6E,IAAA,EAAAy6E,EAAAz6E,EAAA,IACA,EACAA,GAAA,EAGA,IAAA46E,EAAA56E,EACA66E,EAAAJ,EAAAz6E,IAAA,EAAAy6E,EAAAz6E,EAAA,GACAu6E,EAAAC,mBAAAK,EAEA,IAAAC,EADA96E,GAAA,EAAA66E,EAEAE,EAAA,EAEA,IAAA7wG,EAAA,EAAmBA,EAAAywG,EAAgBzwG,IAAA,CACnC,IAAAoiF,EAAAmuB,EAAAz6E,KAEA,IAAAssD,IACAmuB,EAAAz6E,EAAA,MAAAssD,GAGA,IAAA0uB,EAAA,EAEA,EAAA1uB,EACA0uB,EAAA,EACW,GAAA1uB,IACX0uB,EAAA,GAGA,IAAAC,EAAA,EAEA,EAAA3uB,EACA2uB,EAAA,EACW,GAAA3uB,IACX2uB,EAAA,GAGA,MAAAC,EAAAF,EAAAC,EAGA,GAFAF,GAAAG,EAEA,EAAA5uB,EAAA,CACA,IAAA6uB,EAAAV,EAAAz6E,KACA91B,GAAAixG,EACAJ,GAAAI,EAAAD,GAIA,OAAAH,EACA,OAAAR,EAGA,IAAAa,EAAAp7E,EAAA+6E,EAEA,OAAAK,EAAAX,EAAA/tG,OACA6tG,GAGAD,GAAAO,EAAA,GACA/2E,EAAAvoB,IAAAk/F,EAAAz+F,SAAA,EAAA4+F,GAAAP,GACAv2E,EAAAvoB,KAAA,KAAA8+F,EAAAO,GACA92E,EAAAvoB,IAAAk/F,EAAAz+F,SAAA8+F,EAAAM,GAAAf,EAAAO,EAAA,GACAQ,GAAAP,EAEAJ,EAAA/tG,OAAA0uG,EAAA,IACAA,IAAA,MAGAb,EAAA7tG,OAAA0uG,EACAb,GAGAE,EAAA/tG,OAAA0uG,EAAA,GACAA,IAAA,KACAt3E,EAAAvoB,IAAAk/F,EAAAz+F,SAAA,EAAAo/F,GAAAf,GACAE,EAAA7tG,OAAA0uG,EACAb,IAGAz2E,EAAAvoB,IAAAk/F,EAAAJ,GACAE,EAAA7tG,OAAA+tG,EAAA/tG,OACA6tG,GAiOA,SAAAc,EAAA3C,GACA,IAAAthG,GAAAwW,EAAAxW,MAAAwW,EAAAxW,MAAA,GAAAshG,EAAAh+E,OACA9M,EAAAzS,IAAA/D,EACA,IAAAmvB,UACA75B,EAAAgsG,EAAAhsG,OACAmoB,EAAAzd,EAAA1K,EAIA,OAHAkhB,EAAAkmB,aAGApnC,EAFA,EAGA,OAAA65B,EAGA,IAIAr8B,EAAAymB,EAJA2qF,EAAA1tF,EAAAkmB,YACAynE,EAAA3tF,EAAAkmB,YACA0nE,KAIA,IAAAtxG,EAAA,EAAmBA,EAAAoxG,GAAA1tF,EAAAzS,IAHnB,IAGmB0Z,EAAwD3qB,IAAA,CAC3E,IAAAgF,GACAusG,SAAA7tF,EAAAkmB,YACA+M,SAAAjzB,EAAAkmB,YACA4nE,SAAA9tF,EAAAkmB,YACArpC,KAAAmjB,EAAAkmB,YACApnC,OAAAkhB,EAAAkmB,YACApZ,OAAA9M,EAAAkmB,cAGA,IAAA5kC,EAAAusG,UAAA,IAAAvsG,EAAA2xC,UAAA,IAAA3xC,EAAAwsG,UAAA,IAAAxsG,EAAAusG,UAAA,IAAAvsG,EAAA2xC,UAAA,OAAA3xC,EAAAwsG,WACAF,EAAA/tG,KAAAyB,GAIA,IAAAhF,EAAA,EAAAymB,EAAA6qF,EAAA9uG,OAAwCxC,EAAAymB,EAAQzmB,IAAA,CAChD,IAAAyxG,EAAAH,EAAAtxG,GAEA,KAAAyxG,EAAAjvG,QAAA,IAIA,IAAAyO,EAAA/D,EAAAmkG,EAAAI,EAAAjhF,OAEA,KAAAvf,EAAAwgG,EAAAjvG,OAAAmoB,GAAA,CAIAjH,EAAAzS,MACA,IAAAygG,EAAAD,EAAAlxG,KAEA,GAAAkxG,EAAA96D,SAAA,CAGA,IAFA,IAAA7iC,EAAA,GAEAgiB,EAAA,EAAAyH,EAAAk0E,EAAAjvG,OAA+CszB,EAAAyH,EAAQzH,GAAA,EACvDhiB,GAAArC,OAAAC,aAAAgS,EAAAkmB,aAGAvN,EAAA,GAAAq1E,GAAA59F,OAEAuoB,EAAA,GAAAq1E,IAAA,EAAA7rG,EAAA0L,eAAAmS,EAAAiE,SAAA8pF,EAAAjvG,WAIA,OAAA65B,EAGA,IAAAs1E,GAAA,6YAEA,SAAAC,EAAAjhE,EAAAkhE,GAkBA,IAjBA,IAEA/7E,EACA/0B,EACA4jB,EACAmtF,EACAj+D,EANA9sC,EAAA4pC,EAAA5pC,KACA/G,EAAA,EAMA+xG,EAAA,EACAC,EAAA,EACAvN,KACAwN,KACAC,KACAC,EAAAN,EAAAM,4BACAC,GAAA,EACAC,EAAA,EACAC,EAAA,EAEA7rF,EAAA1f,EAAAvE,OAAkCxC,EAAAymB,GAAQ,CAC1C,IAAA8rF,EAAAxrG,EAAA/G,KAEA,QAAAuyG,EAGA,GAFAxxG,EAAAgG,EAAA/G,KAEAoyG,GAAAE,EACAtyG,GAAAe,OAEA,IAAA+0B,EAAA,EAAyBA,EAAA/0B,EAAO+0B,IAChC2uE,EAAAlhG,KAAAwD,EAAA/G,WAGW,QAAAuyG,EAGX,GAFAxxG,EAAAgG,EAAA/G,KAEAoyG,GAAAE,EACAtyG,GAAA,EAAAe,OAEA,IAAA+0B,EAAA,EAAyBA,EAAA/0B,EAAO+0B,IAChCnR,EAAA5d,EAAA/G,KACAykG,EAAAlhG,KAAAohB,GAAA,EAAA5d,EAAA/G,WAGW,aAAAuyG,GAGX,GAFAxxG,EAAAwxG,EAAA,MAEAH,GAAAE,EACAtyG,GAAAe,OAEA,IAAA+0B,EAAA,EAAyBA,EAAA/0B,EAAO+0B,IAChC2uE,EAAAlhG,KAAAwD,EAAA/G,WAGW,aAAAuyG,GAGX,GAFAxxG,EAAAwxG,EAAA,MAEAH,GAAAE,EACAtyG,GAAA,EAAAe,OAEA,IAAA+0B,EAAA,EAAyBA,EAAA/0B,EAAO+0B,IAChCnR,EAAA5d,EAAA/G,KACAykG,EAAAlhG,KAAAohB,GAAA,EAAA5d,EAAA/G,WAGW,QAAAuyG,GAAAJ,EAuCA,QAAAI,GAAAJ,GAaA,QAAAI,EACX,GAAAH,EACAA,GAAA,EACAL,EAAA/xG,MACa,CAGb,KAFA6zC,EAAAo+D,EAAA/xE,OAKA,OAFA,EAAAr6B,EAAAoF,MAAA,2BACA4mG,EAAAzB,YAAA,GAIA0B,EAAAI,EAAAhyE,MACAn5B,EAAA8sC,EAAA9sC,KACA/G,EAAA6zC,EAAA7zC,EACA6xG,EAAAW,qBAAAV,GAAArN,EAAAjiG,OAAAqxC,EAAA4+D,cAEW,SAAAF,GACXH,GAAAE,MACA,EAAAzsG,EAAAoF,MAAA,gCACAknG,GAAA,GAGAC,GAAA,EACAJ,EAAAhyG,OACW,QAAAuyG,IACXF,OACW,QAAAE,EACXD,EAAAD,OACW,QAAAE,EACXD,IAAAD,IACAC,EAAA,KAGAD,OACW,QAAAE,IACXH,IAAAE,EAAA,CACA,IAAA9hF,EAAAi0E,IAAAjiG,OAAA,GAEAguB,EAAA,IACAxwB,GAAAwwB,EAAA,SArDA4hF,GAAAE,MACA,EAAAzsG,EAAAoF,MAAA,gCACAknG,GAAA,GAGAC,GAAA,EACAJ,EAAAhyG,EACA8xG,EAAArN,EAAAvkE,MACA2xE,EAAAa,iBAAAZ,IACA/qG,OACA/G,UAjDA,IAAAoyG,IAAAE,EAGA,GAFAR,EAAArN,IAAAjiG,OAAA,GAEA00B,MAAA46E,IACA,EAAAjsG,EAAA6H,MAAA,iDAIA,GAFAmkG,EAAAc,cAAAb,IAAA,EAEAA,KAAAD,EAAAW,qBAAA,CACA,MAAAI,EAAAnO,EAAAjiG,OAAAqvG,EAAAW,qBAAAV,GAEA,GAAAc,EAAA,EAGA,OAFA,EAAA/sG,EAAAoF,MAAA,gDACA4mG,EAAAzB,YAAA,GAIA3L,EAAAjiG,OAAAowG,OACiB,GAAAd,KAAAD,EAAAa,mBAAAR,EAAAtjF,SAAAkjF,GAAA,CASjB,GARAG,EAAA1uG,MACAwD,OACA/G,IACAyyG,SAAAhO,EAAAjiG,OAAA,IAEA0vG,EAAA3uG,KAAAuuG,KACAj+D,EAAAg+D,EAAAa,iBAAAZ,IAKA,OAFA,EAAAjsG,EAAAoF,MAAA,uCACA4mG,EAAAzB,YAAA,GAIArpG,EAAA8sC,EAAA9sC,KACA/G,EAAA6zC,EAAA7zC,EA+DA,IAAAoyG,IAAAE,EAAA,CACA,IAAAO,EAAA,EAkBA,IAhBAN,GAAA,IACAM,EAAAlB,EAAAY,GACaA,GAAA,KAAAA,GAAA,IACbM,GAAA,EACaN,GAAA,MACbM,GAAA,GAGAN,GAAA,KAAAA,GAAA,MACAxxG,EAAA0jG,EAAAvkE,MAEAhJ,MAAAn2B,KACA8xG,EAAA,GAAA9xG,IAIA8xG,EAAA,GAAApO,EAAAjiG,OAAA,GACAiiG,EAAAvkE,MACA2yE,IAGA,KAAAA,EAAA,GACApO,EAAAlhG,KAAAuvG,KACAD,KAKAhB,EAAAM,8BACA,IAAA9/E,GAAAtrB,GAEA/G,EAAA+G,EAAAvE,QACA6vB,EAAA9uB,KAAA,IAAAyD,WAAAhH,EAAA+G,EAAAvE,SAGAwvG,EAAAD,KACA,EAAAlsG,EAAAoF,MAAA,6CACAonB,EAAA9uB,KAAA,IAAAyD,YAAA,UAgCA,SAAA2pC,EAAAte,GACA,GAAAA,EAAA7vB,OAAA,GACA,IACAszB,EAAAyH,EADAsS,EAAA,EAGA,IAAA/Z,EAAA,EAAAyH,EAAAlL,EAAA7vB,OAA0CszB,EAAAyH,EAAQzH,IAClD+Z,GAAAxd,EAAAyD,GAAAtzB,OAGAqtC,IAAA,KACA,IAAA3pB,EAAA,IAAAlf,WAAA6oC,GACA5+B,EAAA,EAEA,IAAA6kB,EAAA,EAAAyH,EAAAlL,EAAA7vB,OAA0CszB,EAAAyH,EAAQzH,IAClD5P,EAAA7U,IAAAghB,EAAAyD,GAAA7kB,GACAA,GAAAohB,EAAAyD,GAAAtzB,OAGAmuC,EAAA5pC,KAAAmf,EACAyqB,EAAAnuC,OAAAqtC,GAhDAkjE,CAAApiE,EAAAte,GAmFA,IAAAgvB,EAAA+mD,EAWA8B,EAAA8I,EATA,GAAApJ,EAHAlmF,EAAA,IAAA0G,EAAAQ,OAAA,IAAA5jB,WAAA0c,EAAAiE,cAGA,CACA,MAAAsrF,EAv8BA,SAAAC,EAAApiB,GACA,MAAAqiB,SACAA,EAAAC,YACAA,GArCA,SAAAF,GACA,MAAAG,GAAA,EAAAxtG,EAAA0L,eAAA2hG,EAAAvrF,SAAA,KACA,EAAA9hB,EAAAyL,QAAA,SAAA+hG,EAAA,uCACA,MAAAC,EAAAJ,EAAAtpE,YACA2pE,EAAAL,EAAAtpE,YACAupE,EAAAD,EAAAlkE,aAAA,EACAokE,KAEA,QAAApzG,EAAA,EAAuBA,EAAAmzG,EAAcnzG,IACrCozG,EAAA7vG,KAAA2vG,EAAAlkE,aAAA,GAGA,MAAAqS,GACAgyD,SACAC,eACAC,eACAJ,WACAC,eAGA,OAAAE,GACA,OACA,OAAAjyD,EAEA,OAIA,OAHAA,EAAAmyD,QAAAN,EAAAlkE,aAAA,EACAqS,EAAAoyD,WAAAP,EAAAlkE,aAAA,EACAqS,EAAAqyD,WAAAR,EAAAlkE,aAAA,EACAqS,EAGA,UAAAx7C,EAAAuP,yDAAiFk+F,MAOxEK,CAAAT,GAET,QAAAlzG,EAAA,EAAuBA,EAAAmzG,EAAcnzG,IAAA,CACrCkzG,EAAAjiG,KAAAiiG,EAAAhmG,OAAA,GAAAkmG,EAAApzG,GACA,MAAA4zG,EAAA/D,EAAAqD,GACAW,EAAAnE,EAAAwD,EAAAU,EAAA9K,WAEA,IAAA+K,EAAA,KACA,UAAAhuG,EAAAuP,YAAA,yDAGA,MAAAo5F,EAAA2C,EAAA0C,EAAA,MAEA,QAAA/9E,EAAA,EAAAyH,EAAAixE,EAAAhsG,OAAgDszB,EAAAyH,EAAQzH,IACxD,QAAAoc,EAAA,EAAAoB,EAAAk7D,EAAA14E,GAAAtzB,OAAqD0vC,EAAAoB,EAAQpB,IAAA,CAC7D,MAAA4hE,EAAAtF,EAAA14E,GAAAoc,GAEA,GAAA4hE,KAAA//F,QAAA,YAAA+8E,EACA,OACAzvC,OAAAuyD,EACAxL,OAAAyL,IAOA,UAAAhuG,EAAAuP,qDAA6E07E,YAw6B7EijB,CAAArwF,EAAAzhB,KAAA1B,MACA8gD,EAAA4xD,EAAA5xD,OACA+mD,EAAA6K,EAAA7K,YAGAA,EAAAsH,EAAAhsF,GADA29B,EAAAwuD,EAAAnsF,IACAolF,WAIA,IAAAkL,GAAA5L,EAAA,QAEA,GAAA4L,EAgBO,CACP,IAAA5L,EAAA,KACA,UAAAviG,EAAAuP,YAAA,sCAGAgzF,EAAA,QACA,EAAAviG,EAAAoF,MAAA,4DACAm9F,EAAA,MACAe,IAAA,OACApiG,KAAA,IAAAC,WAAA,KAIA/E,KAAAsoG,YAAA,MA7BA,CACA,MAAA0J,EAAA5Z,EAAAK,aAAAL,EAAAU,iBAAAv4F,OAAA,KAAA63F,EAAA0C,gBAAAxR,EAAA0R,eAEA,YAAA57C,EAAAx9C,UAAAowG,IAAA7L,EAAA,OAAAA,EAAA,OAAAA,EAAA,OAAAA,EAAA,KAIA,OAHA4K,EAAA,IAAA5oF,EAAAQ,OAAAw9E,EAAA,QAAArhG,MACAmjG,EAAA,IAAAC,EAAA6I,EAAA3Y,GACAoN,EAAApN,GACAp4F,KAAAooG,QAAA9pG,EAAA2pG,EAAA7P,UAGA+N,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,QACAnmG,KAAAsoG,YAAA,EAiBA,IAAAnC,EAAA,KACA,UAAAviG,EAAAuP,YAAA,sCAGAsO,EAAAzS,KAAAyS,EAAAxW,OAAA,GAAAk7F,EAAA,KAAA53E,OACA,IAAA3sB,EAAA6f,EAAAsrB,WACA,MAAA28D,EAAAjoF,EAAAkmB,YACA,IAAAsqE,EAAAvI,EAAA,EACAwI,GAAA,EAEAD,EAAA,QACAC,GAAA,EACAD,EAAAvI,GACA,EAAA9lG,EAAAoF,MAAA,wDAGA,IAAAmpG,EAAA,EACAC,EAAA,EAEAxwG,GAAA,OAAAukG,EAAA,KAAA5lG,QAAA,KACAkhB,EAAAzS,KAAA,EACAyS,EAAAkmB,YAEA,IACAw+D,EAAA,KAAArhG,KAAA,MACAqhG,EAAA,KAAArhG,KAAA,OAGA2c,EAAAzS,KAAA,EACAmjG,EAAA1wF,EAAAkmB,YACAlmB,EAAAzS,KAAA,EACAojG,EAAA3wF,EAAAkmB,aAGAw+D,EAAA,KAAArhG,KAAA,GAAAmtG,GAAA,EACA9L,EAAA,KAAArhG,KAAA,OAAAmtG,EACA,IAAA9D,EAjHA,SAAAkE,EAAAC,EAAAC,EAAAJ,GACA,IAAAvC,GACAa,oBACAC,iBACAH,wBACAL,6BAAA,EACA/B,YAAA,GAeA,GAZAkE,GACA1C,EAAA0C,EAAAzC,GAGA0C,GACA3C,EAAA2C,EAAA1C,GAGAyC,GAlEA,SAAAzC,EAAAuC,GACA,IAAAvC,EAAAM,4BAAA,CAIA,GAAAN,EAAAa,iBAAAlwG,OAAA4xG,EAGA,OAFA,EAAAvuG,EAAAoF,MAAA,iDACA4mG,EAAAzB,YAAA,GAIA,QAAAt6E,EAAA,EAAAyH,EAAAs0E,EAAAc,cAAAnwG,OAA4DszB,EAAAyH,EAAQzH,IAAA,CACpE,GAAAA,EAAAs+E,EAGA,OAFA,EAAAvuG,EAAAoF,MAAA,4BAAA6qB,QACA+7E,EAAAzB,YAAA,GAIA,GAAAyB,EAAAc,cAAA78E,KAAA+7E,EAAAa,iBAAA58E,GAGA,OAFA,EAAAjwB,EAAAoF,MAAA,2BAAA6qB,QACA+7E,EAAAzB,YAAA,KA+CAqE,CAAA5C,EAAAuC,GAGAI,GAAA,EAAAA,EAAAhyG,OAAA,CACA,IAAAkyG,EAAA,IAAA1tG,WAAAwtG,EAAAhyG,OAAA,GACAkyG,EAAArjG,IAAAmjG,EAAAztG,MACAytG,EAAAztG,KAAA2tG,EAGA,OAAA7C,EAAAzB,WAsFAuE,CAAAvM,EAAA,KAAAA,EAAA,KAAAA,EAAA,QAAAgM,GAUA,GARAhE,WACAhI,EAAA,YACAA,EAAA,YACAA,EAAA,SAnzBA,SAAA1kF,EAAA29B,EAAAq9C,EAAAiN,EAAAwI,GACA,GAAA9yD,EAAA,CAQA39B,EAAAzS,KAAAyS,EAAAxW,MAAAwW,EAAAxW,MAAA,GAAAm0C,EAAA7wB,OACA9M,EAAAzS,KAAA,EACAyS,EAAAzS,KAAA,EACAyS,EAAAzS,KAAA,EACAyS,EAAAzS,KAAA,EACAyS,EAAAzS,KAAA,EACAyS,EAAAzS,KAAA,EACAyS,EAAAzS,KAAA,EACAyS,EAAAzS,KAAA,EACAyS,EAAAzS,KAAA,EACAyS,EAAAzS,KAAA,EACAyS,EAAAzS,KAAA,EACAyS,EAAAzS,KAAA,EACAyS,EAAAzS,KAAA,EACA,IAAA2jG,EAAAlxF,EAAAkmB,YAEAgrE,EAAAjJ,KACA,EAAA9lG,EAAA6H,MAAA,qBAAAknG,EAAA,+CAAAjJ,EAAA,KACAiJ,EAAAjJ,EACAtqD,EAAAt6C,KAAA,WAAA6tG,IAAA,EACAvzD,EAAAt6C,KAAA,QAAA6tG,GAGA,IACAC,EADAlJ,EAAAiJ,GACAlW,EAAAl8F,OAAA,EAAAoyG,GAAA,GAEA,GAAAC,EAAA,GACA,IAAAhzE,EAAA,IAAA76B,WAAA03F,EAAAl8F,OAAA,EAAAqyG,GACAhzE,EAAAxwB,IAAAqtF,EAAA33F,MAEAotG,IACAtyE,EAAA68D,EAAAl8F,QAAAk8F,EAAA33F,KAAA,GACA86B,EAAA68D,EAAAl8F,OAAA,GAAAk8F,EAAA33F,KAAA,IAGA23F,EAAA33F,KAAA86B,QA1CA68D,IACAA,EAAA33F,KAAA,MAmzBA+tG,CAAApxF,EAAA0kF,EAAA,KAAAA,EAAA,KAAA8L,EAAAC,IAEA/L,EAAA,KACA,UAAAviG,EAAAuP,YAAA,uCA9pBA,SAAA2/F,EAAApJ,EAAAqJ,GACA,IAliCAvoF,EAAA/F,EAAAC,EAAAC,EAkiCA7f,EAAAguG,EAAAhuG,KACAlD,GAniCA4oB,EAmiCA1lB,EAAA,GAniCA2f,EAmiCA3f,EAAA,GAniCA4f,EAmiCA5f,EAAA,GAniCA6f,EAmiCA7f,EAAA,IAliCA0lB,GAAA,KAAA/F,GAAA,KAAAC,GAAA,GAAAC,GAoiCA/iB,GAAA,SACA,EAAAgC,EAAA6H,MAAA,oDAAA7J,GACAkD,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MAGA,IAAAkuG,EAAAvK,EAAA3jG,EAAA,IAAAA,EAAA,KAEA,GAAAkuG,EAAA,GAAAA,EAAA,IACA,EAAApvG,EAAA6H,MAAA,6DAAAunG,GACA,IAAAC,EAAAvJ,EAAA,EAEA,GAAAqJ,IAAAE,GAAA,EACAnuG,EAAA,MACAA,EAAA,UACW,IAAAiuG,IAAAE,GAAA,EAIX,UAAArvG,EAAAuP,YAAA,mCAAA6/F,GAHAluG,EAAA,MACAA,EAAA,QA0oBAouG,CAAA/M,EAAA,KAAAuD,EAAAqI,EAAA5L,EAAA,KAAA5lG,OAAA,GACA,IAAA4yG,EAAA10G,OAAA6E,OAAA,MAEA,GAAAyuG,EAAA,CACA,IAAAqB,EAAA3K,EAAAtC,EAAA,KAAArhG,KAAA,IAAAqhG,EAAA,KAAArhG,KAAA,KACAuuG,EAxoBA,SAAAC,EAAAhF,EAAA5E,EAAA0J,EAAAjF,EAAA+D,EAAAE,GACA,IAAAmB,EAAAC,EAAAC,EAEAL,GACAG,EAAA,EAEAC,EAAA,SAAA1uG,EAAAypB,GACA,OAAAzpB,EAAAypB,IAAA,GAAAzpB,EAAAypB,EAAA,OAAAzpB,EAAAypB,EAAA,MAAAzpB,EAAAypB,EAAA,IAGAklF,EAAA,SAAA3uG,EAAAypB,EAAArrB,GACA4B,EAAAypB,GAAArrB,IAAA,OACA4B,EAAAypB,EAAA,GAAArrB,GAAA,OACA4B,EAAAypB,EAAA,GAAArrB,GAAA,MACA4B,EAAAypB,EAAA,OAAArrB,KAGAqwG,EAAA,EAEAC,EAAA,SAAA1uG,EAAAypB,GACA,OAAAzpB,EAAAypB,IAAA,EAAAzpB,EAAAypB,EAAA,OAGAklF,EAAA,SAAA3uG,EAAAypB,EAAArrB,GACA4B,EAAAypB,GAAArrB,GAAA,MACA4B,EAAAypB,EAAA,GAAArrB,GAAA,QAIA,IAAA+uG,EAAAC,EAAAxI,EAAA,EAAAA,EACAgK,EAAAH,GAAA,EAAAtB,GACA0B,EAAA,IAAA5uG,WAAA2uG,GACAC,EAAAvkG,IAAAkkG,EAAAxuG,KAAA+K,SAAA,EAAA6jG,IACAJ,EAAAxuG,KAAA6uG,EACA,IAOA51G,EAAA81B,EAPA+/E,EAAAtF,EAAAxpG,KACA+uG,EAAAD,EAAArzG,OACAuzG,EAAA,IAAA/uG,WAAA8uG,GACAvlD,EAAAklD,EAAAG,EAAA,GACAI,EAAA,EACAZ,EAAA10G,OAAA6E,OAAA,MAIA,IAHAmwG,EAAAE,EAAA,EAAAI,GAGAh2G,EAAA,EAAA81B,EAAA0/E,EAAiCx1G,EAAA2rG,EAAe3rG,IAAA81B,GAAA0/E,EAAA,CAChD,IAAAhsE,EAAAisE,EAAAG,EAAA9/E,GAEA,IAAA0T,IACAA,EAAA+mB,GAGA/mB,EAAAssE,MAAA,QAAAtsE,IACAA,EAAAssE,GAGAtsE,EAAAssE,IACAvlD,EAAA/mB,GAGA,IAAA6mE,EAAAL,EAAA6F,EAAAtlD,EAAA/mB,EAAAusE,EAAAC,EAAA5F,GACAvgE,EAAAwgE,EAAA7tG,OAEA,IAAAqtC,IACAulE,EAAAp1G,IAAA,GAGAqwG,EAAAC,mBAAA+D,IACAA,EAAAhE,EAAAC,oBAIAoF,EAAAE,EAAA9/E,EADAkgF,GAAAnmE,GAEA0gB,EAAA/mB,EAGA,OAAAwsE,EAAA,CACA,IAAAC,EAAA,IAAAjvG,YAAA,mCAEA,IAAAhH,EAAA,EAAA81B,EAAA0/E,EAAmCx1G,EAAAk0G,EAAkBl0G,IAAA81B,GAAA0/E,EACrDE,EAAAE,EAAA9/E,EAAAmgF,EAAAzzG,QAGA+tG,EAAAxpG,KAAAkvG,OACS,GAAA9B,EAAA,CACT,IAAA+B,EAAAT,EAAAG,EAAAJ,GAEAO,EAAAvzG,OAAA0zG,EAAAF,EACAzF,EAAAxpG,KAAAgvG,EAAAjkG,SAAA,EAAAokG,EAAAF,IAEAzF,EAAAxpG,KAAA,IAAAC,WAAAkvG,EAAAF,GACAzF,EAAAxpG,KAAAsK,IAAA0kG,EAAAjkG,SAAA,EAAAkkG,KAGAzF,EAAAxpG,KAAAsK,IAAA0kG,EAAAjkG,SAAA,EAAAokG,GAAAF,GACAN,EAAAH,EAAAxuG,KAAA6uG,EAAApzG,OAAAgzG,EAAAQ,EAAAE,QAEA3F,EAAAxpG,KAAAgvG,EAAAjkG,SAAA,EAAAkkG,GAGA,OACAZ,gBACAf,yBAoiBA8B,CAAA/N,EAAA,KAAAA,EAAA,KAAAuD,EAAA0J,EAAAjF,EAAA+D,EAAAE,GACAe,EAAAE,EAAAF,cAEAvxG,GAAA,OAAAukG,EAAA,KAAA5lG,QAAA,KACA4lG,EAAA,KAAArhG,KAAA,IAAAuuG,EAAAjB,uBAAA,EACAjM,EAAA,KAAArhG,KAAA,QAAAuuG,EAAAjB,uBAIA,IAAAjM,EAAA,KACA,UAAAviG,EAAAuP,YAAA,sCAGA,IAAAgzF,EAAA,KAAArhG,KAAA,SAAAqhG,EAAA,KAAArhG,KAAA,MACAqhG,EAAA,KAAArhG,KAAA,QACAqhG,EAAA,KAAArhG,KAAA,SAGA,IAAAqvG,GACAtJ,WAAApC,EAAAtC,EAAA,KAAArhG,KAAA,IAAAqhG,EAAA,KAAArhG,KAAA,KACAgmG,KAAArC,EAAAtC,EAAA,KAAArhG,KAAA,IAAAqhG,EAAA,KAAArhG,KAAA,KACAimG,KAAArC,EAAAvC,EAAA,KAAArhG,KAAA,IAAAqhG,EAAA,KAAArhG,KAAA,KACA6vF,OAAA8T,EAAAtC,EAAA,KAAArhG,KAAA,GAAAqhG,EAAA,KAAArhG,KAAA,IACA8vF,QAAA8T,EAAAvC,EAAA,KAAArhG,KAAA,GAAAqhG,EAAA,KAAArhG,KAAA,KAEA9E,KAAA20F,OAAAwf,EAAAxf,OAAAwf,EAAAtJ,WACA7qG,KAAA40F,QAAAuf,EAAAvf,QAAAuf,EAAAtJ,WAEA1E,EAAA,MA5jBA,SAAAiO,EAAAhc,EAAAic,GACA,IAAAppG,GAAAwW,EAAAxW,MAAAwW,EAAAxW,MAAA,GAAAmpG,EAAA7lF,OACA9M,EAAAzS,IAAA/D,EACA,IAIAqpG,EAHA5rF,EAAAzd,EADAmpG,EAAA7zG,OAEAqB,EAAA6f,EAAAsrB,WACAtrB,EAAAiE,SAAA,IAEA,IACA3nB,EADAw2G,GAAA,EAGA,OAAA3yG,GACA,WACA0yG,EAAA/O,EACA,MAEA,YACA,IAAAmE,EAAAjoF,EAAAkmB,YAEA,GAAA+hE,IAAA2K,EAAA,CACAE,GAAA,EACA,MAGA,IAAAC,KAEA,IAAAz2G,EAAA,EAAuBA,EAAA2rG,IAAe3rG,EAAA,CACtC,IAAA2S,EAAA+Q,EAAAkmB,YAEA,GAAAj3B,GAAA,OACA6jG,GAAA,EACA,MAGAC,EAAAlzG,KAAAoP,GAGA,IAAA6jG,EACA,MAMA,IAHA,IAAAE,KACA/kG,KAEA+R,EAAAzS,IAAA0Z,GAAA,CACA,IAAAgsF,EAAAjzF,EAAAgJ,UAGA,IAFA/a,EAAAnP,OAAAm0G,EAEA32G,EAAA,EAAyBA,EAAA22G,IAAkB32G,EAC3C2R,EAAA3R,GAAAyR,OAAAC,aAAAgS,EAAAgJ,WAGAgqF,EAAAnzG,KAAAoO,EAAA7J,KAAA,KAKA,IAFAyuG,KAEAv2G,EAAA,EAAuBA,EAAA2rG,IAAe3rG,EAAA,CACtC,IAAA81B,EAAA2gF,EAAAz2G,GAEA81B,EAAA,IACAygF,EAAAhzG,KAAAikG,EAAA1xE,IAIAygF,EAAAhzG,KAAAmzG,EAAA5gF,EAAA,MAGA,MAEA,YACA,MAEA,SACA,EAAAjwB,EAAAoF,MAAA,0CAAApH,GACA2yG,GAAA,EAEAnc,EAAAc,kBACAob,EAAAlc,EAAAc,iBAMAd,EAAAkc,aAyeAK,CAAAxO,EAAA,KAAA/N,EAAAsR,GAGAvD,EAAA,MACAe,IAAA,OACApiG,KAAA8mG,EAAAxT,IAEA,IACAyD,EADAkN,KAGA,SAAAC,EAAAO,GACA,OAAA4J,EAAA5J,GAGA,GAAAnR,EAAAK,UAAA,CACA,IAAAK,EAAAV,EAAAU,gBACA8b,EAAA,IAAA9b,EAAAv4F,OACA63F,EAAA0C,KAAAluF,QAAA,SAAAivF,EAAAR,GACA,GAAAA,EAAA,MACA,UAAAz3F,EAAAuP,YAAA,6BAGA,IAAAo2F,GAAA,EAEAqL,EACArL,EAAAlO,OACW9rF,IAAAupF,EAAAuC,KACXkO,EAAAzQ,EAAAuC,IAGAkO,GAAA,GAAAA,EAAAG,GAAAV,EAAAO,KACAR,EAAAlN,GAAA0N,SAGO,CACP,IAAAsL,EAvkCA,SAAAlZ,EAAAl6E,EAAA23E,EAAAU,GACA,IAAA6B,EAEA,OADA,EAAA/3F,EAAAoF,MAAA,6BAEA8rG,YAAA,EACAC,YAAA,EACAC,YACAC,cAAA,GAIA,IAAA31D,EACAr0C,GAAAwW,EAAAxW,MAAAwW,EAAAxW,MAAA,GAAA0wF,EAAAptE,OACA9M,EAAAzS,IAAA/D,EACAwW,EAAAkmB,YAKA,IAJA,IACAutE,EADArO,EAAAplF,EAAAkmB,YAEAwtE,GAAA,EAEAp3G,EAAA,EAAuBA,EAAA8oG,EAAe9oG,IAAA,CACtC,IAAA+2G,EAAArzF,EAAAkmB,YACAotE,EAAAtzF,EAAAkmB,YACApZ,EAAA9M,EAAAsrB,aAAA,EACAqoE,GAAA,EAEA,KAAAF,KAAAJ,gBAAAI,EAAAH,kBAIA,IAAAD,GAAA,IAAAC,EACAK,GAAA,EACW,IAAAN,GAAA,IAAAC,EACXK,GAAA,EACW,IAAAN,GAAA,IAAAC,IAAAjb,GAAAob,EAMA9b,GAAA,IAAA0b,GAAA,IAAAC,IACXK,GAAA,EACAD,GAAA,IAPAC,GAAA,EAEAhc,IACA+b,GAAA,IAOAC,IACAF,GACAJ,aACAC,aACAxmF,WAIA4mF,GACA,MAQA,GAJAD,IACAzzF,EAAAzS,IAAA/D,EAAAiqG,EAAA3mF,SAGA2mF,IAAA,IAAAzzF,EAAA+lB,WAEA,OADA,EAAA5jC,EAAAoF,MAAA,2CAEA8rG,YAAA,EACAC,YAAA,EACAC,YACAC,cAAA,GAIA,IAAAI,EAAA5zF,EAAAkmB,YACAlmB,EAAAkmB,YACAlmB,EAAAkmB,YACA,IAEA9T,EAAA01E,EAFA0L,GAAA,EACAD,KAGA,OAAAK,EAAA,CACA,IAAAxhF,EAAA,EAAqBA,EAAA,IAASA,IAAA,CAC9B,IAAAnjB,EAAA+Q,EAAAgJ,UAEA/Z,GAIAskG,EAAA1zG,MACAu6F,SAAAhoE,EACA01E,QAAA74F,IAIAukG,GAAA,OACS,OAAAI,EAAA,CACT,IAAAtL,EAAAtoF,EAAAkmB,aAAA,EACAlmB,EAAAiE,SAAA,GACA,IAAA4vF,EACAj2D,KAEA,IAAAi2D,EAAA,EAA4BA,EAAAvL,EAAqBuL,IACjDj2D,EAAA/9C,MACAonB,IAAAjH,EAAAkmB,cAMA,IAFAlmB,EAAAkmB,YAEA2tE,EAAA,EAA4BA,EAAAvL,EAAqBuL,IACjDj2D,EAAAi2D,GAAArqG,MAAAwW,EAAAkmB,YAGA,IAAA2tE,EAAA,EAA4BA,EAAAvL,EAAqBuL,IACjDj2D,EAAAi2D,GAAAnzC,MAAA1gD,EAAAkmB,YAGA,IAAA4tE,EAAA,EAEA,IAAAD,EAAA,EAA4BA,EAAAvL,EAAqBuL,IAAA,CACjDh2D,EAAAD,EAAAi2D,GACA,IAAAE,EAAA/zF,EAAAkmB,YAEA,GAAA6tE,EAAA,CAKA,IAAAC,GAAAD,GAAA,IAAAzL,EAAAuL,GACAh2D,EAAAm2D,cACAF,EAAAnsG,KAAAC,IAAAksG,EAAAE,EAAAn2D,EAAA52B,IAAA42B,EAAAr0C,MAAA,QANAq0C,EAAAm2D,aAAA,EASA,IAAAC,KAEA,IAAA7hF,EAAA,EAAqBA,EAAA0hF,EAAkB1hF,IACvC6hF,EAAAp0G,KAAAmgB,EAAAkmB,aAGA,IAAA2tE,EAAA,EAA4BA,EAAAvL,EAAqBuL,IAAA,CAEjDrqG,GADAq0C,EAAAD,EAAAi2D,IACArqG,MACA,IAAAyd,EAAA42B,EAAA52B,IACAy5C,EAAA7iB,EAAA6iB,MAGA,IAFAszC,EAAAn2D,EAAAm2D,YAEA5hF,EAAA5oB,EAA2B4oB,GAAAnL,EAAUmL,IACrC,QAAAA,IAKA01E,GADAA,EAAAkM,EAAA,EAAA5hF,EAAA6hF,EAAAD,EAAA5hF,EAAA5oB,IACAk3D,EAAA,MACA6yC,EAAA1zG,MACAu6F,SAAAhoE,EACA01E,kBAIS,QAAA8L,EAcT,OADA,EAAAzxG,EAAAoF,MAAA,sCAAAqsG,IAEAP,YAAA,EACAC,YAAA,EACAC,YACAC,cAAA,GAjBA,IAAAxrD,EAAAhoC,EAAAkmB,YACAtG,EAAA5f,EAAAkmB,YAEA,IAAA9T,EAAA,EAAqBA,EAAAwN,EAAgBxN,IAAA,CACrC01E,EAAA9nF,EAAAkmB,YACA,IAAAk0D,EAAApyC,EAAA51B,EACAmhF,EAAA1zG,MACAu6F,WACA0N,aAiBA,IAJAyL,EAAAjxF,KAAA,SAAAX,EAAAV,GACA,OAAAU,EAAAy4E,SAAAn5E,EAAAm5E,WAGA99F,EAAA,EAAmBA,EAAAi3G,EAAAz0G,OAAqBxC,IACxCi3G,EAAAj3G,EAAA,GAAA89F,WAAAmZ,EAAAj3G,GAAA89F,WACAmZ,EAAAxuG,OAAAzI,EAAA,GACAA,KAIA,OACA+2G,WAAAI,EAAAJ,WACAC,WAAAG,EAAAH,WACAC,WACAC,gBAq4BAU,CAAAxP,EAAA,KAAA1kF,EAAAzhB,KAAAo5F,eAAAhB,EAAA0B,aACA8b,EAAAf,EAAAC,WACAe,GAAAhB,EAAAE,WACAe,GAAAjB,EAAAG,SACAe,GAAAD,GAAAv1G,OAEA,GAAA63F,EAAA0B,cAAA,IAAA8b,GAAA,IAAAC,IAAA,IAAAD,GAAA,IAAAC,MAAA,IAAAD,IAAA,IAAAC,KAAA,EAAArsB,EAAA2P,aAAAf,EAAAY,kBAAA,CACA,IAAAyB,MAEA,qBAAArC,EAAAY,kBAAA,oBAAAZ,EAAAY,mBACAyB,IAAA,EAAAjR,EAAA2P,aAAAf,EAAAY,mBAGA,IAAAoB,IAAA,EAAAvQ,EAAAwQ,oBAEA,IAAAwB,EAAA,EAA4BA,EAAA,IAAgBA,IAAA,CAC5C,IAAA1B,GAAA6b,GAUA,GAPA7b,GADAn6F,KAAA+4F,aAAA8C,KAAA77F,KAAA+4F,YACA/4F,KAAA+4F,YAAA8C,GACaA,KAAApB,IAAA,KAAAA,GAAAoB,GACbpB,GAAAoB,GAEArS,EAAAiQ,iBAAAoC,GAGA,CAKA,IAAAoa,GADAD,GAAAvQ,EAAAtL,GAAAC,IAGA,IAAAwb,GAAA,IAAAC,GACAI,GAAA7b,GAAA4b,IACa,IAAAJ,GAAA,IAAAC,KACbI,GAAAzsB,EAAAmQ,iBAAApzF,QAAAyvG,KAGA,IAAAlhF,IAAA,EAEA,QAAA/2B,EAAA,EAA2BA,EAAAg4G,KAAwBh4G,EACnD,GAAA+3G,GAAA/3G,GAAA89F,WAAAoa,GAAA,CAIAlN,EAAAlN,GAAAia,GAAA/3G,GAAAwrG,QACAz0E,IAAA,EACA,MAGA,IAAAA,IAAAsjE,EAAAkc,WAAA,CACA,IAAA/K,GAAAnR,EAAAkc,WAAA/tG,QAAA4zF,KAEA,IAAAoP,IAAAyM,KAAA7b,KACAoP,GAAAnR,EAAAkc,WAAA/tG,QAAAyvG,KAGAzM,GAAA,GAAAP,EAAAO,MACAR,EAAAlN,GAAA0N,YAIS,OAAAqM,GAAA,IAAAC,GACT,QAAA93G,EAAA,EAAyBA,EAAAg4G,KAAwBh4G,EACjDgrG,EAAA+M,GAAA/3G,GAAA89F,UAAAia,GAAA/3G,GAAAwrG,aAGA,QAAAxrG,EAAA,EAAyBA,EAAAg4G,KAAwBh4G,EACjD89F,EAAAia,GAAA/3G,GAAA89F,SAEA,IAAA+Z,GAAA/Z,GAAA,OAAAA,GAAA,QACAA,GAAA,KAGAkN,EAAAlN,GAAAia,GAAA/3G,GAAAwrG,QAKA,IAAAR,EAAAxoG,SACAwoG,EAAA,MAGA,IAAAmN,GAAAjE,EAAA,EAEAC,IACAgE,GAAA,GAGA,IAAAC,GAAArN,EAAAC,EAAAC,EAAAkN,IAcA,GAbAl2G,KAAAsnG,WAAA6O,GAAA7O,WACAnB,EAAA,MACAe,IAAA,OACApiG,KAAA2kG,EAAA0M,GAAApN,kBAAAkJ,IAGA9L,EAAA,SA7iDA,SAAAiQ,GACA,IAAA1rG,EAAA,IAAAyd,EAAAQ,OAAAytF,EAAAtxG,MACAlD,EAAA8I,EAAAi9B,YACAj9B,EAAAgb,SAAA,IACA,IAAA2wF,EAAA3rG,EAAAi9B,YAEA,QAAA/lC,EAAA,OAAAy0G,GAIA3rG,EAAAi9B,YACAj9B,EAAAi9B,cAMAj9B,EAAAgb,SAAA,GAGA,IAFAhb,EAAAi9B,cAMAyuE,EAAAtxG,KAAA,GAAAsxG,EAAAtxG,KAAA,KACA,KAohDAwxG,CAAAnQ,EAAA,WACAA,EAAA,SACAe,IAAA,OACApiG,KAAA4lG,EAAAtS,EAAA+d,GAAApN,kBAAAoL,MAIApC,EACA,IACAhB,EAAA,IAAA5oF,EAAAQ,OAAAw9E,EAAA,QAAArhG,OAEAmjG,EADA,IAAApD,EAAA0R,UAAAxF,EAAA3Y,EAAAwM,GACAvvE,SACAmhF,sBACA,IAAAC,GAAA,IAAA5R,EAAA6R,YAAAzO,GACA9B,EAAA,QAAArhG,KAAA2xG,GAAAE,UACS,MAAA52G,IACT,EAAA6D,EAAAoF,MAAA,0BAAAovF,EAAA36D,YAIA,GAAA0oE,EAAA,KAKO,CACP,IAAAyQ,GAAA1H,EAAA/I,EAAA,MACAA,EAAA,KAAArhG,KAAAgnG,EAAAxtG,EAAAs4G,SANAzQ,EAAA,MACAe,IAAA,OACApiG,KAAAgnG,EAAA9rG,KAAA1B,OAOA,IAAAu4G,GAAA,IAAA/Q,EAAA1mD,EAAAx9C,SAEA,QAAAk1G,MAAA3Q,EACA0Q,GAAA5P,SAAA6P,GAAA3Q,EAAA2Q,IAAAhyG,MAGA,OAAA+xG,GAAAnQ,WAEA0B,QAAA,SAAAvZ,EAAAptE,EAAA22E,GACAA,EAAAyG,YAAA,EAEAzG,EAAA2e,iBA31EA,SAAA3e,EAAA2e,GACA,IAAA3e,EAAAwC,2BAIAxC,EAAA0B,aAIAid,IAAA3e,EAAAc,iBAIAd,EAAAE,qBAAAiD,GAAA,CAIA,IAAAjD,KACA8B,GAAA,EAAAvQ,EAAAwQ,oBAEA,QAAAwB,KAAAkb,EAAA,CACA,IAAA5c,EAAA4c,EAAAlb,GACA1F,GAAA,EAAA1M,EAAA+Q,oBAAAL,EAAAC,IAEA,IAAAjE,IACAmC,EAAAuD,GAAArsF,OAAAC,aAAA0mF,IAIAiC,EAAAE,UAAA0e,MAAA1e,IA+zEA2e,CAAA7e,IAAA2e,iBAGA,IAAAb,EAAA,EAEAz0F,aAAAymF,IACAgO,EAAAz0F,EAAAioF,UAAA,GAGA,IAAAwN,EAAAz1F,EAAA01F,gBAAA/e,GACA+d,EAAArN,EAAAoO,EAAAz1F,EAAA21F,WAAA5zG,KAAAie,GAAAy0F,GACAl2G,KAAAsnG,WAAA6O,EAAA7O,WACA,IAAAoC,EAAAjoF,EAAAioF,UAEA,SAAA2N,EAAAtO,EAAAQ,GACA,IAAA+N,EAAA,KAEA,QAAAzb,KAAAkN,EACAQ,IAAAR,EAAAlN,KACAyb,IACAA,MAGAA,EAAAh2G,KAAA,EAAAu6F,IAIA,OAAAyb,EAGA,SAAAC,EAAAxO,EAAAQ,GACA,QAAA1N,KAAAkN,EACA,GAAAQ,IAAAR,EAAAlN,GACA,SAAAA,EAKA,OADAsa,EAAApN,kBAAAoN,EAAA/M,2BAAAG,EACA4M,EAAA/M,4BAGA,IAAAoO,EAAA/1F,EAAA+1F,MAEA,GAAA5S,GAAA4S,KAAAj3G,OAAA,CACA,IAAAu2E,EAAAshB,EAAApD,YAAApxF,EAAA2Q,qBACAkjG,EAAAh2F,EAAAi2F,aACAnP,EAAA9pG,OAAA6E,OAAA,MAEA,QAAAimG,KAAAiO,EAAA,CAEA,IAAAG,EAAAH,EADAjO,GAAA,GAEAqO,EAAApuB,EAAAiQ,iBAAAke,EAAA,IACAE,EAAAruB,EAAAiQ,iBAAAke,EAAA,IACAG,EAAAL,EAAAlxG,QAAAqxG,GACAG,EAAAN,EAAAlxG,QAAAsxG,GAEA,KAAAC,EAAA,GAAAC,EAAA,IAIA,IAAAC,GACA3pF,EAAAspF,EAAA,GAAA7gC,EAAA,GAAA6gC,EAAA,GAAA7gC,EAAA,GAAAA,EAAA,GACA9+B,EAAA2/D,EAAA,GAAA7gC,EAAA,GAAA6gC,EAAA,GAAA7gC,EAAA,GAAAA,EAAA,IAEAwgC,EAAAD,EAAAH,EAAA3N,GAEA,GAAA+N,EAIA,QAAAv5G,EAAA,EAAAymB,EAAA8yF,EAAA/2G,OAAgDxC,EAAAymB,EAAQzmB,IAAA,CACxD,IAAA89F,EAAAyb,EAAAv5G,GACAgrG,EAAAoN,EAAApN,kBACAkP,EAAAV,EAAAxO,EAAA+O,GACAI,EAAAX,EAAAxO,EAAAgP,GACAxP,EAAA1M,IACAoc,mBACAC,qBACAF,kBAKA5f,EAAAmQ,UAGA,IAAAsC,EAAA,GAAAzS,EAAApD,YAAApxF,EAAA2Q,sBAAA,GACAsiG,EAAA,IAAA/Q,EAAA,QA6BA,OA5BA+Q,EAAA5P,SAAA,OAAAxlF,EAAA3c,MACA+xG,EAAA5P,SAAA,OAAAyD,EAAAtS,EAAA+d,EAAApN,oBACA8N,EAAA5P,SAAA,OAAAwC,EAAA0M,EAAApN,kBAAAW,IACAmN,EAAA5P,SAAA,wCAAA2B,EAAAiC,GAAA,iCAAAjC,EAAAxQ,EAAAxD,SAAA,KAAAgU,EAAAxQ,EAAAzD,QAAAgU,EAAAvQ,EAAA4G,YAAA,wBACA6X,EAAA5P,SAAA,iBAAA2B,EAAAxQ,EAAAzD,QAAAiU,EAAAxQ,EAAAxD,SAAA,qBAAAgU,EAAAxQ,EAAA2G,WAAA6J,EAAAx/F,KAAA+uG,IAAA/f,EAAA4G,aAAA5G,EAAA0G,SAAA,2BAAA6J,EAAAe,IACAmN,EAAA5P,SAAA,kBAKA,IAJA,IAAA0D,EAAAlpF,EAAAkpF,YACAyN,EAAA32F,EAAAwmF,IAAAxmF,EAAAwmF,IAAA/L,OAAA,KACAmc,EAAA,WAEAt6G,EAAA,EAAAymB,EAAAklF,EAAuC3rG,EAAAymB,EAAQzmB,IAAA,CAC/C,IAAAy6C,EAAA,EAEA,GAAAmyD,EAAA,CACA,IAAA2N,EAAA3N,EAAA5sG,EAAA,GACAy6C,EAAA,UAAA8/D,IAAA9/D,MAAA,OACW4/D,IACX5/D,EAAApvC,KAAAygB,KAAAuuF,EAAAr6G,IAAA,IAGAs6G,GAAA1P,EAAAnwD,GAAAmwD,EAAA,GAGA,OAAA0P,EAlBA,IAoBAxB,EAAA5P,SAAA,iBAAA0B,EAAAe,IACAmN,EAAA5P,SAAA,OAAA6E,EAAAjd,IACAgoB,EAAA5P,SAAA,OAAA2E,EAAAxT,IACAye,EAAAnQ,WAGA5S,iBACA,oBAAA9zF,KACA,OAAAA,KAAAu4G,aAMA,IAHA,IACA//D,EADAggE,GAAA,+BAGAz6G,EAAA,EAAAymB,EAAAg0F,EAAAj4G,OAA4DxC,EAAAymB,EAAQzmB,IAAA,CACpE,IAAAo8F,EAAAqe,EAAAz6G,GAEA,GAAAo8F,KAAAn6F,KAAAk8F,OAAA,CACA1jD,EAAAx4C,KAAAk8F,OAAA/B,GACA,MAGA,IACAjE,GADA,EAAArM,EAAAwQ,oBACAF,GACAD,EAAA,EAkBA,GAhBAl6F,KAAAy4F,WACAz4F,KAAA86F,KAAA2J,SAAAvO,KACAgE,EAAAl6F,KAAA86F,KAAAvtE,OAAA2oE,KAIAgE,GAAAl6F,KAAAs4F,YACA4B,EAAAl6F,KAAAs4F,UAAAmgB,WAAAviB,IAGAgE,GAAA,IACAA,EAAAhE,GAGA19C,EAAAx4C,KAAAk8F,OAAAhC,GAGA,MAMA,OAFA1hD,KAAAx4C,KAAAo8F,aACAp8F,KAAAu4G,aAAA//D,EACAA,GAGAkgE,YAAA,SAAAxe,EAAA1D,GACA,IAAAgT,EAAAhxD,EAAAmtD,EACAgT,EAAAze,EAEAl6F,KAAA86F,MAAA96F,KAAA86F,KAAA2J,SAAAvK,KACAye,EAAA34G,KAAA86F,KAAAvtE,OAAA2sE,IAGA1hD,EAAAx4C,KAAAk8F,OAAAyc,GACAngE,GAAA,EAAA50C,EAAAkN,OAAA0nC,KAAAx4C,KAAAo8F,aACA,IAAAnG,EAAAj2F,KAAAs8F,UAAAt8F,KAAAs8F,SAAAqc,GACA,IAAAxiB,EAAAn2F,KAAAs4F,UAAAz5F,IAAAq7F,IAAAl6F,KAAA66F,kBAAAh8F,IAAAq7F,MAEA,iBAAA/D,IACAA,EAAA3mF,OAAAC,aAAA0mF,IAGA,IAAAyP,EAAA1L,KAAAl6F,KAAAsnG,WAGA,GAFAkC,EAAAxpG,KAAAsnG,WAAApN,MAEAl6F,KAAAonG,YAAA,CACA,MAAAjN,EAAAn6F,KAAA+4F,YAAAmB,IAAAl6F,KAAAk5F,gBAAAgB,GAEA,YAAAC,GAAA,KAAAA,GAAA,UAAAn6F,KAAAukB,OACAilF,EAAA,IAGAA,GAAA,EAAA/f,EAAAmvB,yBAAApP,GAGAxpG,KAAA+uF,cACA4W,EAAA6D,GAGA,IAAAlK,EAAA,KAEA,GAAAt/F,KAAAuoG,SAAAvoG,KAAAuoG,QAAArO,GAAA,CACA0L,GAAA,EACA,IAAA+R,EAAA33G,KAAAuoG,QAAArO,GACAsP,EAAAmO,EAAAM,iBACA3Y,GACAJ,SAAA1vF,OAAAkrF,cAAAid,EAAAO,oBACA3pF,OAAAopF,EAAAK,cAIA,IAAA9Y,EAAA,iBAAAsK,EAAAh6F,OAAAkrF,cAAA8O,GAAA,GACAzT,EAAA/1F,KAAAqnG,WAAAnN,GAOA,OALAnE,KAAA8P,gBAAA3G,EAAA/I,EAAAmJ,EAAA9mD,EAAAy9C,EAAA0P,EAAAnP,EAAAoP,KACA7P,EAAA,IAAA2P,EAAAxG,EAAA/I,EAAAmJ,EAAA9mD,EAAAy9C,EAAA0P,EAAAnP,EAAAoP,GACA5lG,KAAAqnG,WAAAnN,GAAAnE,GAGAA,GAEA1G,cAAA,SAAAF,GACA,IACAC,EAAA2G,EAAAmE,EADA2e,EAAA74G,KAAA64G,WAGA,GAAAA,IACAzpB,EAAAypB,EAAA1pB,IAGA,OAAAC,EAIAypB,IACAA,EAAA74G,KAAA64G,WAAAp6G,OAAA6E,OAAA,OAGA8rF,KACA,IAEA5qE,EAFAs0F,EAAA3pB,EACApxF,EAAA,EAGA,GAAAiC,KAAA86F,KAGA,IAFA,IAAA18F,EAAAK,OAAA6E,OAAA,MAEAvF,EAAAoxF,EAAA5uF,QAAA,CACAP,KAAA86F,KAAAie,aAAA5pB,EAAApxF,EAAAK,GACA87F,EAAA97F,EAAA87F,SACA,IAAA35F,EAAAnC,EAAAmC,OACAxC,GAAAwC,EACA,IAAAi2F,EAAA,IAAAj2F,GAAA,KAAA4uF,EAAA78E,WAAAvU,EAAA,GACAg4F,EAAA/1F,KAAA04G,YAAAxe,EAAA1D,GACApH,EAAA9tF,KAAAy0F,QAGA,IAAAh4F,EAAA,EAAAymB,EAAA2qE,EAAA5uF,OAAsCxC,EAAAymB,IAAQzmB,EAC9Cm8F,EAAA/K,EAAA78E,WAAAvU,GACAg4F,EAAA/1F,KAAA04G,YAAAxe,EAAA,KAAAA,GACA9K,EAAA9tF,KAAAy0F,GAIA,OAAA8iB,EAAAC,GAAA1pB,GAGAuQ,uBACA,OAAAlhG,OAAAkvB,OAAA3tB,KAAAqnG,cAIA5W,EA5yEA,GA+yEA5yF,EAAA4yF,OAEA,IAAAvB,EAAA,WACA,SAAAA,EAAApjF,GACA9L,KAAA8L,QACA9L,KAAAy9B,WAAA,eACAz9B,KAAAonG,aAAA,EAaA,OAVAlY,EAAAhwF,WACAmwF,cAAA,WACA,UAEAqQ,WAAA,WACA,OACA5zF,MAAA9L,KAAA8L,SAIAojF,EAjBA,GAsBA,SAAA8pB,EAAA5gB,EAAA2e,EAAAzC,GACA,IACA/K,EAAA1N,EAAApB,EADAsO,EAAAtqG,OAAA6E,OAAA,MAEA81F,KAAAhB,EAAAn/D,MAAAogE,EAAAC,UAEA,GAAAlB,EAAAY,iBAGA,IAFAyB,GAAA,EAAAjR,EAAA2P,aAAAf,EAAAY,kBAEA6C,EAAA,EAAsBA,EAAApB,EAAAl6F,OAAgCs7F,IACtD0N,EAAA+K,EAAA/tG,QAAAk0F,EAAAoB,IAGAkN,EAAAlN,GADA0N,GAAA,EACAA,EAEA,OAGG,GAAAnQ,EACH,IAAAyC,KAAAkb,EACAhO,EAAAlN,GAAAkb,EAAAlb,QAKA,IAFApB,EAAAjR,EAAAiQ,iBAEAoC,EAAA,EAAsBA,EAAApB,EAAAl6F,OAAgCs7F,IACtD0N,EAAA+K,EAAA/tG,QAAAk0F,EAAAoB,IAGAkN,EAAAlN,GADA0N,GAAA,EACAA,EAEA,EAKA,IACAnP,EADArB,EAAAX,EAAAW,YAGA,GAAAA,EACA,IAAA8C,KAAA9C,EAAA,CACA,IAAAoB,EAAApB,EAAA8C,GAGA,SAFA0N,EAAA+K,EAAA/tG,QAAA4zF,IAEA,CACAC,IACAA,GAAA,EAAAvQ,EAAAwQ,qBAGA,IAAA2b,EAAAvQ,EAAAtL,EAAAC,GAEA4b,IAAA7b,IACAoP,EAAA+K,EAAA/tG,QAAAyvG,IAKAjN,EAAAlN,GADA0N,GAAA,EACAA,EAEA,EAKA,OAAAR,EAjEAlrG,EAAAqxF,YAoEA,IAAAiZ,EAAA,WACA,SAAA8Q,EAAAC,EAAA7lF,EAAA8lF,GAQA,IAPA,IAIAtlF,EAJAulF,EAAAF,EAAA34G,OACAizB,EAAAH,EAAA9yB,OACAozB,EAAAylF,EAAA5lF,EACAz1B,EAAAo7G,EAEArkF,GAAA,EAEA/2B,EAAA41B,GAAA,CAGA,IAFAE,EAAA,EAEAA,EAAAL,GAAA0lF,EAAAn7G,EAAA81B,KAAAR,EAAAQ,IACAA,IAGA,GAAAA,GAAAL,EAAA,CAGA,IAFAz1B,GAAA81B,EAEA91B,EAAAq7G,IAAA,EAAAl1G,EAAAwqB,cAAAwqF,EAAAn7G,KACAA,IAGA+2B,GAAA,EACA,MAGA/2B,IAGA,OACA+2B,QACAv0B,OAAAxC,GA0EA,SAAAoqG,EAAA7pG,EAAA6mF,EAAAiT,GACA,IACAihB,EAAAjhB,EAAAqG,QAEA6a,GADAlhB,EAAAsG,QACAvZ,EAAAzxD,UAHA,IAIA6lF,EAAA,MAAAD,EAAA,QAAAA,EAAA,GAEAC,IACAp0B,EAAApwD,KAPA,GAQAskF,EAAAC,EAAA,OAAAA,EAAA,OAAAA,EAAA,MAAAA,EAAA,IAGA,IAAAE,EAlFA,SAAA9uG,EAAA+uG,GACA,IAEAC,EAAAC,EAAAvpE,EAyBAnH,EA3BA2wE,GAAA,oBACAC,EAAAnvG,EAAAsE,IAGA,IAEA2qG,GADAD,EAAAhvG,EAAAgb,SAAA+zF,IACAl5G,OACK,MAAAgH,GACL,GAAAA,aAAArD,EAAAglB,qBACA,MAAA3hB,EAIA,GAAAoyG,IAAAF,IACArpE,EAAA6oE,EAAAS,EAAAE,EAAAH,EAAA,EAAAG,EAAAr5G,SAEAu0B,OAAAsb,EAAA7vC,SAAAk5G,EACA,OACA/uG,OAAA,IAAAyd,EAAAQ,OAAA+wF,GACAn5G,OAAAk5G,GAUA,KALA,EAAA71G,EAAAoF,MAAA,kEACA0B,EAAAsE,IAAA6qG,EAQA,KAFAzpE,EAAA6oE,EADAvuG,EAAAgpB,UAJA,MAKAkmF,EAAA,IAEAr5G,QAMA,GAFAmK,EAAAsE,KAAAohC,EAAA7vC,OAEA6vC,EAAAtb,MAAA,CACAmU,EAAAv+B,EAAAsE,IAAA6qG,EACA,MAMA,OAFAnvG,EAAAsE,IAAA6qG,EAEA5wE,GAEAv+B,OAAA,IAAAyd,EAAAQ,OAAAje,EAAAgb,SAAAujB,IACA1oC,OAAA0oC,KAIA,EAAArlC,EAAAoF,MAAA,uEAEA0B,OAAA,IAAAyd,EAAAQ,OAAAje,EAAAgb,SAAA+zF,IACAl5G,OAAAk5G,IAwBAK,CAAA30B,EAAAk0B,GACA,IAAAtU,EAAAgV,YAAAP,EAAA9uG,QAAA,EAAAk6F,GACAoV,kBAAA5hB,GAEAmhB,KACAD,EAAAn0B,EAAAz/D,SAhBA,IAiBA,GAAA4zF,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAGA,IA5BAW,EA4BAC,GA5BAD,EA4BA90B,EA5BAz/D,YAEAhb,OAAA,IAAAyd,EAAAQ,OAAAsxF,GACA15G,OAAA05G,EAAA15G,SA2BAuE,EADA,IAAAigG,EAAAgV,YAAAG,EAAAxvG,QAAA,EAAAk6F,GACAuV,mBAAA/hB,GAEA,QAAA3sF,KAAA3G,EAAAszF,WACAA,EAAA3sF,GAAA3G,EAAAszF,WAAA3sF,GAGA,IAAAk/F,EAAA7lG,EAAA6lG,YACAyP,EAAAp6G,KAAAq6G,oBAAA1P,GACA2P,EAAAt6G,KAAAu6G,cAAAz1G,EAAAw1G,OACAt6G,KAAA2qG,cACA3qG,KAAA8E,KAAA9E,KAAAw6G,KAAAl8G,EAAA87G,EAAAp6G,KAAA2qG,YAAA2P,EAAAliB,GACAp4F,KAAAw3G,MAAAx3G,KAAAy6G,SAAA31G,EAAA6lG,aA2LA,OAxLAxC,EAAAjpG,WACAwqG,gBACA,OAAA1pG,KAAA2qG,YAAApqG,OAAA,GAGAm3G,WAAA,WAIA,IAHA,IAAAD,GAAA,WACA9M,EAAA3qG,KAAA2qG,YAEApB,EAAA,EAA2BA,EAAAoB,EAAApqG,OAA8BgpG,IACzDkO,EAAAn2G,KAAAqpG,EAAApB,GAAApP,WAGA,OAAAsd,GAEAN,gBAAA,SAAA/e,GACA,IAEAmR,EAFAoB,EAAA3qG,KAAA2qG,YACA2J,GAAA,WAGA,IAAA/K,EAAA,EAAuBA,EAAAoB,EAAApqG,OAA8BgpG,IACrD+K,EAAAhzG,KAAAqpG,EAAApB,GAAApP,WAGA,IAAAzlD,EAAA0jD,EAAA2e,gBAEA,GAAAriE,EAAA,CACA,IAAAqiE,EAAAt4G,OAAA6E,OAAA,MAEA,QAAAu4F,KAAAnnD,GACA60D,EAAA+K,EAAA/tG,QAAAmuC,EAAAmnD,MAEA,IACAkb,EAAAlb,GAAA0N,GAKA,OAAAyP,EAAA5gB,EAAA2e,EAAAzC,IAEA8C,WAAA,SAAA7sG,GACA,QAAAA,EAAA,GAAAA,GAAAvK,KAAA0pG,aAIA,IAAAn/F,GAIAvK,KAAA2qG,YAAApgG,EAAA,GACA+tG,WAAA/3G,OAAA,IAEAk6G,SAAA,SAAA9P,GACA,IAAA5sG,EAAAymB,EACA+jF,KAEA,IAAAxqG,EAAA,EAAAymB,EAAAmmF,EAAApqG,OAA0CxC,EAAAymB,EAAQzmB,IAAA,CAClD,IAAAu6G,EAAA3N,EAAA5sG,GAEAu6G,EAAAX,OACApP,EAAAxqG,EAAA,GAAAu6G,EAAAX,MAIA,OAAApP,GAEA8R,oBAAA,SAAAK,GAGA,IAFA,IAAAN,KAEAr8G,EAAA,EAAAymB,EAAAk2F,EAAAn6G,OAAmDxC,EAAAymB,EAAQzmB,IAC3Dq8G,EAAA94G,KAAAo5G,EAAA38G,GAAAu6G,YAGA,OAAA8B,GAEAG,cAAA,SAAAI,GACA,IAAAtQ,EAAA,EACAlxE,EAAAwhF,EAAAp6G,OAGA8pG,EADAlxE,EAAA,KACA,IACOA,EAAA,MACP,KAEA,MAGA,IACAp7B,EADA68G,KAGA,IAAA78G,EAAA,EAAiBA,EAAAssG,EAAUtsG,IAC3B68G,EAAAt5G,MAAA,KAGA,IAAAvD,EAAA,EAAiBA,EAAAo7B,EAAWp7B,IAC5B68G,EAAAt5G,KAAAq5G,EAAA58G,IAGA,OAAA68G,GAEAJ,KAAA,SAAAl8G,EAAA8wF,EAAAub,EAAA2P,EAAAliB,GACA,IAAA6P,EAAA,IAAApD,EAAAgW,IACA5S,EAAA7oD,OAAA,IAAAylD,EAAAiW,UAAA,SACA7S,EAAA7tE,OAAA97B,GACA,IAAA0lC,EAAA,IAAA6gE,EAAAkW,WACA/2E,EAAAg3E,UAAA,eACAh3E,EAAAg3E,UAAA,cACAh3E,EAAAg3E,UAAA,gBACAh3E,EAAAg3E,UAAA,kBACAh3E,EAAAg3E,UAAA,cACAh3E,EAAAg3E,UAAA,iBACAh3E,EAAAg3E,UAAA,aAAA5iB,EAAApD,YACAhxD,EAAAg3E,UAAA,WAAA5iB,EAAAlX,MACAl9C,EAAAg3E,UAAA,gBACAh3E,EAAAg3E,UAAA,oBACAh3E,EAAAg3E,UAAA,gBACA/S,EAAAjkE,UACA,IAAAgoE,EAAA,IAAAnH,EAAAoW,WACAjP,EAAAt+B,IAAA,gBACAs+B,EAAAt+B,IAAA,uBACAs+B,EAAAt+B,IAAApvE,GACA0tG,EAAAt+B,IAAApvE,GACA0tG,EAAAt+B,IAAA,UACAu6B,EAAA+D,UACA/D,EAAAiT,gBAAA,IAAArW,EAAAsW,SACA,IAEAp9G,EAAAymB,EAFA2U,EAAAi2D,EAAA7uF,OACA66G,GAAA,WAGA,IAAAr9G,EAAA,EAAiBA,EAAAo7B,EAAWp7B,IAAA,CAC5B,MAAAo8F,EAAAwQ,EAAA5sG,GAAAo8F,WAIA,IAFA0K,EAAAwW,mBAAA90G,QAAA4zF,IAGA6R,EAAAt+B,IAAAysB,GAGAihB,EAAA95G,KAAA64F,GAGA8N,EAAAwP,QAAA,IAAA5S,EAAAyW,YAAA,IAAAF,GACA,IAAAG,EAAA,IAAA1W,EAAAsW,SAGA,IAFAI,EAAA7tC,KAAA,SAEA3vE,EAAA,EAAiBA,EAAAo7B,EAAWp7B,IAC5Bw9G,EAAA7tC,IAAA0hB,EAAArxF,IAGAkqG,EAAAuT,YAAAD,EACA,IAAAE,EAAA,IAAA5W,EAAA6W,eACAD,EAAAT,UAAA,cACA,IAAA1mF,GAAA,qLAEA,IAAAv2B,EAAA,EAAAymB,EAAA8P,EAAA/zB,OAAqCxC,EAAAymB,EAAQzmB,IAAA,CAC7C,IAAA49G,EAAArnF,EAAAv2B,GAEA,GAAA49G,KAAAvjB,EAAAwjB,YAAA,CAIA,IAAA14G,EAAAk1F,EAAAwjB,YAAAD,GAEA,GAAAv6G,MAAA0lB,QAAA5jB,GACA,QAAA2wB,EAAA3wB,EAAA3C,OAAA,EAAwCszB,EAAA,EAAOA,IAC/C3wB,EAAA2wB,IAAA3wB,EAAA2wB,EAAA,GAIA4nF,EAAAT,UAAAW,EAAAz4G,IAGA+kG,EAAAjkE,QAAAy3E,cACA,IAAAI,EAAA,IAAAhX,EAAAsW,SAEA,IAAAp9G,EAAA,EAAAymB,EAAA81F,EAAA/5G,OAAoCxC,EAAAymB,EAAQzmB,IAC5C89G,EAAAnuC,IAAA4sC,EAAAv8G,IAKA,OAFA09G,EAAAK,WAAAD,EACA,IAAAhX,EAAA6R,YAAAzO,GACA0O,YAGAxO,EAvUA,GA0UAD,EAAA,WACA,SAAAA,EAAA/iB,EAAAiT,GACAp4F,KAAAo4F,aACA,IAAA33D,EAAA,IAAAokE,EAAA0R,UAAApxB,EAAAiT,EAAAwM,GACA5kG,KAAAioG,IAAAxnE,EAAApL,QACAr1B,KAAAioG,IAAAuO,sBACA,IAAAC,EAAA,IAAA5R,EAAA6R,YAAA12G,KAAAioG,KACAjoG,KAAAw3G,MAAAx3G,KAAAioG,IAAAuP,MAEA,IACAx3G,KAAA8E,KAAA2xG,EAAAE,UACK,MAAA52G,IACL,EAAA6D,EAAAoF,MAAA,0BAAAovF,EAAA36D,YACAz9B,KAAA8E,KAAAqgF,GA+CA,OA3CA+iB,EAAAhpG,WACAwqG,gBACA,OAAA1pG,KAAAioG,IAAAuT,YAAAriF,OAGAu+E,WAAA,WACA,OAAA13G,KAAAioG,IAAAwP,iBAEAN,gBAAA,WACA,IAGApO,EACAQ,EAJAtB,EAAAjoG,KAAAioG,IACA7P,EAAAp4F,KAAAo4F,WACA2jB,EAAA9T,EAAAwP,gBAIA,GAAArf,EAAAK,UAAA,CAEA,IAAAoD,EAEA,GAHAkN,EAAAtqG,OAAA6E,OAAA,MAGA2kG,EAAA+T,UACA,IAAAzS,EAAA,EAA2BA,EAAAwS,EAAAx7G,OAA2BgpG,IAAA,CACtD,IAAAlO,EAAA0gB,EAAAxS,GAEAR,EADAlN,EAAAzD,EAAA0C,KAAA2d,WAAApd,IACAkO,OAGA,IAAAA,EAAA,EAA2BA,EAAAtB,EAAAuT,YAAAriF,MAAiCowE,IAE5DR,EADAlN,EAAAzD,EAAA0C,KAAA2d,WAAAlP,IACAA,EAIA,OAAAR,EAKA,OADAA,EAAAiQ,EAAA5gB,EADA6P,EAAAvzD,SAAAuzD,EAAAvzD,kBAAA,KACAqnE,IAGA3E,WAAA,SAAA7sG,GACA,OAAAvK,KAAAioG,IAAAmP,WAAA7sG,KAGA29F,EA5DA,IAiEA,SAAApqG,EAAAD,EAAAiF,GAEA,aAGArE,OAAAC,eAAAb,EAAA,cACAqF,OAAA,IAEArF,EAAAo+G,YAAAp+G,EAAA64G,YAAA74G,EAAA69G,eAAA79G,EAAAk9G,WAAAl9G,EAAAy9G,WAAAz9G,EAAAs9G,SAAAt9G,EAAAo9G,WAAAp9G,EAAAi9G,UAAAj9G,EAAAg9G,IAAAh9G,EAAA04G,UAAA14G,EAAAw9G,wBAAA,EAEA,IAAAz3G,EAAAd,EAAA,GAEAo5G,EAAAp5G,EAAA,IAEA0mF,EAAA1mF,EAAA,IAGAu4G,GAAA,koIACAx9G,EAAAw9G,qBAGA,IAAA9E,EAAA,WACA,IAAA4F,GAAA,MACA5xG,GAAA,QACAqF,IAAA,EACAwsG,eAAA,EACAC,MAAA,GACG,MACH9xG,GAAA,QACAqF,IAAA,EACAwsG,eAAA,EACAC,MAAA,IAEA9xG,GAAA,UACAqF,IAAA,EACAwsG,eAAA,IAEA7xG,GAAA,UACAqF,IAAA,EACA0sG,YAAA,IAEA/xG,GAAA,UACAqF,IAAA,EACA0sG,YAAA,IAEA/xG,GAAA,UACAqF,IAAA,EACA0sG,YAAA,IAEA/xG,GAAA,YACAqF,IAAA,EACA0sG,YAAA,GACG,MACH/xG,GAAA,WACAqF,IAAA,EACA2sG,YAAA,IAEAhyG,GAAA,SACAqF,IAAA,EACA2sG,YAAA,GACG,WACHhyG,GAAA,UACAqF,IAAA,EACAwsG,eAAA,GACG,gBACH7xG,GAAA,UACAqF,IAAA,EACAwsG,eAAA,EACAC,MAAA,IAEA9xG,GAAA,WACAqF,IAAA,EACAwsG,eAAA,IAEA7xG,GAAA,WACAqF,IAAA,EACAwsG,eAAA,IAEA7xG,GAAA,UACAqF,IAAA,EACAwsG,eAAA,IAEA7xG,GAAA,UACAqF,IAAA,EACAwsG,eAAA,IAEA7xG,GAAA,UACAqF,IAAA,EACAwsG,eAAA,EACAC,MAAA,IAEA9xG,GAAA,aACAqF,IAAA,EACA0sG,YAAA,IAEA/xG,GAAA,aACAqF,IAAA,EACA0sG,YAAA,IAEA/xG,GAAA,YACAqF,IAAA,EACA0sG,YAAA,IAEA/xG,GAAA,YACAqF,IAAA,EACA0sG,YAAA,GACG,MACH/xG,GAAA,YACAqF,IAAA,EACA2sG,YAAA,IAEAhyG,GAAA,YACAqF,IAAA,EACA0sG,YAAA,IAEA/xG,GAAA,YACAqF,IAAA,EACA0sG,YAAA,IAEAE,GAAA,gBACAjyG,GAAA,MACAqF,IAAA,EACAghG,YAAA,IAEArmG,GAAA,KACAqF,IAAA,EACAghG,YAAA,IAEArmG,GAAA,MACAqF,IAAA,EACAghG,WAAA,GACG,gBACHrmG,GAAA,MACAqF,IAAA,EACAghG,WAAA,IAEArmG,GAAA,MACAqF,IAAA,EACAghG,YAAA,EACA6L,QAAA,SAAAja,EAAA9xF,GACA8xF,EAAA9xF,EAAA,GAAA8xF,EAAA9xF,EAAA,GAAA8xF,EAAA9xF,EAAA,MAGAnG,GAAA,MACAqF,IAAA,EACAghG,YAAA,EACA6L,QAAA,SAAAja,EAAA9xF,GACA8xF,EAAA9xF,EAAA,GAAA8xF,EAAA9xF,EAAA,GAAA8xF,EAAA9xF,EAAA,MAGAnG,GAAA,MACAqF,IAAA,EACAghG,YAAA,EACA6L,QAAA,SAAAja,EAAA9xF,GACA8xF,EAAA9xF,EAAA,GAAA8xF,EAAA9xF,EAAA,GAAA8xF,EAAA9xF,EAAA,KAEG,MACHnG,GAAA,MACAqF,IAAA,EACAghG,WAAA,EACA6L,QAAA,SAAAja,EAAA9xF,GACA8xF,EAAA9xF,EAAA,IAAA8xF,EAAA9xF,EAAA,MAGAnG,GAAA,KACAqF,IAAA,EACAghG,YAAA,GACG,WACHrmG,GAAA,OACAqF,IAAA,EACAghG,YAAA,GACG,MACHrmG,GAAA,MACAqF,IAAA,EACAghG,YAAA,IAEArmG,GAAA,MACAqF,IAAA,EACAghG,WAAA,IAEArmG,GAAA,SACAqF,IAAA,EACAghG,YAAA,IAEArmG,GAAA,SACAqF,IAAA,EACAghG,WAAA,IAEArmG,GAAA,MACAqF,IAAA,EACAghG,YAAA,EACA6L,QAAA,SAAAja,EAAA9xF,GACA8xF,EAAA9xF,EAAA,GAAA8xF,EAAA9xF,EAAA,GAAA8xF,EAAA9xF,EAAA,KAEG,MACHnG,GAAA,OACAqF,IAAA,EACAghG,WAAA,IAEArmG,GAAA,MACAqF,IAAA,EACAghG,WAAA,IAEArmG,GAAA,OACAqF,IAAA,EACAghG,WAAA,IAEArmG,GAAA,QACAqF,IAAA,EACAghG,WAAA,IAEArmG,GAAA,OACAqF,IAAA,EACAghG,YAAA,GACG,gBACHrmG,GAAA,QACAqF,IAAA,EACA0sG,YAAA,IAEA/xG,GAAA,OACAqF,IAAA,GACA0sG,YAAA,IAEA/xG,GAAA,SACAqF,IAAA,EACA0sG,YAAA,IAEA/xG,GAAA,QACAqF,IAAA,GACA0sG,YAAA,IAGA,SAAA/F,EAAApxB,EAAAiT,EAAAskB,GACA18G,KAAA2K,MAAAw6E,EAAAz/D,WACA1lB,KAAAo4F,aACAp4F,KAAA08G,wBA4sBA,OAzsBAnG,EAAAr3G,WACAm2B,MAAA,WACA,IAAA+iE,EAAAp4F,KAAAo4F,WACA6P,EAAA,IAAA4S,EACA76G,KAAAioG,MACA,IAAA7oD,EAAAp/C,KAAA28G,cACAlN,EAAAzvG,KAAA48G,WAAAx9D,EAAA9b,QACAu5E,EAAA78G,KAAA48G,WAAAnN,EAAAnsE,QACAw5E,EAAA98G,KAAA48G,WAAAC,EAAAv5E,QACA43E,EAAAl7G,KAAA48G,WAAAE,EAAAx5E,QACAy5E,EAAA/8G,KAAAg9G,UAAAH,EAAAhsG,IAAAhS,IAAA,IACAmlC,EAAAhkC,KAAAi9G,WAAAlC,EAAAgC,EAAA9U,EAAA+D,SACA/D,EAAA7oD,SAAAvuC,IACAo3F,EAAA7tE,MAAAp6B,KAAAk9G,eAAAzN,EAAA5+F,KACAo3F,EAAA+D,QAAAhsG,KAAAm9G,iBAAAL,EAAAjsG,KACAo3F,EAAAjkE,UACAikE,EAAAiT,kBAAArqG,IACA7Q,KAAAo9G,iBAAAnV,EAAAjkE,SACAikE,EAAA+T,UAAAh4E,EAAAq5E,QAAA,OACA,IAAAC,EAAAt5E,EAAAu5E,UAAA,eACAC,EAAAx9G,KAAA48G,WAAAU,GAAAzsG,IACAmkF,EAAAhxD,EAAAu5E,UAAA,cAEAvoB,IACAoD,EAAApD,cAGA,IAQAyiB,EAAA/iE,EARA+oE,EAAAz5E,EAAAu5E,UAAA,YAUA,GARAE,IACArlB,EAAAzD,OAAAvrF,KAAAC,IAAAo0G,EAAA,GAAAA,EAAA,IACArlB,EAAAxD,QAAAxrF,KAAAwG,IAAA6tG,EAAA,GAAAA,EAAA,IACArlB,EAAAmT,cAAA,GAKAtD,EAAA+T,UAAA,CAGA,IAFA,IAAA0B,EAAA19G,KAAA48G,WAAA54E,EAAAu5E,UAAA,YAAA1sG,IAEA9S,EAAA,EAAAymB,EAAAk5F,EAAAvkF,MAAgDp7B,EAAAymB,IAAQzmB,EAAA,CACxD,IAAA4/G,EAAAD,EAAA7+G,IAAAd,GACA6/G,EAAA59G,KAAAi9G,WAAAlC,EAAA/6G,KAAAg9G,UAAAW,GAAA1V,EAAA+D,SACAhsG,KAAAo9G,iBAAAQ,GACA3V,EAAA4V,QAAAv8G,KAAAs8G,GAGAlpE,EAAA,KACA+iE,EAAAz3G,KAAA89G,cAAA95E,EAAAu5E,UAAA,WAAAC,EAAArkF,MAAA8uE,EAAA+D,SAAA,GACA/D,EAAA8V,SAAA/9G,KAAAg+G,cAAAh6E,EAAAu5E,UAAA,YAAAC,EAAArkF,YAEAs+E,EAAAz3G,KAAA89G,cAAA95E,EAAAu5E,UAAA,WAAAC,EAAArkF,MAAA8uE,EAAA+D,SAAA,GACAt3D,EAAA10C,KAAAi+G,cAAAj6E,EAAAu5E,UAAA,YAAAnlB,EAAA6P,EAAA+D,QAAAyL,WAGAxP,EAAAwP,UACAxP,EAAAvzD,WACA,IAAAwpE,EAAAl+G,KAAAm+G,kBACA3C,YAAAgC,EACAY,eAAAp6E,EAAAy3E,YAAAK,WACAZ,kBAAArqG,IACAktG,SAAA9V,EAAA8V,SACAF,QAAA5V,EAAA4V,QACApC,YAAAz3E,EAAAy3E,cAKA,OAHAxT,EAAAuT,YAAA0C,EAAA1C,YACAvT,EAAAuP,MAAA0G,EAAA1G,MACAvP,EAAA/L,OAAAgiB,EAAAhiB,OACA+L,GAEA0U,YAAA,WAKA,IAJA,IAAAhyG,EAAA3K,KAAA2K,MACAk8B,EAAAl8B,EAAApK,OACAguB,EAAA,EAEAA,EAAAsY,GAAA,IAAAl8B,EAAA4jB,MACAA,EAGA,GAAAA,GAAAsY,EACA,UAAAjjC,EAAAuP,YAAA,sBAGA,IAAAob,KACA,EAAA3qB,EAAA6H,MAAA,uBACAd,IAAAkF,SAAA0e,GACAvuB,KAAA2K,SAGA,IAAAqoD,EAAAroD,EAAA,GACAsoD,EAAAtoD,EAAA,GACA0zG,EAAA1zG,EAAA,GACA2zG,EAAA3zG,EAAA,GAEA,OACAkG,IAFA,IAAAiqG,EAAA9nD,EAAAC,EAAAorD,EAAAC,GAGAh7E,OAAA+6E,IAGArB,UAAA,SAAAx1F,GACA,IAAAxY,EAAA,EAEA,SAAAuvG,IACA,IAAAr7G,EAAAskB,EAAAxY,KAEA,YAAA9L,EAwBA,WACA,IAAA2O,EAAA,GAEA,MAAA0b,GAAA,+DACA,IAAAhtB,EAAAinB,EAAAjnB,OAEA,KAAAyO,EAAAzO,GAAA,CACA,IAAAmiB,EAAA8E,EAAAxY,KACAyV,EAAA/B,GAAA,EACAgC,EAAA,GAAAhC,EAEA,GATA,KASA+B,EACA,MAKA,GAFA5S,GAAA0b,EAAA9I,GAbA,KAeAC,EACA,MAGA7S,GAAA0b,EAAA7I,GAGA,OAAA63E,WAAA1qF,GA/CA2sG,GACS,KAAAt7G,EAETA,IADAA,EAAAskB,EAAAxY,OACA,GAAAwY,EAAAxY,MAAA,QAES,KAAA9L,EAITA,GADAA,GADAA,GADAA,EAAAskB,EAAAxY,OACA,EAAAwY,EAAAxY,OACA,EAAAwY,EAAAxY,OACA,EAAAwY,EAAAxY,KAES9L,GAAA,IAAAA,GAAA,IACTA,EAAA,IACSA,GAAA,KAAAA,GAAA,IACT,KAAAA,EAAA,KAAAskB,EAAAxY,KAAA,IACS9L,GAAA,KAAAA,GAAA,KACT,KAAAA,EAAA,KAAAskB,EAAAxY,KAAA,MAGA,EAAApL,EAAAoF,MAAA,yBAAA9F,EAAA,4BACA2tG,KA8BA,IAAA4N,KACA7+E,KACA5wB,EAAA,EAGA,IAFA,IAAA0Z,EAAAlB,EAAAjnB,OAEAyO,EAAA0Z,GAAA,CACA,IAAAhG,EAAA8E,EAAAxY,GAEA0T,GAAA,IACA,KAAAA,IACAA,KAAA,EAAA8E,IAAAxY,IAGA4wB,EAAAt+B,MAAAohB,EAAA+7F,IACAA,OACAzvG,GAEAyvG,EAAAn9G,KAAAi9G,KAIA,OAAA3+E,GAEAg9E,WAAA,SAAA5tG,GACA,IAKAjR,EAAAymB,EALAk6F,EAAA,IAAAvD,EACAxwG,EAAA3K,KAAA2K,MACAwuB,EAAAxuB,EAAAqE,MAAA,EAAArE,EAAAqE,KACA0mG,KACAhtF,EAAA1Z,EAGA,OAAAmqB,EAAA,CACA,IAAAwlF,EAAAh0G,EAAAqE,KACAq0B,EAAAr0B,GAAAmqB,EAAA,GAAAwlF,EAAA,EAEA,IAAA5gH,EAAA,EAAAymB,EAAA2U,EAAA,EAAmCp7B,EAAAymB,IAAQzmB,EAAA,CAG3C,IAFA,IAAAwwB,EAAA,EAEAsF,EAAA,EAAyBA,EAAA8qF,IAAgB9qF,EACzCtF,IAAA,EACAA,GAAA5jB,EAAAqE,KAGA0mG,EAAAp0G,KAAA+hC,EAAA9U,GAGA7F,EAAAgtF,EAAAv8E,GAGA,IAAAp7B,EAAA,EAAAymB,EAAAkxF,EAAAn1G,OAAA,EAA0CxC,EAAAymB,IAAQzmB,EAAA,CAClD,IAAA6gH,EAAAlJ,EAAA33G,GACA8gH,EAAAnJ,EAAA33G,EAAA,GACA2gH,EAAAhxC,IAAA/iE,EAAAkF,SAAA+uG,EAAAC,IAGA,OACAhuG,IAAA6tG,EACAp7E,OAAA5a,IAGAw0F,eAAA,SAAAxsG,GAGA,IAFA,IAAA0pB,KAEAr8B,EAAA,EAAAymB,EAAA9T,EAAAyoB,MAAuCp7B,EAAAymB,IAAQzmB,EAAA,CAC/C,IAAAO,EAAAoS,EAAA7R,IAAAd,GACAq8B,EAAA94B,MAAA,EAAAsC,EAAA0L,eAAAhR,IAGA,OAAA87B,GAEA+iF,iBAAA,SAAAzsG,GAGA,IAFA,IAAAs7F,EAAA,IAAAiP,EAEAl9G,EAAA,EAAAymB,EAAA9T,EAAAyoB,MAAuCp7B,EAAAymB,IAAQzmB,EAAA,CAC/C,IAAA+G,EAAA4L,EAAA7R,IAAAd,GACAiuG,EAAAt+B,KAAA,EAAA9pE,EAAA0L,eAAAxK,IAGA,OAAAknG,GAEAiR,WAAA,SAAA6B,EAAAt3F,EAAAwkF,GAGA,IAFA,IAAA+S,EAAA,IAAAD,EAAA9S,GAEAjuG,EAAA,EAAAymB,EAAAgD,EAAAjnB,OAAuCxC,EAAAymB,IAAQzmB,EAAA,CAC/C,IAAAihH,EAAAx3F,EAAAzpB,GACAwF,EAAAy7G,EAAA,GACA97G,EAAA87G,EAAA,GACAD,EAAAE,SAAA17G,EAAAL,GAGA,OAAA67G,GAEAG,gBAAA,SAAA73E,EAAAviC,EAAAs5G,EAAAlD,GACA,IAAAp2G,GAAAuiC,EAAA83E,UAvdA,GAwdA,SAOA,IAJA,IAAAC,EAAA/3E,EAAA+3E,UACA5c,EAAAn7D,EAAAm7D,MACAjiG,EAAAuE,EAAAvE,OAEAszB,EAAA,EAAqBA,EAAAtzB,GAAY,CACjC,IAAA2C,EAAA4B,EAAA+uB,KACAwrF,EAAA,KAEA,QAAAn8G,EAAA,CACA,IAAAgwC,EAAApuC,EAAA+uB,KAEA,IAAAqf,GACApuC,EAAA+uB,EAAA,OACA/uB,EAAA+uB,EAAA,MACAurF,EAAA,GAEAC,EAAA7C,EAAAtpE,QAES,QAAAhwC,EACTs/F,EAAA4c,IAAAt6G,EAAA+uB,IAAA,GAAA/uB,EAAA+uB,EAAA,YACAA,GAAA,EACAurF,SACS,QAAAl8G,EAAA,CACT,GAAAk8G,GAAA,IACAA,GAAA,EAEAp/G,KAAA08G,qBAEA,OADAr1E,EAAAswE,KAAAnV,EAAAx/E,MAAAo8F,IAAA,IACA,EAIAC,EAAAlD,EAAAj5G,QACS,GAAAA,GAAA,IAAAA,GAAA,IACTs/F,EAAA4c,GAAAl8G,EAAA,IACAk8G,SACS,GAAAl8G,GAAA,KAAAA,GAAA,IACTs/F,EAAA4c,GAAAl8G,EAAA,KAAAA,EAAA,QAAA4B,EAAA+uB,GAAA,MAAA3wB,EAAA,QAAA4B,EAAA+uB,GAAA,IACAA,IACAurF,SACS,SAAAl8G,EACTs/F,EAAA4c,IAAAt6G,EAAA+uB,IAAA,GAAA/uB,EAAA+uB,EAAA,OAAA/uB,EAAA+uB,EAAA,MAAA/uB,EAAA+uB,EAAA,UACAA,GAAA,EACAurF,SACS,QAAAl8G,GAAA,KAAAA,EACTmkC,EAAAgF,OAAA+yE,GAAA,EACAvrF,GAAAwT,EAAAgF,MAAA,KACA+yE,GAAA,EACAC,EAAAlD,EAAAj5G,OACS,SAAAA,GAAA,KAAAA,EAAA,CACT,IAAA44G,EAQA,KALAA,EADA,KAAA54G,EACAk7G,EAEAlD,GAMA,OAFAmE,EAAAlD,EAAAj5G,IACA,EAAAU,EAAAoF,MAAA,0BAAAq2G,EAAA90G,KACA,EAGA,IAAA8/F,EAAA,MAEAyR,EAAA3iF,MAAA,KACAkxE,EAAA,IACWyR,EAAA3iF,MAAA,QACXkxE,EAAA,MAGA,IAAAiV,EAAA9c,IAAA4c,GAAA/U,EAEA,GAAAiV,EAAA,GAAAA,GAAAxD,EAAA3iF,OAAAlE,MAAAqqF,GAGA,OAFAD,EAAAlD,EAAAj5G,IACA,EAAAU,EAAAoF,MAAA,+BAAAq2G,EAAA90G,KACA,EAOA,GAJA88B,EAAA+3E,YACA/3E,EAAA83E,aACAn/G,KAAAk/G,gBAAA73E,EAAAy0E,EAAAj9G,IAAAygH,GAAAlB,EAAAlD,GAGA,SAGA7zE,EAAA83E,YACAC,EAAA/3E,EAAA+3E,UACA,SACS,QAAAl8G,EAET,OADAmkC,EAAA+3E,aACA,EAEAC,EAAAlD,EAAAj5G,GAGA,GAAAm8G,EAAA,CAYA,GAXAA,EAAAhD,OACAh1E,EAAAgF,OAAA+yE,GAAA,EAEA,IAAAl8G,GAAA,KAAAA,EACAmkC,EAAAk4E,WAAA,GACal4E,EAAAk4E,WAAA,IAAAr8G,GAAA,KAAAA,KACb,EAAAU,EAAAoF,MAAA,qCACAlE,EAAA+uB,EAAA,OAAA3wB,EAAA,OAIA,QAAAm8G,IACAh4E,EAAAk1E,YAAA6C,EAAAC,EAAAzvG,IAEA,OADA,EAAAhM,EAAAoF,MAAA,6BAAAq2G,EAAA90G,GAAA,aAAsF60G,EAAA,eAAAC,EAAAzvG,MACtF,EAIAy3B,EAAAm4E,oBAAAH,EAAAjD,gBACA/0E,EAAAm4E,oBAAA,GACAJ,GAAAC,EAAAzvG,MAEA,GAAAyvG,EAAAhD,KACA+C,GAAA,EACaA,EAAA,IACb,EAAAx7G,EAAAoF,MAAA,wDAGAo2G,EAAA,GAAA5c,EAAA4c,EAAA,QACA/3E,EAAAmR,MAAAgqD,EAAA4c,EAAA,KAIA,eAAAC,GACA,YAAAA,GACAA,EAAA5C,QAAAja,EAAA4c,GAGAA,GAAAC,EAAAzO,YACWyO,EAAAjD,cACXgD,EAAA,EACWC,EAAA/C,YACX8C,EAAA,EACA/3E,EAAAk1E,YAAA,GACW8C,EAAA9C,aACX6C,EAAA,EACA/3E,EAAAk1E,YAAA,EACAl1E,EAAAm4E,oBAAA,IAMA,OADAn4E,EAAA+3E,aACA,GAGA56G,kBAAAg3G,YACAA,EAAA4C,eACAA,EAAAlD,gBACAA,EAAA6C,SACAA,EAAAF,QACAA,EAAApC,YACAA,IAMA,IAJA,IAAAjE,KACAtb,KACA/iE,EAAAqiF,EAAAriF,MAEAp7B,EAAA,EAAqBA,EAAAo7B,EAAWp7B,IAAA,CAChC,IAAAu6G,EAAAkD,EAAA38G,IAAAd,GACAspC,GACA83E,UAAA,EACAC,UAAA,EACA5c,SACA+Z,YAAA,EACAlwE,MAAA,EACAmzE,oBAAA,EACA7H,KAAA,KACAn/D,MAAA,KACA+mE,WAAA,GAEAhL,GAAA,EACAkL,EAAA,KACAC,EAAAjE,EAEA,GAAAsC,GAAAF,EAAAt9G,OAAA,CACA,IAAAo/G,EAAA5B,EAAA6B,WAAA7hH,IAEA,IAAA4hH,KACA,EAAA/7G,EAAAoF,MAAA,oCACAurG,GAAA,GAGAoL,GAAA9B,EAAAt9G,UACA,EAAAqD,EAAAoF,MAAA,qCACAurG,GAAA,GAGAA,IAEAkL,GADAC,EAAA7B,EAAA8B,GAAAlE,aACAK,iBAESsC,IACTqB,EAAArB,GAOA,GAJA7J,IACAA,EAAAv0G,KAAAk/G,gBAAA73E,EAAAixE,EAAAmH,EAAAvE,IAGA,OAAA7zE,EAAAmR,MAAA,CACA,MAAAqnE,EAAAH,EAAAnC,UAAA,iBACArhB,EAAAn+F,GAAA8hH,EAAAx4E,EAAAmR,UACS,CACT,MAAA4jD,EAAAsjB,EAAAnC,UAAA,iBACArhB,EAAAn+F,GAAAq+F,EAGA,OAAA/0D,EAAAswE,OACAH,EAAAz5G,GAAAspC,EAAAswE,MAGApD,GACAiH,EAAApsG,IAAArR,EAAA,IAAAgH,YAAA,MAIA,OACAy2G,cACAhE,QACAtb,WAIA4jB,uBAAA,SAAAC,GACA,IAAAtE,EAAAz7G,KAAAi9G,WAAAvB,KAAAqE,EAAA/T,SACA+T,EAAAd,SAAA,UACAc,EAAAtE,eAEA2B,iBAAA,SAAA2C,GACA,GAAAA,EAAA1C,QAAA,YAKA,IAAA2C,EAAAD,EAAAxC,UAAA,WAEA,GAAAn8G,MAAA0lB,QAAAk5F,IAAA,IAAAA,EAAAz/G,OAAA,CAKA,IAAAktC,EAAAuyE,EAAA,GACAzxF,EAAAyxF,EAAA,GAEA,OAAAvyE,GAAAlf,GAAAvuB,KAAA2K,MAAApK,OACAP,KAAA8/G,uBAAAC,OADA,CAKA,IAAAE,EAAA1xF,EAAAkf,EACAyyE,EAAAlgH,KAAA2K,MAAAkF,SAAA0e,EAAA0xF,GACAz4F,EAAAxnB,KAAAg9G,UAAAkD,GACAzE,EAAAz7G,KAAAi9G,WAAAvB,EAAAl0F,EAAAu4F,EAAA/T,SAGA,GAFA+T,EAAAtE,cAEAA,EAAA8B,UAAA,UAIA,IAAA4C,EAAA1E,EAAA8B,UAAA,SACA6C,EAAA7xF,EAAA4xF,EAEA,OAAAA,GAAAC,GAAApgH,KAAA2K,MAAApK,OACAP,KAAA8/G,uBAAAC,OADA,CAKA,IAAAjE,EAAA97G,KAAA48G,WAAAwD,GACA3E,EAAAK,aAAAjrG,YA/BAkvG,EAAAM,aAAA,gBAPArgH,KAAA8/G,uBAAAC,IAwCAjC,cAAA,SAAA9uG,EAAAzO,EAAAyrG,EAAA3Q,GACA,OAAArsF,EACA,WAAAssG,GAAA,EAAAgF,EAAAC,UAAArE,EAAAsE,iBACO,OAAAxxG,EACP,WAAAssG,GAAA,EAAAgF,EAAAG,OAAAvE,EAAAwE,eACO,OAAA1xG,EACP,WAAAssG,GAAA,EAAAgF,EAAAK,cAAAzE,EAAA0E,qBAGA,IAIAr2G,EAAA4uB,EAAAp7B,EAJA4M,EAAA3K,KAAA2K,MACAM,EAAA+D,EACAqmG,EAAA1qG,EAAAqE,KACAyoG,GAAA,WAIA,OAFAl3G,GAAA,EAEA80G,GACA,OACA,IAAAt3G,EAAA,EAAqBA,EAAAwC,EAAYxC,IACjCwM,EAAAI,EAAAqE,MAAA,EAAArE,EAAAqE,KACAyoG,EAAAn2G,KAAA+5F,EAAA9wF,EAAAyhG,EAAAntG,IAAA0L,IAGA,MAEA,OACA,KAAAktG,EAAAl3G,WAIA,IAHAgK,EAAAI,EAAAqE,MAAA,EAAArE,EAAAqE,KACAmqB,EAAAxuB,EAAAqE,KAEAjR,EAAA,EAAuBA,GAAAo7B,EAAYp7B,IACnC05G,EAAAn2G,KAAA+5F,EAAA9wF,IAAAyhG,EAAAntG,IAAA0L,MAIA,MAEA,OACA,KAAAktG,EAAAl3G,WAIA,IAHAgK,EAAAI,EAAAqE,MAAA,EAAArE,EAAAqE,KACAmqB,EAAAxuB,EAAAqE,MAAA,EAAArE,EAAAqE,KAEAjR,EAAA,EAAuBA,GAAAo7B,EAAYp7B,IACnC05G,EAAAn2G,KAAA+5F,EAAA9wF,IAAAyhG,EAAAntG,IAAA0L,MAIA,MAEA,QACA,UAAA3G,EAAAuP,YAAA,0BAGA,IAAAuV,EAAA1Z,EACA6xG,EAAAl2G,EAAAkF,SAAA5E,EAAAyd,GACA,WAAA4yF,GAAA,EAAAjG,EAAAoC,EAAAoJ,IAEA5C,cAAA,SAAAjvG,EAAAopF,EAAA4T,EAAAyL,GACA,IAGApC,EAAAt3G,EAAAymB,EAHAkwB,EAAAj2C,OAAA6E,OAAA,MACAqH,EAAA3K,KAAA2K,MACAm2G,GAAA,EAEAD,EAAA,KAYA,OAAA7xG,GAAA,IAAAA,EAAA,CACA8xG,GAAA,EACAzL,EAAArmG,EACA,IAAAyrF,EAAAzrF,EAAAw6E,EAAAu3B,eAAAv3B,EAAAiQ,iBAEA,IAAA17F,EAAA,EAAAymB,EAAAizF,EAAAl3G,OAAwCxC,EAAAymB,EAAQzmB,IAAA,CAChD,IAAA2S,EAAA+pF,EAAAl0F,QAAAkxG,EAAA15G,KAEA,IAAA2S,IACAgkC,EAAAhkC,GAAA3S,QAGO,CACP,IAAAijH,EAAAhyG,EAGA,YAFAqmG,EAAA1qG,EAAAqE,OAGA,OACA,IAAAiyG,EAAAt2G,EAAAqE,KAEA,IAAAjR,EAAA,EAAuBA,GAAAkjH,EAAkBljH,IACzC22C,EAAA/pC,EAAAqE,MAAAjR,EAGA,MAEA,OACA,IAAAmjH,EAAAv2G,EAAAqE,KACAmyG,EAAA,EAEA,IAAApjH,EAAA,EAAuBA,EAAAmjH,EAAiBnjH,IAIxC,IAHA,IAAAkN,EAAAN,EAAAqE,KACAyiC,EAAA9mC,EAAAqE,KAEA6kB,EAAA5oB,EAAiC4oB,GAAA5oB,EAAAwmC,EAAmB5d,IACpD6gB,EAAA7gB,GAAAstF,IAIA,MAEA,QACA,UAAAv9G,EAAAuP,wCAAoEkiG,YAGpE,IAAA3qD,EAAA17C,EAEA,IAAAqmG,IACA1qG,EAAAq2G,IAAA,IA1DA,WACA,IAAAI,EAAAz2G,EAAAqE,KAEA,IAAAjR,EAAA,EAAmBA,EAAAqjH,EAAsBrjH,IAAA,CACzC,IAAAoP,EAAAxC,EAAAqE,KACAqyG,GAAA12G,EAAAqE,MAAA,QAAArE,EAAAqE,MACA0lC,EAAAvnC,GAAAsqG,EAAAlxG,QAAAylG,EAAAntG,IAAAwiH,KAqDAC,IAGAT,EAAAl2G,EAAAkF,SAAAmxG,EAAAt2D,GAIA,WAAA62D,EAAAT,EADAzL,GAAA,IACA3gE,EAAAmsE,IAEA7C,cAAA,SAAAhvG,EAAAzO,GACA,IAGAxC,EAHA4M,EAAA3K,KAAA2K,MACA0qG,EAAA1qG,EAAAqE,KACA+uG,KAGA,OAAA1I,GACA,OACA,IAAAt3G,EAAA,EAAqBA,EAAAwC,IAAYxC,EAAA,CACjC,IAAAwM,EAAAI,EAAAqE,KACA+uG,EAAAz8G,KAAAiJ,GAGA,MAEA,OACA,IAAA22G,EAAAv2G,EAAAqE,MAAA,EAAArE,EAAAqE,KAEA,IAAAjR,EAAA,EAAqBA,EAAAmjH,IAAiBnjH,EAAA,CACtC,IAAAslB,EAAA1Y,EAAAqE,MAAA,EAAArE,EAAAqE,KAEA,IAAAjR,GAAA,IAAAslB,KACA,EAAAzf,EAAAoF,MAAA,mFACAqa,EAAA,GAMA,IAHA,IAAAs8F,EAAAh1G,EAAAqE,KACA+uB,EAAApzB,EAAAqE,IAAA,EAAArE,EAAAqE,EAAA,GAEA6kB,EAAAxQ,EAA+BwQ,EAAAkK,IAAUlK,EACzCkqF,EAAAz8G,KAAAq+G,GAIA3wG,GAAA,EACA,MAEA,QACA,UAAApL,EAAAuP,8CAAwEkiG,OAGxE,GAAA0I,EAAAx9G,WACA,UAAAqD,EAAAuP,YAAA,qCAGA,WAAA8oG,EAAA5G,EAAA0I,KAGAxH,EAl6BA,GAq6BA14G,EAAA04G,YAEA,IAAAsE,EAAA,WACA,SAAAA,IACA76G,KAAAo/C,OAAA,KACAp/C,KAAAo6B,SACAp6B,KAAAgkC,QAAA,KACAhkC,KAAAgsG,QAAA,IAAAiP,EACAj7G,KAAAk7G,gBAAA,KACAl7G,KAAA00C,SAAA,KACA10C,KAAAy3G,QAAA,KACAz3G,KAAAw7G,YAAA,KACAx7G,KAAA69G,WACA79G,KAAA+9G,SAAA,KACA/9G,KAAAg8G,WAAA,EA0BA,OAvBAnB,EAAA37G,WACAs3G,oBAAA,WACA,GAAAx2G,KAAAw7G,YAAAriF,OAAA,OACA,EAAAv1B,EAAAoF,MAAA,iEADA,CAKA,IAAAw4G,EAAAxhH,KAAAw7G,YAAA38G,IAAA,GACAmB,KAAAw7G,YAAA9tC,IAAA8zC,GAEAxhH,KAAAg8G,WACAh8G,KAAA+9G,kBAAAz8G,KAAAtB,KAAA+9G,kBAAA,MAGA3G,WAAA,SAAA7sG,GACA,QAAAA,EAAA,GAAAA,GAAAvK,KAAAw7G,YAAAriF,QAIAn5B,KAAAw7G,YAAA38G,IAAA0L,GACAhK,OAAA,IAGAs6G,EAtCA,GAyCAh9G,EAAAg9G,MAEA,IAAAC,EAAA,WAQA,OAPA,SAAA9nD,EAAAC,EAAAorD,EAAAC,GACAt+G,KAAAgzD,QACAhzD,KAAAizD,QACAjzD,KAAAq+G,UACAr+G,KAAAs+G,WALA,GAWAzgH,EAAAi9G,YAEA,IAAAG,EAAA,WACA,SAAAA,IACAj7G,KAAAgsG,WAuCA,OApCAiP,EAAA/7G,WACAL,IAAA,SAAA6R,GACA,OAAAA,GAAA,GAAAA,GAAA+wG,IACApG,EAAA3qG,GAGAA,EA5+BA,KA4+BA1Q,KAAAgsG,QAAAzrG,OACAP,KAAAgsG,QAAAt7F,EA7+BA,KAg/BA2qG,EAAA,IAEAqG,OAAA,SAAA7vG,GACA,IAAAnB,EAAA2qG,EAAA90G,QAAAsL,GAEA,WAAAnB,EACAA,GAKA,KAFAA,EAAA1Q,KAAAgsG,QAAAzlG,QAAAsL,IAGAnB,EA5/BA,KA+/BA,GAEAg9D,IAAA,SAAAxqE,GACAlD,KAAAgsG,QAAA1qG,KAAA4B,IAGAi2B,YACA,OAAAn5B,KAAAgsG,QAAAzrG,SAIA06G,EAzCA,GA4CAp9G,EAAAo9G,aAEA,IAAAE,EAAA,WACA,SAAAA,IACAn7G,KAAA2hH,WACA3hH,KAAAO,OAAA,EAqBA,OAlBA46G,EAAAj8G,WACAwuE,IAAA,SAAA5oE,GACA9E,KAAAO,QAAAuE,EAAAvE,OACAP,KAAA2hH,QAAArgH,KAAAwD,IAEAsK,IAAA,SAAAsB,EAAA5L,GACA9E,KAAAO,QAAAuE,EAAAvE,OAAAP,KAAA2hH,QAAAjxG,GAAAnQ,OACAP,KAAA2hH,QAAAjxG,GAAA5L,GAEAjG,IAAA,SAAA6R,GACA,OAAA1Q,KAAA2hH,QAAAjxG,IAGAyoB,YACA,OAAAn5B,KAAA2hH,QAAAphH,SAIA46G,EAxBA,GA2BAt9G,EAAAs9G,WAEA,IAAAyG,EAAA,WACA,SAAAA,EAAAzb,EAAA6F,GACAhsG,KAAA6hH,aAAA1b,EAAA0b,aACA7hH,KAAA8hH,aAAA3b,EAAA2b,aACA9hH,KAAA+hH,SAAA5b,EAAA4b,SACA/hH,KAAAgiH,MAAA7b,EAAA6b,MACAhiH,KAAAiiH,QAAA9b,EAAA8b,QACAjiH,KAAAkiH,MAAA/b,EAAA+b,MACAliH,KAAAgsG,UACAhsG,KAAA2tB,OAAAlvB,OAAA6E,OAAA,MAmFA,OAhFAs+G,EAAA1iH,WACA+/G,SAAA,SAAA17G,EAAAL,GACA,KAAAK,KAAAvD,KAAA6hH,cACA,SAGA,IAAAM,EAAAj/G,EAAA3C,OAEA,OAAA4hH,EACA,SAGA,QAAApkH,EAAA,EAAqBA,EAAAokH,EAAiBpkH,IACtC,GAAAk3B,MAAA/xB,EAAAnF,IAEA,OADA,EAAA6F,EAAAoF,MAAA,2BAAA9F,EAAA,cAAAK,EAAA,OACA,EAIA,IAAAghB,EAAAvkB,KAAAgiH,MAAAz+G,GAOA,MALA,QAAAghB,GAAA,QAAAA,GAAA,WAAAA,IACArhB,IAAA,IAGAlD,KAAA2tB,OAAApqB,GAAAL,GACA,GAEA83G,UAAA,SAAA18G,EAAA4E,GACA,KAAA5E,KAAA0B,KAAA8hH,cACA,UAAAl+G,EAAAuP,wCAAgE7U,MAGhE0B,KAAA2tB,OAAA3tB,KAAA8hH,aAAAxjH,IAAA4E,GAEAm6G,QAAA,SAAA/+G,GACA,OAAA0B,KAAA8hH,aAAAxjH,KAAA0B,KAAA2tB,QAEA4vF,UAAA,SAAAj/G,GACA,KAAAA,KAAA0B,KAAA8hH,cACA,UAAAl+G,EAAAuP,uCAA+D7U,MAG/D,IAAAiF,EAAAvD,KAAA8hH,aAAAxjH,GAEA,OAAAiF,KAAAvD,KAAA2tB,OAIA3tB,KAAA2tB,OAAApqB,GAHAvD,KAAA+hH,SAAAx+G,IAKA88G,aAAA,SAAA/hH,UACA0B,KAAA2tB,OAAA3tB,KAAA8hH,aAAAxjH,MAIAsjH,EAAAQ,aAAA,SAAAC,GAUA,IATA,IAAAlc,GACA0b,gBACAC,gBACAC,YACAC,SACAC,WACAC,UAGAnkH,EAAA,EAAAymB,EAAA69F,EAAA9hH,OAAuCxC,EAAAymB,IAAQzmB,EAAA,CAC/C,IAAAujC,EAAA+gF,EAAAtkH,GACAwF,EAAAnC,MAAA0lB,QAAAwa,EAAA,KAAAA,EAAA,UAAAA,EAAA,MAAAA,EAAA,GACA6kE,EAAA0b,aAAAt+G,GAAA+9B,EAAA,GACA6kE,EAAA2b,aAAAxgF,EAAA,IAAA/9B,EACA4iG,EAAA6b,MAAAz+G,GAAA+9B,EAAA,GACA6kE,EAAA4b,SAAAx+G,GAAA+9B,EAAA,GACA6kE,EAAA8b,QAAA1+G,GAAAnC,MAAA0lB,QAAAwa,EAAA,IAAAA,EAAA,IAAAA,EAAA,IACA6kE,EAAA+b,MAAA5gH,KAAAiC,GAGA,OAAA4iG,GAGAyb,EA5FA,GA+FA7G,EAAA,WACA,IAAAsH,KAAA,koCACAlc,EAAA,KAEA,SAAA4U,EAAA/O,GACA,OAAA7F,IACAA,EAAAyb,EAAAQ,aAAAC,IAGAT,EAAA1jH,KAAA8B,KAAAmmG,EAAA6F,GACAhsG,KAAAy7G,YAAA,KAIA,OADAV,EAAA77G,UAAAT,OAAA6E,OAAAs+G,EAAA1iH,WACA67G,EAdA,GAiBAl9G,EAAAk9G,aAEA,IAAAW,EAAA,WACA,IAAA2G,IAAA,ojBACAlc,EAAA,KAEA,SAAAuV,EAAA1P,GACA,OAAA7F,IACAA,EAAAyb,EAAAQ,aAAAC,IAGAT,EAAA1jH,KAAA8B,KAAAmmG,EAAA6F,GACAhsG,KAAA87G,WAAA,KAIA,OADAJ,EAAAx8G,UAAAT,OAAA6E,OAAAs+G,EAAA1iH,WACAw8G,EAdA,GAiBA79G,EAAA69G,iBACA,IAAA4E,GACAC,UAAA,EACAE,OAAA,EACAE,cAAA,GAGArF,EAAA,WAQA,OAPA,SAAAwF,EAAAzL,EAAAoC,EAAAoJ,GACA7gH,KAAA8gH,aACA9gH,KAAAq1G,SACAr1G,KAAAy3G,UACAz3G,KAAA6gH,OALA,GAWAhjH,EAAAy9G,aAEA,IAAAiG,EAAA,WAQA,OAPA,SAAAT,EAAAzL,EAAA3gE,EAAAmsE,GACA7gH,KAAA8gH,aACA9gH,KAAAq1G,SACAr1G,KAAA00C,WACA10C,KAAA6gH,OALA,GAWA5E,EAAA,WACA,SAAAA,EAAA5G,EAAA0I,GACA/9G,KAAAq1G,SACAr1G,KAAA+9G,WAYA,OATA9B,EAAA/8G,WACA0gH,WAAA,SAAA0C,GACA,OAAAA,EAAA,GAAAA,GAAAtiH,KAAA+9G,SAAAx9G,QACA,EAGAP,KAAA+9G,SAAAuE,KAGArG,EAfA,GAkBAp+G,EAAAo+G,cAEA,IAAAsG,EAAA,WACA,SAAAA,IACAviH,KAAA01G,QAAAj3G,OAAA6E,OAAA,MAgDA,OA7CAi/G,EAAArjH,WACAsjH,WAAA,SAAAj/G,GACA,OAAAA,KAAAvD,KAAA01G,SAEA+M,MAAA,SAAAl/G,EAAAm/G,GACA,GAAAn/G,KAAAvD,KAAA01G,QACA,UAAA9xG,EAAAuP,4CAAoE5P,KAGpEvD,KAAA01G,QAAAnyG,GAAAm/G,GAEAn0F,OAAA,SAAArrB,GACA,QAAAK,KAAAvD,KAAA01G,QACA11G,KAAA01G,QAAAnyG,IAAAL,GAGAy/G,iBAAA,SAAAp/G,EAAAoqB,EAAAonC,GACA,KAAAxxD,KAAAvD,KAAA01G,SACA,UAAA9xG,EAAAuP,wCAAgE5P,KAOhE,IAJA,IAAAuB,EAAAiwD,EAAAjwD,KACA8hF,EAAA5mF,KAAA01G,QAAAnyG,GAGAxF,EAAA,EAAAymB,EAAAmJ,EAAAptB,OAAyCxC,EAAAymB,IAAQzmB,EAAA,CACjD,IAAAqmD,EAHA,EAGArmD,EAAA6oF,EACAg8B,EAAAx+D,EAAA,EACAy+D,EAAAz+D,EAAA,EACA0+D,EAAA1+D,EAAA,EACA2+D,EAAA3+D,EAAA,EAEA,QAAAt/C,EAAAs/C,IAAA,IAAAt/C,EAAA89G,IAAA,IAAA99G,EAAA+9G,IAAA,IAAA/9G,EAAAg+G,IAAA,IAAAh+G,EAAAi+G,GACA,UAAAn/G,EAAAuP,YAAA,0CAGA,IAAAjQ,EAAAyqB,EAAA5vB,GACA+G,EAAAs/C,GAAA,GACAt/C,EAAA89G,GAAA1/G,GAAA,OACA4B,EAAA+9G,GAAA3/G,GAAA,OACA4B,EAAAg+G,GAAA5/G,GAAA,MACA4B,EAAAi+G,GAAA,IAAA7/G,KAIAq/G,EAlDA,GAqDA7L,EAAA,WACA,SAAAA,EAAAzO,GACAjoG,KAAAioG,MAwdA,OArdAyO,EAAAx3G,WACAy3G,QAAA,WACA,IAAA1O,EAAAjoG,KAAAioG,IACAlzC,GACAjwD,QACAvE,OAAA,EACAmtE,IAAA,SAAA5oE,GACA9E,KAAA8E,KAAA9E,KAAA8E,KAAAtE,OAAAsE,GACA9E,KAAAO,OAAAP,KAAA8E,KAAAvE,SAGA6+C,EAAAp/C,KAAAgjH,cAAA/a,EAAA7oD,QACA2V,EAAA2Y,IAAAtuB,GACA,IAAAqwD,EAAAzvG,KAAAijH,iBAAAhb,EAAA7tE,OAGA,GAFA26B,EAAA2Y,IAAA+hC,GAEAxH,EAAA+T,WACA/T,EAAAjkE,QAAAq5E,QAAA,eACA,IAAAlsG,EAAA82F,EAAAjkE,QAAAu5E,UAAA,cACAtV,EAAAjkE,QAAAq8E,aAAA,cAEA,QAAAtiH,EAAA,EAAAymB,EAAAyjF,EAAA4V,QAAAt9G,OAAkDxC,EAAAymB,EAAQzmB,IAAA,CAC1D,IAAAmlH,EAAAjb,EAAA4V,QAAA9/G,GACA+4E,EAAA3lE,EAAA6R,MAAA,GAEAkgG,EAAA7F,QAAA,gBACAvmC,EAAAlzE,EAAAwP,KAAAiJ,UAAAy6D,EAAAosC,EAAA3F,UAAA,gBAGA2F,EAAAlI,UAAA,aAAAlkC,IAKAmxB,EAAAjkE,QAAAg3E,UAAA,aACA,IAAAmI,EAAAnjH,KAAAojH,iBAAAnb,EAAAjkE,SAAA+wB,EAAAx0D,OAAA0nG,EAAA+T,WACAjnD,EAAA2Y,IAAAy1C,EAAApuD,QACA,IAAAsuD,EAAAF,EAAAG,SAAA,GACAxG,EAAA98G,KAAAujH,mBAAAtb,EAAA+D,iBACAj3C,EAAA2Y,IAAAovC,GACA,IAAA5B,EAAAl7G,KAAAwjH,aAAAvb,EAAAiT,iBAGA,GAFAnmD,EAAA2Y,IAAAwtC,GAEAjT,EAAAvzD,UAAAuzD,EAAAjkE,QAAAq5E,QAAA,YACA,GAAApV,EAAAvzD,SAAAosE,WACAuC,EAAAV,iBAAA,YAAA1a,EAAAvzD,SAAA2gE,QAAAtgD,OACS,CACT,IAAArgB,EAAA10C,KAAAyjH,gBAAAxb,EAAAvzD,UACA2uE,EAAAV,iBAAA,YAAA5tD,EAAAx0D,QAAAw0D,GACAA,EAAA2Y,IAAAh5B,GAIA,IAAA+iE,EAAAz3G,KAAA0jH,eAAAzb,EAAAwP,QAAAxP,EAAAuT,YAAAriF,MAAA8uE,EAAA+D,QAAA/D,EAAA+T,WACAqH,EAAAV,iBAAA,WAAA5tD,EAAAx0D,QAAAw0D,GACAA,EAAA2Y,IAAA+pC,GACA,IAAA+D,EAAAx7G,KAAA2jH,mBAAA1b,EAAAuT,aAIA,GAHA6H,EAAAV,iBAAA,eAAA5tD,EAAAx0D,QAAAw0D,GACAA,EAAA2Y,IAAA8tC,GAEAvT,EAAA+T,UAAA,CACAqH,EAAAV,iBAAA,YAAA5tD,EAAAx0D,QAAAw0D,GACA,IAAAgpD,EAAA/9G,KAAA4jH,gBAAA3b,EAAA8V,UACAhpD,EAAA2Y,IAAAqwC,GACAoF,EAAAnjH,KAAAojH,gBAAAnb,EAAA4V,QAAA9oD,EAAAx0D,QAAA,GACA8iH,EAAAV,iBAAA,WAAA5tD,EAAAx0D,QAAAw0D,GACAA,EAAA2Y,IAAAy1C,EAAApuD,QACA,IAAA8uD,EAAAV,EAAAG,SACAtjH,KAAA8jH,oBAAA7b,EAAA4V,QAAAgG,EAAA9uD,GAKA,OAFA/0D,KAAA8jH,qBAAA7b,EAAAjkE,UAAAq/E,GAAAtuD,GACAA,EAAA2Y,KAAA,IACA3Y,EAAAjwD,MAEAi/G,aAAA,SAAA7gH,GACA,OAAAq5F,WAAAr5F,KAAA8xB,SAAA9xB,EAAA,KAAA+xB,MAAA/xB,GAIAlD,KAAAgkH,YAAA9gH,GAHAlD,KAAAikH,cAAA/gH,IAKA8gH,YAAA,SAAA/5G,GACA,IAAA/G,EAAA+G,EAAA2D,WACAzP,EAAA,gDAAiDuhC,KAAAx8B,GAEjD,GAAA/E,EAAA,CACA,IAAAsmE,EAAA83B,WAAA,OAAAp+F,EAAA,IAAAA,EAAA,MAAAA,EAAA,GAAAoC,SACA2C,GAAAkG,KAAA4tF,MAAA/sF,EAAAw6D,MAAA72D,WAGA,IACA7P,EAAAymB,EADA0/F,EAAA,GAGA,IAAAnmH,EAAA,EAAAymB,EAAAthB,EAAA3C,OAAoCxC,EAAAymB,IAAQzmB,EAAA,CAC5C,IAAAqlB,EAAAlgB,EAAAnF,GAGAmmH,GADA,MAAA9gG,EACA,MAAAlgB,IAAAnF,GAAA,QACS,MAAAqlB,EACT,IACS,MAAAA,EACT,IAEAA,EAKA,IAAAkkD,GAAA,IAEA,IAAAvpE,EAAA,EAAAymB,GAHA0/F,GAAA,EAAAA,EAAA3jH,OAAA,UAGAA,OAAsCxC,EAAAymB,EAAQzmB,GAAA,EAC9CupE,EAAAhmE,KAAA0zB,SAAAkvF,EAAA/uF,UAAAp3B,IAAA,QAGA,OAAAupE,GAEA28C,cAAA,SAAA/gH,GAiBA,OAdAA,IAAA,KAAAA,GAAA,KACAA,EAAA,KACOA,GAAA,KAAAA,GAAA,MAEP,MADAA,GAAA,MACA,OAAAA,GACOA,IAAA,MAAAA,IAAA,KAEP,MADAA,KAAA,MACA,OAAAA,GACOA,IAAA,OAAAA,GAAA,OACP,GAAAA,GAAA,UAAAA,IAEA,GAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,UAAAA,IAKA8/G,cAAA,SAAA5jE,GACA,OAAAA,EAAA4T,MAAA5T,EAAA6T,MAAA7T,EAAAi/D,QAAAj/D,EAAAk/D,UAEA2E,iBAAA,SAAA7oF,GAGA,IAFA,IAAAq1E,EAAA,IAAA0L,EAEAp9G,EAAA,EAAAymB,EAAA4V,EAAA75B,OAAwCxC,EAAAymB,IAAQzmB,EAAA,CAKhD,IAJA,IAAAO,EAAA87B,EAAAr8B,GACAwC,EAAA6I,KAAAwG,IAAAtR,EAAAiC,OAAA,KACA4jH,EAAA,IAAA/iH,MAAAb,GAEAszB,EAAA,EAAuBA,EAAAtzB,EAAYszB,IAAA,CACnC,IAAA8uE,EAAArkG,EAAAu1B,IAEA8uE,EAAA,KAAAA,EAAA,WAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAqH,MAAAA,GAAgB,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,KACrIA,EAAA,KAGAwhB,EAAAtwF,GAAA8uE,EAKA,MAFAwhB,IAAAt+G,KAAA,OAGAs+G,EAAA,iBAGA1U,EAAA/hC,KAAA,EAAA9pE,EAAAsL,eAAAi1G,IAGA,OAAAnkH,KAAAwjH,aAAA/T,IAEA2T,gBAAA,SAAAgB,EAAA7jH,EAAA8jH,GAIA,IAHA,IAAAR,KACAnG,EAAA,IAAAvC,EAEAp9G,EAAA,EAAAymB,EAAA4/F,EAAA7jH,OAAwCxC,EAAAymB,IAAQzmB,EAAA,CAChD,IAAA6/G,EAAAwG,EAAArmH,GAEAsmH,IACAzG,EAAAyC,aAAA,kBACAzC,EAAAyC,aAAA,mBACAzC,EAAAyC,aAAA,eACAzC,EAAAyC,aAAA,YACAzC,EAAAyC,aAAA,YAGA,IAAAiE,EAAA,IAAA/B,EACAgC,EAAAvkH,KAAAwkH,YAAA5G,EAAA0G,GACAT,EAAAviH,KAAAgjH,GACA5G,EAAAhwC,IAAA62C,GACAD,EAAA/1F,OAAAhuB,GAIA,OACA+iH,SAAAO,EACA9uD,OAHA2oD,EAAA19G,KAAAwjH,aAAA9F,EAAAmG,KAMAC,oBAAA,SAAAM,EAAAd,EAAAvuD,GACA,QAAAh3D,EAAA,EAAAymB,EAAA4/F,EAAA7jH,OAAwCxC,EAAAymB,IAAQzmB,EAAA,CAChD,IAAA6/G,EAAAwG,EAAArmH,GACA09G,EAAAmC,EAAAnC,YAEA,IAAAA,IAAAmC,EAAAP,QAAA,WACA,UAAAz5G,EAAAuP,YAAA,uCAGA,IAAAsxG,EAAA,IAAAlC,EACAmC,EAAA1kH,KAAAwkH,YAAA/I,EAAAgJ,GACAz0C,EAAAjb,EAAAx0D,OAUA,GATAkkH,EAAAl2F,OAAAyhD,GAEA00C,EAAAnkH,SACAyvE,EAAA,GAGAszC,EAAAvlH,GAAA4kH,iBAAA,WAAA+B,EAAAnkH,OAAAyvE,GAAAjb,GACAA,EAAA2Y,IAAAg3C,GAEAjJ,EAAAK,YAAAL,EAAA4B,QAAA,UACA,IAAA/C,EAAAt6G,KAAAwjH,aAAA/H,EAAAK,YACA2I,EAAA9B,iBAAA,SAAA+B,EAAAnkH,QAAAw0D,GACAA,EAAA2Y,IAAA4sC,MAIAkK,YAAA,SAAAh9F,EAAAm9F,GAIA,IAHA,IAAAr9C,KACA46C,EAAA16F,EAAA06F,MAEAnkH,EAAA,EAAqBA,EAAAmkH,EAAA3hH,SAAkBxC,EAAA,CACvC,IAAAwF,EAAA2+G,EAAAnkH,GAEA,GAAAwF,KAAAikB,EAAAmG,OAAA,CAIA,IAAAA,EAAAnG,EAAAmG,OAAApqB,GACAy+G,EAAAx6F,EAAAw6F,MAAAz+G,GAUA,GARAnC,MAAA0lB,QAAAk7F,KACAA,OAGA5gH,MAAA0lB,QAAA6G,KACAA,OAGA,IAAAA,EAAAptB,OAAA,CAIA,QAAAszB,EAAA,EAAAyH,EAAA0mF,EAAAzhH,OAA0CszB,EAAAyH,IAAQzH,EAAA,CAClD,IAAAtP,EAAAy9F,EAAAnuF,GACA3wB,EAAAyqB,EAAAkG,GAEA,OAAAtP,GACA,UACA,UACA+iD,IAAA9mE,OAAAR,KAAA+jH,aAAA7gH,IACA,MAEA,aACA,IAAA5E,EAAAkpB,EAAAq6F,aAAAt+G,GAEAohH,EAAAnC,WAAAlkH,IACAqmH,EAAAlC,MAAAnkH,EAAAgpE,EAAA/mE,QAGA+mE,IAAA9mE,QAAA,aACA,MAEA,YACA,YACA8mE,IAAA9mE,OAAAR,KAAA+jH,aAAA7gH,IAEA,QAAA+sC,EAAA,EAAAoB,EAAA1jB,EAAAptB,OAAiD0vC,EAAAoB,IAAQpB,EACzDq3B,IAAA9mE,OAAAR,KAAA+jH,aAAAp2F,EAAAsiB,KAGA,MAEA,QACA,UAAArsC,EAAAuP,oCAAkEoR,MAIlE+iD,IAAA9mE,OAAAgnB,EAAAy6F,QAAA1+G,MAGA,OAAA+jE,GAEAi8C,mBAAA,SAAAvX,GAGA,IAFA,IAAA8Q,EAAA,IAAA3B,EAEAp9G,EAAA,EAAAymB,EAAAwnF,EAAAzrG,OAA0CxC,EAAAymB,IAAQzmB,EAClD++G,EAAApvC,KAAA,EAAA9pE,EAAAsL,eAAA88F,EAAAjuG,KAGA,OAAAiC,KAAAwjH,aAAA1G,IAEA8H,uBAAA,WACA,IAAA1J,EAAAl7G,KAAAioG,IAAAiT,gBACAl7G,KAAAsnE,IAAAu9C,eAAA7kH,KAAAwjH,aAAAtI,KAEAyI,mBAAA,SAAAnI,GAGA,IAFA,IAAAD,EAAA,IAAAJ,EAEAp9G,EAAA,EAAqBA,EAAAy9G,EAAAriF,MAAuBp7B,IAAA,CAC5C,IAAAg4F,EAAAylB,EAAA38G,IAAAd,GAEA,IAAAg4F,EAAAx1F,OAKAg7G,EAAA7tC,IAAAqoB,GAJAwlB,EAAA7tC,IAAA,IAAA3oE,YAAA,UAOA,OAAA/E,KAAAwjH,aAAAjI,IAEAmI,eAAA,SAAAjM,EAAA/N,EAAAsC,EAAAgQ,GACA,IAAA10C,EACA,MAAAw9C,EAAApb,EAAA,EAEA,GAAAsS,EACA10C,EAAA,IAAAviE,YAAA,MAAA+/G,GAAA,UAAAA,QACO,EAEPx9C,EAAA,IAAAviE,WADA,IAAA+/G,IAEA,KACA,IAAAC,EAAA,EACA,MAAAC,EAAAvN,UAAAl3G,OACA,IAAA0kH,GAAA,EAEA,QAAAlnH,EAAA,EAAuBA,EAAAupE,EAAA/mE,OAAgBxC,GAAA,GACvC,IAAAsjH,EAAA,EAEA,GAAA0D,EAAAC,EAAA,CACA,MAAA1mH,EAAAm5G,UAAAsN,MAGA,KAFA1D,EAAArV,EAAA0V,OAAApjH,MAGA+iH,EAAA,EAEA4D,IACAA,GAAA,GACA,EAAArhH,EAAAoF,uBAAiD1K,sBAKjDgpE,EAAAvpE,GAAAsjH,GAAA,MACA/5C,EAAAvpE,EAAA,OAAAsjH,GAIA,OAAArhH,KAAAklH,kBAAA59C,IAEAm8C,gBAAA,SAAA/uE,GACA,OAAA10C,KAAAklH,kBAAAxwE,EAAAmsE,MAEA+C,gBAAA,SAAA7F,GACA,MAAA1I,EAAA0I,EAAA1I,OACA,IAAA/tC,EAAAvpE,EAEA,OAAAs3G,GACA,OAIA,KAHA/tC,EAAA,IAAAviE,WAAA,EAAAg5G,WAAAx9G,SACA,GAAA80G,EAEAt3G,EAAA,EAAqBA,EAAAggH,WAAAx9G,OAA8BxC,IACnDupE,EAAAvpE,EAAA,GAAAggH,WAAAhgH,GAGA,MAEA,OACA,MAAAkN,EAAA,EACA,IAAAk6G,EAAApH,WAAA,GACA,MAAAtxF,GAAA4oF,EAAA,IAAApqG,GAAA,UAAAA,EAAAk6G,GAEA,IAAApnH,EAAA,EAAqBA,EAAAggH,WAAAx9G,OAA8BxC,IAAA,CACnD,MAAAqnH,EAAArH,WAAAhgH,GAEAqnH,IAAAD,IACA14F,EAAAnrB,KAAAvD,GAAA,UAAAA,EAAAqnH,GACAD,EAAAC,GAIA,MAAAC,GAAA54F,EAAAlsB,OAAA,KACAksB,EAAA,GAAA44F,GAAA,MACA54F,EAAA,OAAA44F,EACA54F,EAAAnrB,KAAAvD,GAAA,UAAAA,GACAupE,EAAA,IAAAviE,WAAA0nB,GAIA,OAAAzsB,KAAAklH,kBAAA59C,IAEA49C,kBAAA,SAAApgH,GAGA,IAFA,IAAAwiE,KAEAvpE,EAAA,EAAAymB,EAAA1f,EAAAvE,OAAuCxC,EAAAymB,IAAQzmB,EAC/CupE,EAAAvpE,GAAA+G,EAAA/G,GAGA,OAAAupE,GAEAk8C,aAAA,SAAA9yG,EAAA4yG,GACAA,QACA,IAAA3B,EAAAjxG,EAAAixG,QACAxoF,EAAAwoF,EAAAphH,OAEA,OAAA44B,EACA,cAGA,IAEAp7B,EAMA4gH,EARA75G,GAAAq0B,GAAA,UAAAA,GACAmsF,EAAA,EAGA,IAAAvnH,EAAA,EAAiBA,EAAAo7B,IAAWp7B,EAC5BunH,GAAA3D,EAAA5jH,GAAAwC,OAMAo+G,EADA2G,EAAA,IACA,EACOA,EAAA,MACP,EACOA,EAAA,SACP,EAEA,EAGAxgH,EAAAxD,KAAAq9G,GACA,IAAAyB,EAAA,EAEA,IAAAriH,EAAA,EAAiBA,EAAAo7B,EAAA,EAAep7B,IAChC,IAAA4gH,EACA75G,EAAAxD,KAAA,IAAA8+G,GACS,IAAAzB,EACT75G,EAAAxD,KAAA8+G,GAAA,UAAAA,GACS,IAAAzB,EACT75G,EAAAxD,KAAA8+G,GAAA,OAAAA,GAAA,UAAAA,GAEAt7G,EAAAxD,KAAA8+G,IAAA,OAAAA,GAAA,OAAAA,GAAA,UAAAA,GAGAuB,EAAA5jH,KACAqiH,GAAAuB,EAAA5jH,GAAAwC,QAIA,IAAAxC,EAAA,EAAiBA,EAAAo7B,EAAWp7B,IAAA,CAC5BulH,EAAAvlH,IACAulH,EAAAvlH,GAAAwwB,OAAAzpB,EAAAvE,QAGA,QAAAszB,EAAA,EAAAyH,EAAAqmF,EAAA5jH,GAAAwC,OAA+CszB,EAAAyH,EAAQzH,IACvD/uB,EAAAxD,KAAAqgH,EAAA5jH,GAAA81B,IAIA,OAAA/uB,IAGA4xG,EA1dA,GA6dA74G,EAAA64G,eAIA,SAAA54G,EAAAD,EAAAiF,GAEA,aAGArE,OAAAC,eAAAb,EAAA,cACAqF,OAAA,IAEArF,EAAA+iH,oBAAA/iH,EAAA6iH,cAAA7iH,EAAA2iH,qBAAA,EAEA3iH,EAAA2iH,iBADA,wgEAGA3iH,EAAA6iH,eADA,urEAGA7iH,EAAA+iH,qBADA,grCAKA,SAAA9iH,EAAAD,EAAAiF,GAEA,aAGArE,OAAAC,eAAAb,EAAA,cACAqF,OAAA,IAEArF,EAAAs7F,YAgBA,SAAAosB,GACA,OAAAA,GACA,sBACA,OAAA7rB,EAEA,uBACA,OAAAD,EAEA,uBACA,OAAAE,EAEA,wBACA,OAAAC,EAEA,2BACA,OAAAC,EAEA,qBACA,OAAAknB,EAEA,wBACA,OAAAyE,EAEA,QACA,cAvCA3nH,EAAAkjH,eAAAljH,EAAAg8F,qBAAAh8F,EAAA+7F,kBAAA/7F,EAAA87F,iBAAA97F,EAAA47F,iBAAA57F,EAAA67F,qBAAA,EACA,MAAAqnB,GAAA,87EACAljH,EAAAkjH,iBACA,MAAAyE,GAAA,87EACA7rB,GAAA,kjEACA97F,EAAA87F,mBACA,MAAAF,GAAA,0/CACA57F,EAAA47F,mBACA,MAAAC,GAAA,ujEACA77F,EAAA67F,kBACA,MAAAE,GAAA,0qEACA/7F,EAAA+7F,oBACA,MAAAC,GAAA,+7CACAh8F,EAAAg8F,wBAgCA,SAAA/7F,EAAAD,EAAAiF,GAEA,IAAAuqB,EAAAvqB,EAAA,GAAAuqB,sBACAgtE,EAAAhtE,EAAA,SAAAlqB,GACAA,EAAA,KACAA,EAAA,OACAA,EAAA,YACAA,EAAA,aACAA,EAAA,cACAA,EAAA,WACAA,EAAA,kBACAA,EAAA,WACAA,EAAA,iBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,iBACAA,EAAA,qBACAA,EAAA,iBACAA,EAAA,WACAA,EAAA,aACAA,EAAA,gBACAA,EAAA,sBACAA,EAAA,yBACAA,EAAA,sBACAA,EAAA,0BACAA,EAAA,uBACAA,EAAA,sBACAA,EAAA,YACAA,EAAA,iBACAA,EAAA,eACAA,EAAA,cACAA,EAAA,cACAA,EAAA,uBACAA,EAAA,oBACAA,EAAA,qBACAA,EAAA,eACAA,EAAA,eACAA,EAAA,WACAA,EAAA,kBACAA,EAAA,gBACAA,EAAA,iBACAA,EAAA,mBACAA,EAAA,UACAA,EAAA,eACAA,EAAA,YACAA,EAAA,iBACAA,EAAA,YACAA,EAAA,UACAA,EAAA,eACAA,EAAA,gBACAA,EAAA,iBACAA,EAAA,aACAA,EAAA,WACAA,EAAA,kBACAA,EAAA,iBACAA,EAAA,KACAA,EAAA,aACAA,EAAA,gBACAA,EAAA,eACAA,EAAA,gBACAA,EAAA,iBACAA,EAAA,SACAA,EAAA,UACAA,EAAA,gBACAA,EAAA,iBACAA,EAAA,iBACAA,EAAA,aACAA,EAAA,YACAA,EAAA,KACAA,EAAA,gBACAA,EAAA,WACAA,EAAA,YACAA,EAAA,iBACAA,EAAA,WACAA,EAAA,aACAA,EAAA,mBACAA,EAAA,oBACAA,EAAA,aACAA,EAAA,gBACAA,EAAA,SACAA,EAAA,eACAA,EAAA,mBACAA,EAAA,iBACAA,EAAA,0BACAA,EAAA,iBACAA,EAAA,mCACAA,EAAA,0BACAA,EAAA,yBACAA,EAAA,kBACAA,EAAA,2BACAA,EAAA,+BACAA,EAAA,QACAA,EAAA,UACAA,EAAA,sBACAA,EAAA,iBACAA,EAAA,gBACAA,EAAA,aACAA,EAAA,KACAA,EAAA,OACAA,EAAA,YACAA,EAAA,gBACAA,EAAA,aACAA,EAAA,WACAA,EAAA,cACAA,EAAA,aACAA,EAAA,sBACAA,EAAA,WACAA,EAAA,gBACAA,EAAA,eACAA,EAAA,gBACAA,EAAA,eACAA,EAAA,WACAA,EAAA,eACAA,EAAA,UACAA,EAAA,eACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,iBACAA,EAAA,iBACAA,EAAA,gBACAA,EAAA,iBACAA,EAAA,qBACAA,EAAA,WACAA,EAAA,aACAA,EAAA,YACAA,EAAA,OACAA,EAAA,YACAA,EAAA,0BACAA,EAAA,iBACAA,EAAA,kBACAA,EAAA,KACAA,EAAA,WACAA,EAAA,kBACAA,EAAA,WACAA,EAAA,WACAA,EAAA,mBACAA,EAAA,iBACAA,EAAA,aACAA,EAAA,gBACAA,EAAA,sBACAA,EAAA,sBACAA,EAAA,yBACAA,EAAA,sBACAA,EAAA,0BACAA,EAAA,uBACAA,EAAA,sBACAA,EAAA,eACAA,EAAA,cACAA,EAAA,cACAA,EAAA,qBACAA,EAAA,SACAA,EAAA,eACAA,EAAA,eACAA,EAAA,gBACAA,EAAA,WACAA,EAAA,kBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,mBACAA,EAAA,uBACAA,EAAA,gBACAA,EAAA,iBACAA,EAAA,YACAA,EAAA,kBACAA,EAAA,kBACAA,EAAA,gBACAA,EAAA,iBACAA,EAAA,gBACAA,EAAA,yBACAA,EAAA,QACAA,EAAA,mBACAA,EAAA,oBACAA,EAAA,YACAA,EAAA,UACAA,EAAA,YACAA,EAAA,iBACAA,EAAA,gBACAA,EAAA,cACAA,EAAA,uBACAA,EAAA,gBACAA,EAAA,yBACAA,EAAA,QACAA,EAAA,aACAA,EAAA,QACAA,EAAA,gBACAA,EAAA,aACAA,EAAA,QACAA,EAAA,eACAA,EAAA,YACAA,EAAA,iBACAA,EAAA,UACAA,EAAA,QACAA,EAAA,aACAA,EAAA,gBACAA,EAAA,KACAA,EAAA,aACAA,EAAA,gBACAA,EAAA,iBACAA,EAAA,cACAA,EAAA,UACAA,EAAA,kBACAA,EAAA,eACAA,EAAA,iBACAA,EAAA,eACAA,EAAA,aACAA,EAAA,KACAA,EAAA,eACAA,EAAA,WACAA,EAAA,UACAA,EAAA,iBACAA,EAAA,kBACAA,EAAA,WACAA,EAAA,WACAA,EAAA,aACAA,EAAA,aACAA,EAAA,gBACAA,EAAA,iBACAA,EAAA,SACAA,EAAA,eACAA,EAAA,gBACAA,EAAA,kBACAA,EAAA,2BACAA,EAAA,uBACAA,EAAA,uBACAA,EAAA,UACAA,EAAA,iBACAA,EAAA,iBACAA,EAAA,aACAA,EAAA,iBACAA,EAAA,YACAA,EAAA,iBACAA,EAAA,aACAA,EAAA,eACAA,EAAA,YACAA,EAAA,KACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,eACAA,EAAA,yBACAA,EAAA,yBACAA,EAAA,sBACAA,EAAA,SACAA,EAAA,iBACAA,EAAA,cACAA,EAAA,aACAA,EAAA,gBACAA,EAAA,eACAA,EAAA,gBACAA,EAAA,eACAA,EAAA,iBACAA,EAAA,gBACAA,EAAA,eACAA,EAAA,aACAA,EAAA,mBACAA,EAAA,wBACAA,EAAA,eACAA,EAAA,KACAA,EAAA,gBACAA,EAAA,OACAA,EAAA,gBACAA,EAAA,WACAA,EAAA,kBACAA,EAAA,WACAA,EAAA,WACAA,EAAA,aACAA,EAAA,gBACAA,EAAA,uBACAA,EAAA,eACAA,EAAA,cACAA,EAAA,cACAA,EAAA,oBACAA,EAAA,uBACAA,EAAA,qBACAA,EAAA,SACAA,EAAA,eACAA,EAAA,eACAA,EAAA,qBACAA,EAAA,gBACAA,EAAA,cACAA,EAAA,WACAA,EAAA,kBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,mBACAA,EAAA,qBACAA,EAAA,YACAA,EAAA,qBACAA,EAAA,iBACAA,EAAA,iBACAA,EAAA,gBACAA,EAAA,YACAA,EAAA,SACAA,EAAA,gBACAA,EAAA,iBACAA,EAAA,cACAA,EAAA,aACAA,EAAA,YACAA,EAAA,WACAA,EAAA,iBACAA,EAAA,qBACAA,EAAA,6BACAA,EAAA,KACAA,EAAA,gBACAA,EAAA,aACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,kBACAA,EAAA,iBACAA,EAAA,aACAA,EAAA,KACAA,EAAA,eACAA,EAAA,eACAA,EAAA,uBACAA,EAAA,YACAA,EAAA,gBACAA,EAAA,yBACAA,EAAA,oBACAA,EAAA,UACAA,EAAA,sBACAA,EAAA,8BACAA,EAAA,WACAA,EAAA,aACAA,EAAA,aACAA,EAAA,iBACAA,EAAA,eACAA,EAAA,iBACAA,EAAA,iBACAA,EAAA,iBACAA,EAAA,eACAA,EAAA,UACAA,EAAA,iBACAA,EAAA,gBACAA,EAAA,iBACAA,EAAA,mBACAA,EAAA,eACAA,EAAA,iBACAA,EAAA,aACAA,EAAA,KACAA,EAAA,OACAA,EAAA,SACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,aACAA,EAAA,aACAA,EAAA,sBACAA,EAAA,iBACAA,EAAA,SACAA,EAAA,eACAA,EAAA,eACAA,EAAA,qBACAA,EAAA,kBACAA,EAAA,OACAA,EAAA,iBACAA,EAAA,gBACAA,EAAA,iBACAA,EAAA,WACAA,EAAA,kBACAA,EAAA,aACAA,EAAA,KACAA,EAAA,eACAA,EAAA,aACAA,EAAA,kBACAA,EAAA,YACAA,EAAA,aACAA,EAAA,gBACAA,EAAA,eACAA,EAAA,iBACAA,EAAA,iBACAA,EAAA,aACAA,EAAA,YACAA,EAAA,OACAA,EAAA,KACAA,EAAA,OACAA,EAAA,WACAA,EAAA,WACAA,EAAA,aACAA,EAAA,aACAA,EAAA,sBACAA,EAAA,iBACAA,EAAA,gBACAA,EAAA,eACAA,EAAA,cACAA,EAAA,eACAA,EAAA,OACAA,EAAA,iBACAA,EAAA,gBACAA,EAAA,iBACAA,EAAA,iBACAA,EAAA,aACAA,EAAA,WACAA,EAAA,kBACAA,EAAA,OACAA,EAAA,KACAA,EAAA,OACAA,EAAA,cACAA,EAAA,WACAA,EAAA,kBACAA,EAAA,qBACAA,EAAA,6BACAA,EAAA,WACAA,EAAA,WACAA,EAAA,mBACAA,EAAA,aACAA,EAAA,gBACAA,EAAA,sBACAA,EAAA,yBACAA,EAAA,sBACAA,EAAA,0BACAA,EAAA,uBACAA,EAAA,sBACAA,EAAA,eACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,uBACAA,EAAA,qBACAA,EAAA,eACAA,EAAA,kBACAA,EAAA,WACAA,EAAA,kBACAA,EAAA,gBACAA,EAAA,SACAA,EAAA,gBACAA,EAAA,UACAA,EAAA,gBACAA,EAAA,mBACAA,EAAA,gBACAA,EAAA,oBACAA,EAAA,gBACAA,EAAA,kBACAA,EAAA,OACAA,EAAA,mBACAA,EAAA,YACAA,EAAA,kBACAA,EAAA,kBACAA,EAAA,WACAA,EAAA,mBACAA,EAAA,eACAA,EAAA,wBACAA,EAAA,wBACAA,EAAA,eACAA,EAAA,YACAA,EAAA,iBACAA,EAAA,iBACAA,EAAA,cACAA,EAAA,YACAA,EAAA,kBACAA,EAAA,UACAA,EAAA,WACAA,EAAA,gBACAA,EAAA,kBACAA,EAAA,aACAA,EAAA,iBACAA,EAAA,gBACAA,EAAA,WACAA,EAAA,iBACAA,EAAA,oBACAA,EAAA,kBACAA,EAAA,KACAA,EAAA,YACAA,EAAA,aACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,iBACAA,EAAA,0BACAA,EAAA,QACAA,EAAA,UACAA,EAAA,OACAA,EAAA,kBACAA,EAAA,iBACAA,EAAA,QACAA,EAAA,iBACAA,EAAA,aACAA,EAAA,KACAA,EAAA,aACAA,EAAA,iBACAA,EAAA,aACAA,EAAA,KACAA,EAAA,gBACAA,EAAA,WACAA,EAAA,WACAA,EAAA,aACAA,EAAA,aACAA,EAAA,iBACAA,EAAA,cACAA,EAAA,gBACAA,EAAA,eACAA,EAAA,qBACAA,EAAA,iBACAA,EAAA,cACAA,EAAA,QACAA,EAAA,gBACAA,EAAA,mBACAA,EAAA,gBACAA,EAAA,iBACAA,EAAA,aACAA,EAAA,mBACAA,EAAA,2BACAA,EAAA,KACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,WACAA,EAAA,qBACAA,EAAA,eACAA,EAAA,WACAA,EAAA,qBACAA,EAAA,kBACAA,EAAA,aACAA,EAAA,UACAA,EAAA,mBACAA,EAAA,2BACAA,EAAA,aACAA,EAAA,gBACAA,EAAA,iBACAA,EAAA,gBACAA,EAAA,eACAA,EAAA,wBACAA,EAAA,iBACAA,EAAA,gBACAA,EAAA,iBACAA,EAAA,iBACAA,EAAA,mBACAA,EAAA,eACAA,EAAA,kBACAA,EAAA,iBACAA,EAAA,UACAA,EAAA,cACAA,EAAA,iBACAA,EAAA,sBACAA,EAAA,aACAA,EAAA,gBACAA,EAAA,KACAA,EAAA,QACAA,EAAA,SACAA,EAAA,WACAA,EAAA,aACAA,EAAA,aACAA,EAAA,sBACAA,EAAA,iBACAA,EAAA,gBACAA,EAAA,eACAA,EAAA,gBACAA,EAAA,yBACAA,EAAA,cACAA,EAAA,mBACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,iBACAA,EAAA,gBACAA,EAAA,iBACAA,EAAA,kBACAA,EAAA,gBACAA,EAAA,iBACAA,EAAA,gBACAA,EAAA,aACAA,EAAA,YACAA,EAAA,YACAA,EAAA,mBACAA,EAAA,iBACAA,EAAA,kBACAA,EAAA,aACAA,EAAA,iBACAA,EAAA,cACAA,EAAA,KACAA,EAAA,WACAA,EAAA,kBACAA,EAAA,WACAA,EAAA,WACAA,EAAA,aACAA,EAAA,gBACAA,EAAA,sBACAA,EAAA,uBACAA,EAAA,eACAA,EAAA,cACAA,EAAA,cACAA,EAAA,cACAA,EAAA,mBACAA,EAAA,oBACAA,EAAA,mBACAA,EAAA,uBACAA,EAAA,mBACAA,EAAA,oBACAA,EAAA,qBACAA,EAAA,eACAA,EAAA,WACAA,EAAA,kBACAA,EAAA,gBACAA,EAAA,UACAA,EAAA,gBACAA,EAAA,mBACAA,EAAA,gBACAA,EAAA,oBACAA,EAAA,gBACAA,EAAA,kBACAA,EAAA,2BACAA,EAAA,mBACAA,EAAA,gBACAA,EAAA,YACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,iBACAA,EAAA,YACAA,EAAA,YACAA,EAAA,aACAA,EAAA,gCACAA,EAAA,mBACAA,EAAA,oBACAA,EAAA,mCACAA,EAAA,sBACAA,EAAA,iBACAA,EAAA,UACAA,EAAA,oBACAA,EAAA,aACAA,EAAA,uBACAA,EAAA,6BACAA,EAAA,WACAA,EAAA,iBACAA,EAAA,iBACAA,EAAA,KACAA,EAAA,aACAA,EAAA,eACAA,EAAA,gBACAA,EAAA,iBACAA,EAAA,UACAA,EAAA,iBACAA,EAAA,gBACAA,EAAA,aACAA,EAAA,YACAA,EAAA,KACAA,EAAA,YACAA,EAAA,aACAA,EAAA,gBACAA,EAAA,eACAA,EAAA,gBACAA,EAAA,eACAA,EAAA,YACAA,EAAA,iBACAA,EAAA,aACAA,EAAA,KACAA,EAAA,aACAA,EAAA,eACAA,EAAA,gBACAA,EAAA,iBACAA,EAAA,OACAA,EAAA,iBACAA,EAAA,aACAA,EAAA,KACAA,EAAA,WACAA,EAAA,kBACAA,EAAA,iBACAA,EAAA,aACAA,EAAA,gBACAA,EAAA,cACAA,EAAA,qBACAA,EAAA,gBACAA,EAAA,eACAA,EAAA,kBACAA,EAAA,0BACAA,EAAA,YACAA,EAAA,UACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,kBACAA,EAAA,iBACAA,EAAA,aACAA,EAAA,YACAA,EAAA,oBACAA,EAAA,4BACAA,EAAA,uBACAA,EAAA,+BACAA,EAAA,KACAA,EAAA,gBACAA,EAAA,WACAA,EAAA,WACAA,EAAA,kBACAA,EAAA,aACAA,EAAA,iBACAA,EAAA,SACAA,EAAA,eACAA,EAAA,eACAA,EAAA,gBACAA,EAAA,yBACAA,EAAA,wBACAA,EAAA,SACAA,EAAA,iBACAA,EAAA,sBACAA,EAAA,iBACAA,EAAA,0BACAA,EAAA,yBACAA,EAAA,gBACAA,EAAA,iBACAA,EAAA,aACAA,EAAA,YACAA,EAAA,KACAA,EAAA,eACAA,EAAA,WACAA,EAAA,YACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,qBACAA,EAAA,iBACAA,EAAA,wBACAA,EAAA,qBACAA,EAAA,yBACAA,EAAA,8BACAA,EAAA,0BACAA,EAAA,cACAA,EAAA,gBACAA,EAAA,WACAA,EAAA,iBACAA,EAAA,oBACAA,EAAA,oBACAA,EAAA,iBACAA,EAAA,qBACAA,EAAA,iBACAA,EAAA,WACAA,EAAA,aACAA,EAAA,gBACAA,EAAA,sBACAA,EAAA,yBACAA,EAAA,sBACAA,EAAA,0BACAA,EAAA,sBACAA,EAAA,UACAA,EAAA,kBACAA,EAAA,aACAA,EAAA,cACAA,EAAA,eACAA,EAAA,gBACAA,EAAA,iBACAA,EAAA,eACAA,EAAA,cACAA,EAAA,mBACAA,EAAA,WACAA,EAAA,cACAA,EAAA,uBACAA,EAAA,oBACAA,EAAA,eACAA,EAAA,eACAA,EAAA,OACAA,EAAA,YACAA,EAAA,eACAA,EAAA,aACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,gBACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,eACAA,EAAA,aACAA,EAAA,aACAA,EAAA,aACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,eACAA,EAAA,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C,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,OACAC,IAAA,SAGAD,MAAA,OACAC,IAAA,SAGAD,MAAA,QACAC,IAAA,UAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,OACAC,IAAA,SAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,OACAC,IAAA,SAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,OACAC,IAAA,SAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,KACAC,IAAA,OAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,KACAC,IAAA,QAGAD,MAAA,MACAC,IAAA,QAGAD,MAAA,OACAC,IAAA,SAuBA,IAAA2tE,EAAAhpE,EAAA,SAAAlqB,GACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,SACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,MACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,UACAA,EAAA,SACAA,EAAA,UACAA,EAAA,WACAA,EAAA,UACAA,EAAA,WACAA,EAAA,UACAA,EAAA,WACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,YACAA,EAAA,SACAA,EAAA,UACAA,EAAA,WACAA,EAAA,WACAA,EAAA,UACAA,EAAA,WACAA,EAAA,WACAA,EAAA,SACAA,EAAA,UACAA,EAAA,UACAA,EAAA,WACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,WACAA,EAAA,SACAA,EAAA,UACAA,EAAA,WACAA,EAAA,UACAA,EAAA,SACAA,EAAA,UACAA,EAAA,WACAA,EAAA,YACAA,EAAA,UACAA,EAAA,SACAA,EAAA,UACAA,EAAA,WACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,UACAA,EAAA,WACAA,EAAA,UACAA,EAAA,SACAA,EAAA,UACAA,EAAA,WACAA,EAAA,YACAA,EAAA,UACAA,EAAA,SACAA,EAAA,UACAA,EAAA,WACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,UACAA,EAAA,WACAA,EAAA,UACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,UACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,YACAA,EAAA,WACAA,EAAA,UACAA,EAAA,WACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,UACAA,EAAA,UACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,WACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,YACAA,EAAA,eACAA,EAAA,caAtF,EAA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A,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,SACAA,EAAA,QACAA,EAAA,SACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,SACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,SACAA,EAAA,QACAA,EAAA,SACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,QACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA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","file":"6943322967407ddaa128.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"wk5V\");\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 6943322967407ddaa128","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/process/browser.js\n// module id = W2nU\n// module chunks = 0","/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"pdfjs-dist/build/pdf.worker\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pdfjs-dist/build/pdf.worker\"] = factory();\n\telse\n\t\troot[\"pdfjs-dist/build/pdf.worker\"] = root.pdfjsWorker = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __w_pdfjs_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __w_pdfjs_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__w_pdfjs_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__w_pdfjs_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__w_pdfjs_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__w_pdfjs_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__w_pdfjs_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__w_pdfjs_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __w_pdfjs_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__w_pdfjs_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __w_pdfjs_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__w_pdfjs_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__w_pdfjs_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__w_pdfjs_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__w_pdfjs_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __w_pdfjs_require__(__w_pdfjs_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nconst pdfjsVersion = '2.4.456';\nconst pdfjsBuild = '228a591c';\n\nconst pdfjsCoreWorker = __w_pdfjs_require__(1);\n\nexports.WorkerMessageHandler = pdfjsCoreWorker.WorkerMessageHandler;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WorkerMessageHandler = exports.WorkerTask = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(4);\n\nvar _pdf_manager = __w_pdfjs_require__(5);\n\nvar _is_node = __w_pdfjs_require__(44);\n\nvar _message_handler = __w_pdfjs_require__(45);\n\nvar _worker_stream = __w_pdfjs_require__(46);\n\nvar _core_utils = __w_pdfjs_require__(7);\n\nvar WorkerTask = function WorkerTaskClosure() {\n  function WorkerTask(name) {\n    this.name = name;\n    this.terminated = false;\n    this._capability = (0, _util.createPromiseCapability)();\n  }\n\n  WorkerTask.prototype = {\n    get finished() {\n      return this._capability.promise;\n    },\n\n    finish() {\n      this._capability.resolve();\n    },\n\n    terminate() {\n      this.terminated = true;\n    },\n\n    ensureNotTerminated() {\n      if (this.terminated) {\n        throw new Error(\"Worker task was terminated\");\n      }\n    }\n\n  };\n  return WorkerTask;\n}();\n\nexports.WorkerTask = WorkerTask;\nvar WorkerMessageHandler = {\n  setup(handler, port) {\n    var testMessageProcessed = false;\n    handler.on(\"test\", function wphSetupTest(data) {\n      if (testMessageProcessed) {\n        return;\n      }\n\n      testMessageProcessed = true;\n\n      if (!(data instanceof Uint8Array)) {\n        handler.send(\"test\", null);\n        return;\n      }\n\n      const supportTransfers = data[0] === 255;\n      handler.postMessageTransfers = supportTransfers;\n      handler.send(\"test\", {\n        supportTransfers\n      });\n    });\n    handler.on(\"configure\", function wphConfigure(data) {\n      (0, _util.setVerbosityLevel)(data.verbosity);\n    });\n    handler.on(\"GetDocRequest\", function wphSetupDoc(data) {\n      return WorkerMessageHandler.createDocumentHandler(data, port);\n    });\n  },\n\n  createDocumentHandler(docParams, port) {\n    var pdfManager;\n    var terminated = false;\n    var cancelXHRs = null;\n    var WorkerTasks = [];\n    const verbosity = (0, _util.getVerbosityLevel)();\n    const apiVersion = docParams.apiVersion;\n    const workerVersion = '2.4.456';\n\n    if (apiVersion !== workerVersion) {\n      throw new Error(`The API version \"${apiVersion}\" does not match ` + `the Worker version \"${workerVersion}\".`);\n    }\n\n    const enumerableProperties = [];\n\n    for (const property in []) {\n      enumerableProperties.push(property);\n    }\n\n    if (enumerableProperties.length) {\n      throw new Error(\"The `Array.prototype` contains unexpected enumerable properties: \" + enumerableProperties.join(\", \") + \"; thus breaking e.g. `for...in` iteration of `Array`s.\");\n    }\n\n    var docId = docParams.docId;\n    var docBaseUrl = docParams.docBaseUrl;\n    var workerHandlerName = docParams.docId + \"_worker\";\n    var handler = new _message_handler.MessageHandler(workerHandlerName, docId, port);\n    handler.postMessageTransfers = docParams.postMessageTransfers;\n\n    function ensureNotTerminated() {\n      if (terminated) {\n        throw new Error(\"Worker was terminated\");\n      }\n    }\n\n    function startWorkerTask(task) {\n      WorkerTasks.push(task);\n    }\n\n    function finishWorkerTask(task) {\n      task.finish();\n      var i = WorkerTasks.indexOf(task);\n      WorkerTasks.splice(i, 1);\n    }\n\n    async function loadDocument(recoveryMode) {\n      await pdfManager.ensureDoc(\"checkHeader\");\n      await pdfManager.ensureDoc(\"parseStartXRef\");\n      await pdfManager.ensureDoc(\"parse\", [recoveryMode]);\n\n      if (!recoveryMode) {\n        await pdfManager.ensureDoc(\"checkFirstPage\");\n      }\n\n      const [numPages, fingerprint] = await Promise.all([pdfManager.ensureDoc(\"numPages\"), pdfManager.ensureDoc(\"fingerprint\")]);\n      return {\n        numPages,\n        fingerprint\n      };\n    }\n\n    function getPdfManager(data, evaluatorOptions) {\n      var pdfManagerCapability = (0, _util.createPromiseCapability)();\n      var pdfManager;\n      var source = data.source;\n\n      if (source.data) {\n        try {\n          pdfManager = new _pdf_manager.LocalPdfManager(docId, source.data, source.password, evaluatorOptions, docBaseUrl);\n          pdfManagerCapability.resolve(pdfManager);\n        } catch (ex) {\n          pdfManagerCapability.reject(ex);\n        }\n\n        return pdfManagerCapability.promise;\n      }\n\n      var pdfStream,\n          cachedChunks = [];\n\n      try {\n        pdfStream = new _worker_stream.PDFWorkerStream(handler);\n      } catch (ex) {\n        pdfManagerCapability.reject(ex);\n        return pdfManagerCapability.promise;\n      }\n\n      var fullRequest = pdfStream.getFullReader();\n      fullRequest.headersReady.then(function () {\n        if (!fullRequest.isRangeSupported) {\n          return;\n        }\n\n        var disableAutoFetch = source.disableAutoFetch || fullRequest.isStreamingSupported;\n        pdfManager = new _pdf_manager.NetworkPdfManager(docId, pdfStream, {\n          msgHandler: handler,\n          password: source.password,\n          length: fullRequest.contentLength,\n          disableAutoFetch,\n          rangeChunkSize: source.rangeChunkSize\n        }, evaluatorOptions, docBaseUrl);\n\n        for (let i = 0; i < cachedChunks.length; i++) {\n          pdfManager.sendProgressiveData(cachedChunks[i]);\n        }\n\n        cachedChunks = [];\n        pdfManagerCapability.resolve(pdfManager);\n        cancelXHRs = null;\n      }).catch(function (reason) {\n        pdfManagerCapability.reject(reason);\n        cancelXHRs = null;\n      });\n      var loaded = 0;\n\n      var flushChunks = function () {\n        var pdfFile = (0, _util.arraysToBytes)(cachedChunks);\n\n        if (source.length && pdfFile.length !== source.length) {\n          (0, _util.warn)(\"reported HTTP length is different from actual\");\n        }\n\n        try {\n          pdfManager = new _pdf_manager.LocalPdfManager(docId, pdfFile, source.password, evaluatorOptions, docBaseUrl);\n          pdfManagerCapability.resolve(pdfManager);\n        } catch (ex) {\n          pdfManagerCapability.reject(ex);\n        }\n\n        cachedChunks = [];\n      };\n\n      var readPromise = new Promise(function (resolve, reject) {\n        var readChunk = function (chunk) {\n          try {\n            ensureNotTerminated();\n\n            if (chunk.done) {\n              if (!pdfManager) {\n                flushChunks();\n              }\n\n              cancelXHRs = null;\n              return;\n            }\n\n            var data = chunk.value;\n            loaded += (0, _util.arrayByteLength)(data);\n\n            if (!fullRequest.isStreamingSupported) {\n              handler.send(\"DocProgress\", {\n                loaded,\n                total: Math.max(loaded, fullRequest.contentLength || 0)\n              });\n            }\n\n            if (pdfManager) {\n              pdfManager.sendProgressiveData(data);\n            } else {\n              cachedChunks.push(data);\n            }\n\n            fullRequest.read().then(readChunk, reject);\n          } catch (e) {\n            reject(e);\n          }\n        };\n\n        fullRequest.read().then(readChunk, reject);\n      });\n      readPromise.catch(function (e) {\n        pdfManagerCapability.reject(e);\n        cancelXHRs = null;\n      });\n\n      cancelXHRs = function (reason) {\n        pdfStream.cancelAllRequests(reason);\n      };\n\n      return pdfManagerCapability.promise;\n    }\n\n    function setupDoc(data) {\n      function onSuccess(doc) {\n        ensureNotTerminated();\n        handler.send(\"GetDoc\", {\n          pdfInfo: doc\n        });\n      }\n\n      function onFailure(ex) {\n        ensureNotTerminated();\n\n        if (ex instanceof _util.PasswordException) {\n          var task = new WorkerTask(`PasswordException: response ${ex.code}`);\n          startWorkerTask(task);\n          handler.sendWithPromise(\"PasswordRequest\", ex).then(function (data) {\n            finishWorkerTask(task);\n            pdfManager.updatePassword(data.password);\n            pdfManagerReady();\n          }).catch(function () {\n            finishWorkerTask(task);\n            handler.send(\"DocException\", ex);\n          });\n        } else if (ex instanceof _util.InvalidPDFException || ex instanceof _util.MissingPDFException || ex instanceof _util.UnexpectedResponseException || ex instanceof _util.UnknownErrorException) {\n          handler.send(\"DocException\", ex);\n        } else {\n          handler.send(\"DocException\", new _util.UnknownErrorException(ex.message, ex.toString()));\n        }\n      }\n\n      function pdfManagerReady() {\n        ensureNotTerminated();\n        loadDocument(false).then(onSuccess, function loadFailure(ex) {\n          ensureNotTerminated();\n\n          if (!(ex instanceof _core_utils.XRefParseException)) {\n            onFailure(ex);\n            return;\n          }\n\n          pdfManager.requestLoadedStream();\n          pdfManager.onLoadedStream().then(function () {\n            ensureNotTerminated();\n            loadDocument(true).then(onSuccess, onFailure);\n          });\n        }, onFailure);\n      }\n\n      ensureNotTerminated();\n      var evaluatorOptions = {\n        forceDataSchema: data.disableCreateObjectURL,\n        maxImageSize: data.maxImageSize,\n        disableFontFace: data.disableFontFace,\n        nativeImageDecoderSupport: data.nativeImageDecoderSupport,\n        ignoreErrors: data.ignoreErrors,\n        isEvalSupported: data.isEvalSupported\n      };\n      getPdfManager(data, evaluatorOptions).then(function (newPdfManager) {\n        if (terminated) {\n          newPdfManager.terminate(new _util.AbortException(\"Worker was terminated.\"));\n          throw new Error(\"Worker was terminated\");\n        }\n\n        pdfManager = newPdfManager;\n        pdfManager.onLoadedStream().then(function (stream) {\n          handler.send(\"DataLoaded\", {\n            length: stream.bytes.byteLength\n          });\n        });\n      }).then(pdfManagerReady, onFailure);\n    }\n\n    handler.on(\"GetPage\", function wphSetupGetPage(data) {\n      return pdfManager.getPage(data.pageIndex).then(function (page) {\n        return Promise.all([pdfManager.ensure(page, \"rotate\"), pdfManager.ensure(page, \"ref\"), pdfManager.ensure(page, \"userUnit\"), pdfManager.ensure(page, \"view\")]).then(function ([rotate, ref, userUnit, view]) {\n          return {\n            rotate,\n            ref,\n            userUnit,\n            view\n          };\n        });\n      });\n    });\n    handler.on(\"GetPageIndex\", function wphSetupGetPageIndex(data) {\n      var ref = _primitives.Ref.get(data.ref.num, data.ref.gen);\n\n      var catalog = pdfManager.pdfDocument.catalog;\n      return catalog.getPageIndex(ref);\n    });\n    handler.on(\"GetDestinations\", function wphSetupGetDestinations(data) {\n      return pdfManager.ensureCatalog(\"destinations\");\n    });\n    handler.on(\"GetDestination\", function wphSetupGetDestination(data) {\n      return pdfManager.ensureCatalog(\"getDestination\", [data.id]);\n    });\n    handler.on(\"GetPageLabels\", function wphSetupGetPageLabels(data) {\n      return pdfManager.ensureCatalog(\"pageLabels\");\n    });\n    handler.on(\"GetPageLayout\", function wphSetupGetPageLayout(data) {\n      return pdfManager.ensureCatalog(\"pageLayout\");\n    });\n    handler.on(\"GetPageMode\", function wphSetupGetPageMode(data) {\n      return pdfManager.ensureCatalog(\"pageMode\");\n    });\n    handler.on(\"GetViewerPreferences\", function (data) {\n      return pdfManager.ensureCatalog(\"viewerPreferences\");\n    });\n    handler.on(\"GetOpenAction\", function (data) {\n      return pdfManager.ensureCatalog(\"openAction\");\n    });\n    handler.on(\"GetAttachments\", function wphSetupGetAttachments(data) {\n      return pdfManager.ensureCatalog(\"attachments\");\n    });\n    handler.on(\"GetJavaScript\", function wphSetupGetJavaScript(data) {\n      return pdfManager.ensureCatalog(\"javaScript\");\n    });\n    handler.on(\"GetOutline\", function wphSetupGetOutline(data) {\n      return pdfManager.ensureCatalog(\"documentOutline\");\n    });\n    handler.on(\"GetPermissions\", function (data) {\n      return pdfManager.ensureCatalog(\"permissions\");\n    });\n    handler.on(\"GetMetadata\", function wphSetupGetMetadata(data) {\n      return Promise.all([pdfManager.ensureDoc(\"documentInfo\"), pdfManager.ensureCatalog(\"metadata\")]);\n    });\n    handler.on(\"GetData\", function wphSetupGetData(data) {\n      pdfManager.requestLoadedStream();\n      return pdfManager.onLoadedStream().then(function (stream) {\n        return stream.bytes;\n      });\n    });\n    handler.on(\"GetStats\", function wphSetupGetStats(data) {\n      return pdfManager.pdfDocument.xref.stats;\n    });\n    handler.on(\"GetAnnotations\", function ({\n      pageIndex,\n      intent\n    }) {\n      return pdfManager.getPage(pageIndex).then(function (page) {\n        return page.getAnnotationsData(intent);\n      });\n    });\n    handler.on(\"GetOperatorList\", function wphSetupRenderPage(data, sink) {\n      var pageIndex = data.pageIndex;\n      pdfManager.getPage(pageIndex).then(function (page) {\n        var task = new WorkerTask(`GetOperatorList: page ${pageIndex}`);\n        startWorkerTask(task);\n        const start = verbosity >= _util.VerbosityLevel.INFOS ? Date.now() : 0;\n        page.getOperatorList({\n          handler,\n          sink,\n          task,\n          intent: data.intent,\n          renderInteractiveForms: data.renderInteractiveForms\n        }).then(function (operatorListInfo) {\n          finishWorkerTask(task);\n\n          if (start) {\n            (0, _util.info)(`page=${pageIndex + 1} - getOperatorList: time=` + `${Date.now() - start}ms, len=${operatorListInfo.length}`);\n          }\n\n          sink.close();\n        }, function (reason) {\n          finishWorkerTask(task);\n\n          if (task.terminated) {\n            return;\n          }\n\n          handler.send(\"UnsupportedFeature\", {\n            featureId: _util.UNSUPPORTED_FEATURES.unknown\n          });\n          sink.error(reason);\n        });\n      });\n    }, this);\n    handler.on(\"GetTextContent\", function wphExtractText(data, sink) {\n      var pageIndex = data.pageIndex;\n\n      sink.onPull = function (desiredSize) {};\n\n      sink.onCancel = function (reason) {};\n\n      pdfManager.getPage(pageIndex).then(function (page) {\n        var task = new WorkerTask(\"GetTextContent: page \" + pageIndex);\n        startWorkerTask(task);\n        const start = verbosity >= _util.VerbosityLevel.INFOS ? Date.now() : 0;\n        page.extractTextContent({\n          handler,\n          task,\n          sink,\n          normalizeWhitespace: data.normalizeWhitespace,\n          combineTextItems: data.combineTextItems\n        }).then(function () {\n          finishWorkerTask(task);\n\n          if (start) {\n            (0, _util.info)(`page=${pageIndex + 1} - getTextContent: time=` + `${Date.now() - start}ms`);\n          }\n\n          sink.close();\n        }, function (reason) {\n          finishWorkerTask(task);\n\n          if (task.terminated) {\n            return;\n          }\n\n          sink.error(reason);\n        });\n      });\n    });\n    handler.on(\"FontFallback\", function (data) {\n      return pdfManager.fontFallback(data.id, handler);\n    });\n    handler.on(\"Cleanup\", function wphCleanup(data) {\n      return pdfManager.cleanup();\n    });\n    handler.on(\"Terminate\", function wphTerminate(data) {\n      terminated = true;\n      const waitOn = [];\n\n      if (pdfManager) {\n        pdfManager.terminate(new _util.AbortException(\"Worker was terminated.\"));\n        const cleanupPromise = pdfManager.cleanup();\n        waitOn.push(cleanupPromise);\n        pdfManager = null;\n      } else {\n        (0, _primitives.clearPrimitiveCaches)();\n      }\n\n      if (cancelXHRs) {\n        cancelXHRs(new _util.AbortException(\"Worker was terminated.\"));\n      }\n\n      WorkerTasks.forEach(function (task) {\n        waitOn.push(task.finished);\n        task.terminate();\n      });\n      return Promise.all(waitOn).then(function () {\n        handler.destroy();\n        handler = null;\n      });\n    });\n    handler.on(\"Ready\", function wphReady(data) {\n      setupDoc(docParams);\n      docParams = null;\n    });\n    return workerHandlerName;\n  },\n\n  initializeFromPort(port) {\n    var handler = new _message_handler.MessageHandler(\"worker\", \"main\", port);\n    WorkerMessageHandler.setup(handler, port);\n    handler.send(\"ready\", null);\n  }\n\n};\nexports.WorkerMessageHandler = WorkerMessageHandler;\n\nfunction isMessagePort(maybePort) {\n  return typeof maybePort.postMessage === \"function\" && \"onmessage\" in maybePort;\n}\n\nif (typeof window === \"undefined\" && !_is_node.isNodeJS && typeof self !== \"undefined\" && isMessagePort(self)) {\n  WorkerMessageHandler.initializeFromPort(self);\n}\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.arrayByteLength = arrayByteLength;\nexports.arraysToBytes = arraysToBytes;\nexports.assert = assert;\nexports.bytesToString = bytesToString;\nexports.createPromiseCapability = createPromiseCapability;\nexports.getVerbosityLevel = getVerbosityLevel;\nexports.info = info;\nexports.isArrayBuffer = isArrayBuffer;\nexports.isArrayEqual = isArrayEqual;\nexports.isBool = isBool;\nexports.isEmptyObj = isEmptyObj;\nexports.isNum = isNum;\nexports.isString = isString;\nexports.isSameOrigin = isSameOrigin;\nexports.createValidAbsoluteUrl = createValidAbsoluteUrl;\nexports.removeNullCharacters = removeNullCharacters;\nexports.setVerbosityLevel = setVerbosityLevel;\nexports.shadow = shadow;\nexports.string32 = string32;\nexports.stringToBytes = stringToBytes;\nexports.stringToPDFString = stringToPDFString;\nexports.stringToUTF8String = stringToUTF8String;\nexports.utf8StringToString = utf8StringToString;\nexports.warn = warn;\nexports.unreachable = unreachable;\nexports.IsEvalSupportedCached = exports.IsLittleEndianCached = exports.createObjectURL = exports.FormatError = exports.Util = exports.UnknownErrorException = exports.UnexpectedResponseException = exports.TextRenderingMode = exports.StreamType = exports.PermissionFlag = exports.PasswordResponses = exports.PasswordException = exports.NativeImageDecoding = exports.MissingPDFException = exports.InvalidPDFException = exports.AbortException = exports.CMapCompressionType = exports.ImageKind = exports.FontType = exports.AnnotationType = exports.AnnotationStateModelType = exports.AnnotationReviewState = exports.AnnotationReplyType = exports.AnnotationMarkedState = exports.AnnotationFlag = exports.AnnotationFieldFlag = exports.AnnotationBorderStyleType = exports.UNSUPPORTED_FEATURES = exports.VerbosityLevel = exports.OPS = exports.IDENTITY_MATRIX = exports.FONT_IDENTITY_MATRIX = exports.BaseException = void 0;\n\n__w_pdfjs_require__(3);\n\nconst IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\nexports.IDENTITY_MATRIX = IDENTITY_MATRIX;\nconst FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\nexports.FONT_IDENTITY_MATRIX = FONT_IDENTITY_MATRIX;\nconst NativeImageDecoding = {\n  NONE: \"none\",\n  DECODE: \"decode\",\n  DISPLAY: \"display\"\n};\nexports.NativeImageDecoding = NativeImageDecoding;\nconst PermissionFlag = {\n  PRINT: 0x04,\n  MODIFY_CONTENTS: 0x08,\n  COPY: 0x10,\n  MODIFY_ANNOTATIONS: 0x20,\n  FILL_INTERACTIVE_FORMS: 0x100,\n  COPY_FOR_ACCESSIBILITY: 0x200,\n  ASSEMBLE: 0x400,\n  PRINT_HIGH_QUALITY: 0x800\n};\nexports.PermissionFlag = PermissionFlag;\nconst TextRenderingMode = {\n  FILL: 0,\n  STROKE: 1,\n  FILL_STROKE: 2,\n  INVISIBLE: 3,\n  FILL_ADD_TO_PATH: 4,\n  STROKE_ADD_TO_PATH: 5,\n  FILL_STROKE_ADD_TO_PATH: 6,\n  ADD_TO_PATH: 7,\n  FILL_STROKE_MASK: 3,\n  ADD_TO_PATH_FLAG: 4\n};\nexports.TextRenderingMode = TextRenderingMode;\nconst ImageKind = {\n  GRAYSCALE_1BPP: 1,\n  RGB_24BPP: 2,\n  RGBA_32BPP: 3\n};\nexports.ImageKind = ImageKind;\nconst AnnotationType = {\n  TEXT: 1,\n  LINK: 2,\n  FREETEXT: 3,\n  LINE: 4,\n  SQUARE: 5,\n  CIRCLE: 6,\n  POLYGON: 7,\n  POLYLINE: 8,\n  HIGHLIGHT: 9,\n  UNDERLINE: 10,\n  SQUIGGLY: 11,\n  STRIKEOUT: 12,\n  STAMP: 13,\n  CARET: 14,\n  INK: 15,\n  POPUP: 16,\n  FILEATTACHMENT: 17,\n  SOUND: 18,\n  MOVIE: 19,\n  WIDGET: 20,\n  SCREEN: 21,\n  PRINTERMARK: 22,\n  TRAPNET: 23,\n  WATERMARK: 24,\n  THREED: 25,\n  REDACT: 26\n};\nexports.AnnotationType = AnnotationType;\nconst AnnotationStateModelType = {\n  MARKED: \"Marked\",\n  REVIEW: \"Review\"\n};\nexports.AnnotationStateModelType = AnnotationStateModelType;\nconst AnnotationMarkedState = {\n  MARKED: \"Marked\",\n  UNMARKED: \"Unmarked\"\n};\nexports.AnnotationMarkedState = AnnotationMarkedState;\nconst AnnotationReviewState = {\n  ACCEPTED: \"Accepted\",\n  REJECTED: \"Rejected\",\n  CANCELLED: \"Cancelled\",\n  COMPLETED: \"Completed\",\n  NONE: \"None\"\n};\nexports.AnnotationReviewState = AnnotationReviewState;\nconst AnnotationReplyType = {\n  GROUP: \"Group\",\n  REPLY: \"R\"\n};\nexports.AnnotationReplyType = AnnotationReplyType;\nconst AnnotationFlag = {\n  INVISIBLE: 0x01,\n  HIDDEN: 0x02,\n  PRINT: 0x04,\n  NOZOOM: 0x08,\n  NOROTATE: 0x10,\n  NOVIEW: 0x20,\n  READONLY: 0x40,\n  LOCKED: 0x80,\n  TOGGLENOVIEW: 0x100,\n  LOCKEDCONTENTS: 0x200\n};\nexports.AnnotationFlag = AnnotationFlag;\nconst AnnotationFieldFlag = {\n  READONLY: 0x0000001,\n  REQUIRED: 0x0000002,\n  NOEXPORT: 0x0000004,\n  MULTILINE: 0x0001000,\n  PASSWORD: 0x0002000,\n  NOTOGGLETOOFF: 0x0004000,\n  RADIO: 0x0008000,\n  PUSHBUTTON: 0x0010000,\n  COMBO: 0x0020000,\n  EDIT: 0x0040000,\n  SORT: 0x0080000,\n  FILESELECT: 0x0100000,\n  MULTISELECT: 0x0200000,\n  DONOTSPELLCHECK: 0x0400000,\n  DONOTSCROLL: 0x0800000,\n  COMB: 0x1000000,\n  RICHTEXT: 0x2000000,\n  RADIOSINUNISON: 0x2000000,\n  COMMITONSELCHANGE: 0x4000000\n};\nexports.AnnotationFieldFlag = AnnotationFieldFlag;\nconst AnnotationBorderStyleType = {\n  SOLID: 1,\n  DASHED: 2,\n  BEVELED: 3,\n  INSET: 4,\n  UNDERLINE: 5\n};\nexports.AnnotationBorderStyleType = AnnotationBorderStyleType;\nconst StreamType = {\n  UNKNOWN: \"UNKNOWN\",\n  FLATE: \"FLATE\",\n  LZW: \"LZW\",\n  DCT: \"DCT\",\n  JPX: \"JPX\",\n  JBIG: \"JBIG\",\n  A85: \"A85\",\n  AHX: \"AHX\",\n  CCF: \"CCF\",\n  RLX: \"RLX\"\n};\nexports.StreamType = StreamType;\nconst FontType = {\n  UNKNOWN: \"UNKNOWN\",\n  TYPE1: \"TYPE1\",\n  TYPE1C: \"TYPE1C\",\n  CIDFONTTYPE0: \"CIDFONTTYPE0\",\n  CIDFONTTYPE0C: \"CIDFONTTYPE0C\",\n  TRUETYPE: \"TRUETYPE\",\n  CIDFONTTYPE2: \"CIDFONTTYPE2\",\n  TYPE3: \"TYPE3\",\n  OPENTYPE: \"OPENTYPE\",\n  TYPE0: \"TYPE0\",\n  MMTYPE1: \"MMTYPE1\"\n};\nexports.FontType = FontType;\nconst VerbosityLevel = {\n  ERRORS: 0,\n  WARNINGS: 1,\n  INFOS: 5\n};\nexports.VerbosityLevel = VerbosityLevel;\nconst CMapCompressionType = {\n  NONE: 0,\n  BINARY: 1,\n  STREAM: 2\n};\nexports.CMapCompressionType = CMapCompressionType;\nconst OPS = {\n  dependency: 1,\n  setLineWidth: 2,\n  setLineCap: 3,\n  setLineJoin: 4,\n  setMiterLimit: 5,\n  setDash: 6,\n  setRenderingIntent: 7,\n  setFlatness: 8,\n  setGState: 9,\n  save: 10,\n  restore: 11,\n  transform: 12,\n  moveTo: 13,\n  lineTo: 14,\n  curveTo: 15,\n  curveTo2: 16,\n  curveTo3: 17,\n  closePath: 18,\n  rectangle: 19,\n  stroke: 20,\n  closeStroke: 21,\n  fill: 22,\n  eoFill: 23,\n  fillStroke: 24,\n  eoFillStroke: 25,\n  closeFillStroke: 26,\n  closeEOFillStroke: 27,\n  endPath: 28,\n  clip: 29,\n  eoClip: 30,\n  beginText: 31,\n  endText: 32,\n  setCharSpacing: 33,\n  setWordSpacing: 34,\n  setHScale: 35,\n  setLeading: 36,\n  setFont: 37,\n  setTextRenderingMode: 38,\n  setTextRise: 39,\n  moveText: 40,\n  setLeadingMoveText: 41,\n  setTextMatrix: 42,\n  nextLine: 43,\n  showText: 44,\n  showSpacedText: 45,\n  nextLineShowText: 46,\n  nextLineSetSpacingShowText: 47,\n  setCharWidth: 48,\n  setCharWidthAndBounds: 49,\n  setStrokeColorSpace: 50,\n  setFillColorSpace: 51,\n  setStrokeColor: 52,\n  setStrokeColorN: 53,\n  setFillColor: 54,\n  setFillColorN: 55,\n  setStrokeGray: 56,\n  setFillGray: 57,\n  setStrokeRGBColor: 58,\n  setFillRGBColor: 59,\n  setStrokeCMYKColor: 60,\n  setFillCMYKColor: 61,\n  shadingFill: 62,\n  beginInlineImage: 63,\n  beginImageData: 64,\n  endInlineImage: 65,\n  paintXObject: 66,\n  markPoint: 67,\n  markPointProps: 68,\n  beginMarkedContent: 69,\n  beginMarkedContentProps: 70,\n  endMarkedContent: 71,\n  beginCompat: 72,\n  endCompat: 73,\n  paintFormXObjectBegin: 74,\n  paintFormXObjectEnd: 75,\n  beginGroup: 76,\n  endGroup: 77,\n  beginAnnotations: 78,\n  endAnnotations: 79,\n  beginAnnotation: 80,\n  endAnnotation: 81,\n  paintJpegXObject: 82,\n  paintImageMaskXObject: 83,\n  paintImageMaskXObjectGroup: 84,\n  paintImageXObject: 85,\n  paintInlineImageXObject: 86,\n  paintInlineImageXObjectGroup: 87,\n  paintImageXObjectRepeat: 88,\n  paintImageMaskXObjectRepeat: 89,\n  paintSolidColorImageMask: 90,\n  constructPath: 91\n};\nexports.OPS = OPS;\nconst UNSUPPORTED_FEATURES = {\n  unknown: \"unknown\",\n  forms: \"forms\",\n  javaScript: \"javaScript\",\n  smask: \"smask\",\n  shadingPattern: \"shadingPattern\",\n  font: \"font\"\n};\nexports.UNSUPPORTED_FEATURES = UNSUPPORTED_FEATURES;\nconst PasswordResponses = {\n  NEED_PASSWORD: 1,\n  INCORRECT_PASSWORD: 2\n};\nexports.PasswordResponses = PasswordResponses;\nlet verbosity = VerbosityLevel.WARNINGS;\n\nfunction setVerbosityLevel(level) {\n  if (Number.isInteger(level)) {\n    verbosity = level;\n  }\n}\n\nfunction getVerbosityLevel() {\n  return verbosity;\n}\n\nfunction info(msg) {\n  if (verbosity >= VerbosityLevel.INFOS) {\n    console.log(`Info: ${msg}`);\n  }\n}\n\nfunction warn(msg) {\n  if (verbosity >= VerbosityLevel.WARNINGS) {\n    console.log(`Warning: ${msg}`);\n  }\n}\n\nfunction unreachable(msg) {\n  throw new Error(msg);\n}\n\nfunction assert(cond, msg) {\n  if (!cond) {\n    unreachable(msg);\n  }\n}\n\nfunction isSameOrigin(baseUrl, otherUrl) {\n  let base;\n\n  try {\n    base = new URL(baseUrl);\n\n    if (!base.origin || base.origin === \"null\") {\n      return false;\n    }\n  } catch (e) {\n    return false;\n  }\n\n  const other = new URL(otherUrl, base);\n  return base.origin === other.origin;\n}\n\nfunction _isValidProtocol(url) {\n  if (!url) {\n    return false;\n  }\n\n  switch (url.protocol) {\n    case \"http:\":\n    case \"https:\":\n    case \"ftp:\":\n    case \"mailto:\":\n    case \"tel:\":\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nfunction createValidAbsoluteUrl(url, baseUrl) {\n  if (!url) {\n    return null;\n  }\n\n  try {\n    const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\n\n    if (_isValidProtocol(absoluteUrl)) {\n      return absoluteUrl;\n    }\n  } catch (ex) {}\n\n  return null;\n}\n\nfunction shadow(obj, prop, value) {\n  Object.defineProperty(obj, prop, {\n    value,\n    enumerable: true,\n    configurable: true,\n    writable: false\n  });\n  return value;\n}\n\nconst BaseException = function BaseExceptionClosure() {\n  function BaseException(message) {\n    if (this.constructor === BaseException) {\n      unreachable(\"Cannot initialize BaseException.\");\n    }\n\n    this.message = message;\n    this.name = this.constructor.name;\n  }\n\n  BaseException.prototype = new Error();\n  BaseException.constructor = BaseException;\n  return BaseException;\n}();\n\nexports.BaseException = BaseException;\n\nclass PasswordException extends BaseException {\n  constructor(msg, code) {\n    super(msg);\n    this.code = code;\n  }\n\n}\n\nexports.PasswordException = PasswordException;\n\nclass UnknownErrorException extends BaseException {\n  constructor(msg, details) {\n    super(msg);\n    this.details = details;\n  }\n\n}\n\nexports.UnknownErrorException = UnknownErrorException;\n\nclass InvalidPDFException extends BaseException {}\n\nexports.InvalidPDFException = InvalidPDFException;\n\nclass MissingPDFException extends BaseException {}\n\nexports.MissingPDFException = MissingPDFException;\n\nclass UnexpectedResponseException extends BaseException {\n  constructor(msg, status) {\n    super(msg);\n    this.status = status;\n  }\n\n}\n\nexports.UnexpectedResponseException = UnexpectedResponseException;\n\nclass FormatError extends BaseException {}\n\nexports.FormatError = FormatError;\n\nclass AbortException extends BaseException {}\n\nexports.AbortException = AbortException;\nconst NullCharactersRegExp = /\\x00/g;\n\nfunction removeNullCharacters(str) {\n  if (typeof str !== \"string\") {\n    warn(\"The argument for removeNullCharacters must be a string.\");\n    return str;\n  }\n\n  return str.replace(NullCharactersRegExp, \"\");\n}\n\nfunction bytesToString(bytes) {\n  assert(bytes !== null && typeof bytes === \"object\" && bytes.length !== undefined, \"Invalid argument for bytesToString\");\n  const length = bytes.length;\n  const MAX_ARGUMENT_COUNT = 8192;\n\n  if (length < MAX_ARGUMENT_COUNT) {\n    return String.fromCharCode.apply(null, bytes);\n  }\n\n  const strBuf = [];\n\n  for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n    const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n    const chunk = bytes.subarray(i, chunkEnd);\n    strBuf.push(String.fromCharCode.apply(null, chunk));\n  }\n\n  return strBuf.join(\"\");\n}\n\nfunction stringToBytes(str) {\n  assert(typeof str === \"string\", \"Invalid argument for stringToBytes\");\n  const length = str.length;\n  const bytes = new Uint8Array(length);\n\n  for (let i = 0; i < length; ++i) {\n    bytes[i] = str.charCodeAt(i) & 0xff;\n  }\n\n  return bytes;\n}\n\nfunction arrayByteLength(arr) {\n  if (arr.length !== undefined) {\n    return arr.length;\n  }\n\n  assert(arr.byteLength !== undefined);\n  return arr.byteLength;\n}\n\nfunction arraysToBytes(arr) {\n  const length = arr.length;\n\n  if (length === 1 && arr[0] instanceof Uint8Array) {\n    return arr[0];\n  }\n\n  let resultLength = 0;\n\n  for (let i = 0; i < length; i++) {\n    resultLength += arrayByteLength(arr[i]);\n  }\n\n  let pos = 0;\n  const data = new Uint8Array(resultLength);\n\n  for (let i = 0; i < length; i++) {\n    let item = arr[i];\n\n    if (!(item instanceof Uint8Array)) {\n      if (typeof item === \"string\") {\n        item = stringToBytes(item);\n      } else {\n        item = new Uint8Array(item);\n      }\n    }\n\n    const itemLength = item.byteLength;\n    data.set(item, pos);\n    pos += itemLength;\n  }\n\n  return data;\n}\n\nfunction string32(value) {\n  return String.fromCharCode(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);\n}\n\nfunction isLittleEndian() {\n  const buffer8 = new Uint8Array(4);\n  buffer8[0] = 1;\n  const view32 = new Uint32Array(buffer8.buffer, 0, 1);\n  return view32[0] === 1;\n}\n\nconst IsLittleEndianCached = {\n  get value() {\n    return shadow(this, \"value\", isLittleEndian());\n  }\n\n};\nexports.IsLittleEndianCached = IsLittleEndianCached;\n\nfunction isEvalSupported() {\n  try {\n    new Function(\"\");\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nconst IsEvalSupportedCached = {\n  get value() {\n    return shadow(this, \"value\", isEvalSupported());\n  }\n\n};\nexports.IsEvalSupportedCached = IsEvalSupportedCached;\nconst rgbBuf = [\"rgb(\", 0, \",\", 0, \",\", 0, \")\"];\n\nclass Util {\n  static makeCssRgb(r, g, b) {\n    rgbBuf[1] = r;\n    rgbBuf[3] = g;\n    rgbBuf[5] = b;\n    return rgbBuf.join(\"\");\n  }\n\n  static transform(m1, m2) {\n    return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];\n  }\n\n  static applyTransform(p, m) {\n    const xt = p[0] * m[0] + p[1] * m[2] + m[4];\n    const yt = p[0] * m[1] + p[1] * m[3] + m[5];\n    return [xt, yt];\n  }\n\n  static applyInverseTransform(p, m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n    const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n    return [xt, yt];\n  }\n\n  static getAxialAlignedBoundingBox(r, m) {\n    const p1 = Util.applyTransform(r, m);\n    const p2 = Util.applyTransform(r.slice(2, 4), m);\n    const p3 = Util.applyTransform([r[0], r[3]], m);\n    const p4 = Util.applyTransform([r[2], r[1]], m);\n    return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];\n  }\n\n  static inverseTransform(m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];\n  }\n\n  static apply3dTransform(m, v) {\n    return [m[0] * v[0] + m[1] * v[1] + m[2] * v[2], m[3] * v[0] + m[4] * v[1] + m[5] * v[2], m[6] * v[0] + m[7] * v[1] + m[8] * v[2]];\n  }\n\n  static singularValueDecompose2dScale(m) {\n    const transpose = [m[0], m[2], m[1], m[3]];\n    const a = m[0] * transpose[0] + m[1] * transpose[2];\n    const b = m[0] * transpose[1] + m[1] * transpose[3];\n    const c = m[2] * transpose[0] + m[3] * transpose[2];\n    const d = m[2] * transpose[1] + m[3] * transpose[3];\n    const first = (a + d) / 2;\n    const second = Math.sqrt((a + d) * (a + d) - 4 * (a * d - c * b)) / 2;\n    const sx = first + second || 1;\n    const sy = first - second || 1;\n    return [Math.sqrt(sx), Math.sqrt(sy)];\n  }\n\n  static normalizeRect(rect) {\n    const r = rect.slice(0);\n\n    if (rect[0] > rect[2]) {\n      r[0] = rect[2];\n      r[2] = rect[0];\n    }\n\n    if (rect[1] > rect[3]) {\n      r[1] = rect[3];\n      r[3] = rect[1];\n    }\n\n    return r;\n  }\n\n  static intersect(rect1, rect2) {\n    function compare(a, b) {\n      return a - b;\n    }\n\n    const orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare);\n    const orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare);\n    const result = [];\n    rect1 = Util.normalizeRect(rect1);\n    rect2 = Util.normalizeRect(rect2);\n\n    if (orderedX[0] === rect1[0] && orderedX[1] === rect2[0] || orderedX[0] === rect2[0] && orderedX[1] === rect1[0]) {\n      result[0] = orderedX[1];\n      result[2] = orderedX[2];\n    } else {\n      return null;\n    }\n\n    if (orderedY[0] === rect1[1] && orderedY[1] === rect2[1] || orderedY[0] === rect2[1] && orderedY[1] === rect1[1]) {\n      result[1] = orderedY[1];\n      result[3] = orderedY[2];\n    } else {\n      return null;\n    }\n\n    return result;\n  }\n\n}\n\nexports.Util = Util;\nconst PDFStringTranslateTable = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2D8, 0x2C7, 0x2C6, 0x2D9, 0x2DD, 0x2DB, 0x2DA, 0x2DC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192, 0x2044, 0x2039, 0x203A, 0x2212, 0x2030, 0x201E, 0x201C, 0x201D, 0x2018, 0x2019, 0x201A, 0x2122, 0xFB01, 0xFB02, 0x141, 0x152, 0x160, 0x178, 0x17D, 0x131, 0x142, 0x153, 0x161, 0x17E, 0, 0x20AC];\n\nfunction stringToPDFString(str) {\n  const length = str.length,\n        strBuf = [];\n\n  if (str[0] === \"\\xFE\" && str[1] === \"\\xFF\") {\n    for (let i = 2; i < length; i += 2) {\n      strBuf.push(String.fromCharCode(str.charCodeAt(i) << 8 | str.charCodeAt(i + 1)));\n    }\n  } else if (str[0] === \"\\xFF\" && str[1] === \"\\xFE\") {\n    for (let i = 2; i < length; i += 2) {\n      strBuf.push(String.fromCharCode(str.charCodeAt(i + 1) << 8 | str.charCodeAt(i)));\n    }\n  } else {\n    for (let i = 0; i < length; ++i) {\n      const code = PDFStringTranslateTable[str.charCodeAt(i)];\n      strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n    }\n  }\n\n  return strBuf.join(\"\");\n}\n\nfunction stringToUTF8String(str) {\n  return decodeURIComponent(escape(str));\n}\n\nfunction utf8StringToString(str) {\n  return unescape(encodeURIComponent(str));\n}\n\nfunction isEmptyObj(obj) {\n  for (const key in obj) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isBool(v) {\n  return typeof v === \"boolean\";\n}\n\nfunction isNum(v) {\n  return typeof v === \"number\";\n}\n\nfunction isString(v) {\n  return typeof v === \"string\";\n}\n\nfunction isArrayBuffer(v) {\n  return typeof v === \"object\" && v !== null && v.byteLength !== undefined;\n}\n\nfunction isArrayEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  return arr1.every(function (element, index) {\n    return element === arr2[index];\n  });\n}\n\nfunction createPromiseCapability() {\n  const capability = Object.create(null);\n  let isSettled = false;\n  Object.defineProperty(capability, \"settled\", {\n    get() {\n      return isSettled;\n    }\n\n  });\n  capability.promise = new Promise(function (resolve, reject) {\n    capability.resolve = function (data) {\n      isSettled = true;\n      resolve(data);\n    };\n\n    capability.reject = function (reason) {\n      isSettled = true;\n      reject(reason);\n    };\n  });\n  return capability;\n}\n\nconst createObjectURL = function createObjectURLClosure() {\n  const digits = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n  return function createObjectURL(data, contentType, forceDataSchema = false) {\n    if (!forceDataSchema && URL.createObjectURL) {\n      const blob = new Blob([data], {\n        type: contentType\n      });\n      return URL.createObjectURL(blob);\n    }\n\n    let buffer = `data:${contentType};base64,`;\n\n    for (let i = 0, ii = data.length; i < ii; i += 3) {\n      const b1 = data[i] & 0xff;\n      const b2 = data[i + 1] & 0xff;\n      const b3 = data[i + 2] & 0xff;\n      const d1 = b1 >> 2,\n            d2 = (b1 & 3) << 4 | b2 >> 4;\n      const d3 = i + 1 < ii ? (b2 & 0xf) << 2 | b3 >> 6 : 64;\n      const d4 = i + 2 < ii ? b3 & 0x3f : 64;\n      buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];\n    }\n\n    return buffer;\n  };\n}();\n\nexports.createObjectURL = createObjectURL;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\n;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clearPrimitiveCaches = clearPrimitiveCaches;\nexports.isEOF = isEOF;\nexports.isCmd = isCmd;\nexports.isDict = isDict;\nexports.isName = isName;\nexports.isRef = isRef;\nexports.isRefsEqual = isRefsEqual;\nexports.isStream = isStream;\nexports.RefSetCache = exports.RefSet = exports.Ref = exports.Name = exports.Dict = exports.Cmd = exports.EOF = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar EOF = {};\nexports.EOF = EOF;\n\nvar Name = function NameClosure() {\n  let nameCache = Object.create(null);\n\n  function Name(name) {\n    this.name = name;\n  }\n\n  Name.prototype = {};\n\n  Name.get = function Name_get(name) {\n    var nameValue = nameCache[name];\n    return nameValue ? nameValue : nameCache[name] = new Name(name);\n  };\n\n  Name._clearCache = function () {\n    nameCache = Object.create(null);\n  };\n\n  return Name;\n}();\n\nexports.Name = Name;\n\nvar Cmd = function CmdClosure() {\n  let cmdCache = Object.create(null);\n\n  function Cmd(cmd) {\n    this.cmd = cmd;\n  }\n\n  Cmd.prototype = {};\n\n  Cmd.get = function Cmd_get(cmd) {\n    var cmdValue = cmdCache[cmd];\n    return cmdValue ? cmdValue : cmdCache[cmd] = new Cmd(cmd);\n  };\n\n  Cmd._clearCache = function () {\n    cmdCache = Object.create(null);\n  };\n\n  return Cmd;\n}();\n\nexports.Cmd = Cmd;\n\nvar Dict = function DictClosure() {\n  var nonSerializable = function nonSerializableClosure() {\n    return nonSerializable;\n  };\n\n  function Dict(xref) {\n    this._map = Object.create(null);\n    this.xref = xref;\n    this.objId = null;\n    this.suppressEncryption = false;\n    this.__nonSerializable__ = nonSerializable;\n  }\n\n  Dict.prototype = {\n    assignXref: function Dict_assignXref(newXref) {\n      this.xref = newXref;\n    },\n\n    get(key1, key2, key3) {\n      let value = this._map[key1];\n\n      if (value === undefined && key2 !== undefined) {\n        value = this._map[key2];\n\n        if (value === undefined && key3 !== undefined) {\n          value = this._map[key3];\n        }\n      }\n\n      if (value instanceof Ref && this.xref) {\n        return this.xref.fetch(value, this.suppressEncryption);\n      }\n\n      return value;\n    },\n\n    async getAsync(key1, key2, key3) {\n      let value = this._map[key1];\n\n      if (value === undefined && key2 !== undefined) {\n        value = this._map[key2];\n\n        if (value === undefined && key3 !== undefined) {\n          value = this._map[key3];\n        }\n      }\n\n      if (value instanceof Ref && this.xref) {\n        return this.xref.fetchAsync(value, this.suppressEncryption);\n      }\n\n      return value;\n    },\n\n    getArray(key1, key2, key3) {\n      let value = this.get(key1, key2, key3);\n\n      if (!Array.isArray(value) || !this.xref) {\n        return value;\n      }\n\n      value = value.slice();\n\n      for (let i = 0, ii = value.length; i < ii; i++) {\n        if (!(value[i] instanceof Ref)) {\n          continue;\n        }\n\n        value[i] = this.xref.fetch(value[i], this.suppressEncryption);\n      }\n\n      return value;\n    },\n\n    getRaw: function Dict_getRaw(key) {\n      return this._map[key];\n    },\n    getKeys: function Dict_getKeys() {\n      return Object.keys(this._map);\n    },\n    set: function Dict_set(key, value) {\n      this._map[key] = value;\n    },\n    has: function Dict_has(key) {\n      return this._map[key] !== undefined;\n    },\n    forEach: function Dict_forEach(callback) {\n      for (var key in this._map) {\n        callback(key, this.get(key));\n      }\n    }\n  };\n  Dict.empty = new Dict(null);\n\n  Dict.merge = function (xref, dictArray) {\n    const mergedDict = new Dict(xref);\n\n    for (let i = 0, ii = dictArray.length; i < ii; i++) {\n      const dict = dictArray[i];\n\n      if (!isDict(dict)) {\n        continue;\n      }\n\n      for (const keyName in dict._map) {\n        if (mergedDict._map[keyName] !== undefined) {\n          continue;\n        }\n\n        mergedDict._map[keyName] = dict._map[keyName];\n      }\n    }\n\n    return mergedDict;\n  };\n\n  return Dict;\n}();\n\nexports.Dict = Dict;\n\nvar Ref = function RefClosure() {\n  let refCache = Object.create(null);\n\n  function Ref(num, gen) {\n    this.num = num;\n    this.gen = gen;\n  }\n\n  Ref.prototype = {\n    toString: function Ref_toString() {\n      if (this.gen === 0) {\n        return `${this.num}R`;\n      }\n\n      return `${this.num}R${this.gen}`;\n    }\n  };\n\n  Ref.get = function (num, gen) {\n    const key = gen === 0 ? `${num}R` : `${num}R${gen}`;\n    const refValue = refCache[key];\n    return refValue ? refValue : refCache[key] = new Ref(num, gen);\n  };\n\n  Ref._clearCache = function () {\n    refCache = Object.create(null);\n  };\n\n  return Ref;\n}();\n\nexports.Ref = Ref;\n\nvar RefSet = function RefSetClosure() {\n  function RefSet() {\n    this.dict = Object.create(null);\n  }\n\n  RefSet.prototype = {\n    has: function RefSet_has(ref) {\n      return ref.toString() in this.dict;\n    },\n    put: function RefSet_put(ref) {\n      this.dict[ref.toString()] = true;\n    },\n    remove: function RefSet_remove(ref) {\n      delete this.dict[ref.toString()];\n    }\n  };\n  return RefSet;\n}();\n\nexports.RefSet = RefSet;\n\nvar RefSetCache = function RefSetCacheClosure() {\n  function RefSetCache() {\n    this.dict = Object.create(null);\n  }\n\n  RefSetCache.prototype = {\n    get: function RefSetCache_get(ref) {\n      return this.dict[ref.toString()];\n    },\n    has: function RefSetCache_has(ref) {\n      return ref.toString() in this.dict;\n    },\n    put: function RefSetCache_put(ref, obj) {\n      this.dict[ref.toString()] = obj;\n    },\n    putAlias: function RefSetCache_putAlias(ref, aliasRef) {\n      this.dict[ref.toString()] = this.get(aliasRef);\n    },\n    forEach: function RefSetCache_forEach(callback) {\n      for (const i in this.dict) {\n        callback(this.dict[i]);\n      }\n    },\n    clear: function RefSetCache_clear() {\n      this.dict = Object.create(null);\n    }\n  };\n  return RefSetCache;\n}();\n\nexports.RefSetCache = RefSetCache;\n\nfunction isEOF(v) {\n  return v === EOF;\n}\n\nfunction isName(v, name) {\n  return v instanceof Name && (name === undefined || v.name === name);\n}\n\nfunction isCmd(v, cmd) {\n  return v instanceof Cmd && (cmd === undefined || v.cmd === cmd);\n}\n\nfunction isDict(v, type) {\n  return v instanceof Dict && (type === undefined || isName(v.get(\"Type\"), type));\n}\n\nfunction isRef(v) {\n  return v instanceof Ref;\n}\n\nfunction isRefsEqual(v1, v2) {\n  return v1.num === v2.num && v1.gen === v2.gen;\n}\n\nfunction isStream(v) {\n  return typeof v === \"object\" && v !== null && v.getBytes !== undefined;\n}\n\nfunction clearPrimitiveCaches() {\n  Cmd._clearCache();\n\n  Name._clearCache();\n\n  Ref._clearCache();\n}\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NetworkPdfManager = exports.LocalPdfManager = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _chunked_stream = __w_pdfjs_require__(6);\n\nvar _core_utils = __w_pdfjs_require__(7);\n\nvar _document = __w_pdfjs_require__(8);\n\nvar _stream = __w_pdfjs_require__(11);\n\nclass BasePdfManager {\n  constructor() {\n    if (this.constructor === BasePdfManager) {\n      (0, _util.unreachable)(\"Cannot initialize BasePdfManager.\");\n    }\n  }\n\n  get docId() {\n    return this._docId;\n  }\n\n  get password() {\n    return this._password;\n  }\n\n  get docBaseUrl() {\n    let docBaseUrl = null;\n\n    if (this._docBaseUrl) {\n      const absoluteUrl = (0, _util.createValidAbsoluteUrl)(this._docBaseUrl);\n\n      if (absoluteUrl) {\n        docBaseUrl = absoluteUrl.href;\n      } else {\n        (0, _util.warn)(`Invalid absolute docBaseUrl: \"${this._docBaseUrl}\".`);\n      }\n    }\n\n    return (0, _util.shadow)(this, \"docBaseUrl\", docBaseUrl);\n  }\n\n  onLoadedStream() {\n    (0, _util.unreachable)(\"Abstract method `onLoadedStream` called\");\n  }\n\n  ensureDoc(prop, args) {\n    return this.ensure(this.pdfDocument, prop, args);\n  }\n\n  ensureXRef(prop, args) {\n    return this.ensure(this.pdfDocument.xref, prop, args);\n  }\n\n  ensureCatalog(prop, args) {\n    return this.ensure(this.pdfDocument.catalog, prop, args);\n  }\n\n  getPage(pageIndex) {\n    return this.pdfDocument.getPage(pageIndex);\n  }\n\n  fontFallback(id, handler) {\n    return this.pdfDocument.fontFallback(id, handler);\n  }\n\n  cleanup() {\n    return this.pdfDocument.cleanup();\n  }\n\n  async ensure(obj, prop, args) {\n    (0, _util.unreachable)(\"Abstract method `ensure` called\");\n  }\n\n  requestRange(begin, end) {\n    (0, _util.unreachable)(\"Abstract method `requestRange` called\");\n  }\n\n  requestLoadedStream() {\n    (0, _util.unreachable)(\"Abstract method `requestLoadedStream` called\");\n  }\n\n  sendProgressiveData(chunk) {\n    (0, _util.unreachable)(\"Abstract method `sendProgressiveData` called\");\n  }\n\n  updatePassword(password) {\n    this._password = password;\n  }\n\n  terminate(reason) {\n    (0, _util.unreachable)(\"Abstract method `terminate` called\");\n  }\n\n}\n\nclass LocalPdfManager extends BasePdfManager {\n  constructor(docId, data, password, evaluatorOptions, docBaseUrl) {\n    super();\n    this._docId = docId;\n    this._password = password;\n    this._docBaseUrl = docBaseUrl;\n    this.evaluatorOptions = evaluatorOptions;\n    const stream = new _stream.Stream(data);\n    this.pdfDocument = new _document.PDFDocument(this, stream);\n    this._loadedStreamPromise = Promise.resolve(stream);\n  }\n\n  async ensure(obj, prop, args) {\n    const value = obj[prop];\n\n    if (typeof value === \"function\") {\n      return value.apply(obj, args);\n    }\n\n    return value;\n  }\n\n  requestRange(begin, end) {\n    return Promise.resolve();\n  }\n\n  requestLoadedStream() {}\n\n  onLoadedStream() {\n    return this._loadedStreamPromise;\n  }\n\n  terminate(reason) {}\n\n}\n\nexports.LocalPdfManager = LocalPdfManager;\n\nclass NetworkPdfManager extends BasePdfManager {\n  constructor(docId, pdfNetworkStream, args, evaluatorOptions, docBaseUrl) {\n    super();\n    this._docId = docId;\n    this._password = args.password;\n    this._docBaseUrl = docBaseUrl;\n    this.msgHandler = args.msgHandler;\n    this.evaluatorOptions = evaluatorOptions;\n    this.streamManager = new _chunked_stream.ChunkedStreamManager(pdfNetworkStream, {\n      msgHandler: args.msgHandler,\n      length: args.length,\n      disableAutoFetch: args.disableAutoFetch,\n      rangeChunkSize: args.rangeChunkSize\n    });\n    this.pdfDocument = new _document.PDFDocument(this, this.streamManager.getStream());\n  }\n\n  async ensure(obj, prop, args) {\n    try {\n      const value = obj[prop];\n\n      if (typeof value === \"function\") {\n        return value.apply(obj, args);\n      }\n\n      return value;\n    } catch (ex) {\n      if (!(ex instanceof _core_utils.MissingDataException)) {\n        throw ex;\n      }\n\n      await this.requestRange(ex.begin, ex.end);\n      return this.ensure(obj, prop, args);\n    }\n  }\n\n  requestRange(begin, end) {\n    return this.streamManager.requestRange(begin, end);\n  }\n\n  requestLoadedStream() {\n    this.streamManager.requestAllChunks();\n  }\n\n  sendProgressiveData(chunk) {\n    this.streamManager.onReceiveData({\n      chunk\n    });\n  }\n\n  onLoadedStream() {\n    return this.streamManager.onLoadedStream();\n  }\n\n  terminate(reason) {\n    this.streamManager.abort(reason);\n  }\n\n}\n\nexports.NetworkPdfManager = NetworkPdfManager;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChunkedStreamManager = exports.ChunkedStream = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _core_utils = __w_pdfjs_require__(7);\n\nclass ChunkedStream {\n  constructor(length, chunkSize, manager) {\n    this.bytes = new Uint8Array(length);\n    this.start = 0;\n    this.pos = 0;\n    this.end = length;\n    this.chunkSize = chunkSize;\n    this.loadedChunks = [];\n    this.numChunksLoaded = 0;\n    this.numChunks = Math.ceil(length / chunkSize);\n    this.manager = manager;\n    this.progressiveDataLength = 0;\n    this.lastSuccessfulEnsureByteChunk = -1;\n  }\n\n  getMissingChunks() {\n    const chunks = [];\n\n    for (let chunk = 0, n = this.numChunks; chunk < n; ++chunk) {\n      if (!this.loadedChunks[chunk]) {\n        chunks.push(chunk);\n      }\n    }\n\n    return chunks;\n  }\n\n  getBaseStreams() {\n    return [this];\n  }\n\n  allChunksLoaded() {\n    return this.numChunksLoaded === this.numChunks;\n  }\n\n  onReceiveData(begin, chunk) {\n    const chunkSize = this.chunkSize;\n\n    if (begin % chunkSize !== 0) {\n      throw new Error(`Bad begin offset: ${begin}`);\n    }\n\n    const end = begin + chunk.byteLength;\n\n    if (end % chunkSize !== 0 && end !== this.bytes.length) {\n      throw new Error(`Bad end offset: ${end}`);\n    }\n\n    this.bytes.set(new Uint8Array(chunk), begin);\n    const beginChunk = Math.floor(begin / chunkSize);\n    const endChunk = Math.floor((end - 1) / chunkSize) + 1;\n\n    for (let curChunk = beginChunk; curChunk < endChunk; ++curChunk) {\n      if (!this.loadedChunks[curChunk]) {\n        this.loadedChunks[curChunk] = true;\n        ++this.numChunksLoaded;\n      }\n    }\n  }\n\n  onReceiveProgressiveData(data) {\n    let position = this.progressiveDataLength;\n    const beginChunk = Math.floor(position / this.chunkSize);\n    this.bytes.set(new Uint8Array(data), position);\n    position += data.byteLength;\n    this.progressiveDataLength = position;\n    const endChunk = position >= this.end ? this.numChunks : Math.floor(position / this.chunkSize);\n\n    for (let curChunk = beginChunk; curChunk < endChunk; ++curChunk) {\n      if (!this.loadedChunks[curChunk]) {\n        this.loadedChunks[curChunk] = true;\n        ++this.numChunksLoaded;\n      }\n    }\n  }\n\n  ensureByte(pos) {\n    if (pos < this.progressiveDataLength) {\n      return;\n    }\n\n    const chunk = Math.floor(pos / this.chunkSize);\n\n    if (chunk === this.lastSuccessfulEnsureByteChunk) {\n      return;\n    }\n\n    if (!this.loadedChunks[chunk]) {\n      throw new _core_utils.MissingDataException(pos, pos + 1);\n    }\n\n    this.lastSuccessfulEnsureByteChunk = chunk;\n  }\n\n  ensureRange(begin, end) {\n    if (begin >= end) {\n      return;\n    }\n\n    if (end <= this.progressiveDataLength) {\n      return;\n    }\n\n    const chunkSize = this.chunkSize;\n    const beginChunk = Math.floor(begin / chunkSize);\n    const endChunk = Math.floor((end - 1) / chunkSize) + 1;\n\n    for (let chunk = beginChunk; chunk < endChunk; ++chunk) {\n      if (!this.loadedChunks[chunk]) {\n        throw new _core_utils.MissingDataException(begin, end);\n      }\n    }\n  }\n\n  nextEmptyChunk(beginChunk) {\n    const numChunks = this.numChunks;\n\n    for (let i = 0; i < numChunks; ++i) {\n      const chunk = (beginChunk + i) % numChunks;\n\n      if (!this.loadedChunks[chunk]) {\n        return chunk;\n      }\n    }\n\n    return null;\n  }\n\n  hasChunk(chunk) {\n    return !!this.loadedChunks[chunk];\n  }\n\n  get length() {\n    return this.end - this.start;\n  }\n\n  get isEmpty() {\n    return this.length === 0;\n  }\n\n  getByte() {\n    const pos = this.pos;\n\n    if (pos >= this.end) {\n      return -1;\n    }\n\n    if (pos >= this.progressiveDataLength) {\n      this.ensureByte(pos);\n    }\n\n    return this.bytes[this.pos++];\n  }\n\n  getUint16() {\n    const b0 = this.getByte();\n    const b1 = this.getByte();\n\n    if (b0 === -1 || b1 === -1) {\n      return -1;\n    }\n\n    return (b0 << 8) + b1;\n  }\n\n  getInt32() {\n    const b0 = this.getByte();\n    const b1 = this.getByte();\n    const b2 = this.getByte();\n    const b3 = this.getByte();\n    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n  }\n\n  getBytes(length, forceClamped = false) {\n    const bytes = this.bytes;\n    const pos = this.pos;\n    const strEnd = this.end;\n\n    if (!length) {\n      if (strEnd > this.progressiveDataLength) {\n        this.ensureRange(pos, strEnd);\n      }\n\n      const subarray = bytes.subarray(pos, strEnd);\n      return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n    }\n\n    let end = pos + length;\n\n    if (end > strEnd) {\n      end = strEnd;\n    }\n\n    if (end > this.progressiveDataLength) {\n      this.ensureRange(pos, end);\n    }\n\n    this.pos = end;\n    const subarray = bytes.subarray(pos, end);\n    return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n  }\n\n  peekByte() {\n    const peekedByte = this.getByte();\n\n    if (peekedByte !== -1) {\n      this.pos--;\n    }\n\n    return peekedByte;\n  }\n\n  peekBytes(length, forceClamped = false) {\n    const bytes = this.getBytes(length, forceClamped);\n    this.pos -= bytes.length;\n    return bytes;\n  }\n\n  getByteRange(begin, end) {\n    if (begin < 0) {\n      begin = 0;\n    }\n\n    if (end > this.end) {\n      end = this.end;\n    }\n\n    if (end > this.progressiveDataLength) {\n      this.ensureRange(begin, end);\n    }\n\n    return this.bytes.subarray(begin, end);\n  }\n\n  skip(n) {\n    if (!n) {\n      n = 1;\n    }\n\n    this.pos += n;\n  }\n\n  reset() {\n    this.pos = this.start;\n  }\n\n  moveStart() {\n    this.start = this.pos;\n  }\n\n  makeSubStream(start, length, dict) {\n    if (length) {\n      if (start + length > this.progressiveDataLength) {\n        this.ensureRange(start, start + length);\n      }\n    } else {\n      if (start >= this.progressiveDataLength) {\n        this.ensureByte(start);\n      }\n    }\n\n    function ChunkedStreamSubstream() {}\n\n    ChunkedStreamSubstream.prototype = Object.create(this);\n\n    ChunkedStreamSubstream.prototype.getMissingChunks = function () {\n      const chunkSize = this.chunkSize;\n      const beginChunk = Math.floor(this.start / chunkSize);\n      const endChunk = Math.floor((this.end - 1) / chunkSize) + 1;\n      const missingChunks = [];\n\n      for (let chunk = beginChunk; chunk < endChunk; ++chunk) {\n        if (!this.loadedChunks[chunk]) {\n          missingChunks.push(chunk);\n        }\n      }\n\n      return missingChunks;\n    };\n\n    ChunkedStreamSubstream.prototype.allChunksLoaded = function () {\n      if (this.numChunksLoaded === this.numChunks) {\n        return true;\n      }\n\n      return this.getMissingChunks().length === 0;\n    };\n\n    const subStream = new ChunkedStreamSubstream();\n    subStream.pos = subStream.start = start;\n    subStream.end = start + length || this.end;\n    subStream.dict = dict;\n    return subStream;\n  }\n\n}\n\nexports.ChunkedStream = ChunkedStream;\n\nclass ChunkedStreamManager {\n  constructor(pdfNetworkStream, args) {\n    this.length = args.length;\n    this.chunkSize = args.rangeChunkSize;\n    this.stream = new ChunkedStream(this.length, this.chunkSize, this);\n    this.pdfNetworkStream = pdfNetworkStream;\n    this.disableAutoFetch = args.disableAutoFetch;\n    this.msgHandler = args.msgHandler;\n    this.currRequestId = 0;\n    this.chunksNeededByRequest = Object.create(null);\n    this.requestsByChunk = Object.create(null);\n    this.promisesByRequest = Object.create(null);\n    this.progressiveDataLength = 0;\n    this.aborted = false;\n    this._loadedStreamCapability = (0, _util.createPromiseCapability)();\n  }\n\n  onLoadedStream() {\n    return this._loadedStreamCapability.promise;\n  }\n\n  sendRequest(begin, end) {\n    const rangeReader = this.pdfNetworkStream.getRangeReader(begin, end);\n\n    if (!rangeReader.isStreamingSupported) {\n      rangeReader.onProgress = this.onProgress.bind(this);\n    }\n\n    let chunks = [],\n        loaded = 0;\n    const promise = new Promise((resolve, reject) => {\n      const readChunk = chunk => {\n        try {\n          if (!chunk.done) {\n            const data = chunk.value;\n            chunks.push(data);\n            loaded += (0, _util.arrayByteLength)(data);\n\n            if (rangeReader.isStreamingSupported) {\n              this.onProgress({\n                loaded\n              });\n            }\n\n            rangeReader.read().then(readChunk, reject);\n            return;\n          }\n\n          const chunkData = (0, _util.arraysToBytes)(chunks);\n          chunks = null;\n          resolve(chunkData);\n        } catch (e) {\n          reject(e);\n        }\n      };\n\n      rangeReader.read().then(readChunk, reject);\n    });\n    promise.then(data => {\n      if (this.aborted) {\n        return;\n      }\n\n      this.onReceiveData({\n        chunk: data,\n        begin\n      });\n    });\n  }\n\n  requestAllChunks() {\n    const missingChunks = this.stream.getMissingChunks();\n\n    this._requestChunks(missingChunks);\n\n    return this._loadedStreamCapability.promise;\n  }\n\n  _requestChunks(chunks) {\n    const requestId = this.currRequestId++;\n    const chunksNeeded = Object.create(null);\n    this.chunksNeededByRequest[requestId] = chunksNeeded;\n\n    for (const chunk of chunks) {\n      if (!this.stream.hasChunk(chunk)) {\n        chunksNeeded[chunk] = true;\n      }\n    }\n\n    if ((0, _util.isEmptyObj)(chunksNeeded)) {\n      return Promise.resolve();\n    }\n\n    const capability = (0, _util.createPromiseCapability)();\n    this.promisesByRequest[requestId] = capability;\n    const chunksToRequest = [];\n\n    for (let chunk in chunksNeeded) {\n      chunk = chunk | 0;\n\n      if (!(chunk in this.requestsByChunk)) {\n        this.requestsByChunk[chunk] = [];\n        chunksToRequest.push(chunk);\n      }\n\n      this.requestsByChunk[chunk].push(requestId);\n    }\n\n    if (!chunksToRequest.length) {\n      return capability.promise;\n    }\n\n    const groupedChunksToRequest = this.groupChunks(chunksToRequest);\n\n    for (const groupedChunk of groupedChunksToRequest) {\n      const begin = groupedChunk.beginChunk * this.chunkSize;\n      const end = Math.min(groupedChunk.endChunk * this.chunkSize, this.length);\n      this.sendRequest(begin, end);\n    }\n\n    return capability.promise;\n  }\n\n  getStream() {\n    return this.stream;\n  }\n\n  requestRange(begin, end) {\n    end = Math.min(end, this.length);\n    const beginChunk = this.getBeginChunk(begin);\n    const endChunk = this.getEndChunk(end);\n    const chunks = [];\n\n    for (let chunk = beginChunk; chunk < endChunk; ++chunk) {\n      chunks.push(chunk);\n    }\n\n    return this._requestChunks(chunks);\n  }\n\n  requestRanges(ranges = []) {\n    const chunksToRequest = [];\n\n    for (const range of ranges) {\n      const beginChunk = this.getBeginChunk(range.begin);\n      const endChunk = this.getEndChunk(range.end);\n\n      for (let chunk = beginChunk; chunk < endChunk; ++chunk) {\n        if (!chunksToRequest.includes(chunk)) {\n          chunksToRequest.push(chunk);\n        }\n      }\n    }\n\n    chunksToRequest.sort(function (a, b) {\n      return a - b;\n    });\n    return this._requestChunks(chunksToRequest);\n  }\n\n  groupChunks(chunks) {\n    const groupedChunks = [];\n    let beginChunk = -1;\n    let prevChunk = -1;\n\n    for (let i = 0, ii = chunks.length; i < ii; ++i) {\n      const chunk = chunks[i];\n\n      if (beginChunk < 0) {\n        beginChunk = chunk;\n      }\n\n      if (prevChunk >= 0 && prevChunk + 1 !== chunk) {\n        groupedChunks.push({\n          beginChunk,\n          endChunk: prevChunk + 1\n        });\n        beginChunk = chunk;\n      }\n\n      if (i + 1 === chunks.length) {\n        groupedChunks.push({\n          beginChunk,\n          endChunk: chunk + 1\n        });\n      }\n\n      prevChunk = chunk;\n    }\n\n    return groupedChunks;\n  }\n\n  onProgress(args) {\n    this.msgHandler.send(\"DocProgress\", {\n      loaded: this.stream.numChunksLoaded * this.chunkSize + args.loaded,\n      total: this.length\n    });\n  }\n\n  onReceiveData(args) {\n    const chunk = args.chunk;\n    const isProgressive = args.begin === undefined;\n    const begin = isProgressive ? this.progressiveDataLength : args.begin;\n    const end = begin + chunk.byteLength;\n    const beginChunk = Math.floor(begin / this.chunkSize);\n    const endChunk = end < this.length ? Math.floor(end / this.chunkSize) : Math.ceil(end / this.chunkSize);\n\n    if (isProgressive) {\n      this.stream.onReceiveProgressiveData(chunk);\n      this.progressiveDataLength = end;\n    } else {\n      this.stream.onReceiveData(begin, chunk);\n    }\n\n    if (this.stream.allChunksLoaded()) {\n      this._loadedStreamCapability.resolve(this.stream);\n    }\n\n    const loadedRequests = [];\n\n    for (let chunk = beginChunk; chunk < endChunk; ++chunk) {\n      const requestIds = this.requestsByChunk[chunk] || [];\n      delete this.requestsByChunk[chunk];\n\n      for (const requestId of requestIds) {\n        const chunksNeeded = this.chunksNeededByRequest[requestId];\n\n        if (chunk in chunksNeeded) {\n          delete chunksNeeded[chunk];\n        }\n\n        if (!(0, _util.isEmptyObj)(chunksNeeded)) {\n          continue;\n        }\n\n        loadedRequests.push(requestId);\n      }\n    }\n\n    if (!this.disableAutoFetch && (0, _util.isEmptyObj)(this.requestsByChunk)) {\n      let nextEmptyChunk;\n\n      if (this.stream.numChunksLoaded === 1) {\n        const lastChunk = this.stream.numChunks - 1;\n\n        if (!this.stream.hasChunk(lastChunk)) {\n          nextEmptyChunk = lastChunk;\n        }\n      } else {\n        nextEmptyChunk = this.stream.nextEmptyChunk(endChunk);\n      }\n\n      if (Number.isInteger(nextEmptyChunk)) {\n        this._requestChunks([nextEmptyChunk]);\n      }\n    }\n\n    for (const requestId of loadedRequests) {\n      const capability = this.promisesByRequest[requestId];\n      delete this.promisesByRequest[requestId];\n      capability.resolve();\n    }\n\n    this.msgHandler.send(\"DocProgress\", {\n      loaded: this.stream.numChunksLoaded * this.chunkSize,\n      total: this.length\n    });\n  }\n\n  onError(err) {\n    this._loadedStreamCapability.reject(err);\n  }\n\n  getBeginChunk(begin) {\n    return Math.floor(begin / this.chunkSize);\n  }\n\n  getEndChunk(end) {\n    return Math.floor((end - 1) / this.chunkSize) + 1;\n  }\n\n  abort(reason) {\n    this.aborted = true;\n\n    if (this.pdfNetworkStream) {\n      this.pdfNetworkStream.cancelAllRequests(reason);\n    }\n\n    for (const requestId in this.promisesByRequest) {\n      this.promisesByRequest[requestId].reject(reason);\n    }\n  }\n\n}\n\nexports.ChunkedStreamManager = ChunkedStreamManager;\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLookupTableFactory = getLookupTableFactory;\nexports.getInheritableProperty = getInheritableProperty;\nexports.toRomanNumerals = toRomanNumerals;\nexports.log2 = log2;\nexports.readInt8 = readInt8;\nexports.readUint16 = readUint16;\nexports.readUint32 = readUint32;\nexports.isWhiteSpace = isWhiteSpace;\nexports.XRefParseException = exports.XRefEntryException = exports.MissingDataException = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nfunction getLookupTableFactory(initializer) {\n  let lookup;\n  return function () {\n    if (initializer) {\n      lookup = Object.create(null);\n      initializer(lookup);\n      initializer = null;\n    }\n\n    return lookup;\n  };\n}\n\nclass MissingDataException extends _util.BaseException {\n  constructor(begin, end) {\n    super(`Missing data [${begin}, ${end})`);\n    this.begin = begin;\n    this.end = end;\n  }\n\n}\n\nexports.MissingDataException = MissingDataException;\n\nclass XRefEntryException extends _util.BaseException {}\n\nexports.XRefEntryException = XRefEntryException;\n\nclass XRefParseException extends _util.BaseException {}\n\nexports.XRefParseException = XRefParseException;\n\nfunction getInheritableProperty({\n  dict,\n  key,\n  getArray = false,\n  stopWhenFound = true\n}) {\n  const LOOP_LIMIT = 100;\n  let loopCount = 0;\n  let values;\n\n  while (dict) {\n    const value = getArray ? dict.getArray(key) : dict.get(key);\n\n    if (value !== undefined) {\n      if (stopWhenFound) {\n        return value;\n      }\n\n      if (!values) {\n        values = [];\n      }\n\n      values.push(value);\n    }\n\n    if (++loopCount > LOOP_LIMIT) {\n      (0, _util.warn)(`getInheritableProperty: maximum loop count exceeded for \"${key}\"`);\n      break;\n    }\n\n    dict = dict.get(\"Parent\");\n  }\n\n  return values;\n}\n\nconst ROMAN_NUMBER_MAP = [\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\", \"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\", \"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"];\n\nfunction toRomanNumerals(number, lowerCase = false) {\n  (0, _util.assert)(Number.isInteger(number) && number > 0, \"The number should be a positive integer.\");\n  const romanBuf = [];\n  let pos;\n\n  while (number >= 1000) {\n    number -= 1000;\n    romanBuf.push(\"M\");\n  }\n\n  pos = number / 100 | 0;\n  number %= 100;\n  romanBuf.push(ROMAN_NUMBER_MAP[pos]);\n  pos = number / 10 | 0;\n  number %= 10;\n  romanBuf.push(ROMAN_NUMBER_MAP[10 + pos]);\n  romanBuf.push(ROMAN_NUMBER_MAP[20 + number]);\n  const romanStr = romanBuf.join(\"\");\n  return lowerCase ? romanStr.toLowerCase() : romanStr;\n}\n\nfunction log2(x) {\n  if (x <= 0) {\n    return 0;\n  }\n\n  return Math.ceil(Math.log2(x));\n}\n\nfunction readInt8(data, offset) {\n  return data[offset] << 24 >> 24;\n}\n\nfunction readUint16(data, offset) {\n  return data[offset] << 8 | data[offset + 1];\n}\n\nfunction readUint32(data, offset) {\n  return (data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3]) >>> 0;\n}\n\nfunction isWhiteSpace(ch) {\n  return ch === 0x20 || ch === 0x09 || ch === 0x0d || ch === 0x0a;\n}\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PDFDocument = exports.Page = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _obj = __w_pdfjs_require__(9);\n\nvar _primitives = __w_pdfjs_require__(4);\n\nvar _core_utils = __w_pdfjs_require__(7);\n\nvar _stream = __w_pdfjs_require__(11);\n\nvar _annotation = __w_pdfjs_require__(23);\n\nvar _crypto = __w_pdfjs_require__(21);\n\nvar _parser = __w_pdfjs_require__(10);\n\nvar _operator_list = __w_pdfjs_require__(24);\n\nvar _evaluator = __w_pdfjs_require__(25);\n\nvar _function = __w_pdfjs_require__(39);\n\nconst DEFAULT_USER_UNIT = 1.0;\nconst LETTER_SIZE_MEDIABOX = [0, 0, 612, 792];\n\nfunction isAnnotationRenderable(annotation, intent) {\n  return intent === \"display\" && annotation.viewable || intent === \"print\" && annotation.printable;\n}\n\nclass Page {\n  constructor({\n    pdfManager,\n    xref,\n    pageIndex,\n    pageDict,\n    ref,\n    fontCache,\n    builtInCMapCache,\n    pdfFunctionFactory\n  }) {\n    this.pdfManager = pdfManager;\n    this.pageIndex = pageIndex;\n    this.pageDict = pageDict;\n    this.xref = xref;\n    this.ref = ref;\n    this.fontCache = fontCache;\n    this.builtInCMapCache = builtInCMapCache;\n    this.pdfFunctionFactory = pdfFunctionFactory;\n    this.evaluatorOptions = pdfManager.evaluatorOptions;\n    this.resourcesPromise = null;\n    const idCounters = {\n      obj: 0\n    };\n    this.idFactory = {\n      createObjId() {\n        return `p${pageIndex}_${++idCounters.obj}`;\n      },\n\n      getDocId() {\n        return `g_${pdfManager.docId}`;\n      }\n\n    };\n  }\n\n  _getInheritableProperty(key, getArray = false) {\n    const value = (0, _core_utils.getInheritableProperty)({\n      dict: this.pageDict,\n      key,\n      getArray,\n      stopWhenFound: false\n    });\n\n    if (!Array.isArray(value)) {\n      return value;\n    }\n\n    if (value.length === 1 || !(0, _primitives.isDict)(value[0])) {\n      return value[0];\n    }\n\n    return _primitives.Dict.merge(this.xref, value);\n  }\n\n  get content() {\n    return this.pageDict.get(\"Contents\");\n  }\n\n  get resources() {\n    return (0, _util.shadow)(this, \"resources\", this._getInheritableProperty(\"Resources\") || _primitives.Dict.empty);\n  }\n\n  _getBoundingBox(name) {\n    const box = this._getInheritableProperty(name, true);\n\n    if (Array.isArray(box) && box.length === 4) {\n      if (box[2] - box[0] !== 0 && box[3] - box[1] !== 0) {\n        return box;\n      }\n\n      (0, _util.warn)(`Empty /${name} entry.`);\n    }\n\n    return null;\n  }\n\n  get mediaBox() {\n    return (0, _util.shadow)(this, \"mediaBox\", this._getBoundingBox(\"MediaBox\") || LETTER_SIZE_MEDIABOX);\n  }\n\n  get cropBox() {\n    return (0, _util.shadow)(this, \"cropBox\", this._getBoundingBox(\"CropBox\") || this.mediaBox);\n  }\n\n  get userUnit() {\n    let obj = this.pageDict.get(\"UserUnit\");\n\n    if (!(0, _util.isNum)(obj) || obj <= 0) {\n      obj = DEFAULT_USER_UNIT;\n    }\n\n    return (0, _util.shadow)(this, \"userUnit\", obj);\n  }\n\n  get view() {\n    const {\n      cropBox,\n      mediaBox\n    } = this;\n    let view;\n\n    if (cropBox === mediaBox || (0, _util.isArrayEqual)(cropBox, mediaBox)) {\n      view = mediaBox;\n    } else {\n      const box = _util.Util.intersect(cropBox, mediaBox);\n\n      if (box && box[2] - box[0] !== 0 && box[3] - box[1] !== 0) {\n        view = box;\n      } else {\n        (0, _util.warn)(\"Empty /CropBox and /MediaBox intersection.\");\n      }\n    }\n\n    return (0, _util.shadow)(this, \"view\", view || mediaBox);\n  }\n\n  get rotate() {\n    let rotate = this._getInheritableProperty(\"Rotate\") || 0;\n\n    if (rotate % 90 !== 0) {\n      rotate = 0;\n    } else if (rotate >= 360) {\n      rotate = rotate % 360;\n    } else if (rotate < 0) {\n      rotate = (rotate % 360 + 360) % 360;\n    }\n\n    return (0, _util.shadow)(this, \"rotate\", rotate);\n  }\n\n  getContentStream() {\n    const content = this.content;\n    let stream;\n\n    if (Array.isArray(content)) {\n      const xref = this.xref;\n      const streams = [];\n\n      for (const stream of content) {\n        streams.push(xref.fetchIfRef(stream));\n      }\n\n      stream = new _stream.StreamsSequenceStream(streams);\n    } else if ((0, _primitives.isStream)(content)) {\n      stream = content;\n    } else {\n      stream = new _stream.NullStream();\n    }\n\n    return stream;\n  }\n\n  loadResources(keys) {\n    if (!this.resourcesPromise) {\n      this.resourcesPromise = this.pdfManager.ensure(this, \"resources\");\n    }\n\n    return this.resourcesPromise.then(() => {\n      const objectLoader = new _obj.ObjectLoader(this.resources, keys, this.xref);\n      return objectLoader.load();\n    });\n  }\n\n  getOperatorList({\n    handler,\n    sink,\n    task,\n    intent,\n    renderInteractiveForms\n  }) {\n    const contentStreamPromise = this.pdfManager.ensure(this, \"getContentStream\");\n    const resourcesPromise = this.loadResources([\"ExtGState\", \"ColorSpace\", \"Pattern\", \"Shading\", \"XObject\", \"Font\"]);\n    const partialEvaluator = new _evaluator.PartialEvaluator({\n      xref: this.xref,\n      handler,\n      pageIndex: this.pageIndex,\n      idFactory: this.idFactory,\n      fontCache: this.fontCache,\n      builtInCMapCache: this.builtInCMapCache,\n      options: this.evaluatorOptions,\n      pdfFunctionFactory: this.pdfFunctionFactory\n    });\n    const dataPromises = Promise.all([contentStreamPromise, resourcesPromise]);\n    const pageListPromise = dataPromises.then(([contentStream]) => {\n      const opList = new _operator_list.OperatorList(intent, sink, this.pageIndex);\n      handler.send(\"StartRenderPage\", {\n        transparency: partialEvaluator.hasBlendModes(this.resources),\n        pageIndex: this.pageIndex,\n        intent\n      });\n      return partialEvaluator.getOperatorList({\n        stream: contentStream,\n        task,\n        resources: this.resources,\n        operatorList: opList\n      }).then(function () {\n        return opList;\n      });\n    });\n    return Promise.all([pageListPromise, this._parsedAnnotations]).then(function ([pageOpList, annotations]) {\n      if (annotations.length === 0) {\n        pageOpList.flush(true);\n        return {\n          length: pageOpList.totalLength\n        };\n      }\n\n      const opListPromises = [];\n\n      for (const annotation of annotations) {\n        if (isAnnotationRenderable(annotation, intent)) {\n          opListPromises.push(annotation.getOperatorList(partialEvaluator, task, renderInteractiveForms));\n        }\n      }\n\n      return Promise.all(opListPromises).then(function (opLists) {\n        pageOpList.addOp(_util.OPS.beginAnnotations, []);\n\n        for (const opList of opLists) {\n          pageOpList.addOpList(opList);\n        }\n\n        pageOpList.addOp(_util.OPS.endAnnotations, []);\n        pageOpList.flush(true);\n        return {\n          length: pageOpList.totalLength\n        };\n      });\n    });\n  }\n\n  extractTextContent({\n    handler,\n    task,\n    normalizeWhitespace,\n    sink,\n    combineTextItems\n  }) {\n    const contentStreamPromise = this.pdfManager.ensure(this, \"getContentStream\");\n    const resourcesPromise = this.loadResources([\"ExtGState\", \"XObject\", \"Font\"]);\n    const dataPromises = Promise.all([contentStreamPromise, resourcesPromise]);\n    return dataPromises.then(([contentStream]) => {\n      const partialEvaluator = new _evaluator.PartialEvaluator({\n        xref: this.xref,\n        handler,\n        pageIndex: this.pageIndex,\n        idFactory: this.idFactory,\n        fontCache: this.fontCache,\n        builtInCMapCache: this.builtInCMapCache,\n        options: this.evaluatorOptions,\n        pdfFunctionFactory: this.pdfFunctionFactory\n      });\n      return partialEvaluator.getTextContent({\n        stream: contentStream,\n        task,\n        resources: this.resources,\n        normalizeWhitespace,\n        combineTextItems,\n        sink\n      });\n    });\n  }\n\n  getAnnotationsData(intent) {\n    return this._parsedAnnotations.then(function (annotations) {\n      const annotationsData = [];\n\n      for (let i = 0, ii = annotations.length; i < ii; i++) {\n        if (!intent || isAnnotationRenderable(annotations[i], intent)) {\n          annotationsData.push(annotations[i].data);\n        }\n      }\n\n      return annotationsData;\n    });\n  }\n\n  get annotations() {\n    return (0, _util.shadow)(this, \"annotations\", this._getInheritableProperty(\"Annots\") || []);\n  }\n\n  get _parsedAnnotations() {\n    const parsedAnnotations = this.pdfManager.ensure(this, \"annotations\").then(() => {\n      const annotationRefs = this.annotations;\n      const annotationPromises = [];\n\n      for (let i = 0, ii = annotationRefs.length; i < ii; i++) {\n        annotationPromises.push(_annotation.AnnotationFactory.create(this.xref, annotationRefs[i], this.pdfManager, this.idFactory));\n      }\n\n      return Promise.all(annotationPromises).then(function (annotations) {\n        return annotations.filter(function isDefined(annotation) {\n          return !!annotation;\n        });\n      }, function (reason) {\n        (0, _util.warn)(`_parsedAnnotations: \"${reason}\".`);\n        return [];\n      });\n    });\n    return (0, _util.shadow)(this, \"_parsedAnnotations\", parsedAnnotations);\n  }\n\n}\n\nexports.Page = Page;\nconst PDF_HEADER_SIGNATURE = new Uint8Array([0x25, 0x50, 0x44, 0x46, 0x2d]);\nconst STARTXREF_SIGNATURE = new Uint8Array([0x73, 0x74, 0x61, 0x72, 0x74, 0x78, 0x72, 0x65, 0x66]);\nconst ENDOBJ_SIGNATURE = new Uint8Array([0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a]);\nconst FINGERPRINT_FIRST_BYTES = 1024;\nconst EMPTY_FINGERPRINT = \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\";\nconst PDF_HEADER_VERSION_REGEXP = /^[1-9]\\.[0-9]$/;\n\nfunction find(stream, signature, limit = 1024, backwards = false) {\n  const signatureLength = signature.length;\n  const scanBytes = stream.peekBytes(limit);\n  const scanLength = scanBytes.length - signatureLength;\n\n  if (scanLength <= 0) {\n    return false;\n  }\n\n  if (backwards) {\n    const signatureEnd = signatureLength - 1;\n    let pos = scanBytes.length - 1;\n\n    while (pos >= signatureEnd) {\n      let j = 0;\n\n      while (j < signatureLength && scanBytes[pos - j] === signature[signatureEnd - j]) {\n        j++;\n      }\n\n      if (j >= signatureLength) {\n        stream.pos += pos - signatureEnd;\n        return true;\n      }\n\n      pos--;\n    }\n  } else {\n    let pos = 0;\n\n    while (pos <= scanLength) {\n      let j = 0;\n\n      while (j < signatureLength && scanBytes[pos + j] === signature[j]) {\n        j++;\n      }\n\n      if (j >= signatureLength) {\n        stream.pos += pos;\n        return true;\n      }\n\n      pos++;\n    }\n  }\n\n  return false;\n}\n\nclass PDFDocument {\n  constructor(pdfManager, arg) {\n    let stream;\n\n    if ((0, _primitives.isStream)(arg)) {\n      stream = arg;\n    } else if ((0, _util.isArrayBuffer)(arg)) {\n      stream = new _stream.Stream(arg);\n    } else {\n      throw new Error(\"PDFDocument: Unknown argument type\");\n    }\n\n    if (stream.length <= 0) {\n      throw new _util.InvalidPDFException(\"The PDF file is empty, i.e. its size is zero bytes.\");\n    }\n\n    this.pdfManager = pdfManager;\n    this.stream = stream;\n    this.xref = new _obj.XRef(stream, pdfManager);\n    this.pdfFunctionFactory = new _function.PDFFunctionFactory({\n      xref: this.xref,\n      isEvalSupported: pdfManager.evaluatorOptions.isEvalSupported\n    });\n    this._pagePromises = [];\n  }\n\n  parse(recoveryMode) {\n    this.setup(recoveryMode);\n    const version = this.catalog.catDict.get(\"Version\");\n\n    if ((0, _primitives.isName)(version)) {\n      this.pdfFormatVersion = version.name;\n    }\n\n    try {\n      this.acroForm = this.catalog.catDict.get(\"AcroForm\");\n\n      if (this.acroForm) {\n        this.xfa = this.acroForm.get(\"XFA\");\n        const fields = this.acroForm.get(\"Fields\");\n\n        if ((!Array.isArray(fields) || fields.length === 0) && !this.xfa) {\n          this.acroForm = null;\n        }\n      }\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.info)(\"Cannot fetch AcroForm entry; assuming no AcroForms are present\");\n      this.acroForm = null;\n    }\n\n    try {\n      const collection = this.catalog.catDict.get(\"Collection\");\n\n      if ((0, _primitives.isDict)(collection) && collection.getKeys().length > 0) {\n        this.collection = collection;\n      }\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.info)(\"Cannot fetch Collection dictionary.\");\n    }\n  }\n\n  get linearization() {\n    let linearization = null;\n\n    try {\n      linearization = _parser.Linearization.create(this.stream);\n    } catch (err) {\n      if (err instanceof _core_utils.MissingDataException) {\n        throw err;\n      }\n\n      (0, _util.info)(err);\n    }\n\n    return (0, _util.shadow)(this, \"linearization\", linearization);\n  }\n\n  get startXRef() {\n    const stream = this.stream;\n    let startXRef = 0;\n\n    if (this.linearization) {\n      stream.reset();\n\n      if (find(stream, ENDOBJ_SIGNATURE)) {\n        startXRef = stream.pos + 6 - stream.start;\n      }\n    } else {\n      const step = 1024;\n      const startXRefLength = STARTXREF_SIGNATURE.length;\n      let found = false,\n          pos = stream.end;\n\n      while (!found && pos > 0) {\n        pos -= step - startXRefLength;\n\n        if (pos < 0) {\n          pos = 0;\n        }\n\n        stream.pos = pos;\n        found = find(stream, STARTXREF_SIGNATURE, step, true);\n      }\n\n      if (found) {\n        stream.skip(9);\n        let ch;\n\n        do {\n          ch = stream.getByte();\n        } while ((0, _core_utils.isWhiteSpace)(ch));\n\n        let str = \"\";\n\n        while (ch >= 0x20 && ch <= 0x39) {\n          str += String.fromCharCode(ch);\n          ch = stream.getByte();\n        }\n\n        startXRef = parseInt(str, 10);\n\n        if (isNaN(startXRef)) {\n          startXRef = 0;\n        }\n      }\n    }\n\n    return (0, _util.shadow)(this, \"startXRef\", startXRef);\n  }\n\n  checkHeader() {\n    const stream = this.stream;\n    stream.reset();\n\n    if (!find(stream, PDF_HEADER_SIGNATURE)) {\n      return;\n    }\n\n    stream.moveStart();\n    const MAX_PDF_VERSION_LENGTH = 12;\n    let version = \"\",\n        ch;\n\n    while ((ch = stream.getByte()) > 0x20) {\n      if (version.length >= MAX_PDF_VERSION_LENGTH) {\n        break;\n      }\n\n      version += String.fromCharCode(ch);\n    }\n\n    if (!this.pdfFormatVersion) {\n      this.pdfFormatVersion = version.substring(5);\n    }\n  }\n\n  parseStartXRef() {\n    this.xref.setStartXRef(this.startXRef);\n  }\n\n  setup(recoveryMode) {\n    this.xref.parse(recoveryMode);\n    this.catalog = new _obj.Catalog(this.pdfManager, this.xref);\n  }\n\n  get numPages() {\n    const linearization = this.linearization;\n    const num = linearization ? linearization.numPages : this.catalog.numPages;\n    return (0, _util.shadow)(this, \"numPages\", num);\n  }\n\n  get documentInfo() {\n    const DocumentInfoValidators = {\n      Title: _util.isString,\n      Author: _util.isString,\n      Subject: _util.isString,\n      Keywords: _util.isString,\n      Creator: _util.isString,\n      Producer: _util.isString,\n      CreationDate: _util.isString,\n      ModDate: _util.isString,\n      Trapped: _primitives.isName\n    };\n    let version = this.pdfFormatVersion;\n\n    if (typeof version !== \"string\" || !PDF_HEADER_VERSION_REGEXP.test(version)) {\n      (0, _util.warn)(`Invalid PDF header version number: ${version}`);\n      version = null;\n    }\n\n    const docInfo = {\n      PDFFormatVersion: version,\n      IsLinearized: !!this.linearization,\n      IsAcroFormPresent: !!this.acroForm,\n      IsXFAPresent: !!this.xfa,\n      IsCollectionPresent: !!this.collection\n    };\n    let infoDict;\n\n    try {\n      infoDict = this.xref.trailer.get(\"Info\");\n    } catch (err) {\n      if (err instanceof _core_utils.MissingDataException) {\n        throw err;\n      }\n\n      (0, _util.info)(\"The document information dictionary is invalid.\");\n    }\n\n    if ((0, _primitives.isDict)(infoDict)) {\n      for (const key of infoDict.getKeys()) {\n        const value = infoDict.get(key);\n\n        if (DocumentInfoValidators[key]) {\n          if (DocumentInfoValidators[key](value)) {\n            docInfo[key] = typeof value !== \"string\" ? value : (0, _util.stringToPDFString)(value);\n          } else {\n            (0, _util.info)(`Bad value in document info for \"${key}\".`);\n          }\n        } else if (typeof key === \"string\") {\n          let customValue;\n\n          if ((0, _util.isString)(value)) {\n            customValue = (0, _util.stringToPDFString)(value);\n          } else if ((0, _primitives.isName)(value) || (0, _util.isNum)(value) || (0, _util.isBool)(value)) {\n            customValue = value;\n          } else {\n            (0, _util.info)(`Unsupported value in document info for (custom) \"${key}\".`);\n            continue;\n          }\n\n          if (!docInfo[\"Custom\"]) {\n            docInfo[\"Custom\"] = Object.create(null);\n          }\n\n          docInfo[\"Custom\"][key] = customValue;\n        }\n      }\n    }\n\n    return (0, _util.shadow)(this, \"documentInfo\", docInfo);\n  }\n\n  get fingerprint() {\n    let hash;\n    const idArray = this.xref.trailer.get(\"ID\");\n\n    if (Array.isArray(idArray) && idArray[0] && (0, _util.isString)(idArray[0]) && idArray[0] !== EMPTY_FINGERPRINT) {\n      hash = (0, _util.stringToBytes)(idArray[0]);\n    } else {\n      hash = (0, _crypto.calculateMD5)(this.stream.getByteRange(0, FINGERPRINT_FIRST_BYTES), 0, FINGERPRINT_FIRST_BYTES);\n    }\n\n    const fingerprintBuf = [];\n\n    for (let i = 0, ii = hash.length; i < ii; i++) {\n      const hex = hash[i].toString(16);\n      fingerprintBuf.push(hex.padStart(2, \"0\"));\n    }\n\n    return (0, _util.shadow)(this, \"fingerprint\", fingerprintBuf.join(\"\"));\n  }\n\n  _getLinearizationPage(pageIndex) {\n    const {\n      catalog,\n      linearization\n    } = this;\n    (0, _util.assert)(linearization && linearization.pageFirst === pageIndex);\n\n    const ref = _primitives.Ref.get(linearization.objectNumberFirst, 0);\n\n    return this.xref.fetchAsync(ref).then(obj => {\n      if ((0, _primitives.isDict)(obj, \"Page\") || (0, _primitives.isDict)(obj) && !obj.has(\"Type\") && obj.has(\"Contents\")) {\n        if (ref && !catalog.pageKidsCountCache.has(ref)) {\n          catalog.pageKidsCountCache.put(ref, 1);\n        }\n\n        return [obj, ref];\n      }\n\n      throw new _util.FormatError(\"The Linearization dictionary doesn't point \" + \"to a valid Page dictionary.\");\n    }).catch(reason => {\n      (0, _util.info)(reason);\n      return catalog.getPageDict(pageIndex);\n    });\n  }\n\n  getPage(pageIndex) {\n    if (this._pagePromises[pageIndex] !== undefined) {\n      return this._pagePromises[pageIndex];\n    }\n\n    const {\n      catalog,\n      linearization\n    } = this;\n    const promise = linearization && linearization.pageFirst === pageIndex ? this._getLinearizationPage(pageIndex) : catalog.getPageDict(pageIndex);\n    return this._pagePromises[pageIndex] = promise.then(([pageDict, ref]) => {\n      return new Page({\n        pdfManager: this.pdfManager,\n        xref: this.xref,\n        pageIndex,\n        pageDict,\n        ref,\n        fontCache: catalog.fontCache,\n        builtInCMapCache: catalog.builtInCMapCache,\n        pdfFunctionFactory: this.pdfFunctionFactory\n      });\n    });\n  }\n\n  checkFirstPage() {\n    return this.getPage(0).catch(async reason => {\n      if (reason instanceof _core_utils.XRefEntryException) {\n        this._pagePromises.length = 0;\n        await this.cleanup();\n        throw new _core_utils.XRefParseException();\n      }\n    });\n  }\n\n  fontFallback(id, handler) {\n    return this.catalog.fontFallback(id, handler);\n  }\n\n  async cleanup() {\n    return this.catalog ? this.catalog.cleanup() : (0, _primitives.clearPrimitiveCaches)();\n  }\n\n}\n\nexports.PDFDocument = PDFDocument;\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FileSpec = exports.XRef = exports.ObjectLoader = exports.Catalog = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(4);\n\nvar _parser = __w_pdfjs_require__(10);\n\nvar _core_utils = __w_pdfjs_require__(7);\n\nvar _crypto = __w_pdfjs_require__(21);\n\nvar _colorspace = __w_pdfjs_require__(22);\n\nfunction fetchDestination(dest) {\n  return (0, _primitives.isDict)(dest) ? dest.get(\"D\") : dest;\n}\n\nclass Catalog {\n  constructor(pdfManager, xref) {\n    this.pdfManager = pdfManager;\n    this.xref = xref;\n    this.catDict = xref.getCatalogObj();\n\n    if (!(0, _primitives.isDict)(this.catDict)) {\n      throw new _util.FormatError(\"Catalog object is not a dictionary.\");\n    }\n\n    this.fontCache = new _primitives.RefSetCache();\n    this.builtInCMapCache = new Map();\n    this.pageKidsCountCache = new _primitives.RefSetCache();\n  }\n\n  get metadata() {\n    const streamRef = this.catDict.getRaw(\"Metadata\");\n\n    if (!(0, _primitives.isRef)(streamRef)) {\n      return (0, _util.shadow)(this, \"metadata\", null);\n    }\n\n    const suppressEncryption = !(this.xref.encrypt && this.xref.encrypt.encryptMetadata);\n    const stream = this.xref.fetch(streamRef, suppressEncryption);\n    let metadata;\n\n    if (stream && (0, _primitives.isDict)(stream.dict)) {\n      const type = stream.dict.get(\"Type\");\n      const subtype = stream.dict.get(\"Subtype\");\n\n      if ((0, _primitives.isName)(type, \"Metadata\") && (0, _primitives.isName)(subtype, \"XML\")) {\n        try {\n          metadata = (0, _util.stringToUTF8String)((0, _util.bytesToString)(stream.getBytes()));\n        } catch (e) {\n          if (e instanceof _core_utils.MissingDataException) {\n            throw e;\n          }\n\n          (0, _util.info)(\"Skipping invalid metadata.\");\n        }\n      }\n    }\n\n    return (0, _util.shadow)(this, \"metadata\", metadata);\n  }\n\n  get toplevelPagesDict() {\n    const pagesObj = this.catDict.get(\"Pages\");\n\n    if (!(0, _primitives.isDict)(pagesObj)) {\n      throw new _util.FormatError(\"Invalid top-level pages dictionary.\");\n    }\n\n    return (0, _util.shadow)(this, \"toplevelPagesDict\", pagesObj);\n  }\n\n  get documentOutline() {\n    let obj = null;\n\n    try {\n      obj = this._readDocumentOutline();\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.warn)(\"Unable to read document outline.\");\n    }\n\n    return (0, _util.shadow)(this, \"documentOutline\", obj);\n  }\n\n  _readDocumentOutline() {\n    let obj = this.catDict.get(\"Outlines\");\n\n    if (!(0, _primitives.isDict)(obj)) {\n      return null;\n    }\n\n    obj = obj.getRaw(\"First\");\n\n    if (!(0, _primitives.isRef)(obj)) {\n      return null;\n    }\n\n    const root = {\n      items: []\n    };\n    const queue = [{\n      obj,\n      parent: root\n    }];\n    const processed = new _primitives.RefSet();\n    processed.put(obj);\n    const xref = this.xref,\n          blackColor = new Uint8ClampedArray(3);\n\n    while (queue.length > 0) {\n      const i = queue.shift();\n      const outlineDict = xref.fetchIfRef(i.obj);\n\n      if (outlineDict === null) {\n        continue;\n      }\n\n      if (!outlineDict.has(\"Title\")) {\n        throw new _util.FormatError(\"Invalid outline item encountered.\");\n      }\n\n      const data = {\n        url: null,\n        dest: null\n      };\n      Catalog.parseDestDictionary({\n        destDict: outlineDict,\n        resultObj: data,\n        docBaseUrl: this.pdfManager.docBaseUrl\n      });\n      const title = outlineDict.get(\"Title\");\n      const flags = outlineDict.get(\"F\") || 0;\n      const color = outlineDict.getArray(\"C\");\n      const count = outlineDict.get(\"Count\");\n      let rgbColor = blackColor;\n\n      if (Array.isArray(color) && color.length === 3 && (color[0] !== 0 || color[1] !== 0 || color[2] !== 0)) {\n        rgbColor = _colorspace.ColorSpace.singletons.rgb.getRgb(color, 0);\n      }\n\n      const outlineItem = {\n        dest: data.dest,\n        url: data.url,\n        unsafeUrl: data.unsafeUrl,\n        newWindow: data.newWindow,\n        title: (0, _util.stringToPDFString)(title),\n        color: rgbColor,\n        count: Number.isInteger(count) ? count : undefined,\n        bold: !!(flags & 2),\n        italic: !!(flags & 1),\n        items: []\n      };\n      i.parent.items.push(outlineItem);\n      obj = outlineDict.getRaw(\"First\");\n\n      if ((0, _primitives.isRef)(obj) && !processed.has(obj)) {\n        queue.push({\n          obj,\n          parent: outlineItem\n        });\n        processed.put(obj);\n      }\n\n      obj = outlineDict.getRaw(\"Next\");\n\n      if ((0, _primitives.isRef)(obj) && !processed.has(obj)) {\n        queue.push({\n          obj,\n          parent: i.parent\n        });\n        processed.put(obj);\n      }\n    }\n\n    return root.items.length > 0 ? root.items : null;\n  }\n\n  get permissions() {\n    let permissions = null;\n\n    try {\n      permissions = this._readPermissions();\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.warn)(\"Unable to read permissions.\");\n    }\n\n    return (0, _util.shadow)(this, \"permissions\", permissions);\n  }\n\n  _readPermissions() {\n    const encrypt = this.xref.trailer.get(\"Encrypt\");\n\n    if (!(0, _primitives.isDict)(encrypt)) {\n      return null;\n    }\n\n    let flags = encrypt.get(\"P\");\n\n    if (!(0, _util.isNum)(flags)) {\n      return null;\n    }\n\n    flags += 2 ** 32;\n    const permissions = [];\n\n    for (const key in _util.PermissionFlag) {\n      const value = _util.PermissionFlag[key];\n\n      if (flags & value) {\n        permissions.push(value);\n      }\n    }\n\n    return permissions;\n  }\n\n  get numPages() {\n    const obj = this.toplevelPagesDict.get(\"Count\");\n\n    if (!Number.isInteger(obj)) {\n      throw new _util.FormatError(\"Page count in top-level pages dictionary is not an integer.\");\n    }\n\n    return (0, _util.shadow)(this, \"numPages\", obj);\n  }\n\n  get destinations() {\n    const obj = this._readDests(),\n          dests = Object.create(null);\n\n    if (obj instanceof NameTree) {\n      const names = obj.getAll();\n\n      for (const name in names) {\n        dests[name] = fetchDestination(names[name]);\n      }\n    } else if (obj instanceof _primitives.Dict) {\n      obj.forEach(function (key, value) {\n        if (value) {\n          dests[key] = fetchDestination(value);\n        }\n      });\n    }\n\n    return (0, _util.shadow)(this, \"destinations\", dests);\n  }\n\n  getDestination(destinationId) {\n    const obj = this._readDests();\n\n    if (obj instanceof NameTree || obj instanceof _primitives.Dict) {\n      return fetchDestination(obj.get(destinationId) || null);\n    }\n\n    return null;\n  }\n\n  _readDests() {\n    const obj = this.catDict.get(\"Names\");\n\n    if (obj && obj.has(\"Dests\")) {\n      return new NameTree(obj.getRaw(\"Dests\"), this.xref);\n    } else if (this.catDict.has(\"Dests\")) {\n      return this.catDict.get(\"Dests\");\n    }\n\n    return undefined;\n  }\n\n  get pageLabels() {\n    let obj = null;\n\n    try {\n      obj = this._readPageLabels();\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.warn)(\"Unable to read page labels.\");\n    }\n\n    return (0, _util.shadow)(this, \"pageLabels\", obj);\n  }\n\n  _readPageLabels() {\n    const obj = this.catDict.getRaw(\"PageLabels\");\n\n    if (!obj) {\n      return null;\n    }\n\n    const pageLabels = new Array(this.numPages);\n    let style = null,\n        prefix = \"\";\n    const numberTree = new NumberTree(obj, this.xref);\n    const nums = numberTree.getAll();\n    let currentLabel = \"\",\n        currentIndex = 1;\n\n    for (let i = 0, ii = this.numPages; i < ii; i++) {\n      if (i in nums) {\n        const labelDict = nums[i];\n\n        if (!(0, _primitives.isDict)(labelDict)) {\n          throw new _util.FormatError(\"PageLabel is not a dictionary.\");\n        }\n\n        if (labelDict.has(\"Type\") && !(0, _primitives.isName)(labelDict.get(\"Type\"), \"PageLabel\")) {\n          throw new _util.FormatError(\"Invalid type in PageLabel dictionary.\");\n        }\n\n        if (labelDict.has(\"S\")) {\n          const s = labelDict.get(\"S\");\n\n          if (!(0, _primitives.isName)(s)) {\n            throw new _util.FormatError(\"Invalid style in PageLabel dictionary.\");\n          }\n\n          style = s.name;\n        } else {\n          style = null;\n        }\n\n        if (labelDict.has(\"P\")) {\n          const p = labelDict.get(\"P\");\n\n          if (!(0, _util.isString)(p)) {\n            throw new _util.FormatError(\"Invalid prefix in PageLabel dictionary.\");\n          }\n\n          prefix = (0, _util.stringToPDFString)(p);\n        } else {\n          prefix = \"\";\n        }\n\n        if (labelDict.has(\"St\")) {\n          const st = labelDict.get(\"St\");\n\n          if (!(Number.isInteger(st) && st >= 1)) {\n            throw new _util.FormatError(\"Invalid start in PageLabel dictionary.\");\n          }\n\n          currentIndex = st;\n        } else {\n          currentIndex = 1;\n        }\n      }\n\n      switch (style) {\n        case \"D\":\n          currentLabel = currentIndex;\n          break;\n\n        case \"R\":\n        case \"r\":\n          currentLabel = (0, _core_utils.toRomanNumerals)(currentIndex, style === \"r\");\n          break;\n\n        case \"A\":\n        case \"a\":\n          const LIMIT = 26;\n          const A_UPPER_CASE = 0x41,\n                A_LOWER_CASE = 0x61;\n          const baseCharCode = style === \"a\" ? A_LOWER_CASE : A_UPPER_CASE;\n          const letterIndex = currentIndex - 1;\n          const character = String.fromCharCode(baseCharCode + letterIndex % LIMIT);\n          const charBuf = [];\n\n          for (let j = 0, jj = letterIndex / LIMIT | 0; j <= jj; j++) {\n            charBuf.push(character);\n          }\n\n          currentLabel = charBuf.join(\"\");\n          break;\n\n        default:\n          if (style) {\n            throw new _util.FormatError(`Invalid style \"${style}\" in PageLabel dictionary.`);\n          }\n\n          currentLabel = \"\";\n      }\n\n      pageLabels[i] = prefix + currentLabel;\n      currentIndex++;\n    }\n\n    return pageLabels;\n  }\n\n  get pageLayout() {\n    const obj = this.catDict.get(\"PageLayout\");\n    let pageLayout = \"\";\n\n    if ((0, _primitives.isName)(obj)) {\n      switch (obj.name) {\n        case \"SinglePage\":\n        case \"OneColumn\":\n        case \"TwoColumnLeft\":\n        case \"TwoColumnRight\":\n        case \"TwoPageLeft\":\n        case \"TwoPageRight\":\n          pageLayout = obj.name;\n      }\n    }\n\n    return (0, _util.shadow)(this, \"pageLayout\", pageLayout);\n  }\n\n  get pageMode() {\n    const obj = this.catDict.get(\"PageMode\");\n    let pageMode = \"UseNone\";\n\n    if ((0, _primitives.isName)(obj)) {\n      switch (obj.name) {\n        case \"UseNone\":\n        case \"UseOutlines\":\n        case \"UseThumbs\":\n        case \"FullScreen\":\n        case \"UseOC\":\n        case \"UseAttachments\":\n          pageMode = obj.name;\n      }\n    }\n\n    return (0, _util.shadow)(this, \"pageMode\", pageMode);\n  }\n\n  get viewerPreferences() {\n    const ViewerPreferencesValidators = {\n      HideToolbar: _util.isBool,\n      HideMenubar: _util.isBool,\n      HideWindowUI: _util.isBool,\n      FitWindow: _util.isBool,\n      CenterWindow: _util.isBool,\n      DisplayDocTitle: _util.isBool,\n      NonFullScreenPageMode: _primitives.isName,\n      Direction: _primitives.isName,\n      ViewArea: _primitives.isName,\n      ViewClip: _primitives.isName,\n      PrintArea: _primitives.isName,\n      PrintClip: _primitives.isName,\n      PrintScaling: _primitives.isName,\n      Duplex: _primitives.isName,\n      PickTrayByPDFSize: _util.isBool,\n      PrintPageRange: Array.isArray,\n      NumCopies: Number.isInteger\n    };\n    const obj = this.catDict.get(\"ViewerPreferences\");\n    const prefs = Object.create(null);\n\n    if ((0, _primitives.isDict)(obj)) {\n      for (const key in ViewerPreferencesValidators) {\n        if (!obj.has(key)) {\n          continue;\n        }\n\n        const value = obj.get(key);\n\n        if (!ViewerPreferencesValidators[key](value)) {\n          (0, _util.info)(`Bad value in ViewerPreferences for \"${key}\".`);\n          continue;\n        }\n\n        let prefValue;\n\n        switch (key) {\n          case \"NonFullScreenPageMode\":\n            switch (value.name) {\n              case \"UseNone\":\n              case \"UseOutlines\":\n              case \"UseThumbs\":\n              case \"UseOC\":\n                prefValue = value.name;\n                break;\n\n              default:\n                prefValue = \"UseNone\";\n            }\n\n            break;\n\n          case \"Direction\":\n            switch (value.name) {\n              case \"L2R\":\n              case \"R2L\":\n                prefValue = value.name;\n                break;\n\n              default:\n                prefValue = \"L2R\";\n            }\n\n            break;\n\n          case \"ViewArea\":\n          case \"ViewClip\":\n          case \"PrintArea\":\n          case \"PrintClip\":\n            switch (value.name) {\n              case \"MediaBox\":\n              case \"CropBox\":\n              case \"BleedBox\":\n              case \"TrimBox\":\n              case \"ArtBox\":\n                prefValue = value.name;\n                break;\n\n              default:\n                prefValue = \"CropBox\";\n            }\n\n            break;\n\n          case \"PrintScaling\":\n            switch (value.name) {\n              case \"None\":\n              case \"AppDefault\":\n                prefValue = value.name;\n                break;\n\n              default:\n                prefValue = \"AppDefault\";\n            }\n\n            break;\n\n          case \"Duplex\":\n            switch (value.name) {\n              case \"Simplex\":\n              case \"DuplexFlipShortEdge\":\n              case \"DuplexFlipLongEdge\":\n                prefValue = value.name;\n                break;\n\n              default:\n                prefValue = \"None\";\n            }\n\n            break;\n\n          case \"PrintPageRange\":\n            const length = value.length;\n\n            if (length % 2 !== 0) {\n              break;\n            }\n\n            const isValid = value.every((page, i, arr) => {\n              return Number.isInteger(page) && page > 0 && (i === 0 || page >= arr[i - 1]) && page <= this.numPages;\n            });\n\n            if (isValid) {\n              prefValue = value;\n            }\n\n            break;\n\n          case \"NumCopies\":\n            if (value > 0) {\n              prefValue = value;\n            }\n\n            break;\n\n          default:\n            (0, _util.assert)(typeof value === \"boolean\");\n            prefValue = value;\n        }\n\n        if (prefValue !== undefined) {\n          prefs[key] = prefValue;\n        } else {\n          (0, _util.info)(`Bad value in ViewerPreferences for \"${key}\".`);\n        }\n      }\n    }\n\n    return (0, _util.shadow)(this, \"viewerPreferences\", prefs);\n  }\n\n  get openAction() {\n    const obj = this.catDict.get(\"OpenAction\");\n    let openAction = null;\n\n    if ((0, _primitives.isDict)(obj)) {\n      const destDict = new _primitives.Dict(this.xref);\n      destDict.set(\"A\", obj);\n      const resultObj = {\n        url: null,\n        dest: null,\n        action: null\n      };\n      Catalog.parseDestDictionary({\n        destDict,\n        resultObj\n      });\n\n      if (Array.isArray(resultObj.dest)) {\n        if (!openAction) {\n          openAction = Object.create(null);\n        }\n\n        openAction.dest = resultObj.dest;\n      } else if (resultObj.action) {\n        if (!openAction) {\n          openAction = Object.create(null);\n        }\n\n        openAction.action = resultObj.action;\n      }\n    } else if (Array.isArray(obj)) {\n      if (!openAction) {\n        openAction = Object.create(null);\n      }\n\n      openAction.dest = obj;\n    }\n\n    return (0, _util.shadow)(this, \"openAction\", openAction);\n  }\n\n  get attachments() {\n    const obj = this.catDict.get(\"Names\");\n    let attachments = null;\n\n    if (obj && obj.has(\"EmbeddedFiles\")) {\n      const nameTree = new NameTree(obj.getRaw(\"EmbeddedFiles\"), this.xref);\n      const names = nameTree.getAll();\n\n      for (const name in names) {\n        const fs = new FileSpec(names[name], this.xref);\n\n        if (!attachments) {\n          attachments = Object.create(null);\n        }\n\n        attachments[(0, _util.stringToPDFString)(name)] = fs.serializable;\n      }\n    }\n\n    return (0, _util.shadow)(this, \"attachments\", attachments);\n  }\n\n  get javaScript() {\n    const obj = this.catDict.get(\"Names\");\n    let javaScript = null;\n\n    function appendIfJavaScriptDict(jsDict) {\n      const type = jsDict.get(\"S\");\n\n      if (!(0, _primitives.isName)(type, \"JavaScript\")) {\n        return;\n      }\n\n      let js = jsDict.get(\"JS\");\n\n      if ((0, _primitives.isStream)(js)) {\n        js = (0, _util.bytesToString)(js.getBytes());\n      } else if (!(0, _util.isString)(js)) {\n        return;\n      }\n\n      if (!javaScript) {\n        javaScript = [];\n      }\n\n      javaScript.push((0, _util.stringToPDFString)(js));\n    }\n\n    if (obj && obj.has(\"JavaScript\")) {\n      const nameTree = new NameTree(obj.getRaw(\"JavaScript\"), this.xref);\n      const names = nameTree.getAll();\n\n      for (const name in names) {\n        const jsDict = names[name];\n\n        if ((0, _primitives.isDict)(jsDict)) {\n          appendIfJavaScriptDict(jsDict);\n        }\n      }\n    }\n\n    const openAction = this.catDict.get(\"OpenAction\");\n\n    if ((0, _primitives.isDict)(openAction) && (0, _primitives.isName)(openAction.get(\"S\"), \"JavaScript\")) {\n      appendIfJavaScriptDict(openAction);\n    }\n\n    return (0, _util.shadow)(this, \"javaScript\", javaScript);\n  }\n\n  fontFallback(id, handler) {\n    const promises = [];\n    this.fontCache.forEach(function (promise) {\n      promises.push(promise);\n    });\n    return Promise.all(promises).then(translatedFonts => {\n      for (const translatedFont of translatedFonts) {\n        if (translatedFont.loadedName === id) {\n          translatedFont.fallback(handler);\n          return;\n        }\n      }\n    });\n  }\n\n  cleanup() {\n    (0, _primitives.clearPrimitiveCaches)();\n    this.pageKidsCountCache.clear();\n    const promises = [];\n    this.fontCache.forEach(function (promise) {\n      promises.push(promise);\n    });\n    return Promise.all(promises).then(translatedFonts => {\n      for (const {\n        dict\n      } of translatedFonts) {\n        delete dict.translated;\n      }\n\n      this.fontCache.clear();\n      this.builtInCMapCache.clear();\n    });\n  }\n\n  getPageDict(pageIndex) {\n    const capability = (0, _util.createPromiseCapability)();\n    const nodesToVisit = [this.catDict.getRaw(\"Pages\")];\n    const visitedNodes = new _primitives.RefSet();\n    const xref = this.xref,\n          pageKidsCountCache = this.pageKidsCountCache;\n    let count,\n        currentPageIndex = 0;\n\n    function next() {\n      while (nodesToVisit.length) {\n        const currentNode = nodesToVisit.pop();\n\n        if ((0, _primitives.isRef)(currentNode)) {\n          count = pageKidsCountCache.get(currentNode);\n\n          if (count > 0 && currentPageIndex + count < pageIndex) {\n            currentPageIndex += count;\n            continue;\n          }\n\n          if (visitedNodes.has(currentNode)) {\n            capability.reject(new _util.FormatError(\"Pages tree contains circular reference.\"));\n            return;\n          }\n\n          visitedNodes.put(currentNode);\n          xref.fetchAsync(currentNode).then(function (obj) {\n            if ((0, _primitives.isDict)(obj, \"Page\") || (0, _primitives.isDict)(obj) && !obj.has(\"Kids\")) {\n              if (pageIndex === currentPageIndex) {\n                if (currentNode && !pageKidsCountCache.has(currentNode)) {\n                  pageKidsCountCache.put(currentNode, 1);\n                }\n\n                capability.resolve([obj, currentNode]);\n              } else {\n                currentPageIndex++;\n                next();\n              }\n\n              return;\n            }\n\n            nodesToVisit.push(obj);\n            next();\n          }, capability.reject);\n          return;\n        }\n\n        if (!(0, _primitives.isDict)(currentNode)) {\n          capability.reject(new _util.FormatError(\"Page dictionary kid reference points to wrong type of object.\"));\n          return;\n        }\n\n        count = currentNode.get(\"Count\");\n\n        if (Number.isInteger(count) && count >= 0) {\n          const objId = currentNode.objId;\n\n          if (objId && !pageKidsCountCache.has(objId)) {\n            pageKidsCountCache.put(objId, count);\n          }\n\n          if (currentPageIndex + count <= pageIndex) {\n            currentPageIndex += count;\n            continue;\n          }\n        }\n\n        const kids = currentNode.get(\"Kids\");\n\n        if (!Array.isArray(kids)) {\n          if ((0, _primitives.isName)(currentNode.get(\"Type\"), \"Page\") || !currentNode.has(\"Type\") && currentNode.has(\"Contents\")) {\n            if (currentPageIndex === pageIndex) {\n              capability.resolve([currentNode, null]);\n              return;\n            }\n\n            currentPageIndex++;\n            continue;\n          }\n\n          capability.reject(new _util.FormatError(\"Page dictionary kids object is not an array.\"));\n          return;\n        }\n\n        for (let last = kids.length - 1; last >= 0; last--) {\n          nodesToVisit.push(kids[last]);\n        }\n      }\n\n      capability.reject(new Error(`Page index ${pageIndex} not found.`));\n    }\n\n    next();\n    return capability.promise;\n  }\n\n  getPageIndex(pageRef) {\n    const xref = this.xref;\n\n    function pagesBeforeRef(kidRef) {\n      let total = 0,\n          parentRef;\n      return xref.fetchAsync(kidRef).then(function (node) {\n        if ((0, _primitives.isRefsEqual)(kidRef, pageRef) && !(0, _primitives.isDict)(node, \"Page\") && !((0, _primitives.isDict)(node) && !node.has(\"Type\") && node.has(\"Contents\"))) {\n          throw new _util.FormatError(\"The reference does not point to a /Page dictionary.\");\n        }\n\n        if (!node) {\n          return null;\n        }\n\n        if (!(0, _primitives.isDict)(node)) {\n          throw new _util.FormatError(\"Node must be a dictionary.\");\n        }\n\n        parentRef = node.getRaw(\"Parent\");\n        return node.getAsync(\"Parent\");\n      }).then(function (parent) {\n        if (!parent) {\n          return null;\n        }\n\n        if (!(0, _primitives.isDict)(parent)) {\n          throw new _util.FormatError(\"Parent must be a dictionary.\");\n        }\n\n        return parent.getAsync(\"Kids\");\n      }).then(function (kids) {\n        if (!kids) {\n          return null;\n        }\n\n        const kidPromises = [];\n        let found = false;\n\n        for (let i = 0, ii = kids.length; i < ii; i++) {\n          const kid = kids[i];\n\n          if (!(0, _primitives.isRef)(kid)) {\n            throw new _util.FormatError(\"Kid must be a reference.\");\n          }\n\n          if ((0, _primitives.isRefsEqual)(kid, kidRef)) {\n            found = true;\n            break;\n          }\n\n          kidPromises.push(xref.fetchAsync(kid).then(function (kid) {\n            if (!(0, _primitives.isDict)(kid)) {\n              throw new _util.FormatError(\"Kid node must be a dictionary.\");\n            }\n\n            if (kid.has(\"Count\")) {\n              total += kid.get(\"Count\");\n            } else {\n              total++;\n            }\n          }));\n        }\n\n        if (!found) {\n          throw new _util.FormatError(\"Kid reference not found in parent's kids.\");\n        }\n\n        return Promise.all(kidPromises).then(function () {\n          return [total, parentRef];\n        });\n      });\n    }\n\n    let total = 0;\n\n    function next(ref) {\n      return pagesBeforeRef(ref).then(function (args) {\n        if (!args) {\n          return total;\n        }\n\n        const [count, parentRef] = args;\n        total += count;\n        return next(parentRef);\n      });\n    }\n\n    return next(pageRef);\n  }\n\n  static parseDestDictionary(params) {\n    function addDefaultProtocolToUrl(url) {\n      return url.startsWith(\"www.\") ? `http://${url}` : url;\n    }\n\n    function tryConvertUrlEncoding(url) {\n      try {\n        return (0, _util.stringToUTF8String)(url);\n      } catch (e) {\n        return url;\n      }\n    }\n\n    const destDict = params.destDict;\n\n    if (!(0, _primitives.isDict)(destDict)) {\n      (0, _util.warn)(\"parseDestDictionary: `destDict` must be a dictionary.\");\n      return;\n    }\n\n    const resultObj = params.resultObj;\n\n    if (typeof resultObj !== \"object\") {\n      (0, _util.warn)(\"parseDestDictionary: `resultObj` must be an object.\");\n      return;\n    }\n\n    const docBaseUrl = params.docBaseUrl || null;\n    let action = destDict.get(\"A\"),\n        url,\n        dest;\n\n    if (!(0, _primitives.isDict)(action) && destDict.has(\"Dest\")) {\n      action = destDict.get(\"Dest\");\n    }\n\n    if ((0, _primitives.isDict)(action)) {\n      const actionType = action.get(\"S\");\n\n      if (!(0, _primitives.isName)(actionType)) {\n        (0, _util.warn)(\"parseDestDictionary: Invalid type in Action dictionary.\");\n        return;\n      }\n\n      const actionName = actionType.name;\n\n      switch (actionName) {\n        case \"URI\":\n          url = action.get(\"URI\");\n\n          if ((0, _primitives.isName)(url)) {\n            url = \"/\" + url.name;\n          } else if ((0, _util.isString)(url)) {\n            url = addDefaultProtocolToUrl(url);\n          }\n\n          break;\n\n        case \"GoTo\":\n          dest = action.get(\"D\");\n          break;\n\n        case \"Launch\":\n        case \"GoToR\":\n          const urlDict = action.get(\"F\");\n\n          if ((0, _primitives.isDict)(urlDict)) {\n            url = urlDict.get(\"F\") || null;\n          } else if ((0, _util.isString)(urlDict)) {\n            url = urlDict;\n          }\n\n          let remoteDest = action.get(\"D\");\n\n          if (remoteDest) {\n            if ((0, _primitives.isName)(remoteDest)) {\n              remoteDest = remoteDest.name;\n            }\n\n            if ((0, _util.isString)(url)) {\n              const baseUrl = url.split(\"#\")[0];\n\n              if ((0, _util.isString)(remoteDest)) {\n                url = baseUrl + \"#\" + remoteDest;\n              } else if (Array.isArray(remoteDest)) {\n                url = baseUrl + \"#\" + JSON.stringify(remoteDest);\n              }\n            }\n          }\n\n          const newWindow = action.get(\"NewWindow\");\n\n          if ((0, _util.isBool)(newWindow)) {\n            resultObj.newWindow = newWindow;\n          }\n\n          break;\n\n        case \"Named\":\n          const namedAction = action.get(\"N\");\n\n          if ((0, _primitives.isName)(namedAction)) {\n            resultObj.action = namedAction.name;\n          }\n\n          break;\n\n        case \"JavaScript\":\n          const jsAction = action.get(\"JS\");\n          let js;\n\n          if ((0, _primitives.isStream)(jsAction)) {\n            js = (0, _util.bytesToString)(jsAction.getBytes());\n          } else if ((0, _util.isString)(jsAction)) {\n            js = jsAction;\n          }\n\n          if (js) {\n            const URL_OPEN_METHODS = [\"app.launchURL\", \"window.open\"];\n            const regex = new RegExp(\"^\\\\s*(\" + URL_OPEN_METHODS.join(\"|\").split(\".\").join(\"\\\\.\") + \")\\\\((?:'|\\\")([^'\\\"]*)(?:'|\\\")(?:,\\\\s*(\\\\w+)\\\\)|\\\\))\", \"i\");\n            const jsUrl = regex.exec((0, _util.stringToPDFString)(js));\n\n            if (jsUrl && jsUrl[2]) {\n              url = jsUrl[2];\n\n              if (jsUrl[3] === \"true\" && jsUrl[1] === \"app.launchURL\") {\n                resultObj.newWindow = true;\n              }\n\n              break;\n            }\n          }\n\n        default:\n          (0, _util.warn)(`parseDestDictionary: unsupported action type \"${actionName}\".`);\n          break;\n      }\n    } else if (destDict.has(\"Dest\")) {\n      dest = destDict.get(\"Dest\");\n    }\n\n    if ((0, _util.isString)(url)) {\n      url = tryConvertUrlEncoding(url);\n      const absoluteUrl = (0, _util.createValidAbsoluteUrl)(url, docBaseUrl);\n\n      if (absoluteUrl) {\n        resultObj.url = absoluteUrl.href;\n      }\n\n      resultObj.unsafeUrl = url;\n    }\n\n    if (dest) {\n      if ((0, _primitives.isName)(dest)) {\n        dest = dest.name;\n      }\n\n      if ((0, _util.isString)(dest) || Array.isArray(dest)) {\n        resultObj.dest = dest;\n      }\n    }\n  }\n\n}\n\nexports.Catalog = Catalog;\n\nvar XRef = function XRefClosure() {\n  function XRef(stream, pdfManager) {\n    this.stream = stream;\n    this.pdfManager = pdfManager;\n    this.entries = [];\n    this.xrefstms = Object.create(null);\n    this._cacheMap = new Map();\n    this.stats = {\n      streamTypes: Object.create(null),\n      fontTypes: Object.create(null)\n    };\n  }\n\n  XRef.prototype = {\n    setStartXRef: function XRef_setStartXRef(startXRef) {\n      this.startXRefQueue = [startXRef];\n    },\n    parse: function XRef_parse(recoveryMode) {\n      var trailerDict;\n\n      if (!recoveryMode) {\n        trailerDict = this.readXRef();\n      } else {\n        (0, _util.warn)(\"Indexing all PDF objects\");\n        trailerDict = this.indexObjects();\n      }\n\n      trailerDict.assignXref(this);\n      this.trailer = trailerDict;\n      let encrypt;\n\n      try {\n        encrypt = trailerDict.get(\"Encrypt\");\n      } catch (ex) {\n        if (ex instanceof _core_utils.MissingDataException) {\n          throw ex;\n        }\n\n        (0, _util.warn)(`XRef.parse - Invalid \"Encrypt\" reference: \"${ex}\".`);\n      }\n\n      if ((0, _primitives.isDict)(encrypt)) {\n        var ids = trailerDict.get(\"ID\");\n        var fileId = ids && ids.length ? ids[0] : \"\";\n        encrypt.suppressEncryption = true;\n        this.encrypt = new _crypto.CipherTransformFactory(encrypt, fileId, this.pdfManager.password);\n      }\n\n      let root;\n\n      try {\n        root = trailerDict.get(\"Root\");\n      } catch (ex) {\n        if (ex instanceof _core_utils.MissingDataException) {\n          throw ex;\n        }\n\n        (0, _util.warn)(`XRef.parse - Invalid \"Root\" reference: \"${ex}\".`);\n      }\n\n      if ((0, _primitives.isDict)(root) && root.has(\"Pages\")) {\n        this.root = root;\n      } else {\n        if (!recoveryMode) {\n          throw new _core_utils.XRefParseException();\n        }\n\n        throw new _util.FormatError(\"Invalid root reference\");\n      }\n    },\n    processXRefTable: function XRef_processXRefTable(parser) {\n      if (!(\"tableState\" in this)) {\n        this.tableState = {\n          entryNum: 0,\n          streamPos: parser.lexer.stream.pos,\n          parserBuf1: parser.buf1,\n          parserBuf2: parser.buf2\n        };\n      }\n\n      var obj = this.readXRefTable(parser);\n\n      if (!(0, _primitives.isCmd)(obj, \"trailer\")) {\n        throw new _util.FormatError(\"Invalid XRef table: could not find trailer dictionary\");\n      }\n\n      var dict = parser.getObj();\n\n      if (!(0, _primitives.isDict)(dict) && dict.dict) {\n        dict = dict.dict;\n      }\n\n      if (!(0, _primitives.isDict)(dict)) {\n        throw new _util.FormatError(\"Invalid XRef table: could not parse trailer dictionary\");\n      }\n\n      delete this.tableState;\n      return dict;\n    },\n    readXRefTable: function XRef_readXRefTable(parser) {\n      var stream = parser.lexer.stream;\n      var tableState = this.tableState;\n      stream.pos = tableState.streamPos;\n      parser.buf1 = tableState.parserBuf1;\n      parser.buf2 = tableState.parserBuf2;\n      var obj;\n\n      while (true) {\n        if (!(\"firstEntryNum\" in tableState) || !(\"entryCount\" in tableState)) {\n          if ((0, _primitives.isCmd)(obj = parser.getObj(), \"trailer\")) {\n            break;\n          }\n\n          tableState.firstEntryNum = obj;\n          tableState.entryCount = parser.getObj();\n        }\n\n        var first = tableState.firstEntryNum;\n        var count = tableState.entryCount;\n\n        if (!Number.isInteger(first) || !Number.isInteger(count)) {\n          throw new _util.FormatError(\"Invalid XRef table: wrong types in subsection header\");\n        }\n\n        for (var i = tableState.entryNum; i < count; i++) {\n          tableState.streamPos = stream.pos;\n          tableState.entryNum = i;\n          tableState.parserBuf1 = parser.buf1;\n          tableState.parserBuf2 = parser.buf2;\n          var entry = {};\n          entry.offset = parser.getObj();\n          entry.gen = parser.getObj();\n          var type = parser.getObj();\n\n          if (type instanceof _primitives.Cmd) {\n            switch (type.cmd) {\n              case \"f\":\n                entry.free = true;\n                break;\n\n              case \"n\":\n                entry.uncompressed = true;\n                break;\n            }\n          }\n\n          if (!Number.isInteger(entry.offset) || !Number.isInteger(entry.gen) || !(entry.free || entry.uncompressed)) {\n            throw new _util.FormatError(`Invalid entry in XRef subsection: ${first}, ${count}`);\n          }\n\n          if (i === 0 && entry.free && first === 1) {\n            first = 0;\n          }\n\n          if (!this.entries[i + first]) {\n            this.entries[i + first] = entry;\n          }\n        }\n\n        tableState.entryNum = 0;\n        tableState.streamPos = stream.pos;\n        tableState.parserBuf1 = parser.buf1;\n        tableState.parserBuf2 = parser.buf2;\n        delete tableState.firstEntryNum;\n        delete tableState.entryCount;\n      }\n\n      if (this.entries[0] && !this.entries[0].free) {\n        throw new _util.FormatError(\"Invalid XRef table: unexpected first object\");\n      }\n\n      return obj;\n    },\n    processXRefStream: function XRef_processXRefStream(stream) {\n      if (!(\"streamState\" in this)) {\n        var streamParameters = stream.dict;\n        var byteWidths = streamParameters.get(\"W\");\n        var range = streamParameters.get(\"Index\");\n\n        if (!range) {\n          range = [0, streamParameters.get(\"Size\")];\n        }\n\n        this.streamState = {\n          entryRanges: range,\n          byteWidths,\n          entryNum: 0,\n          streamPos: stream.pos\n        };\n      }\n\n      this.readXRefStream(stream);\n      delete this.streamState;\n      return stream.dict;\n    },\n    readXRefStream: function XRef_readXRefStream(stream) {\n      var i, j;\n      var streamState = this.streamState;\n      stream.pos = streamState.streamPos;\n      var byteWidths = streamState.byteWidths;\n      var typeFieldWidth = byteWidths[0];\n      var offsetFieldWidth = byteWidths[1];\n      var generationFieldWidth = byteWidths[2];\n      var entryRanges = streamState.entryRanges;\n\n      while (entryRanges.length > 0) {\n        var first = entryRanges[0];\n        var n = entryRanges[1];\n\n        if (!Number.isInteger(first) || !Number.isInteger(n)) {\n          throw new _util.FormatError(`Invalid XRef range fields: ${first}, ${n}`);\n        }\n\n        if (!Number.isInteger(typeFieldWidth) || !Number.isInteger(offsetFieldWidth) || !Number.isInteger(generationFieldWidth)) {\n          throw new _util.FormatError(`Invalid XRef entry fields length: ${first}, ${n}`);\n        }\n\n        for (i = streamState.entryNum; i < n; ++i) {\n          streamState.entryNum = i;\n          streamState.streamPos = stream.pos;\n          var type = 0,\n              offset = 0,\n              generation = 0;\n\n          for (j = 0; j < typeFieldWidth; ++j) {\n            type = type << 8 | stream.getByte();\n          }\n\n          if (typeFieldWidth === 0) {\n            type = 1;\n          }\n\n          for (j = 0; j < offsetFieldWidth; ++j) {\n            offset = offset << 8 | stream.getByte();\n          }\n\n          for (j = 0; j < generationFieldWidth; ++j) {\n            generation = generation << 8 | stream.getByte();\n          }\n\n          var entry = {};\n          entry.offset = offset;\n          entry.gen = generation;\n\n          switch (type) {\n            case 0:\n              entry.free = true;\n              break;\n\n            case 1:\n              entry.uncompressed = true;\n              break;\n\n            case 2:\n              break;\n\n            default:\n              throw new _util.FormatError(`Invalid XRef entry type: ${type}`);\n          }\n\n          if (!this.entries[first + i]) {\n            this.entries[first + i] = entry;\n          }\n        }\n\n        streamState.entryNum = 0;\n        streamState.streamPos = stream.pos;\n        entryRanges.splice(0, 2);\n      }\n    },\n    indexObjects: function XRef_indexObjects() {\n      var TAB = 0x9,\n          LF = 0xa,\n          CR = 0xd,\n          SPACE = 0x20;\n      var PERCENT = 0x25,\n          LT = 0x3c;\n\n      function readToken(data, offset) {\n        var token = \"\",\n            ch = data[offset];\n\n        while (ch !== LF && ch !== CR && ch !== LT) {\n          if (++offset >= data.length) {\n            break;\n          }\n\n          token += String.fromCharCode(ch);\n          ch = data[offset];\n        }\n\n        return token;\n      }\n\n      function skipUntil(data, offset, what) {\n        var length = what.length,\n            dataLength = data.length;\n        var skipped = 0;\n\n        while (offset < dataLength) {\n          var i = 0;\n\n          while (i < length && data[offset + i] === what[i]) {\n            ++i;\n          }\n\n          if (i >= length) {\n            break;\n          }\n\n          offset++;\n          skipped++;\n        }\n\n        return skipped;\n      }\n\n      var objRegExp = /^(\\d+)\\s+(\\d+)\\s+obj\\b/;\n      const endobjRegExp = /\\bendobj[\\b\\s]$/;\n      const nestedObjRegExp = /\\s+(\\d+\\s+\\d+\\s+obj[\\b\\s<])$/;\n      const CHECK_CONTENT_LENGTH = 25;\n      var trailerBytes = new Uint8Array([116, 114, 97, 105, 108, 101, 114]);\n      var startxrefBytes = new Uint8Array([115, 116, 97, 114, 116, 120, 114, 101, 102]);\n      const objBytes = new Uint8Array([111, 98, 106]);\n      var xrefBytes = new Uint8Array([47, 88, 82, 101, 102]);\n      this.entries.length = 0;\n      var stream = this.stream;\n      stream.pos = 0;\n      var buffer = stream.getBytes();\n      var position = stream.start,\n          length = buffer.length;\n      var trailers = [],\n          xrefStms = [];\n\n      while (position < length) {\n        var ch = buffer[position];\n\n        if (ch === TAB || ch === LF || ch === CR || ch === SPACE) {\n          ++position;\n          continue;\n        }\n\n        if (ch === PERCENT) {\n          do {\n            ++position;\n\n            if (position >= length) {\n              break;\n            }\n\n            ch = buffer[position];\n          } while (ch !== LF && ch !== CR);\n\n          continue;\n        }\n\n        var token = readToken(buffer, position);\n        var m;\n\n        if (token.startsWith(\"xref\") && (token.length === 4 || /\\s/.test(token[4]))) {\n          position += skipUntil(buffer, position, trailerBytes);\n          trailers.push(position);\n          position += skipUntil(buffer, position, startxrefBytes);\n        } else if (m = objRegExp.exec(token)) {\n          const num = m[1] | 0,\n                gen = m[2] | 0;\n\n          if (!this.entries[num] || this.entries[num].gen === gen) {\n            this.entries[num] = {\n              offset: position - stream.start,\n              gen,\n              uncompressed: true\n            };\n          }\n\n          let contentLength,\n              startPos = position + token.length;\n\n          while (startPos < buffer.length) {\n            const endPos = startPos + skipUntil(buffer, startPos, objBytes) + 4;\n            contentLength = endPos - position;\n            const checkPos = Math.max(endPos - CHECK_CONTENT_LENGTH, startPos);\n            const tokenStr = (0, _util.bytesToString)(buffer.subarray(checkPos, endPos));\n\n            if (endobjRegExp.test(tokenStr)) {\n              break;\n            } else {\n              const objToken = nestedObjRegExp.exec(tokenStr);\n\n              if (objToken && objToken[1]) {\n                (0, _util.warn)('indexObjects: Found new \"obj\" inside of another \"obj\", ' + 'caused by missing \"endobj\" -- trying to recover.');\n                contentLength -= objToken[1].length;\n                break;\n              }\n            }\n\n            startPos = endPos;\n          }\n\n          const content = buffer.subarray(position, position + contentLength);\n          var xrefTagOffset = skipUntil(content, 0, xrefBytes);\n\n          if (xrefTagOffset < contentLength && content[xrefTagOffset + 5] < 64) {\n            xrefStms.push(position - stream.start);\n            this.xrefstms[position - stream.start] = 1;\n          }\n\n          position += contentLength;\n        } else if (token.startsWith(\"trailer\") && (token.length === 7 || /\\s/.test(token[7]))) {\n          trailers.push(position);\n          position += skipUntil(buffer, position, startxrefBytes);\n        } else {\n          position += token.length + 1;\n        }\n      }\n\n      var i, ii;\n\n      for (i = 0, ii = xrefStms.length; i < ii; ++i) {\n        this.startXRefQueue.push(xrefStms[i]);\n        this.readXRef(true);\n      }\n\n      let trailerDict;\n\n      for (i = 0, ii = trailers.length; i < ii; ++i) {\n        stream.pos = trailers[i];\n        const parser = new _parser.Parser({\n          lexer: new _parser.Lexer(stream),\n          xref: this,\n          allowStreams: true,\n          recoveryMode: true\n        });\n        var obj = parser.getObj();\n\n        if (!(0, _primitives.isCmd)(obj, \"trailer\")) {\n          continue;\n        }\n\n        const dict = parser.getObj();\n\n        if (!(0, _primitives.isDict)(dict)) {\n          continue;\n        }\n\n        let rootDict;\n\n        try {\n          rootDict = dict.get(\"Root\");\n        } catch (ex) {\n          if (ex instanceof _core_utils.MissingDataException) {\n            throw ex;\n          }\n\n          continue;\n        }\n\n        if (!(0, _primitives.isDict)(rootDict) || !rootDict.has(\"Pages\")) {\n          continue;\n        }\n\n        if (dict.has(\"ID\")) {\n          return dict;\n        }\n\n        trailerDict = dict;\n      }\n\n      if (trailerDict) {\n        return trailerDict;\n      }\n\n      throw new _util.InvalidPDFException(\"Invalid PDF structure.\");\n    },\n    readXRef: function XRef_readXRef(recoveryMode) {\n      var stream = this.stream;\n      const startXRefParsedCache = Object.create(null);\n\n      try {\n        while (this.startXRefQueue.length) {\n          var startXRef = this.startXRefQueue[0];\n\n          if (startXRefParsedCache[startXRef]) {\n            (0, _util.warn)(\"readXRef - skipping XRef table since it was already parsed.\");\n            this.startXRefQueue.shift();\n            continue;\n          }\n\n          startXRefParsedCache[startXRef] = true;\n          stream.pos = startXRef + stream.start;\n          const parser = new _parser.Parser({\n            lexer: new _parser.Lexer(stream),\n            xref: this,\n            allowStreams: true\n          });\n          var obj = parser.getObj();\n          var dict;\n\n          if ((0, _primitives.isCmd)(obj, \"xref\")) {\n            dict = this.processXRefTable(parser);\n\n            if (!this.topDict) {\n              this.topDict = dict;\n            }\n\n            obj = dict.get(\"XRefStm\");\n\n            if (Number.isInteger(obj)) {\n              var pos = obj;\n\n              if (!(pos in this.xrefstms)) {\n                this.xrefstms[pos] = 1;\n                this.startXRefQueue.push(pos);\n              }\n            }\n          } else if (Number.isInteger(obj)) {\n            if (!Number.isInteger(parser.getObj()) || !(0, _primitives.isCmd)(parser.getObj(), \"obj\") || !(0, _primitives.isStream)(obj = parser.getObj())) {\n              throw new _util.FormatError(\"Invalid XRef stream\");\n            }\n\n            dict = this.processXRefStream(obj);\n\n            if (!this.topDict) {\n              this.topDict = dict;\n            }\n\n            if (!dict) {\n              throw new _util.FormatError(\"Failed to read XRef stream\");\n            }\n          } else {\n            throw new _util.FormatError(\"Invalid XRef stream header\");\n          }\n\n          obj = dict.get(\"Prev\");\n\n          if (Number.isInteger(obj)) {\n            this.startXRefQueue.push(obj);\n          } else if ((0, _primitives.isRef)(obj)) {\n            this.startXRefQueue.push(obj.num);\n          }\n\n          this.startXRefQueue.shift();\n        }\n\n        return this.topDict;\n      } catch (e) {\n        if (e instanceof _core_utils.MissingDataException) {\n          throw e;\n        }\n\n        (0, _util.info)(\"(while reading XRef): \" + e);\n      }\n\n      if (recoveryMode) {\n        return undefined;\n      }\n\n      throw new _core_utils.XRefParseException();\n    },\n    getEntry: function XRef_getEntry(i) {\n      var xrefEntry = this.entries[i];\n\n      if (xrefEntry && !xrefEntry.free && xrefEntry.offset) {\n        return xrefEntry;\n      }\n\n      return null;\n    },\n    fetchIfRef: function XRef_fetchIfRef(obj, suppressEncryption) {\n      if (obj instanceof _primitives.Ref) {\n        return this.fetch(obj, suppressEncryption);\n      }\n\n      return obj;\n    },\n    fetch: function XRef_fetch(ref, suppressEncryption) {\n      if (!(ref instanceof _primitives.Ref)) {\n        throw new Error(\"ref object is not a reference\");\n      }\n\n      const num = ref.num;\n\n      const cacheEntry = this._cacheMap.get(num);\n\n      if (cacheEntry !== undefined) {\n        if (cacheEntry instanceof _primitives.Dict && !cacheEntry.objId) {\n          cacheEntry.objId = ref.toString();\n        }\n\n        return cacheEntry;\n      }\n\n      let xrefEntry = this.getEntry(num);\n\n      if (xrefEntry === null) {\n        this._cacheMap.set(num, xrefEntry);\n\n        return xrefEntry;\n      }\n\n      if (xrefEntry.uncompressed) {\n        xrefEntry = this.fetchUncompressed(ref, xrefEntry, suppressEncryption);\n      } else {\n        xrefEntry = this.fetchCompressed(ref, xrefEntry, suppressEncryption);\n      }\n\n      if ((0, _primitives.isDict)(xrefEntry)) {\n        xrefEntry.objId = ref.toString();\n      } else if ((0, _primitives.isStream)(xrefEntry)) {\n        xrefEntry.dict.objId = ref.toString();\n      }\n\n      return xrefEntry;\n    },\n\n    fetchUncompressed(ref, xrefEntry, suppressEncryption = false) {\n      var gen = ref.gen;\n      var num = ref.num;\n\n      if (xrefEntry.gen !== gen) {\n        throw new _core_utils.XRefEntryException(`Inconsistent generation in XRef: ${ref}`);\n      }\n\n      var stream = this.stream.makeSubStream(xrefEntry.offset + this.stream.start);\n      const parser = new _parser.Parser({\n        lexer: new _parser.Lexer(stream),\n        xref: this,\n        allowStreams: true\n      });\n      var obj1 = parser.getObj();\n      var obj2 = parser.getObj();\n      var obj3 = parser.getObj();\n\n      if (obj1 !== num || obj2 !== gen || !(obj3 instanceof _primitives.Cmd)) {\n        throw new _core_utils.XRefEntryException(`Bad (uncompressed) XRef entry: ${ref}`);\n      }\n\n      if (obj3.cmd !== \"obj\") {\n        if (obj3.cmd.startsWith(\"obj\")) {\n          num = parseInt(obj3.cmd.substring(3), 10);\n\n          if (!Number.isNaN(num)) {\n            return num;\n          }\n        }\n\n        throw new _core_utils.XRefEntryException(`Bad (uncompressed) XRef entry: ${ref}`);\n      }\n\n      if (this.encrypt && !suppressEncryption) {\n        xrefEntry = parser.getObj(this.encrypt.createCipherTransform(num, gen));\n      } else {\n        xrefEntry = parser.getObj();\n      }\n\n      if (!(0, _primitives.isStream)(xrefEntry)) {\n        this._cacheMap.set(num, xrefEntry);\n      }\n\n      return xrefEntry;\n    },\n\n    fetchCompressed(ref, xrefEntry, suppressEncryption = false) {\n      const tableOffset = xrefEntry.offset;\n      const stream = this.fetch(_primitives.Ref.get(tableOffset, 0));\n\n      if (!(0, _primitives.isStream)(stream)) {\n        throw new _util.FormatError(\"bad ObjStm stream\");\n      }\n\n      const first = stream.dict.get(\"First\");\n      const n = stream.dict.get(\"N\");\n\n      if (!Number.isInteger(first) || !Number.isInteger(n)) {\n        throw new _util.FormatError(\"invalid first and n parameters for ObjStm stream\");\n      }\n\n      const parser = new _parser.Parser({\n        lexer: new _parser.Lexer(stream),\n        xref: this,\n        allowStreams: true\n      });\n      const nums = new Array(n);\n\n      for (let i = 0; i < n; ++i) {\n        const num = parser.getObj();\n\n        if (!Number.isInteger(num)) {\n          throw new _util.FormatError(`invalid object number in the ObjStm stream: ${num}`);\n        }\n\n        const offset = parser.getObj();\n\n        if (!Number.isInteger(offset)) {\n          throw new _util.FormatError(`invalid object offset in the ObjStm stream: ${offset}`);\n        }\n\n        nums[i] = num;\n      }\n\n      const entries = new Array(n);\n\n      for (let i = 0; i < n; ++i) {\n        const obj = parser.getObj();\n        entries[i] = obj;\n\n        if (parser.buf1 instanceof _primitives.Cmd && parser.buf1.cmd === \"endobj\") {\n          parser.shift();\n        }\n\n        if ((0, _primitives.isStream)(obj)) {\n          continue;\n        }\n\n        const num = nums[i],\n              entry = this.entries[num];\n\n        if (entry && entry.offset === tableOffset && entry.gen === i) {\n          this._cacheMap.set(num, obj);\n        }\n      }\n\n      xrefEntry = entries[xrefEntry.gen];\n\n      if (xrefEntry === undefined) {\n        throw new _core_utils.XRefEntryException(`Bad (compressed) XRef entry: ${ref}`);\n      }\n\n      return xrefEntry;\n    },\n\n    async fetchIfRefAsync(obj, suppressEncryption) {\n      if (obj instanceof _primitives.Ref) {\n        return this.fetchAsync(obj, suppressEncryption);\n      }\n\n      return obj;\n    },\n\n    async fetchAsync(ref, suppressEncryption) {\n      try {\n        return this.fetch(ref, suppressEncryption);\n      } catch (ex) {\n        if (!(ex instanceof _core_utils.MissingDataException)) {\n          throw ex;\n        }\n\n        await this.pdfManager.requestRange(ex.begin, ex.end);\n        return this.fetchAsync(ref, suppressEncryption);\n      }\n    },\n\n    getCatalogObj: function XRef_getCatalogObj() {\n      return this.root;\n    }\n  };\n  return XRef;\n}();\n\nexports.XRef = XRef;\n\nclass NameOrNumberTree {\n  constructor(root, xref, type) {\n    if (this.constructor === NameOrNumberTree) {\n      (0, _util.unreachable)(\"Cannot initialize NameOrNumberTree.\");\n    }\n\n    this.root = root;\n    this.xref = xref;\n    this._type = type;\n  }\n\n  getAll() {\n    const dict = Object.create(null);\n\n    if (!this.root) {\n      return dict;\n    }\n\n    const xref = this.xref;\n    const processed = new _primitives.RefSet();\n    processed.put(this.root);\n    const queue = [this.root];\n\n    while (queue.length > 0) {\n      const obj = xref.fetchIfRef(queue.shift());\n\n      if (!(0, _primitives.isDict)(obj)) {\n        continue;\n      }\n\n      if (obj.has(\"Kids\")) {\n        const kids = obj.get(\"Kids\");\n\n        for (let i = 0, ii = kids.length; i < ii; i++) {\n          const kid = kids[i];\n\n          if (processed.has(kid)) {\n            throw new _util.FormatError(`Duplicate entry in \"${this._type}\" tree.`);\n          }\n\n          queue.push(kid);\n          processed.put(kid);\n        }\n\n        continue;\n      }\n\n      const entries = obj.get(this._type);\n\n      if (Array.isArray(entries)) {\n        for (let i = 0, ii = entries.length; i < ii; i += 2) {\n          dict[xref.fetchIfRef(entries[i])] = xref.fetchIfRef(entries[i + 1]);\n        }\n      }\n    }\n\n    return dict;\n  }\n\n  get(key) {\n    if (!this.root) {\n      return null;\n    }\n\n    const xref = this.xref;\n    let kidsOrEntries = xref.fetchIfRef(this.root);\n    let loopCount = 0;\n    const MAX_LEVELS = 10;\n\n    while (kidsOrEntries.has(\"Kids\")) {\n      if (++loopCount > MAX_LEVELS) {\n        (0, _util.warn)(`Search depth limit reached for \"${this._type}\" tree.`);\n        return null;\n      }\n\n      const kids = kidsOrEntries.get(\"Kids\");\n\n      if (!Array.isArray(kids)) {\n        return null;\n      }\n\n      let l = 0,\n          r = kids.length - 1;\n\n      while (l <= r) {\n        const m = l + r >> 1;\n        const kid = xref.fetchIfRef(kids[m]);\n        const limits = kid.get(\"Limits\");\n\n        if (key < xref.fetchIfRef(limits[0])) {\n          r = m - 1;\n        } else if (key > xref.fetchIfRef(limits[1])) {\n          l = m + 1;\n        } else {\n          kidsOrEntries = xref.fetchIfRef(kids[m]);\n          break;\n        }\n      }\n\n      if (l > r) {\n        return null;\n      }\n    }\n\n    const entries = kidsOrEntries.get(this._type);\n\n    if (Array.isArray(entries)) {\n      let l = 0,\n          r = entries.length - 2;\n\n      while (l <= r) {\n        const tmp = l + r >> 1,\n              m = tmp + (tmp & 1);\n        const currentKey = xref.fetchIfRef(entries[m]);\n\n        if (key < currentKey) {\n          r = m - 2;\n        } else if (key > currentKey) {\n          l = m + 2;\n        } else {\n          return xref.fetchIfRef(entries[m + 1]);\n        }\n      }\n\n      (0, _util.info)(`Falling back to an exhaustive search, for key \"${key}\", ` + `in \"${this._type}\" tree.`);\n\n      for (let m = 0, mm = entries.length; m < mm; m += 2) {\n        const currentKey = xref.fetchIfRef(entries[m]);\n\n        if (currentKey === key) {\n          (0, _util.warn)(`The \"${key}\" key was found at an incorrect, ` + `i.e. out-of-order, position in \"${this._type}\" tree.`);\n          return xref.fetchIfRef(entries[m + 1]);\n        }\n      }\n    }\n\n    return null;\n  }\n\n}\n\nclass NameTree extends NameOrNumberTree {\n  constructor(root, xref) {\n    super(root, xref, \"Names\");\n  }\n\n}\n\nclass NumberTree extends NameOrNumberTree {\n  constructor(root, xref) {\n    super(root, xref, \"Nums\");\n  }\n\n}\n\nvar FileSpec = function FileSpecClosure() {\n  function FileSpec(root, xref) {\n    if (!root || !(0, _primitives.isDict)(root)) {\n      return;\n    }\n\n    this.xref = xref;\n    this.root = root;\n\n    if (root.has(\"FS\")) {\n      this.fs = root.get(\"FS\");\n    }\n\n    this.description = root.has(\"Desc\") ? (0, _util.stringToPDFString)(root.get(\"Desc\")) : \"\";\n\n    if (root.has(\"RF\")) {\n      (0, _util.warn)(\"Related file specifications are not supported\");\n    }\n\n    this.contentAvailable = true;\n\n    if (!root.has(\"EF\")) {\n      this.contentAvailable = false;\n      (0, _util.warn)(\"Non-embedded file specifications are not supported\");\n    }\n  }\n\n  function pickPlatformItem(dict) {\n    if (dict.has(\"UF\")) {\n      return dict.get(\"UF\");\n    } else if (dict.has(\"F\")) {\n      return dict.get(\"F\");\n    } else if (dict.has(\"Unix\")) {\n      return dict.get(\"Unix\");\n    } else if (dict.has(\"Mac\")) {\n      return dict.get(\"Mac\");\n    } else if (dict.has(\"DOS\")) {\n      return dict.get(\"DOS\");\n    }\n\n    return null;\n  }\n\n  FileSpec.prototype = {\n    get filename() {\n      if (!this._filename && this.root) {\n        var filename = pickPlatformItem(this.root) || \"unnamed\";\n        this._filename = (0, _util.stringToPDFString)(filename).replace(/\\\\\\\\/g, \"\\\\\").replace(/\\\\\\//g, \"/\").replace(/\\\\/g, \"/\");\n      }\n\n      return this._filename;\n    },\n\n    get content() {\n      if (!this.contentAvailable) {\n        return null;\n      }\n\n      if (!this.contentRef && this.root) {\n        this.contentRef = pickPlatformItem(this.root.get(\"EF\"));\n      }\n\n      var content = null;\n\n      if (this.contentRef) {\n        var xref = this.xref;\n        var fileObj = xref.fetchIfRef(this.contentRef);\n\n        if (fileObj && (0, _primitives.isStream)(fileObj)) {\n          content = fileObj.getBytes();\n        } else {\n          (0, _util.warn)(\"Embedded file specification points to non-existing/invalid \" + \"content\");\n        }\n      } else {\n        (0, _util.warn)(\"Embedded file specification does not have a content\");\n      }\n\n      return content;\n    },\n\n    get serializable() {\n      return {\n        filename: this.filename,\n        content: this.content\n      };\n    }\n\n  };\n  return FileSpec;\n}();\n\nexports.FileSpec = FileSpec;\n\nconst ObjectLoader = function () {\n  function mayHaveChildren(value) {\n    return value instanceof _primitives.Ref || value instanceof _primitives.Dict || Array.isArray(value) || (0, _primitives.isStream)(value);\n  }\n\n  function addChildren(node, nodesToVisit) {\n    if (node instanceof _primitives.Dict || (0, _primitives.isStream)(node)) {\n      const dict = node instanceof _primitives.Dict ? node : node.dict;\n      const dictKeys = dict.getKeys();\n\n      for (let i = 0, ii = dictKeys.length; i < ii; i++) {\n        const rawValue = dict.getRaw(dictKeys[i]);\n\n        if (mayHaveChildren(rawValue)) {\n          nodesToVisit.push(rawValue);\n        }\n      }\n    } else if (Array.isArray(node)) {\n      for (let i = 0, ii = node.length; i < ii; i++) {\n        const value = node[i];\n\n        if (mayHaveChildren(value)) {\n          nodesToVisit.push(value);\n        }\n      }\n    }\n  }\n\n  function ObjectLoader(dict, keys, xref) {\n    this.dict = dict;\n    this.keys = keys;\n    this.xref = xref;\n    this.refSet = null;\n  }\n\n  ObjectLoader.prototype = {\n    async load() {\n      if (!this.xref.stream.allChunksLoaded || this.xref.stream.allChunksLoaded()) {\n        return undefined;\n      }\n\n      const {\n        keys,\n        dict\n      } = this;\n      this.refSet = new _primitives.RefSet();\n      const nodesToVisit = [];\n\n      for (let i = 0, ii = keys.length; i < ii; i++) {\n        const rawValue = dict.getRaw(keys[i]);\n\n        if (rawValue !== undefined) {\n          nodesToVisit.push(rawValue);\n        }\n      }\n\n      return this._walk(nodesToVisit);\n    },\n\n    async _walk(nodesToVisit) {\n      const nodesToRevisit = [];\n      const pendingRequests = [];\n\n      while (nodesToVisit.length) {\n        let currentNode = nodesToVisit.pop();\n\n        if (currentNode instanceof _primitives.Ref) {\n          if (this.refSet.has(currentNode)) {\n            continue;\n          }\n\n          try {\n            this.refSet.put(currentNode);\n            currentNode = this.xref.fetch(currentNode);\n          } catch (ex) {\n            if (!(ex instanceof _core_utils.MissingDataException)) {\n              throw ex;\n            }\n\n            nodesToRevisit.push(currentNode);\n            pendingRequests.push({\n              begin: ex.begin,\n              end: ex.end\n            });\n          }\n        }\n\n        if (currentNode && currentNode.getBaseStreams) {\n          const baseStreams = currentNode.getBaseStreams();\n          let foundMissingData = false;\n\n          for (let i = 0, ii = baseStreams.length; i < ii; i++) {\n            const stream = baseStreams[i];\n\n            if (stream.allChunksLoaded && !stream.allChunksLoaded()) {\n              foundMissingData = true;\n              pendingRequests.push({\n                begin: stream.start,\n                end: stream.end\n              });\n            }\n          }\n\n          if (foundMissingData) {\n            nodesToRevisit.push(currentNode);\n          }\n        }\n\n        addChildren(currentNode, nodesToVisit);\n      }\n\n      if (pendingRequests.length) {\n        await this.xref.stream.manager.requestRanges(pendingRequests);\n\n        for (let i = 0, ii = nodesToRevisit.length; i < ii; i++) {\n          const node = nodesToRevisit[i];\n\n          if (node instanceof _primitives.Ref) {\n            this.refSet.remove(node);\n          }\n        }\n\n        return this._walk(nodesToRevisit);\n      }\n\n      this.refSet = null;\n      return undefined;\n    }\n\n  };\n  return ObjectLoader;\n}();\n\nexports.ObjectLoader = ObjectLoader;\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Parser = exports.Linearization = exports.Lexer = void 0;\n\nvar _stream = __w_pdfjs_require__(11);\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(4);\n\nvar _core_utils = __w_pdfjs_require__(7);\n\nvar _ccitt_stream = __w_pdfjs_require__(12);\n\nvar _jbig2_stream = __w_pdfjs_require__(14);\n\nvar _jpeg_stream = __w_pdfjs_require__(17);\n\nvar _jpx_stream = __w_pdfjs_require__(19);\n\nconst MAX_LENGTH_TO_CACHE = 1000;\nconst MAX_ADLER32_LENGTH = 5552;\n\nfunction computeAdler32(bytes) {\n  const bytesLength = bytes.length;\n  let a = 1,\n      b = 0;\n\n  for (let i = 0; i < bytesLength; ++i) {\n    a += bytes[i] & 0xff;\n    b += a;\n  }\n\n  return b % 65521 << 16 | a % 65521;\n}\n\nclass Parser {\n  constructor({\n    lexer,\n    xref,\n    allowStreams = false,\n    recoveryMode = false\n  }) {\n    this.lexer = lexer;\n    this.xref = xref;\n    this.allowStreams = allowStreams;\n    this.recoveryMode = recoveryMode;\n    this.imageCache = Object.create(null);\n    this.refill();\n  }\n\n  refill() {\n    this.buf1 = this.lexer.getObj();\n    this.buf2 = this.lexer.getObj();\n  }\n\n  shift() {\n    if (this.buf2 instanceof _primitives.Cmd && this.buf2.cmd === \"ID\") {\n      this.buf1 = this.buf2;\n      this.buf2 = null;\n    } else {\n      this.buf1 = this.buf2;\n      this.buf2 = this.lexer.getObj();\n    }\n  }\n\n  tryShift() {\n    try {\n      this.shift();\n      return true;\n    } catch (e) {\n      if (e instanceof _core_utils.MissingDataException) {\n        throw e;\n      }\n\n      return false;\n    }\n  }\n\n  getObj(cipherTransform = null) {\n    const buf1 = this.buf1;\n    this.shift();\n\n    if (buf1 instanceof _primitives.Cmd) {\n      switch (buf1.cmd) {\n        case \"BI\":\n          return this.makeInlineImage(cipherTransform);\n\n        case \"[\":\n          const array = [];\n\n          while (!(0, _primitives.isCmd)(this.buf1, \"]\") && !(0, _primitives.isEOF)(this.buf1)) {\n            array.push(this.getObj(cipherTransform));\n          }\n\n          if ((0, _primitives.isEOF)(this.buf1)) {\n            if (!this.recoveryMode) {\n              throw new _util.FormatError(\"End of file inside array\");\n            }\n\n            return array;\n          }\n\n          this.shift();\n          return array;\n\n        case \"<<\":\n          const dict = new _primitives.Dict(this.xref);\n\n          while (!(0, _primitives.isCmd)(this.buf1, \">>\") && !(0, _primitives.isEOF)(this.buf1)) {\n            if (!(0, _primitives.isName)(this.buf1)) {\n              (0, _util.info)(\"Malformed dictionary: key must be a name object\");\n              this.shift();\n              continue;\n            }\n\n            const key = this.buf1.name;\n            this.shift();\n\n            if ((0, _primitives.isEOF)(this.buf1)) {\n              break;\n            }\n\n            dict.set(key, this.getObj(cipherTransform));\n          }\n\n          if ((0, _primitives.isEOF)(this.buf1)) {\n            if (!this.recoveryMode) {\n              throw new _util.FormatError(\"End of file inside dictionary\");\n            }\n\n            return dict;\n          }\n\n          if ((0, _primitives.isCmd)(this.buf2, \"stream\")) {\n            return this.allowStreams ? this.makeStream(dict, cipherTransform) : dict;\n          }\n\n          this.shift();\n          return dict;\n\n        default:\n          return buf1;\n      }\n    }\n\n    if (Number.isInteger(buf1)) {\n      if (Number.isInteger(this.buf1) && (0, _primitives.isCmd)(this.buf2, \"R\")) {\n        const ref = _primitives.Ref.get(buf1, this.buf1);\n\n        this.shift();\n        this.shift();\n        return ref;\n      }\n\n      return buf1;\n    }\n\n    if (typeof buf1 === \"string\") {\n      if (cipherTransform) {\n        return cipherTransform.decryptString(buf1);\n      }\n\n      return buf1;\n    }\n\n    return buf1;\n  }\n\n  findDefaultInlineStreamEnd(stream) {\n    const E = 0x45,\n          I = 0x49,\n          SPACE = 0x20,\n          LF = 0xa,\n          CR = 0xd;\n    const n = 10,\n          NUL = 0x0;\n    const startPos = stream.pos;\n    let state = 0,\n        ch,\n        maybeEIPos;\n\n    while ((ch = stream.getByte()) !== -1) {\n      if (state === 0) {\n        state = ch === E ? 1 : 0;\n      } else if (state === 1) {\n        state = ch === I ? 2 : 0;\n      } else {\n        (0, _util.assert)(state === 2);\n\n        if (ch === SPACE || ch === LF || ch === CR) {\n          maybeEIPos = stream.pos;\n          const followingBytes = stream.peekBytes(n);\n\n          for (let i = 0, ii = followingBytes.length; i < ii; i++) {\n            ch = followingBytes[i];\n\n            if (ch === NUL && followingBytes[i + 1] !== NUL) {\n              continue;\n            }\n\n            if (ch !== LF && ch !== CR && (ch < SPACE || ch > 0x7f)) {\n              state = 0;\n              break;\n            }\n          }\n\n          if (state === 2) {\n            break;\n          }\n        } else {\n          state = 0;\n        }\n      }\n    }\n\n    if (ch === -1) {\n      (0, _util.warn)(\"findDefaultInlineStreamEnd: \" + \"Reached the end of the stream without finding a valid EI marker\");\n\n      if (maybeEIPos) {\n        (0, _util.warn)('... trying to recover by using the last \"EI\" occurrence.');\n        stream.skip(-(stream.pos - maybeEIPos));\n      }\n    }\n\n    let endOffset = 4;\n    stream.skip(-endOffset);\n    ch = stream.peekByte();\n    stream.skip(endOffset);\n\n    if (!(0, _core_utils.isWhiteSpace)(ch)) {\n      endOffset--;\n    }\n\n    return stream.pos - endOffset - startPos;\n  }\n\n  findDCTDecodeInlineStreamEnd(stream) {\n    const startPos = stream.pos;\n    let foundEOI = false,\n        b,\n        markerLength;\n\n    while ((b = stream.getByte()) !== -1) {\n      if (b !== 0xff) {\n        continue;\n      }\n\n      switch (stream.getByte()) {\n        case 0x00:\n          break;\n\n        case 0xff:\n          stream.skip(-1);\n          break;\n\n        case 0xd9:\n          foundEOI = true;\n          break;\n\n        case 0xc0:\n        case 0xc1:\n        case 0xc2:\n        case 0xc3:\n        case 0xc5:\n        case 0xc6:\n        case 0xc7:\n        case 0xc9:\n        case 0xca:\n        case 0xcb:\n        case 0xcd:\n        case 0xce:\n        case 0xcf:\n        case 0xc4:\n        case 0xcc:\n        case 0xda:\n        case 0xdb:\n        case 0xdc:\n        case 0xdd:\n        case 0xde:\n        case 0xdf:\n        case 0xe0:\n        case 0xe1:\n        case 0xe2:\n        case 0xe3:\n        case 0xe4:\n        case 0xe5:\n        case 0xe6:\n        case 0xe7:\n        case 0xe8:\n        case 0xe9:\n        case 0xea:\n        case 0xeb:\n        case 0xec:\n        case 0xed:\n        case 0xee:\n        case 0xef:\n        case 0xfe:\n          markerLength = stream.getUint16();\n\n          if (markerLength > 2) {\n            stream.skip(markerLength - 2);\n          } else {\n            stream.skip(-2);\n          }\n\n          break;\n      }\n\n      if (foundEOI) {\n        break;\n      }\n    }\n\n    const length = stream.pos - startPos;\n\n    if (b === -1) {\n      (0, _util.warn)(\"Inline DCTDecode image stream: \" + \"EOI marker not found, searching for /EI/ instead.\");\n      stream.skip(-length);\n      return this.findDefaultInlineStreamEnd(stream);\n    }\n\n    this.inlineStreamSkipEI(stream);\n    return length;\n  }\n\n  findASCII85DecodeInlineStreamEnd(stream) {\n    const TILDE = 0x7e,\n          GT = 0x3e;\n    const startPos = stream.pos;\n    let ch;\n\n    while ((ch = stream.getByte()) !== -1) {\n      if (ch === TILDE) {\n        const tildePos = stream.pos;\n        ch = stream.peekByte();\n\n        while ((0, _core_utils.isWhiteSpace)(ch)) {\n          stream.skip();\n          ch = stream.peekByte();\n        }\n\n        if (ch === GT) {\n          stream.skip();\n          break;\n        }\n\n        if (stream.pos > tildePos) {\n          const maybeEI = stream.peekBytes(2);\n\n          if (maybeEI[0] === 0x45 && maybeEI[1] === 0x49) {\n            break;\n          }\n        }\n      }\n    }\n\n    const length = stream.pos - startPos;\n\n    if (ch === -1) {\n      (0, _util.warn)(\"Inline ASCII85Decode image stream: \" + \"EOD marker not found, searching for /EI/ instead.\");\n      stream.skip(-length);\n      return this.findDefaultInlineStreamEnd(stream);\n    }\n\n    this.inlineStreamSkipEI(stream);\n    return length;\n  }\n\n  findASCIIHexDecodeInlineStreamEnd(stream) {\n    const GT = 0x3e;\n    const startPos = stream.pos;\n    let ch;\n\n    while ((ch = stream.getByte()) !== -1) {\n      if (ch === GT) {\n        break;\n      }\n    }\n\n    const length = stream.pos - startPos;\n\n    if (ch === -1) {\n      (0, _util.warn)(\"Inline ASCIIHexDecode image stream: \" + \"EOD marker not found, searching for /EI/ instead.\");\n      stream.skip(-length);\n      return this.findDefaultInlineStreamEnd(stream);\n    }\n\n    this.inlineStreamSkipEI(stream);\n    return length;\n  }\n\n  inlineStreamSkipEI(stream) {\n    const E = 0x45,\n          I = 0x49;\n    let state = 0,\n        ch;\n\n    while ((ch = stream.getByte()) !== -1) {\n      if (state === 0) {\n        state = ch === E ? 1 : 0;\n      } else if (state === 1) {\n        state = ch === I ? 2 : 0;\n      } else if (state === 2) {\n        break;\n      }\n    }\n  }\n\n  makeInlineImage(cipherTransform) {\n    const lexer = this.lexer;\n    const stream = lexer.stream;\n    const dict = new _primitives.Dict(this.xref);\n    let dictLength;\n\n    while (!(0, _primitives.isCmd)(this.buf1, \"ID\") && !(0, _primitives.isEOF)(this.buf1)) {\n      if (!(0, _primitives.isName)(this.buf1)) {\n        throw new _util.FormatError(\"Dictionary key must be a name object\");\n      }\n\n      const key = this.buf1.name;\n      this.shift();\n\n      if ((0, _primitives.isEOF)(this.buf1)) {\n        break;\n      }\n\n      dict.set(key, this.getObj(cipherTransform));\n    }\n\n    if (lexer.beginInlineImagePos !== -1) {\n      dictLength = stream.pos - lexer.beginInlineImagePos;\n    }\n\n    const filter = dict.get(\"Filter\", \"F\");\n    let filterName;\n\n    if ((0, _primitives.isName)(filter)) {\n      filterName = filter.name;\n    } else if (Array.isArray(filter)) {\n      const filterZero = this.xref.fetchIfRef(filter[0]);\n\n      if ((0, _primitives.isName)(filterZero)) {\n        filterName = filterZero.name;\n      }\n    }\n\n    const startPos = stream.pos;\n    let length;\n\n    if (filterName === \"DCTDecode\" || filterName === \"DCT\") {\n      length = this.findDCTDecodeInlineStreamEnd(stream);\n    } else if (filterName === \"ASCII85Decode\" || filterName === \"A85\") {\n      length = this.findASCII85DecodeInlineStreamEnd(stream);\n    } else if (filterName === \"ASCIIHexDecode\" || filterName === \"AHx\") {\n      length = this.findASCIIHexDecodeInlineStreamEnd(stream);\n    } else {\n      length = this.findDefaultInlineStreamEnd(stream);\n    }\n\n    let imageStream = stream.makeSubStream(startPos, length, dict);\n    let cacheKey;\n\n    if (length < MAX_LENGTH_TO_CACHE && dictLength < MAX_ADLER32_LENGTH) {\n      const imageBytes = imageStream.getBytes();\n      imageStream.reset();\n      const initialStreamPos = stream.pos;\n      stream.pos = lexer.beginInlineImagePos;\n      const dictBytes = stream.getBytes(dictLength);\n      stream.pos = initialStreamPos;\n      cacheKey = computeAdler32(imageBytes) + \"_\" + computeAdler32(dictBytes);\n      const cacheEntry = this.imageCache[cacheKey];\n\n      if (cacheEntry !== undefined) {\n        this.buf2 = _primitives.Cmd.get(\"EI\");\n        this.shift();\n        cacheEntry.reset();\n        return cacheEntry;\n      }\n    }\n\n    if (cipherTransform) {\n      imageStream = cipherTransform.createStream(imageStream, length);\n    }\n\n    imageStream = this.filter(imageStream, dict, length);\n    imageStream.dict = dict;\n\n    if (cacheKey !== undefined) {\n      imageStream.cacheKey = `inline_${length}_${cacheKey}`;\n      this.imageCache[cacheKey] = imageStream;\n    }\n\n    this.buf2 = _primitives.Cmd.get(\"EI\");\n    this.shift();\n    return imageStream;\n  }\n\n  _findStreamLength(startPos, signature) {\n    const {\n      stream\n    } = this.lexer;\n    stream.pos = startPos;\n    const SCAN_BLOCK_LENGTH = 2048;\n    const signatureLength = signature.length;\n\n    while (stream.pos < stream.end) {\n      const scanBytes = stream.peekBytes(SCAN_BLOCK_LENGTH);\n      const scanLength = scanBytes.length - signatureLength;\n\n      if (scanLength <= 0) {\n        break;\n      }\n\n      let pos = 0;\n\n      while (pos < scanLength) {\n        let j = 0;\n\n        while (j < signatureLength && scanBytes[pos + j] === signature[j]) {\n          j++;\n        }\n\n        if (j >= signatureLength) {\n          stream.pos += pos;\n          return stream.pos - startPos;\n        }\n\n        pos++;\n      }\n\n      stream.pos += scanLength;\n    }\n\n    return -1;\n  }\n\n  makeStream(dict, cipherTransform) {\n    const lexer = this.lexer;\n    let stream = lexer.stream;\n    lexer.skipToNextLine();\n    const startPos = stream.pos - 1;\n    let length = dict.get(\"Length\");\n\n    if (!Number.isInteger(length)) {\n      (0, _util.info)(`Bad length \"${length}\" in stream`);\n      length = 0;\n    }\n\n    stream.pos = startPos + length;\n    lexer.nextChar();\n\n    if (this.tryShift() && (0, _primitives.isCmd)(this.buf2, \"endstream\")) {\n      this.shift();\n    } else {\n      const ENDSTREAM_SIGNATURE = new Uint8Array([0x65, 0x6E, 0x64, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D]);\n\n      let actualLength = this._findStreamLength(startPos, ENDSTREAM_SIGNATURE);\n\n      if (actualLength < 0) {\n        const MAX_TRUNCATION = 1;\n\n        for (let i = 1; i <= MAX_TRUNCATION; i++) {\n          const end = ENDSTREAM_SIGNATURE.length - i;\n          const TRUNCATED_SIGNATURE = ENDSTREAM_SIGNATURE.slice(0, end);\n\n          const maybeLength = this._findStreamLength(startPos, TRUNCATED_SIGNATURE);\n\n          if (maybeLength >= 0) {\n            const lastByte = stream.peekBytes(end + 1)[end];\n\n            if (!(0, _core_utils.isWhiteSpace)(lastByte)) {\n              break;\n            }\n\n            (0, _util.info)(`Found \"${(0, _util.bytesToString)(TRUNCATED_SIGNATURE)}\" when ` + \"searching for endstream command.\");\n            actualLength = maybeLength;\n            break;\n          }\n        }\n\n        if (actualLength < 0) {\n          throw new _util.FormatError(\"Missing endstream command.\");\n        }\n      }\n\n      length = actualLength;\n      lexer.nextChar();\n      this.shift();\n      this.shift();\n    }\n\n    this.shift();\n    stream = stream.makeSubStream(startPos, length, dict);\n\n    if (cipherTransform) {\n      stream = cipherTransform.createStream(stream, length);\n    }\n\n    stream = this.filter(stream, dict, length);\n    stream.dict = dict;\n    return stream;\n  }\n\n  filter(stream, dict, length) {\n    let filter = dict.get(\"Filter\", \"F\");\n    let params = dict.get(\"DecodeParms\", \"DP\");\n\n    if ((0, _primitives.isName)(filter)) {\n      if (Array.isArray(params)) {\n        (0, _util.warn)(\"/DecodeParms should not contain an Array, \" + \"when /Filter contains a Name.\");\n      }\n\n      return this.makeFilter(stream, filter.name, length, params);\n    }\n\n    let maybeLength = length;\n\n    if (Array.isArray(filter)) {\n      const filterArray = filter;\n      const paramsArray = params;\n\n      for (let i = 0, ii = filterArray.length; i < ii; ++i) {\n        filter = this.xref.fetchIfRef(filterArray[i]);\n\n        if (!(0, _primitives.isName)(filter)) {\n          throw new _util.FormatError(`Bad filter name \"${filter}\"`);\n        }\n\n        params = null;\n\n        if (Array.isArray(paramsArray) && i in paramsArray) {\n          params = this.xref.fetchIfRef(paramsArray[i]);\n        }\n\n        stream = this.makeFilter(stream, filter.name, maybeLength, params);\n        maybeLength = null;\n      }\n    }\n\n    return stream;\n  }\n\n  makeFilter(stream, name, maybeLength, params) {\n    if (maybeLength === 0) {\n      (0, _util.warn)(`Empty \"${name}\" stream.`);\n      return new _stream.NullStream();\n    }\n\n    try {\n      const xrefStreamStats = this.xref.stats.streamTypes;\n\n      if (name === \"FlateDecode\" || name === \"Fl\") {\n        xrefStreamStats[_util.StreamType.FLATE] = true;\n\n        if (params) {\n          return new _stream.PredictorStream(new _stream.FlateStream(stream, maybeLength), maybeLength, params);\n        }\n\n        return new _stream.FlateStream(stream, maybeLength);\n      }\n\n      if (name === \"LZWDecode\" || name === \"LZW\") {\n        xrefStreamStats[_util.StreamType.LZW] = true;\n        let earlyChange = 1;\n\n        if (params) {\n          if (params.has(\"EarlyChange\")) {\n            earlyChange = params.get(\"EarlyChange\");\n          }\n\n          return new _stream.PredictorStream(new _stream.LZWStream(stream, maybeLength, earlyChange), maybeLength, params);\n        }\n\n        return new _stream.LZWStream(stream, maybeLength, earlyChange);\n      }\n\n      if (name === \"DCTDecode\" || name === \"DCT\") {\n        xrefStreamStats[_util.StreamType.DCT] = true;\n        return new _jpeg_stream.JpegStream(stream, maybeLength, stream.dict, params);\n      }\n\n      if (name === \"JPXDecode\" || name === \"JPX\") {\n        xrefStreamStats[_util.StreamType.JPX] = true;\n        return new _jpx_stream.JpxStream(stream, maybeLength, stream.dict, params);\n      }\n\n      if (name === \"ASCII85Decode\" || name === \"A85\") {\n        xrefStreamStats[_util.StreamType.A85] = true;\n        return new _stream.Ascii85Stream(stream, maybeLength);\n      }\n\n      if (name === \"ASCIIHexDecode\" || name === \"AHx\") {\n        xrefStreamStats[_util.StreamType.AHX] = true;\n        return new _stream.AsciiHexStream(stream, maybeLength);\n      }\n\n      if (name === \"CCITTFaxDecode\" || name === \"CCF\") {\n        xrefStreamStats[_util.StreamType.CCF] = true;\n        return new _ccitt_stream.CCITTFaxStream(stream, maybeLength, params);\n      }\n\n      if (name === \"RunLengthDecode\" || name === \"RL\") {\n        xrefStreamStats[_util.StreamType.RLX] = true;\n        return new _stream.RunLengthStream(stream, maybeLength);\n      }\n\n      if (name === \"JBIG2Decode\") {\n        xrefStreamStats[_util.StreamType.JBIG] = true;\n        return new _jbig2_stream.Jbig2Stream(stream, maybeLength, stream.dict, params);\n      }\n\n      (0, _util.warn)(`Filter \"${name}\" is not supported.`);\n      return stream;\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      (0, _util.warn)(`Invalid stream: \"${ex}\"`);\n      return new _stream.NullStream();\n    }\n  }\n\n}\n\nexports.Parser = Parser;\nconst specialChars = [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\nfunction toHexDigit(ch) {\n  if (ch >= 0x30 && ch <= 0x39) {\n    return ch & 0x0f;\n  }\n\n  if (ch >= 0x41 && ch <= 0x46 || ch >= 0x61 && ch <= 0x66) {\n    return (ch & 0x0f) + 9;\n  }\n\n  return -1;\n}\n\nclass Lexer {\n  constructor(stream, knownCommands = null) {\n    this.stream = stream;\n    this.nextChar();\n    this.strBuf = [];\n    this.knownCommands = knownCommands;\n    this._hexStringNumWarn = 0;\n    this.beginInlineImagePos = -1;\n  }\n\n  nextChar() {\n    return this.currentChar = this.stream.getByte();\n  }\n\n  peekChar() {\n    return this.stream.peekByte();\n  }\n\n  getNumber() {\n    let ch = this.currentChar;\n    let eNotation = false;\n    let divideBy = 0;\n    let sign = 0;\n\n    if (ch === 0x2d) {\n      sign = -1;\n      ch = this.nextChar();\n\n      if (ch === 0x2d) {\n        ch = this.nextChar();\n      }\n    } else if (ch === 0x2b) {\n      sign = 1;\n      ch = this.nextChar();\n    }\n\n    if (ch === 0x0a || ch === 0x0d) {\n      do {\n        ch = this.nextChar();\n      } while (ch === 0x0a || ch === 0x0d);\n    }\n\n    if (ch === 0x2e) {\n      divideBy = 10;\n      ch = this.nextChar();\n    }\n\n    if (ch < 0x30 || ch > 0x39) {\n      if (divideBy === 10 && sign === 0 && ((0, _core_utils.isWhiteSpace)(ch) || ch === -1)) {\n        (0, _util.warn)(\"Lexer.getNumber - treating a single decimal point as zero.\");\n        return 0;\n      }\n\n      throw new _util.FormatError(`Invalid number: ${String.fromCharCode(ch)} (charCode ${ch})`);\n    }\n\n    sign = sign || 1;\n    let baseValue = ch - 0x30;\n    let powerValue = 0;\n    let powerValueSign = 1;\n\n    while ((ch = this.nextChar()) >= 0) {\n      if (ch >= 0x30 && ch <= 0x39) {\n        const currentDigit = ch - 0x30;\n\n        if (eNotation) {\n          powerValue = powerValue * 10 + currentDigit;\n        } else {\n          if (divideBy !== 0) {\n            divideBy *= 10;\n          }\n\n          baseValue = baseValue * 10 + currentDigit;\n        }\n      } else if (ch === 0x2e) {\n        if (divideBy === 0) {\n          divideBy = 1;\n        } else {\n          break;\n        }\n      } else if (ch === 0x2d) {\n        (0, _util.warn)(\"Badly formatted number: minus sign in the middle\");\n      } else if (ch === 0x45 || ch === 0x65) {\n        ch = this.peekChar();\n\n        if (ch === 0x2b || ch === 0x2d) {\n          powerValueSign = ch === 0x2d ? -1 : 1;\n          this.nextChar();\n        } else if (ch < 0x30 || ch > 0x39) {\n          break;\n        }\n\n        eNotation = true;\n      } else {\n        break;\n      }\n    }\n\n    if (divideBy !== 0) {\n      baseValue /= divideBy;\n    }\n\n    if (eNotation) {\n      baseValue *= 10 ** (powerValueSign * powerValue);\n    }\n\n    return sign * baseValue;\n  }\n\n  getString() {\n    let numParen = 1;\n    let done = false;\n    const strBuf = this.strBuf;\n    strBuf.length = 0;\n    let ch = this.nextChar();\n\n    while (true) {\n      let charBuffered = false;\n\n      switch (ch | 0) {\n        case -1:\n          (0, _util.warn)(\"Unterminated string\");\n          done = true;\n          break;\n\n        case 0x28:\n          ++numParen;\n          strBuf.push(\"(\");\n          break;\n\n        case 0x29:\n          if (--numParen === 0) {\n            this.nextChar();\n            done = true;\n          } else {\n            strBuf.push(\")\");\n          }\n\n          break;\n\n        case 0x5c:\n          ch = this.nextChar();\n\n          switch (ch) {\n            case -1:\n              (0, _util.warn)(\"Unterminated string\");\n              done = true;\n              break;\n\n            case 0x6e:\n              strBuf.push(\"\\n\");\n              break;\n\n            case 0x72:\n              strBuf.push(\"\\r\");\n              break;\n\n            case 0x74:\n              strBuf.push(\"\\t\");\n              break;\n\n            case 0x62:\n              strBuf.push(\"\\b\");\n              break;\n\n            case 0x66:\n              strBuf.push(\"\\f\");\n              break;\n\n            case 0x5c:\n            case 0x28:\n            case 0x29:\n              strBuf.push(String.fromCharCode(ch));\n              break;\n\n            case 0x30:\n            case 0x31:\n            case 0x32:\n            case 0x33:\n            case 0x34:\n            case 0x35:\n            case 0x36:\n            case 0x37:\n              let x = ch & 0x0f;\n              ch = this.nextChar();\n              charBuffered = true;\n\n              if (ch >= 0x30 && ch <= 0x37) {\n                x = (x << 3) + (ch & 0x0f);\n                ch = this.nextChar();\n\n                if (ch >= 0x30 && ch <= 0x37) {\n                  charBuffered = false;\n                  x = (x << 3) + (ch & 0x0f);\n                }\n              }\n\n              strBuf.push(String.fromCharCode(x));\n              break;\n\n            case 0x0d:\n              if (this.peekChar() === 0x0a) {\n                this.nextChar();\n              }\n\n              break;\n\n            case 0x0a:\n              break;\n\n            default:\n              strBuf.push(String.fromCharCode(ch));\n              break;\n          }\n\n          break;\n\n        default:\n          strBuf.push(String.fromCharCode(ch));\n          break;\n      }\n\n      if (done) {\n        break;\n      }\n\n      if (!charBuffered) {\n        ch = this.nextChar();\n      }\n    }\n\n    return strBuf.join(\"\");\n  }\n\n  getName() {\n    let ch, previousCh;\n    const strBuf = this.strBuf;\n    strBuf.length = 0;\n\n    while ((ch = this.nextChar()) >= 0 && !specialChars[ch]) {\n      if (ch === 0x23) {\n        ch = this.nextChar();\n\n        if (specialChars[ch]) {\n          (0, _util.warn)(\"Lexer_getName: \" + \"NUMBER SIGN (#) should be followed by a hexadecimal number.\");\n          strBuf.push(\"#\");\n          break;\n        }\n\n        const x = toHexDigit(ch);\n\n        if (x !== -1) {\n          previousCh = ch;\n          ch = this.nextChar();\n          const x2 = toHexDigit(ch);\n\n          if (x2 === -1) {\n            (0, _util.warn)(`Lexer_getName: Illegal digit (${String.fromCharCode(ch)}) ` + \"in hexadecimal number.\");\n            strBuf.push(\"#\", String.fromCharCode(previousCh));\n\n            if (specialChars[ch]) {\n              break;\n            }\n\n            strBuf.push(String.fromCharCode(ch));\n            continue;\n          }\n\n          strBuf.push(String.fromCharCode(x << 4 | x2));\n        } else {\n          strBuf.push(\"#\", String.fromCharCode(ch));\n        }\n      } else {\n        strBuf.push(String.fromCharCode(ch));\n      }\n    }\n\n    if (strBuf.length > 127) {\n      (0, _util.warn)(`Name token is longer than allowed by the spec: ${strBuf.length}`);\n    }\n\n    return _primitives.Name.get(strBuf.join(\"\"));\n  }\n\n  _hexStringWarn(ch) {\n    const MAX_HEX_STRING_NUM_WARN = 5;\n\n    if (this._hexStringNumWarn++ === MAX_HEX_STRING_NUM_WARN) {\n      (0, _util.warn)(\"getHexString - ignoring additional invalid characters.\");\n      return;\n    }\n\n    if (this._hexStringNumWarn > MAX_HEX_STRING_NUM_WARN) {\n      return;\n    }\n\n    (0, _util.warn)(`getHexString - ignoring invalid character: ${ch}`);\n  }\n\n  getHexString() {\n    const strBuf = this.strBuf;\n    strBuf.length = 0;\n    let ch = this.currentChar;\n    let isFirstHex = true;\n    let firstDigit, secondDigit;\n    this._hexStringNumWarn = 0;\n\n    while (true) {\n      if (ch < 0) {\n        (0, _util.warn)(\"Unterminated hex string\");\n        break;\n      } else if (ch === 0x3e) {\n        this.nextChar();\n        break;\n      } else if (specialChars[ch] === 1) {\n        ch = this.nextChar();\n        continue;\n      } else {\n        if (isFirstHex) {\n          firstDigit = toHexDigit(ch);\n\n          if (firstDigit === -1) {\n            this._hexStringWarn(ch);\n\n            ch = this.nextChar();\n            continue;\n          }\n        } else {\n          secondDigit = toHexDigit(ch);\n\n          if (secondDigit === -1) {\n            this._hexStringWarn(ch);\n\n            ch = this.nextChar();\n            continue;\n          }\n\n          strBuf.push(String.fromCharCode(firstDigit << 4 | secondDigit));\n        }\n\n        isFirstHex = !isFirstHex;\n        ch = this.nextChar();\n      }\n    }\n\n    return strBuf.join(\"\");\n  }\n\n  getObj() {\n    let comment = false;\n    let ch = this.currentChar;\n\n    while (true) {\n      if (ch < 0) {\n        return _primitives.EOF;\n      }\n\n      if (comment) {\n        if (ch === 0x0a || ch === 0x0d) {\n          comment = false;\n        }\n      } else if (ch === 0x25) {\n        comment = true;\n      } else if (specialChars[ch] !== 1) {\n        break;\n      }\n\n      ch = this.nextChar();\n    }\n\n    switch (ch | 0) {\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x2b:\n      case 0x2d:\n      case 0x2e:\n        return this.getNumber();\n\n      case 0x28:\n        return this.getString();\n\n      case 0x2f:\n        return this.getName();\n\n      case 0x5b:\n        this.nextChar();\n        return _primitives.Cmd.get(\"[\");\n\n      case 0x5d:\n        this.nextChar();\n        return _primitives.Cmd.get(\"]\");\n\n      case 0x3c:\n        ch = this.nextChar();\n\n        if (ch === 0x3c) {\n          this.nextChar();\n          return _primitives.Cmd.get(\"<<\");\n        }\n\n        return this.getHexString();\n\n      case 0x3e:\n        ch = this.nextChar();\n\n        if (ch === 0x3e) {\n          this.nextChar();\n          return _primitives.Cmd.get(\">>\");\n        }\n\n        return _primitives.Cmd.get(\">\");\n\n      case 0x7b:\n        this.nextChar();\n        return _primitives.Cmd.get(\"{\");\n\n      case 0x7d:\n        this.nextChar();\n        return _primitives.Cmd.get(\"}\");\n\n      case 0x29:\n        this.nextChar();\n        throw new _util.FormatError(`Illegal character: ${ch}`);\n    }\n\n    let str = String.fromCharCode(ch);\n    const knownCommands = this.knownCommands;\n    let knownCommandFound = knownCommands && knownCommands[str] !== undefined;\n\n    while ((ch = this.nextChar()) >= 0 && !specialChars[ch]) {\n      const possibleCommand = str + String.fromCharCode(ch);\n\n      if (knownCommandFound && knownCommands[possibleCommand] === undefined) {\n        break;\n      }\n\n      if (str.length === 128) {\n        throw new _util.FormatError(`Command token too long: ${str.length}`);\n      }\n\n      str = possibleCommand;\n      knownCommandFound = knownCommands && knownCommands[str] !== undefined;\n    }\n\n    if (str === \"true\") {\n      return true;\n    }\n\n    if (str === \"false\") {\n      return false;\n    }\n\n    if (str === \"null\") {\n      return null;\n    }\n\n    if (str === \"BI\") {\n      this.beginInlineImagePos = this.stream.pos;\n    }\n\n    return _primitives.Cmd.get(str);\n  }\n\n  skipToNextLine() {\n    let ch = this.currentChar;\n\n    while (ch >= 0) {\n      if (ch === 0x0d) {\n        ch = this.nextChar();\n\n        if (ch === 0x0a) {\n          this.nextChar();\n        }\n\n        break;\n      } else if (ch === 0x0a) {\n        this.nextChar();\n        break;\n      }\n\n      ch = this.nextChar();\n    }\n  }\n\n}\n\nexports.Lexer = Lexer;\n\nclass Linearization {\n  static create(stream) {\n    function getInt(linDict, name, allowZeroValue = false) {\n      const obj = linDict.get(name);\n\n      if (Number.isInteger(obj) && (allowZeroValue ? obj >= 0 : obj > 0)) {\n        return obj;\n      }\n\n      throw new Error(`The \"${name}\" parameter in the linearization ` + \"dictionary is invalid.\");\n    }\n\n    function getHints(linDict) {\n      const hints = linDict.get(\"H\");\n      let hintsLength;\n\n      if (Array.isArray(hints) && ((hintsLength = hints.length) === 2 || hintsLength === 4)) {\n        for (let index = 0; index < hintsLength; index++) {\n          const hint = hints[index];\n\n          if (!(Number.isInteger(hint) && hint > 0)) {\n            throw new Error(`Hint (${index}) in the linearization dictionary is invalid.`);\n          }\n        }\n\n        return hints;\n      }\n\n      throw new Error(\"Hint array in the linearization dictionary is invalid.\");\n    }\n\n    const parser = new Parser({\n      lexer: new Lexer(stream),\n      xref: null\n    });\n    const obj1 = parser.getObj();\n    const obj2 = parser.getObj();\n    const obj3 = parser.getObj();\n    const linDict = parser.getObj();\n    let obj, length;\n\n    if (!(Number.isInteger(obj1) && Number.isInteger(obj2) && (0, _primitives.isCmd)(obj3, \"obj\") && (0, _primitives.isDict)(linDict) && (0, _util.isNum)(obj = linDict.get(\"Linearized\")) && obj > 0)) {\n      return null;\n    } else if ((length = getInt(linDict, \"L\")) !== stream.length) {\n      throw new Error('The \"L\" parameter in the linearization dictionary ' + \"does not equal the stream length.\");\n    }\n\n    return {\n      length,\n      hints: getHints(linDict),\n      objectNumberFirst: getInt(linDict, \"O\"),\n      endFirst: getInt(linDict, \"E\"),\n      numPages: getInt(linDict, \"N\"),\n      mainXRefEntriesOffset: getInt(linDict, \"T\"),\n      pageFirst: linDict.has(\"P\") ? getInt(linDict, \"P\", true) : 0\n    };\n  }\n\n}\n\nexports.Linearization = Linearization;\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LZWStream = exports.StringStream = exports.StreamsSequenceStream = exports.Stream = exports.RunLengthStream = exports.PredictorStream = exports.NullStream = exports.FlateStream = exports.DecodeStream = exports.DecryptStream = exports.AsciiHexStream = exports.Ascii85Stream = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(4);\n\nvar _core_utils = __w_pdfjs_require__(7);\n\nvar Stream = function StreamClosure() {\n  function Stream(arrayBuffer, start, length, dict) {\n    this.bytes = arrayBuffer instanceof Uint8Array ? arrayBuffer : new Uint8Array(arrayBuffer);\n    this.start = start || 0;\n    this.pos = this.start;\n    this.end = start + length || this.bytes.length;\n    this.dict = dict;\n  }\n\n  Stream.prototype = {\n    get length() {\n      return this.end - this.start;\n    },\n\n    get isEmpty() {\n      return this.length === 0;\n    },\n\n    getByte: function Stream_getByte() {\n      if (this.pos >= this.end) {\n        return -1;\n      }\n\n      return this.bytes[this.pos++];\n    },\n    getUint16: function Stream_getUint16() {\n      var b0 = this.getByte();\n      var b1 = this.getByte();\n\n      if (b0 === -1 || b1 === -1) {\n        return -1;\n      }\n\n      return (b0 << 8) + b1;\n    },\n    getInt32: function Stream_getInt32() {\n      var b0 = this.getByte();\n      var b1 = this.getByte();\n      var b2 = this.getByte();\n      var b3 = this.getByte();\n      return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n    },\n\n    getBytes(length, forceClamped = false) {\n      var bytes = this.bytes;\n      var pos = this.pos;\n      var strEnd = this.end;\n\n      if (!length) {\n        const subarray = bytes.subarray(pos, strEnd);\n        return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n      }\n\n      var end = pos + length;\n\n      if (end > strEnd) {\n        end = strEnd;\n      }\n\n      this.pos = end;\n      const subarray = bytes.subarray(pos, end);\n      return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n    },\n\n    peekByte: function Stream_peekByte() {\n      var peekedByte = this.getByte();\n\n      if (peekedByte !== -1) {\n        this.pos--;\n      }\n\n      return peekedByte;\n    },\n\n    peekBytes(length, forceClamped = false) {\n      var bytes = this.getBytes(length, forceClamped);\n      this.pos -= bytes.length;\n      return bytes;\n    },\n\n    getByteRange(begin, end) {\n      if (begin < 0) {\n        begin = 0;\n      }\n\n      if (end > this.end) {\n        end = this.end;\n      }\n\n      return this.bytes.subarray(begin, end);\n    },\n\n    skip: function Stream_skip(n) {\n      if (!n) {\n        n = 1;\n      }\n\n      this.pos += n;\n    },\n    reset: function Stream_reset() {\n      this.pos = this.start;\n    },\n    moveStart: function Stream_moveStart() {\n      this.start = this.pos;\n    },\n    makeSubStream: function Stream_makeSubStream(start, length, dict) {\n      return new Stream(this.bytes.buffer, start, length, dict);\n    }\n  };\n  return Stream;\n}();\n\nexports.Stream = Stream;\n\nvar StringStream = function StringStreamClosure() {\n  function StringStream(str) {\n    const bytes = (0, _util.stringToBytes)(str);\n    Stream.call(this, bytes);\n  }\n\n  StringStream.prototype = Stream.prototype;\n  return StringStream;\n}();\n\nexports.StringStream = StringStream;\n\nvar DecodeStream = function DecodeStreamClosure() {\n  var emptyBuffer = new Uint8Array(0);\n\n  function DecodeStream(maybeMinBufferLength) {\n    this._rawMinBufferLength = maybeMinBufferLength || 0;\n    this.pos = 0;\n    this.bufferLength = 0;\n    this.eof = false;\n    this.buffer = emptyBuffer;\n    this.minBufferLength = 512;\n\n    if (maybeMinBufferLength) {\n      while (this.minBufferLength < maybeMinBufferLength) {\n        this.minBufferLength *= 2;\n      }\n    }\n  }\n\n  DecodeStream.prototype = {\n    get isEmpty() {\n      while (!this.eof && this.bufferLength === 0) {\n        this.readBlock();\n      }\n\n      return this.bufferLength === 0;\n    },\n\n    ensureBuffer: function DecodeStream_ensureBuffer(requested) {\n      var buffer = this.buffer;\n\n      if (requested <= buffer.byteLength) {\n        return buffer;\n      }\n\n      var size = this.minBufferLength;\n\n      while (size < requested) {\n        size *= 2;\n      }\n\n      var buffer2 = new Uint8Array(size);\n      buffer2.set(buffer);\n      return this.buffer = buffer2;\n    },\n    getByte: function DecodeStream_getByte() {\n      var pos = this.pos;\n\n      while (this.bufferLength <= pos) {\n        if (this.eof) {\n          return -1;\n        }\n\n        this.readBlock();\n      }\n\n      return this.buffer[this.pos++];\n    },\n    getUint16: function DecodeStream_getUint16() {\n      var b0 = this.getByte();\n      var b1 = this.getByte();\n\n      if (b0 === -1 || b1 === -1) {\n        return -1;\n      }\n\n      return (b0 << 8) + b1;\n    },\n    getInt32: function DecodeStream_getInt32() {\n      var b0 = this.getByte();\n      var b1 = this.getByte();\n      var b2 = this.getByte();\n      var b3 = this.getByte();\n      return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n    },\n\n    getBytes(length, forceClamped = false) {\n      var end,\n          pos = this.pos;\n\n      if (length) {\n        this.ensureBuffer(pos + length);\n        end = pos + length;\n\n        while (!this.eof && this.bufferLength < end) {\n          this.readBlock();\n        }\n\n        var bufEnd = this.bufferLength;\n\n        if (end > bufEnd) {\n          end = bufEnd;\n        }\n      } else {\n        while (!this.eof) {\n          this.readBlock();\n        }\n\n        end = this.bufferLength;\n      }\n\n      this.pos = end;\n      const subarray = this.buffer.subarray(pos, end);\n      return forceClamped && !(subarray instanceof Uint8ClampedArray) ? new Uint8ClampedArray(subarray) : subarray;\n    },\n\n    peekByte: function DecodeStream_peekByte() {\n      var peekedByte = this.getByte();\n\n      if (peekedByte !== -1) {\n        this.pos--;\n      }\n\n      return peekedByte;\n    },\n\n    peekBytes(length, forceClamped = false) {\n      var bytes = this.getBytes(length, forceClamped);\n      this.pos -= bytes.length;\n      return bytes;\n    },\n\n    makeSubStream: function DecodeStream_makeSubStream(start, length, dict) {\n      var end = start + length;\n\n      while (this.bufferLength <= end && !this.eof) {\n        this.readBlock();\n      }\n\n      return new Stream(this.buffer, start, length, dict);\n    },\n\n    getByteRange(begin, end) {\n      (0, _util.unreachable)(\"Should not call DecodeStream.getByteRange\");\n    },\n\n    skip: function DecodeStream_skip(n) {\n      if (!n) {\n        n = 1;\n      }\n\n      this.pos += n;\n    },\n    reset: function DecodeStream_reset() {\n      this.pos = 0;\n    },\n    getBaseStreams: function DecodeStream_getBaseStreams() {\n      if (this.str && this.str.getBaseStreams) {\n        return this.str.getBaseStreams();\n      }\n\n      return [];\n    }\n  };\n  return DecodeStream;\n}();\n\nexports.DecodeStream = DecodeStream;\n\nvar StreamsSequenceStream = function StreamsSequenceStreamClosure() {\n  function StreamsSequenceStream(streams) {\n    this.streams = streams;\n    let maybeLength = 0;\n\n    for (let i = 0, ii = streams.length; i < ii; i++) {\n      const stream = streams[i];\n\n      if (stream instanceof DecodeStream) {\n        maybeLength += stream._rawMinBufferLength;\n      } else {\n        maybeLength += stream.length;\n      }\n    }\n\n    DecodeStream.call(this, maybeLength);\n  }\n\n  StreamsSequenceStream.prototype = Object.create(DecodeStream.prototype);\n\n  StreamsSequenceStream.prototype.readBlock = function streamSequenceStreamReadBlock() {\n    var streams = this.streams;\n\n    if (streams.length === 0) {\n      this.eof = true;\n      return;\n    }\n\n    var stream = streams.shift();\n    var chunk = stream.getBytes();\n    var bufferLength = this.bufferLength;\n    var newLength = bufferLength + chunk.length;\n    var buffer = this.ensureBuffer(newLength);\n    buffer.set(chunk, bufferLength);\n    this.bufferLength = newLength;\n  };\n\n  StreamsSequenceStream.prototype.getBaseStreams = function StreamsSequenceStream_getBaseStreams() {\n    var baseStreams = [];\n\n    for (var i = 0, ii = this.streams.length; i < ii; i++) {\n      var stream = this.streams[i];\n\n      if (stream.getBaseStreams) {\n        baseStreams.push(...stream.getBaseStreams());\n      }\n    }\n\n    return baseStreams;\n  };\n\n  return StreamsSequenceStream;\n}();\n\nexports.StreamsSequenceStream = StreamsSequenceStream;\n\nvar FlateStream = function FlateStreamClosure() {\n  var codeLenCodeMap = new Int32Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n  var lengthDecode = new Int32Array([0x00003, 0x00004, 0x00005, 0x00006, 0x00007, 0x00008, 0x00009, 0x0000a, 0x1000b, 0x1000d, 0x1000f, 0x10011, 0x20013, 0x20017, 0x2001b, 0x2001f, 0x30023, 0x3002b, 0x30033, 0x3003b, 0x40043, 0x40053, 0x40063, 0x40073, 0x50083, 0x500a3, 0x500c3, 0x500e3, 0x00102, 0x00102, 0x00102]);\n  var distDecode = new Int32Array([0x00001, 0x00002, 0x00003, 0x00004, 0x10005, 0x10007, 0x20009, 0x2000d, 0x30011, 0x30019, 0x40021, 0x40031, 0x50041, 0x50061, 0x60081, 0x600c1, 0x70101, 0x70181, 0x80201, 0x80301, 0x90401, 0x90601, 0xa0801, 0xa0c01, 0xb1001, 0xb1801, 0xc2001, 0xc3001, 0xd4001, 0xd6001]);\n  var fixedLitCodeTab = [new Int32Array([0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c0, 0x70108, 0x80060, 0x80020, 0x900a0, 0x80000, 0x80080, 0x80040, 0x900e0, 0x70104, 0x80058, 0x80018, 0x90090, 0x70114, 0x80078, 0x80038, 0x900d0, 0x7010c, 0x80068, 0x80028, 0x900b0, 0x80008, 0x80088, 0x80048, 0x900f0, 0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c8, 0x7010a, 0x80064, 0x80024, 0x900a8, 0x80004, 0x80084, 0x80044, 0x900e8, 0x70106, 0x8005c, 0x8001c, 0x90098, 0x70116, 0x8007c, 0x8003c, 0x900d8, 0x7010e, 0x8006c, 0x8002c, 0x900b8, 0x8000c, 0x8008c, 0x8004c, 0x900f8, 0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c4, 0x70109, 0x80062, 0x80022, 0x900a4, 0x80002, 0x80082, 0x80042, 0x900e4, 0x70105, 0x8005a, 0x8001a, 0x90094, 0x70115, 0x8007a, 0x8003a, 0x900d4, 0x7010d, 0x8006a, 0x8002a, 0x900b4, 0x8000a, 0x8008a, 0x8004a, 0x900f4, 0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cc, 0x7010b, 0x80066, 0x80026, 0x900ac, 0x80006, 0x80086, 0x80046, 0x900ec, 0x70107, 0x8005e, 0x8001e, 0x9009c, 0x70117, 0x8007e, 0x8003e, 0x900dc, 0x7010f, 0x8006e, 0x8002e, 0x900bc, 0x8000e, 0x8008e, 0x8004e, 0x900fc, 0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c2, 0x70108, 0x80061, 0x80021, 0x900a2, 0x80001, 0x80081, 0x80041, 0x900e2, 0x70104, 0x80059, 0x80019, 0x90092, 0x70114, 0x80079, 0x80039, 0x900d2, 0x7010c, 0x80069, 0x80029, 0x900b2, 0x80009, 0x80089, 0x80049, 0x900f2, 0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900ca, 0x7010a, 0x80065, 0x80025, 0x900aa, 0x80005, 0x80085, 0x80045, 0x900ea, 0x70106, 0x8005d, 0x8001d, 0x9009a, 0x70116, 0x8007d, 0x8003d, 0x900da, 0x7010e, 0x8006d, 0x8002d, 0x900ba, 0x8000d, 0x8008d, 0x8004d, 0x900fa, 0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c6, 0x70109, 0x80063, 0x80023, 0x900a6, 0x80003, 0x80083, 0x80043, 0x900e6, 0x70105, 0x8005b, 0x8001b, 0x90096, 0x70115, 0x8007b, 0x8003b, 0x900d6, 0x7010d, 0x8006b, 0x8002b, 0x900b6, 0x8000b, 0x8008b, 0x8004b, 0x900f6, 0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900ce, 0x7010b, 0x80067, 0x80027, 0x900ae, 0x80007, 0x80087, 0x80047, 0x900ee, 0x70107, 0x8005f, 0x8001f, 0x9009e, 0x70117, 0x8007f, 0x8003f, 0x900de, 0x7010f, 0x8006f, 0x8002f, 0x900be, 0x8000f, 0x8008f, 0x8004f, 0x900fe, 0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c1, 0x70108, 0x80060, 0x80020, 0x900a1, 0x80000, 0x80080, 0x80040, 0x900e1, 0x70104, 0x80058, 0x80018, 0x90091, 0x70114, 0x80078, 0x80038, 0x900d1, 0x7010c, 0x80068, 0x80028, 0x900b1, 0x80008, 0x80088, 0x80048, 0x900f1, 0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c9, 0x7010a, 0x80064, 0x80024, 0x900a9, 0x80004, 0x80084, 0x80044, 0x900e9, 0x70106, 0x8005c, 0x8001c, 0x90099, 0x70116, 0x8007c, 0x8003c, 0x900d9, 0x7010e, 0x8006c, 0x8002c, 0x900b9, 0x8000c, 0x8008c, 0x8004c, 0x900f9, 0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c5, 0x70109, 0x80062, 0x80022, 0x900a5, 0x80002, 0x80082, 0x80042, 0x900e5, 0x70105, 0x8005a, 0x8001a, 0x90095, 0x70115, 0x8007a, 0x8003a, 0x900d5, 0x7010d, 0x8006a, 0x8002a, 0x900b5, 0x8000a, 0x8008a, 0x8004a, 0x900f5, 0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cd, 0x7010b, 0x80066, 0x80026, 0x900ad, 0x80006, 0x80086, 0x80046, 0x900ed, 0x70107, 0x8005e, 0x8001e, 0x9009d, 0x70117, 0x8007e, 0x8003e, 0x900dd, 0x7010f, 0x8006e, 0x8002e, 0x900bd, 0x8000e, 0x8008e, 0x8004e, 0x900fd, 0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c3, 0x70108, 0x80061, 0x80021, 0x900a3, 0x80001, 0x80081, 0x80041, 0x900e3, 0x70104, 0x80059, 0x80019, 0x90093, 0x70114, 0x80079, 0x80039, 0x900d3, 0x7010c, 0x80069, 0x80029, 0x900b3, 0x80009, 0x80089, 0x80049, 0x900f3, 0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900cb, 0x7010a, 0x80065, 0x80025, 0x900ab, 0x80005, 0x80085, 0x80045, 0x900eb, 0x70106, 0x8005d, 0x8001d, 0x9009b, 0x70116, 0x8007d, 0x8003d, 0x900db, 0x7010e, 0x8006d, 0x8002d, 0x900bb, 0x8000d, 0x8008d, 0x8004d, 0x900fb, 0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c7, 0x70109, 0x80063, 0x80023, 0x900a7, 0x80003, 0x80083, 0x80043, 0x900e7, 0x70105, 0x8005b, 0x8001b, 0x90097, 0x70115, 0x8007b, 0x8003b, 0x900d7, 0x7010d, 0x8006b, 0x8002b, 0x900b7, 0x8000b, 0x8008b, 0x8004b, 0x900f7, 0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900cf, 0x7010b, 0x80067, 0x80027, 0x900af, 0x80007, 0x80087, 0x80047, 0x900ef, 0x70107, 0x8005f, 0x8001f, 0x9009f, 0x70117, 0x8007f, 0x8003f, 0x900df, 0x7010f, 0x8006f, 0x8002f, 0x900bf, 0x8000f, 0x8008f, 0x8004f, 0x900ff]), 9];\n  var fixedDistCodeTab = [new Int32Array([0x50000, 0x50010, 0x50008, 0x50018, 0x50004, 0x50014, 0x5000c, 0x5001c, 0x50002, 0x50012, 0x5000a, 0x5001a, 0x50006, 0x50016, 0x5000e, 0x00000, 0x50001, 0x50011, 0x50009, 0x50019, 0x50005, 0x50015, 0x5000d, 0x5001d, 0x50003, 0x50013, 0x5000b, 0x5001b, 0x50007, 0x50017, 0x5000f, 0x00000]), 5];\n\n  function FlateStream(str, maybeLength) {\n    this.str = str;\n    this.dict = str.dict;\n    var cmf = str.getByte();\n    var flg = str.getByte();\n\n    if (cmf === -1 || flg === -1) {\n      throw new _util.FormatError(`Invalid header in flate stream: ${cmf}, ${flg}`);\n    }\n\n    if ((cmf & 0x0f) !== 0x08) {\n      throw new _util.FormatError(`Unknown compression method in flate stream: ${cmf}, ${flg}`);\n    }\n\n    if (((cmf << 8) + flg) % 31 !== 0) {\n      throw new _util.FormatError(`Bad FCHECK in flate stream: ${cmf}, ${flg}`);\n    }\n\n    if (flg & 0x20) {\n      throw new _util.FormatError(`FDICT bit set in flate stream: ${cmf}, ${flg}`);\n    }\n\n    this.codeSize = 0;\n    this.codeBuf = 0;\n    DecodeStream.call(this, maybeLength);\n  }\n\n  FlateStream.prototype = Object.create(DecodeStream.prototype);\n\n  FlateStream.prototype.getBits = function FlateStream_getBits(bits) {\n    var str = this.str;\n    var codeSize = this.codeSize;\n    var codeBuf = this.codeBuf;\n    var b;\n\n    while (codeSize < bits) {\n      if ((b = str.getByte()) === -1) {\n        throw new _util.FormatError(\"Bad encoding in flate stream\");\n      }\n\n      codeBuf |= b << codeSize;\n      codeSize += 8;\n    }\n\n    b = codeBuf & (1 << bits) - 1;\n    this.codeBuf = codeBuf >> bits;\n    this.codeSize = codeSize -= bits;\n    return b;\n  };\n\n  FlateStream.prototype.getCode = function FlateStream_getCode(table) {\n    var str = this.str;\n    var codes = table[0];\n    var maxLen = table[1];\n    var codeSize = this.codeSize;\n    var codeBuf = this.codeBuf;\n    var b;\n\n    while (codeSize < maxLen) {\n      if ((b = str.getByte()) === -1) {\n        break;\n      }\n\n      codeBuf |= b << codeSize;\n      codeSize += 8;\n    }\n\n    var code = codes[codeBuf & (1 << maxLen) - 1];\n    var codeLen = code >> 16;\n    var codeVal = code & 0xffff;\n\n    if (codeLen < 1 || codeSize < codeLen) {\n      throw new _util.FormatError(\"Bad encoding in flate stream\");\n    }\n\n    this.codeBuf = codeBuf >> codeLen;\n    this.codeSize = codeSize - codeLen;\n    return codeVal;\n  };\n\n  FlateStream.prototype.generateHuffmanTable = function flateStreamGenerateHuffmanTable(lengths) {\n    var n = lengths.length;\n    var maxLen = 0;\n    var i;\n\n    for (i = 0; i < n; ++i) {\n      if (lengths[i] > maxLen) {\n        maxLen = lengths[i];\n      }\n    }\n\n    var size = 1 << maxLen;\n    var codes = new Int32Array(size);\n\n    for (var len = 1, code = 0, skip = 2; len <= maxLen; ++len, code <<= 1, skip <<= 1) {\n      for (var val = 0; val < n; ++val) {\n        if (lengths[val] === len) {\n          var code2 = 0;\n          var t = code;\n\n          for (i = 0; i < len; ++i) {\n            code2 = code2 << 1 | t & 1;\n            t >>= 1;\n          }\n\n          for (i = code2; i < size; i += skip) {\n            codes[i] = len << 16 | val;\n          }\n\n          ++code;\n        }\n      }\n    }\n\n    return [codes, maxLen];\n  };\n\n  FlateStream.prototype.readBlock = function FlateStream_readBlock() {\n    var buffer, len;\n    var str = this.str;\n    var hdr = this.getBits(3);\n\n    if (hdr & 1) {\n      this.eof = true;\n    }\n\n    hdr >>= 1;\n\n    if (hdr === 0) {\n      var b;\n\n      if ((b = str.getByte()) === -1) {\n        throw new _util.FormatError(\"Bad block header in flate stream\");\n      }\n\n      var blockLen = b;\n\n      if ((b = str.getByte()) === -1) {\n        throw new _util.FormatError(\"Bad block header in flate stream\");\n      }\n\n      blockLen |= b << 8;\n\n      if ((b = str.getByte()) === -1) {\n        throw new _util.FormatError(\"Bad block header in flate stream\");\n      }\n\n      var check = b;\n\n      if ((b = str.getByte()) === -1) {\n        throw new _util.FormatError(\"Bad block header in flate stream\");\n      }\n\n      check |= b << 8;\n\n      if (check !== (~blockLen & 0xffff) && (blockLen !== 0 || check !== 0)) {\n        throw new _util.FormatError(\"Bad uncompressed block length in flate stream\");\n      }\n\n      this.codeBuf = 0;\n      this.codeSize = 0;\n      const bufferLength = this.bufferLength,\n            end = bufferLength + blockLen;\n      buffer = this.ensureBuffer(end);\n      this.bufferLength = end;\n\n      if (blockLen === 0) {\n        if (str.peekByte() === -1) {\n          this.eof = true;\n        }\n      } else {\n        const block = str.getBytes(blockLen);\n        buffer.set(block, bufferLength);\n\n        if (block.length < blockLen) {\n          this.eof = true;\n        }\n      }\n\n      return;\n    }\n\n    var litCodeTable;\n    var distCodeTable;\n\n    if (hdr === 1) {\n      litCodeTable = fixedLitCodeTab;\n      distCodeTable = fixedDistCodeTab;\n    } else if (hdr === 2) {\n      var numLitCodes = this.getBits(5) + 257;\n      var numDistCodes = this.getBits(5) + 1;\n      var numCodeLenCodes = this.getBits(4) + 4;\n      var codeLenCodeLengths = new Uint8Array(codeLenCodeMap.length);\n      var i;\n\n      for (i = 0; i < numCodeLenCodes; ++i) {\n        codeLenCodeLengths[codeLenCodeMap[i]] = this.getBits(3);\n      }\n\n      var codeLenCodeTab = this.generateHuffmanTable(codeLenCodeLengths);\n      len = 0;\n      i = 0;\n      var codes = numLitCodes + numDistCodes;\n      var codeLengths = new Uint8Array(codes);\n      var bitsLength, bitsOffset, what;\n\n      while (i < codes) {\n        var code = this.getCode(codeLenCodeTab);\n\n        if (code === 16) {\n          bitsLength = 2;\n          bitsOffset = 3;\n          what = len;\n        } else if (code === 17) {\n          bitsLength = 3;\n          bitsOffset = 3;\n          what = len = 0;\n        } else if (code === 18) {\n          bitsLength = 7;\n          bitsOffset = 11;\n          what = len = 0;\n        } else {\n          codeLengths[i++] = len = code;\n          continue;\n        }\n\n        var repeatLength = this.getBits(bitsLength) + bitsOffset;\n\n        while (repeatLength-- > 0) {\n          codeLengths[i++] = what;\n        }\n      }\n\n      litCodeTable = this.generateHuffmanTable(codeLengths.subarray(0, numLitCodes));\n      distCodeTable = this.generateHuffmanTable(codeLengths.subarray(numLitCodes, codes));\n    } else {\n      throw new _util.FormatError(\"Unknown block type in flate stream\");\n    }\n\n    buffer = this.buffer;\n    var limit = buffer ? buffer.length : 0;\n    var pos = this.bufferLength;\n\n    while (true) {\n      var code1 = this.getCode(litCodeTable);\n\n      if (code1 < 256) {\n        if (pos + 1 >= limit) {\n          buffer = this.ensureBuffer(pos + 1);\n          limit = buffer.length;\n        }\n\n        buffer[pos++] = code1;\n        continue;\n      }\n\n      if (code1 === 256) {\n        this.bufferLength = pos;\n        return;\n      }\n\n      code1 -= 257;\n      code1 = lengthDecode[code1];\n      var code2 = code1 >> 16;\n\n      if (code2 > 0) {\n        code2 = this.getBits(code2);\n      }\n\n      len = (code1 & 0xffff) + code2;\n      code1 = this.getCode(distCodeTable);\n      code1 = distDecode[code1];\n      code2 = code1 >> 16;\n\n      if (code2 > 0) {\n        code2 = this.getBits(code2);\n      }\n\n      var dist = (code1 & 0xffff) + code2;\n\n      if (pos + len >= limit) {\n        buffer = this.ensureBuffer(pos + len);\n        limit = buffer.length;\n      }\n\n      for (var k = 0; k < len; ++k, ++pos) {\n        buffer[pos] = buffer[pos - dist];\n      }\n    }\n  };\n\n  return FlateStream;\n}();\n\nexports.FlateStream = FlateStream;\n\nvar PredictorStream = function PredictorStreamClosure() {\n  function PredictorStream(str, maybeLength, params) {\n    if (!(0, _primitives.isDict)(params)) {\n      return str;\n    }\n\n    var predictor = this.predictor = params.get(\"Predictor\") || 1;\n\n    if (predictor <= 1) {\n      return str;\n    }\n\n    if (predictor !== 2 && (predictor < 10 || predictor > 15)) {\n      throw new _util.FormatError(`Unsupported predictor: ${predictor}`);\n    }\n\n    if (predictor === 2) {\n      this.readBlock = this.readBlockTiff;\n    } else {\n      this.readBlock = this.readBlockPng;\n    }\n\n    this.str = str;\n    this.dict = str.dict;\n    var colors = this.colors = params.get(\"Colors\") || 1;\n    var bits = this.bits = params.get(\"BitsPerComponent\") || 8;\n    var columns = this.columns = params.get(\"Columns\") || 1;\n    this.pixBytes = colors * bits + 7 >> 3;\n    this.rowBytes = columns * colors * bits + 7 >> 3;\n    DecodeStream.call(this, maybeLength);\n    return this;\n  }\n\n  PredictorStream.prototype = Object.create(DecodeStream.prototype);\n\n  PredictorStream.prototype.readBlockTiff = function predictorStreamReadBlockTiff() {\n    var rowBytes = this.rowBytes;\n    var bufferLength = this.bufferLength;\n    var buffer = this.ensureBuffer(bufferLength + rowBytes);\n    var bits = this.bits;\n    var colors = this.colors;\n    var rawBytes = this.str.getBytes(rowBytes);\n    this.eof = !rawBytes.length;\n\n    if (this.eof) {\n      return;\n    }\n\n    var inbuf = 0,\n        outbuf = 0;\n    var inbits = 0,\n        outbits = 0;\n    var pos = bufferLength;\n    var i;\n\n    if (bits === 1 && colors === 1) {\n      for (i = 0; i < rowBytes; ++i) {\n        var c = rawBytes[i] ^ inbuf;\n        c ^= c >> 1;\n        c ^= c >> 2;\n        c ^= c >> 4;\n        inbuf = (c & 1) << 7;\n        buffer[pos++] = c;\n      }\n    } else if (bits === 8) {\n      for (i = 0; i < colors; ++i) {\n        buffer[pos++] = rawBytes[i];\n      }\n\n      for (; i < rowBytes; ++i) {\n        buffer[pos] = buffer[pos - colors] + rawBytes[i];\n        pos++;\n      }\n    } else if (bits === 16) {\n      var bytesPerPixel = colors * 2;\n\n      for (i = 0; i < bytesPerPixel; ++i) {\n        buffer[pos++] = rawBytes[i];\n      }\n\n      for (; i < rowBytes; i += 2) {\n        var sum = ((rawBytes[i] & 0xff) << 8) + (rawBytes[i + 1] & 0xff) + ((buffer[pos - bytesPerPixel] & 0xff) << 8) + (buffer[pos - bytesPerPixel + 1] & 0xff);\n        buffer[pos++] = sum >> 8 & 0xff;\n        buffer[pos++] = sum & 0xff;\n      }\n    } else {\n      var compArray = new Uint8Array(colors + 1);\n      var bitMask = (1 << bits) - 1;\n      var j = 0,\n          k = bufferLength;\n      var columns = this.columns;\n\n      for (i = 0; i < columns; ++i) {\n        for (var kk = 0; kk < colors; ++kk) {\n          if (inbits < bits) {\n            inbuf = inbuf << 8 | rawBytes[j++] & 0xff;\n            inbits += 8;\n          }\n\n          compArray[kk] = compArray[kk] + (inbuf >> inbits - bits) & bitMask;\n          inbits -= bits;\n          outbuf = outbuf << bits | compArray[kk];\n          outbits += bits;\n\n          if (outbits >= 8) {\n            buffer[k++] = outbuf >> outbits - 8 & 0xff;\n            outbits -= 8;\n          }\n        }\n      }\n\n      if (outbits > 0) {\n        buffer[k++] = (outbuf << 8 - outbits) + (inbuf & (1 << 8 - outbits) - 1);\n      }\n    }\n\n    this.bufferLength += rowBytes;\n  };\n\n  PredictorStream.prototype.readBlockPng = function predictorStreamReadBlockPng() {\n    var rowBytes = this.rowBytes;\n    var pixBytes = this.pixBytes;\n    var predictor = this.str.getByte();\n    var rawBytes = this.str.getBytes(rowBytes);\n    this.eof = !rawBytes.length;\n\n    if (this.eof) {\n      return;\n    }\n\n    var bufferLength = this.bufferLength;\n    var buffer = this.ensureBuffer(bufferLength + rowBytes);\n    var prevRow = buffer.subarray(bufferLength - rowBytes, bufferLength);\n\n    if (prevRow.length === 0) {\n      prevRow = new Uint8Array(rowBytes);\n    }\n\n    var i,\n        j = bufferLength,\n        up,\n        c;\n\n    switch (predictor) {\n      case 0:\n        for (i = 0; i < rowBytes; ++i) {\n          buffer[j++] = rawBytes[i];\n        }\n\n        break;\n\n      case 1:\n        for (i = 0; i < pixBytes; ++i) {\n          buffer[j++] = rawBytes[i];\n        }\n\n        for (; i < rowBytes; ++i) {\n          buffer[j] = buffer[j - pixBytes] + rawBytes[i] & 0xff;\n          j++;\n        }\n\n        break;\n\n      case 2:\n        for (i = 0; i < rowBytes; ++i) {\n          buffer[j++] = prevRow[i] + rawBytes[i] & 0xff;\n        }\n\n        break;\n\n      case 3:\n        for (i = 0; i < pixBytes; ++i) {\n          buffer[j++] = (prevRow[i] >> 1) + rawBytes[i];\n        }\n\n        for (; i < rowBytes; ++i) {\n          buffer[j] = (prevRow[i] + buffer[j - pixBytes] >> 1) + rawBytes[i] & 0xff;\n          j++;\n        }\n\n        break;\n\n      case 4:\n        for (i = 0; i < pixBytes; ++i) {\n          up = prevRow[i];\n          c = rawBytes[i];\n          buffer[j++] = up + c;\n        }\n\n        for (; i < rowBytes; ++i) {\n          up = prevRow[i];\n          var upLeft = prevRow[i - pixBytes];\n          var left = buffer[j - pixBytes];\n          var p = left + up - upLeft;\n          var pa = p - left;\n\n          if (pa < 0) {\n            pa = -pa;\n          }\n\n          var pb = p - up;\n\n          if (pb < 0) {\n            pb = -pb;\n          }\n\n          var pc = p - upLeft;\n\n          if (pc < 0) {\n            pc = -pc;\n          }\n\n          c = rawBytes[i];\n\n          if (pa <= pb && pa <= pc) {\n            buffer[j++] = left + c;\n          } else if (pb <= pc) {\n            buffer[j++] = up + c;\n          } else {\n            buffer[j++] = upLeft + c;\n          }\n        }\n\n        break;\n\n      default:\n        throw new _util.FormatError(`Unsupported predictor: ${predictor}`);\n    }\n\n    this.bufferLength += rowBytes;\n  };\n\n  return PredictorStream;\n}();\n\nexports.PredictorStream = PredictorStream;\n\nvar DecryptStream = function DecryptStreamClosure() {\n  function DecryptStream(str, maybeLength, decrypt) {\n    this.str = str;\n    this.dict = str.dict;\n    this.decrypt = decrypt;\n    this.nextChunk = null;\n    this.initialized = false;\n    DecodeStream.call(this, maybeLength);\n  }\n\n  var chunkSize = 512;\n  DecryptStream.prototype = Object.create(DecodeStream.prototype);\n\n  DecryptStream.prototype.readBlock = function DecryptStream_readBlock() {\n    var chunk;\n\n    if (this.initialized) {\n      chunk = this.nextChunk;\n    } else {\n      chunk = this.str.getBytes(chunkSize);\n      this.initialized = true;\n    }\n\n    if (!chunk || chunk.length === 0) {\n      this.eof = true;\n      return;\n    }\n\n    this.nextChunk = this.str.getBytes(chunkSize);\n    var hasMoreData = this.nextChunk && this.nextChunk.length > 0;\n    var decrypt = this.decrypt;\n    chunk = decrypt(chunk, !hasMoreData);\n    var bufferLength = this.bufferLength;\n    var i,\n        n = chunk.length;\n    var buffer = this.ensureBuffer(bufferLength + n);\n\n    for (i = 0; i < n; i++) {\n      buffer[bufferLength++] = chunk[i];\n    }\n\n    this.bufferLength = bufferLength;\n  };\n\n  return DecryptStream;\n}();\n\nexports.DecryptStream = DecryptStream;\n\nvar Ascii85Stream = function Ascii85StreamClosure() {\n  function Ascii85Stream(str, maybeLength) {\n    this.str = str;\n    this.dict = str.dict;\n    this.input = new Uint8Array(5);\n\n    if (maybeLength) {\n      maybeLength = 0.8 * maybeLength;\n    }\n\n    DecodeStream.call(this, maybeLength);\n  }\n\n  Ascii85Stream.prototype = Object.create(DecodeStream.prototype);\n\n  Ascii85Stream.prototype.readBlock = function Ascii85Stream_readBlock() {\n    var TILDA_CHAR = 0x7e;\n    var Z_LOWER_CHAR = 0x7a;\n    var EOF = -1;\n    var str = this.str;\n    var c = str.getByte();\n\n    while ((0, _core_utils.isWhiteSpace)(c)) {\n      c = str.getByte();\n    }\n\n    if (c === EOF || c === TILDA_CHAR) {\n      this.eof = true;\n      return;\n    }\n\n    var bufferLength = this.bufferLength,\n        buffer;\n    var i;\n\n    if (c === Z_LOWER_CHAR) {\n      buffer = this.ensureBuffer(bufferLength + 4);\n\n      for (i = 0; i < 4; ++i) {\n        buffer[bufferLength + i] = 0;\n      }\n\n      this.bufferLength += 4;\n    } else {\n      var input = this.input;\n      input[0] = c;\n\n      for (i = 1; i < 5; ++i) {\n        c = str.getByte();\n\n        while ((0, _core_utils.isWhiteSpace)(c)) {\n          c = str.getByte();\n        }\n\n        input[i] = c;\n\n        if (c === EOF || c === TILDA_CHAR) {\n          break;\n        }\n      }\n\n      buffer = this.ensureBuffer(bufferLength + i - 1);\n      this.bufferLength += i - 1;\n\n      if (i < 5) {\n        for (; i < 5; ++i) {\n          input[i] = 0x21 + 84;\n        }\n\n        this.eof = true;\n      }\n\n      var t = 0;\n\n      for (i = 0; i < 5; ++i) {\n        t = t * 85 + (input[i] - 0x21);\n      }\n\n      for (i = 3; i >= 0; --i) {\n        buffer[bufferLength + i] = t & 0xff;\n        t >>= 8;\n      }\n    }\n  };\n\n  return Ascii85Stream;\n}();\n\nexports.Ascii85Stream = Ascii85Stream;\n\nvar AsciiHexStream = function AsciiHexStreamClosure() {\n  function AsciiHexStream(str, maybeLength) {\n    this.str = str;\n    this.dict = str.dict;\n    this.firstDigit = -1;\n\n    if (maybeLength) {\n      maybeLength = 0.5 * maybeLength;\n    }\n\n    DecodeStream.call(this, maybeLength);\n  }\n\n  AsciiHexStream.prototype = Object.create(DecodeStream.prototype);\n\n  AsciiHexStream.prototype.readBlock = function AsciiHexStream_readBlock() {\n    var UPSTREAM_BLOCK_SIZE = 8000;\n    var bytes = this.str.getBytes(UPSTREAM_BLOCK_SIZE);\n\n    if (!bytes.length) {\n      this.eof = true;\n      return;\n    }\n\n    var maxDecodeLength = bytes.length + 1 >> 1;\n    var buffer = this.ensureBuffer(this.bufferLength + maxDecodeLength);\n    var bufferLength = this.bufferLength;\n    var firstDigit = this.firstDigit;\n\n    for (var i = 0, ii = bytes.length; i < ii; i++) {\n      var ch = bytes[i],\n          digit;\n\n      if (ch >= 0x30 && ch <= 0x39) {\n        digit = ch & 0x0f;\n      } else if (ch >= 0x41 && ch <= 0x46 || ch >= 0x61 && ch <= 0x66) {\n        digit = (ch & 0x0f) + 9;\n      } else if (ch === 0x3e) {\n        this.eof = true;\n        break;\n      } else {\n        continue;\n      }\n\n      if (firstDigit < 0) {\n        firstDigit = digit;\n      } else {\n        buffer[bufferLength++] = firstDigit << 4 | digit;\n        firstDigit = -1;\n      }\n    }\n\n    if (firstDigit >= 0 && this.eof) {\n      buffer[bufferLength++] = firstDigit << 4;\n      firstDigit = -1;\n    }\n\n    this.firstDigit = firstDigit;\n    this.bufferLength = bufferLength;\n  };\n\n  return AsciiHexStream;\n}();\n\nexports.AsciiHexStream = AsciiHexStream;\n\nvar RunLengthStream = function RunLengthStreamClosure() {\n  function RunLengthStream(str, maybeLength) {\n    this.str = str;\n    this.dict = str.dict;\n    DecodeStream.call(this, maybeLength);\n  }\n\n  RunLengthStream.prototype = Object.create(DecodeStream.prototype);\n\n  RunLengthStream.prototype.readBlock = function RunLengthStream_readBlock() {\n    var repeatHeader = this.str.getBytes(2);\n\n    if (!repeatHeader || repeatHeader.length < 2 || repeatHeader[0] === 128) {\n      this.eof = true;\n      return;\n    }\n\n    var buffer;\n    var bufferLength = this.bufferLength;\n    var n = repeatHeader[0];\n\n    if (n < 128) {\n      buffer = this.ensureBuffer(bufferLength + n + 1);\n      buffer[bufferLength++] = repeatHeader[1];\n\n      if (n > 0) {\n        var source = this.str.getBytes(n);\n        buffer.set(source, bufferLength);\n        bufferLength += n;\n      }\n    } else {\n      n = 257 - n;\n      var b = repeatHeader[1];\n      buffer = this.ensureBuffer(bufferLength + n + 1);\n\n      for (var i = 0; i < n; i++) {\n        buffer[bufferLength++] = b;\n      }\n    }\n\n    this.bufferLength = bufferLength;\n  };\n\n  return RunLengthStream;\n}();\n\nexports.RunLengthStream = RunLengthStream;\n\nvar LZWStream = function LZWStreamClosure() {\n  function LZWStream(str, maybeLength, earlyChange) {\n    this.str = str;\n    this.dict = str.dict;\n    this.cachedData = 0;\n    this.bitsCached = 0;\n    var maxLzwDictionarySize = 4096;\n    var lzwState = {\n      earlyChange,\n      codeLength: 9,\n      nextCode: 258,\n      dictionaryValues: new Uint8Array(maxLzwDictionarySize),\n      dictionaryLengths: new Uint16Array(maxLzwDictionarySize),\n      dictionaryPrevCodes: new Uint16Array(maxLzwDictionarySize),\n      currentSequence: new Uint8Array(maxLzwDictionarySize),\n      currentSequenceLength: 0\n    };\n\n    for (var i = 0; i < 256; ++i) {\n      lzwState.dictionaryValues[i] = i;\n      lzwState.dictionaryLengths[i] = 1;\n    }\n\n    this.lzwState = lzwState;\n    DecodeStream.call(this, maybeLength);\n  }\n\n  LZWStream.prototype = Object.create(DecodeStream.prototype);\n\n  LZWStream.prototype.readBits = function LZWStream_readBits(n) {\n    var bitsCached = this.bitsCached;\n    var cachedData = this.cachedData;\n\n    while (bitsCached < n) {\n      var c = this.str.getByte();\n\n      if (c === -1) {\n        this.eof = true;\n        return null;\n      }\n\n      cachedData = cachedData << 8 | c;\n      bitsCached += 8;\n    }\n\n    this.bitsCached = bitsCached -= n;\n    this.cachedData = cachedData;\n    this.lastCode = null;\n    return cachedData >>> bitsCached & (1 << n) - 1;\n  };\n\n  LZWStream.prototype.readBlock = function LZWStream_readBlock() {\n    var blockSize = 512;\n    var estimatedDecodedSize = blockSize * 2,\n        decodedSizeDelta = blockSize;\n    var i, j, q;\n    var lzwState = this.lzwState;\n\n    if (!lzwState) {\n      return;\n    }\n\n    var earlyChange = lzwState.earlyChange;\n    var nextCode = lzwState.nextCode;\n    var dictionaryValues = lzwState.dictionaryValues;\n    var dictionaryLengths = lzwState.dictionaryLengths;\n    var dictionaryPrevCodes = lzwState.dictionaryPrevCodes;\n    var codeLength = lzwState.codeLength;\n    var prevCode = lzwState.prevCode;\n    var currentSequence = lzwState.currentSequence;\n    var currentSequenceLength = lzwState.currentSequenceLength;\n    var decodedLength = 0;\n    var currentBufferLength = this.bufferLength;\n    var buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\n\n    for (i = 0; i < blockSize; i++) {\n      var code = this.readBits(codeLength);\n      var hasPrev = currentSequenceLength > 0;\n\n      if (code < 256) {\n        currentSequence[0] = code;\n        currentSequenceLength = 1;\n      } else if (code >= 258) {\n        if (code < nextCode) {\n          currentSequenceLength = dictionaryLengths[code];\n\n          for (j = currentSequenceLength - 1, q = code; j >= 0; j--) {\n            currentSequence[j] = dictionaryValues[q];\n            q = dictionaryPrevCodes[q];\n          }\n        } else {\n          currentSequence[currentSequenceLength++] = currentSequence[0];\n        }\n      } else if (code === 256) {\n        codeLength = 9;\n        nextCode = 258;\n        currentSequenceLength = 0;\n        continue;\n      } else {\n        this.eof = true;\n        delete this.lzwState;\n        break;\n      }\n\n      if (hasPrev) {\n        dictionaryPrevCodes[nextCode] = prevCode;\n        dictionaryLengths[nextCode] = dictionaryLengths[prevCode] + 1;\n        dictionaryValues[nextCode] = currentSequence[0];\n        nextCode++;\n        codeLength = nextCode + earlyChange & nextCode + earlyChange - 1 ? codeLength : Math.min(Math.log(nextCode + earlyChange) / 0.6931471805599453 + 1, 12) | 0;\n      }\n\n      prevCode = code;\n      decodedLength += currentSequenceLength;\n\n      if (estimatedDecodedSize < decodedLength) {\n        do {\n          estimatedDecodedSize += decodedSizeDelta;\n        } while (estimatedDecodedSize < decodedLength);\n\n        buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\n      }\n\n      for (j = 0; j < currentSequenceLength; j++) {\n        buffer[currentBufferLength++] = currentSequence[j];\n      }\n    }\n\n    lzwState.nextCode = nextCode;\n    lzwState.codeLength = codeLength;\n    lzwState.prevCode = prevCode;\n    lzwState.currentSequenceLength = currentSequenceLength;\n    this.bufferLength = currentBufferLength;\n  };\n\n  return LZWStream;\n}();\n\nexports.LZWStream = LZWStream;\n\nvar NullStream = function NullStreamClosure() {\n  function NullStream() {\n    Stream.call(this, new Uint8Array(0));\n  }\n\n  NullStream.prototype = Stream.prototype;\n  return NullStream;\n}();\n\nexports.NullStream = NullStream;\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CCITTFaxStream = void 0;\n\nvar _primitives = __w_pdfjs_require__(4);\n\nvar _ccitt = __w_pdfjs_require__(13);\n\nvar _stream = __w_pdfjs_require__(11);\n\nvar CCITTFaxStream = function CCITTFaxStreamClosure() {\n  function CCITTFaxStream(str, maybeLength, params) {\n    this.str = str;\n    this.dict = str.dict;\n\n    if (!(0, _primitives.isDict)(params)) {\n      params = _primitives.Dict.empty;\n    }\n\n    const source = {\n      next() {\n        return str.getByte();\n      }\n\n    };\n    this.ccittFaxDecoder = new _ccitt.CCITTFaxDecoder(source, {\n      K: params.get(\"K\"),\n      EndOfLine: params.get(\"EndOfLine\"),\n      EncodedByteAlign: params.get(\"EncodedByteAlign\"),\n      Columns: params.get(\"Columns\"),\n      Rows: params.get(\"Rows\"),\n      EndOfBlock: params.get(\"EndOfBlock\"),\n      BlackIs1: params.get(\"BlackIs1\")\n    });\n\n    _stream.DecodeStream.call(this, maybeLength);\n  }\n\n  CCITTFaxStream.prototype = Object.create(_stream.DecodeStream.prototype);\n\n  CCITTFaxStream.prototype.readBlock = function () {\n    while (!this.eof) {\n      const c = this.ccittFaxDecoder.readNextChar();\n\n      if (c === -1) {\n        this.eof = true;\n        return;\n      }\n\n      this.ensureBuffer(this.bufferLength + 1);\n      this.buffer[this.bufferLength++] = c;\n    }\n  };\n\n  return CCITTFaxStream;\n}();\n\nexports.CCITTFaxStream = CCITTFaxStream;\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CCITTFaxDecoder = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nconst CCITTFaxDecoder = function CCITTFaxDecoder() {\n  const ccittEOL = -2;\n  const ccittEOF = -1;\n  const twoDimPass = 0;\n  const twoDimHoriz = 1;\n  const twoDimVert0 = 2;\n  const twoDimVertR1 = 3;\n  const twoDimVertL1 = 4;\n  const twoDimVertR2 = 5;\n  const twoDimVertL2 = 6;\n  const twoDimVertR3 = 7;\n  const twoDimVertL3 = 8;\n  const twoDimTable = [[-1, -1], [-1, -1], [7, twoDimVertL3], [7, twoDimVertR3], [6, twoDimVertL2], [6, twoDimVertL2], [6, twoDimVertR2], [6, twoDimVertR2], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [4, twoDimPass], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimHoriz], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertL1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [3, twoDimVertR1], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0], [1, twoDimVert0]];\n  const whiteTable1 = [[-1, -1], [12, ccittEOL], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [11, 1792], [11, 1792], [12, 1984], [12, 2048], [12, 2112], [12, 2176], [12, 2240], [12, 2304], [11, 1856], [11, 1856], [11, 1920], [11, 1920], [12, 2368], [12, 2432], [12, 2496], [12, 2560]];\n  const whiteTable2 = [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [8, 29], [8, 29], [8, 30], [8, 30], [8, 45], [8, 45], [8, 46], [8, 46], [7, 22], [7, 22], [7, 22], [7, 22], [7, 23], [7, 23], [7, 23], [7, 23], [8, 47], [8, 47], [8, 48], [8, 48], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [7, 20], [7, 20], [7, 20], [7, 20], [8, 33], [8, 33], [8, 34], [8, 34], [8, 35], [8, 35], [8, 36], [8, 36], [8, 37], [8, 37], [8, 38], [8, 38], [7, 19], [7, 19], [7, 19], [7, 19], [8, 31], [8, 31], [8, 32], [8, 32], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [8, 53], [8, 53], [8, 54], [8, 54], [7, 26], [7, 26], [7, 26], [7, 26], [8, 39], [8, 39], [8, 40], [8, 40], [8, 41], [8, 41], [8, 42], [8, 42], [8, 43], [8, 43], [8, 44], [8, 44], [7, 21], [7, 21], [7, 21], [7, 21], [7, 28], [7, 28], [7, 28], [7, 28], [8, 61], [8, 61], [8, 62], [8, 62], [8, 63], [8, 63], [8, 0], [8, 0], [8, 320], [8, 320], [8, 384], [8, 384], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [7, 27], [7, 27], [7, 27], [7, 27], [8, 59], [8, 59], [8, 60], [8, 60], [9, 1472], [9, 1536], [9, 1600], [9, 1728], [7, 18], [7, 18], [7, 18], [7, 18], [7, 24], [7, 24], [7, 24], [7, 24], [8, 49], [8, 49], [8, 50], [8, 50], [8, 51], [8, 51], [8, 52], [8, 52], [7, 25], [7, 25], [7, 25], [7, 25], [8, 55], [8, 55], [8, 56], [8, 56], [8, 57], [8, 57], [8, 58], [8, 58], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [8, 448], [8, 448], [8, 512], [8, 512], [9, 704], [9, 768], [8, 640], [8, 640], [8, 576], [8, 576], [9, 832], [9, 896], [9, 960], [9, 1024], [9, 1088], [9, 1152], [9, 1216], [9, 1280], [9, 1344], [9, 1408], [7, 256], [7, 256], [7, 256], [7, 256], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7]];\n  const blackTable1 = [[-1, -1], [-1, -1], [12, ccittEOL], [12, ccittEOL], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [11, 1792], [11, 1792], [11, 1792], [11, 1792], [12, 1984], [12, 1984], [12, 2048], [12, 2048], [12, 2112], [12, 2112], [12, 2176], [12, 2176], [12, 2240], [12, 2240], [12, 2304], [12, 2304], [11, 1856], [11, 1856], [11, 1856], [11, 1856], [11, 1920], [11, 1920], [11, 1920], [11, 1920], [12, 2368], [12, 2368], [12, 2432], [12, 2432], [12, 2496], [12, 2496], [12, 2560], [12, 2560], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [12, 52], [12, 52], [13, 640], [13, 704], [13, 768], [13, 832], [12, 55], [12, 55], [12, 56], [12, 56], [13, 1280], [13, 1344], [13, 1408], [13, 1472], [12, 59], [12, 59], [12, 60], [12, 60], [13, 1536], [13, 1600], [11, 24], [11, 24], [11, 24], [11, 24], [11, 25], [11, 25], [11, 25], [11, 25], [13, 1664], [13, 1728], [12, 320], [12, 320], [12, 384], [12, 384], [12, 448], [12, 448], [13, 512], [13, 576], [12, 53], [12, 53], [12, 54], [12, 54], [13, 896], [13, 960], [13, 1024], [13, 1088], [13, 1152], [13, 1216], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64]];\n  const blackTable2 = [[8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [11, 23], [11, 23], [12, 50], [12, 51], [12, 44], [12, 45], [12, 46], [12, 47], [12, 57], [12, 58], [12, 61], [12, 256], [10, 16], [10, 16], [10, 16], [10, 16], [10, 17], [10, 17], [10, 17], [10, 17], [12, 48], [12, 49], [12, 62], [12, 63], [12, 30], [12, 31], [12, 32], [12, 33], [12, 40], [12, 41], [11, 22], [11, 22], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [12, 128], [12, 192], [12, 26], [12, 27], [12, 28], [12, 29], [11, 19], [11, 19], [11, 20], [11, 20], [12, 34], [12, 35], [12, 36], [12, 37], [12, 38], [12, 39], [11, 21], [11, 21], [12, 42], [12, 43], [10, 0], [10, 0], [10, 0], [10, 0], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12]];\n  const blackTable3 = [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [6, 9], [6, 8], [5, 7], [5, 7], [4, 6], [4, 6], [4, 6], [4, 6], [4, 5], [4, 5], [4, 5], [4, 5], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2]];\n\n  function CCITTFaxDecoder(source, options = {}) {\n    if (!source || typeof source.next !== \"function\") {\n      throw new Error('CCITTFaxDecoder - invalid \"source\" parameter.');\n    }\n\n    this.source = source;\n    this.eof = false;\n    this.encoding = options[\"K\"] || 0;\n    this.eoline = options[\"EndOfLine\"] || false;\n    this.byteAlign = options[\"EncodedByteAlign\"] || false;\n    this.columns = options[\"Columns\"] || 1728;\n    this.rows = options[\"Rows\"] || 0;\n    let eoblock = options[\"EndOfBlock\"];\n\n    if (eoblock === null || eoblock === undefined) {\n      eoblock = true;\n    }\n\n    this.eoblock = eoblock;\n    this.black = options[\"BlackIs1\"] || false;\n    this.codingLine = new Uint32Array(this.columns + 1);\n    this.refLine = new Uint32Array(this.columns + 2);\n    this.codingLine[0] = this.columns;\n    this.codingPos = 0;\n    this.row = 0;\n    this.nextLine2D = this.encoding < 0;\n    this.inputBits = 0;\n    this.inputBuf = 0;\n    this.outputBits = 0;\n    this.rowsDone = false;\n    let code1;\n\n    while ((code1 = this._lookBits(12)) === 0) {\n      this._eatBits(1);\n    }\n\n    if (code1 === 1) {\n      this._eatBits(12);\n    }\n\n    if (this.encoding > 0) {\n      this.nextLine2D = !this._lookBits(1);\n\n      this._eatBits(1);\n    }\n  }\n\n  CCITTFaxDecoder.prototype = {\n    readNextChar() {\n      if (this.eof) {\n        return -1;\n      }\n\n      const refLine = this.refLine;\n      const codingLine = this.codingLine;\n      const columns = this.columns;\n      let refPos, blackPixels, bits, i;\n\n      if (this.outputBits === 0) {\n        if (this.rowsDone) {\n          this.eof = true;\n        }\n\n        if (this.eof) {\n          return -1;\n        }\n\n        this.err = false;\n        let code1, code2, code3;\n\n        if (this.nextLine2D) {\n          for (i = 0; codingLine[i] < columns; ++i) {\n            refLine[i] = codingLine[i];\n          }\n\n          refLine[i++] = columns;\n          refLine[i] = columns;\n          codingLine[0] = 0;\n          this.codingPos = 0;\n          refPos = 0;\n          blackPixels = 0;\n\n          while (codingLine[this.codingPos] < columns) {\n            code1 = this._getTwoDimCode();\n\n            switch (code1) {\n              case twoDimPass:\n                this._addPixels(refLine[refPos + 1], blackPixels);\n\n                if (refLine[refPos + 1] < columns) {\n                  refPos += 2;\n                }\n\n                break;\n\n              case twoDimHoriz:\n                code1 = code2 = 0;\n\n                if (blackPixels) {\n                  do {\n                    code1 += code3 = this._getBlackCode();\n                  } while (code3 >= 64);\n\n                  do {\n                    code2 += code3 = this._getWhiteCode();\n                  } while (code3 >= 64);\n                } else {\n                  do {\n                    code1 += code3 = this._getWhiteCode();\n                  } while (code3 >= 64);\n\n                  do {\n                    code2 += code3 = this._getBlackCode();\n                  } while (code3 >= 64);\n                }\n\n                this._addPixels(codingLine[this.codingPos] + code1, blackPixels);\n\n                if (codingLine[this.codingPos] < columns) {\n                  this._addPixels(codingLine[this.codingPos] + code2, blackPixels ^ 1);\n                }\n\n                while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                  refPos += 2;\n                }\n\n                break;\n\n              case twoDimVertR3:\n                this._addPixels(refLine[refPos] + 3, blackPixels);\n\n                blackPixels ^= 1;\n\n                if (codingLine[this.codingPos] < columns) {\n                  ++refPos;\n\n                  while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                    refPos += 2;\n                  }\n                }\n\n                break;\n\n              case twoDimVertR2:\n                this._addPixels(refLine[refPos] + 2, blackPixels);\n\n                blackPixels ^= 1;\n\n                if (codingLine[this.codingPos] < columns) {\n                  ++refPos;\n\n                  while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                    refPos += 2;\n                  }\n                }\n\n                break;\n\n              case twoDimVertR1:\n                this._addPixels(refLine[refPos] + 1, blackPixels);\n\n                blackPixels ^= 1;\n\n                if (codingLine[this.codingPos] < columns) {\n                  ++refPos;\n\n                  while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                    refPos += 2;\n                  }\n                }\n\n                break;\n\n              case twoDimVert0:\n                this._addPixels(refLine[refPos], blackPixels);\n\n                blackPixels ^= 1;\n\n                if (codingLine[this.codingPos] < columns) {\n                  ++refPos;\n\n                  while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                    refPos += 2;\n                  }\n                }\n\n                break;\n\n              case twoDimVertL3:\n                this._addPixelsNeg(refLine[refPos] - 3, blackPixels);\n\n                blackPixels ^= 1;\n\n                if (codingLine[this.codingPos] < columns) {\n                  if (refPos > 0) {\n                    --refPos;\n                  } else {\n                    ++refPos;\n                  }\n\n                  while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                    refPos += 2;\n                  }\n                }\n\n                break;\n\n              case twoDimVertL2:\n                this._addPixelsNeg(refLine[refPos] - 2, blackPixels);\n\n                blackPixels ^= 1;\n\n                if (codingLine[this.codingPos] < columns) {\n                  if (refPos > 0) {\n                    --refPos;\n                  } else {\n                    ++refPos;\n                  }\n\n                  while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                    refPos += 2;\n                  }\n                }\n\n                break;\n\n              case twoDimVertL1:\n                this._addPixelsNeg(refLine[refPos] - 1, blackPixels);\n\n                blackPixels ^= 1;\n\n                if (codingLine[this.codingPos] < columns) {\n                  if (refPos > 0) {\n                    --refPos;\n                  } else {\n                    ++refPos;\n                  }\n\n                  while (refLine[refPos] <= codingLine[this.codingPos] && refLine[refPos] < columns) {\n                    refPos += 2;\n                  }\n                }\n\n                break;\n\n              case ccittEOF:\n                this._addPixels(columns, 0);\n\n                this.eof = true;\n                break;\n\n              default:\n                (0, _util.info)(\"bad 2d code\");\n\n                this._addPixels(columns, 0);\n\n                this.err = true;\n            }\n          }\n        } else {\n          codingLine[0] = 0;\n          this.codingPos = 0;\n          blackPixels = 0;\n\n          while (codingLine[this.codingPos] < columns) {\n            code1 = 0;\n\n            if (blackPixels) {\n              do {\n                code1 += code3 = this._getBlackCode();\n              } while (code3 >= 64);\n            } else {\n              do {\n                code1 += code3 = this._getWhiteCode();\n              } while (code3 >= 64);\n            }\n\n            this._addPixels(codingLine[this.codingPos] + code1, blackPixels);\n\n            blackPixels ^= 1;\n          }\n        }\n\n        let gotEOL = false;\n\n        if (this.byteAlign) {\n          this.inputBits &= ~7;\n        }\n\n        if (!this.eoblock && this.row === this.rows - 1) {\n          this.rowsDone = true;\n        } else {\n          code1 = this._lookBits(12);\n\n          if (this.eoline) {\n            while (code1 !== ccittEOF && code1 !== 1) {\n              this._eatBits(1);\n\n              code1 = this._lookBits(12);\n            }\n          } else {\n            while (code1 === 0) {\n              this._eatBits(1);\n\n              code1 = this._lookBits(12);\n            }\n          }\n\n          if (code1 === 1) {\n            this._eatBits(12);\n\n            gotEOL = true;\n          } else if (code1 === ccittEOF) {\n            this.eof = true;\n          }\n        }\n\n        if (!this.eof && this.encoding > 0 && !this.rowsDone) {\n          this.nextLine2D = !this._lookBits(1);\n\n          this._eatBits(1);\n        }\n\n        if (this.eoblock && gotEOL && this.byteAlign) {\n          code1 = this._lookBits(12);\n\n          if (code1 === 1) {\n            this._eatBits(12);\n\n            if (this.encoding > 0) {\n              this._lookBits(1);\n\n              this._eatBits(1);\n            }\n\n            if (this.encoding >= 0) {\n              for (i = 0; i < 4; ++i) {\n                code1 = this._lookBits(12);\n\n                if (code1 !== 1) {\n                  (0, _util.info)(\"bad rtc code: \" + code1);\n                }\n\n                this._eatBits(12);\n\n                if (this.encoding > 0) {\n                  this._lookBits(1);\n\n                  this._eatBits(1);\n                }\n              }\n            }\n\n            this.eof = true;\n          }\n        } else if (this.err && this.eoline) {\n          while (true) {\n            code1 = this._lookBits(13);\n\n            if (code1 === ccittEOF) {\n              this.eof = true;\n              return -1;\n            }\n\n            if (code1 >> 1 === 1) {\n              break;\n            }\n\n            this._eatBits(1);\n          }\n\n          this._eatBits(12);\n\n          if (this.encoding > 0) {\n            this._eatBits(1);\n\n            this.nextLine2D = !(code1 & 1);\n          }\n        }\n\n        if (codingLine[0] > 0) {\n          this.outputBits = codingLine[this.codingPos = 0];\n        } else {\n          this.outputBits = codingLine[this.codingPos = 1];\n        }\n\n        this.row++;\n      }\n\n      let c;\n\n      if (this.outputBits >= 8) {\n        c = this.codingPos & 1 ? 0 : 0xff;\n        this.outputBits -= 8;\n\n        if (this.outputBits === 0 && codingLine[this.codingPos] < columns) {\n          this.codingPos++;\n          this.outputBits = codingLine[this.codingPos] - codingLine[this.codingPos - 1];\n        }\n      } else {\n        bits = 8;\n        c = 0;\n\n        do {\n          if (this.outputBits > bits) {\n            c <<= bits;\n\n            if (!(this.codingPos & 1)) {\n              c |= 0xff >> 8 - bits;\n            }\n\n            this.outputBits -= bits;\n            bits = 0;\n          } else {\n            c <<= this.outputBits;\n\n            if (!(this.codingPos & 1)) {\n              c |= 0xff >> 8 - this.outputBits;\n            }\n\n            bits -= this.outputBits;\n            this.outputBits = 0;\n\n            if (codingLine[this.codingPos] < columns) {\n              this.codingPos++;\n              this.outputBits = codingLine[this.codingPos] - codingLine[this.codingPos - 1];\n            } else if (bits > 0) {\n              c <<= bits;\n              bits = 0;\n            }\n          }\n        } while (bits);\n      }\n\n      if (this.black) {\n        c ^= 0xff;\n      }\n\n      return c;\n    },\n\n    _addPixels(a1, blackPixels) {\n      const codingLine = this.codingLine;\n      let codingPos = this.codingPos;\n\n      if (a1 > codingLine[codingPos]) {\n        if (a1 > this.columns) {\n          (0, _util.info)(\"row is wrong length\");\n          this.err = true;\n          a1 = this.columns;\n        }\n\n        if (codingPos & 1 ^ blackPixels) {\n          ++codingPos;\n        }\n\n        codingLine[codingPos] = a1;\n      }\n\n      this.codingPos = codingPos;\n    },\n\n    _addPixelsNeg(a1, blackPixels) {\n      const codingLine = this.codingLine;\n      let codingPos = this.codingPos;\n\n      if (a1 > codingLine[codingPos]) {\n        if (a1 > this.columns) {\n          (0, _util.info)(\"row is wrong length\");\n          this.err = true;\n          a1 = this.columns;\n        }\n\n        if (codingPos & 1 ^ blackPixels) {\n          ++codingPos;\n        }\n\n        codingLine[codingPos] = a1;\n      } else if (a1 < codingLine[codingPos]) {\n        if (a1 < 0) {\n          (0, _util.info)(\"invalid code\");\n          this.err = true;\n          a1 = 0;\n        }\n\n        while (codingPos > 0 && a1 < codingLine[codingPos - 1]) {\n          --codingPos;\n        }\n\n        codingLine[codingPos] = a1;\n      }\n\n      this.codingPos = codingPos;\n    },\n\n    _findTableCode(start, end, table, limit) {\n      const limitValue = limit || 0;\n\n      for (let i = start; i <= end; ++i) {\n        let code = this._lookBits(i);\n\n        if (code === ccittEOF) {\n          return [true, 1, false];\n        }\n\n        if (i < end) {\n          code <<= end - i;\n        }\n\n        if (!limitValue || code >= limitValue) {\n          const p = table[code - limitValue];\n\n          if (p[0] === i) {\n            this._eatBits(i);\n\n            return [true, p[1], true];\n          }\n        }\n      }\n\n      return [false, 0, false];\n    },\n\n    _getTwoDimCode() {\n      let code = 0;\n      let p;\n\n      if (this.eoblock) {\n        code = this._lookBits(7);\n        p = twoDimTable[code];\n\n        if (p && p[0] > 0) {\n          this._eatBits(p[0]);\n\n          return p[1];\n        }\n      } else {\n        const result = this._findTableCode(1, 7, twoDimTable);\n\n        if (result[0] && result[2]) {\n          return result[1];\n        }\n      }\n\n      (0, _util.info)(\"Bad two dim code\");\n      return ccittEOF;\n    },\n\n    _getWhiteCode() {\n      let code = 0;\n      let p;\n\n      if (this.eoblock) {\n        code = this._lookBits(12);\n\n        if (code === ccittEOF) {\n          return 1;\n        }\n\n        if (code >> 5 === 0) {\n          p = whiteTable1[code];\n        } else {\n          p = whiteTable2[code >> 3];\n        }\n\n        if (p[0] > 0) {\n          this._eatBits(p[0]);\n\n          return p[1];\n        }\n      } else {\n        let result = this._findTableCode(1, 9, whiteTable2);\n\n        if (result[0]) {\n          return result[1];\n        }\n\n        result = this._findTableCode(11, 12, whiteTable1);\n\n        if (result[0]) {\n          return result[1];\n        }\n      }\n\n      (0, _util.info)(\"bad white code\");\n\n      this._eatBits(1);\n\n      return 1;\n    },\n\n    _getBlackCode() {\n      let code, p;\n\n      if (this.eoblock) {\n        code = this._lookBits(13);\n\n        if (code === ccittEOF) {\n          return 1;\n        }\n\n        if (code >> 7 === 0) {\n          p = blackTable1[code];\n        } else if (code >> 9 === 0 && code >> 7 !== 0) {\n          p = blackTable2[(code >> 1) - 64];\n        } else {\n          p = blackTable3[code >> 7];\n        }\n\n        if (p[0] > 0) {\n          this._eatBits(p[0]);\n\n          return p[1];\n        }\n      } else {\n        let result = this._findTableCode(2, 6, blackTable3);\n\n        if (result[0]) {\n          return result[1];\n        }\n\n        result = this._findTableCode(7, 12, blackTable2, 64);\n\n        if (result[0]) {\n          return result[1];\n        }\n\n        result = this._findTableCode(10, 13, blackTable1);\n\n        if (result[0]) {\n          return result[1];\n        }\n      }\n\n      (0, _util.info)(\"bad black code\");\n\n      this._eatBits(1);\n\n      return 1;\n    },\n\n    _lookBits(n) {\n      let c;\n\n      while (this.inputBits < n) {\n        if ((c = this.source.next()) === -1) {\n          if (this.inputBits === 0) {\n            return ccittEOF;\n          }\n\n          return this.inputBuf << n - this.inputBits & 0xffff >> 16 - n;\n        }\n\n        this.inputBuf = this.inputBuf << 8 | c;\n        this.inputBits += 8;\n      }\n\n      return this.inputBuf >> this.inputBits - n & 0xffff >> 16 - n;\n    },\n\n    _eatBits(n) {\n      if ((this.inputBits -= n) < 0) {\n        this.inputBits = 0;\n      }\n    }\n\n  };\n  return CCITTFaxDecoder;\n}();\n\nexports.CCITTFaxDecoder = CCITTFaxDecoder;\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Jbig2Stream = void 0;\n\nvar _primitives = __w_pdfjs_require__(4);\n\nvar _stream = __w_pdfjs_require__(11);\n\nvar _jbig = __w_pdfjs_require__(15);\n\nvar _util = __w_pdfjs_require__(2);\n\nconst Jbig2Stream = function Jbig2StreamClosure() {\n  function Jbig2Stream(stream, maybeLength, dict, params) {\n    this.stream = stream;\n    this.maybeLength = maybeLength;\n    this.dict = dict;\n    this.params = params;\n\n    _stream.DecodeStream.call(this, maybeLength);\n  }\n\n  Jbig2Stream.prototype = Object.create(_stream.DecodeStream.prototype);\n  Object.defineProperty(Jbig2Stream.prototype, \"bytes\", {\n    get() {\n      return (0, _util.shadow)(this, \"bytes\", this.stream.getBytes(this.maybeLength));\n    },\n\n    configurable: true\n  });\n\n  Jbig2Stream.prototype.ensureBuffer = function (requested) {};\n\n  Jbig2Stream.prototype.readBlock = function () {\n    if (this.eof) {\n      return;\n    }\n\n    const jbig2Image = new _jbig.Jbig2Image();\n    const chunks = [];\n\n    if ((0, _primitives.isDict)(this.params)) {\n      const globalsStream = this.params.get(\"JBIG2Globals\");\n\n      if ((0, _primitives.isStream)(globalsStream)) {\n        const globals = globalsStream.getBytes();\n        chunks.push({\n          data: globals,\n          start: 0,\n          end: globals.length\n        });\n      }\n    }\n\n    chunks.push({\n      data: this.bytes,\n      start: 0,\n      end: this.bytes.length\n    });\n    const data = jbig2Image.parseChunks(chunks);\n    const dataLength = data.length;\n\n    for (let i = 0; i < dataLength; i++) {\n      data[i] ^= 0xff;\n    }\n\n    this.buffer = data;\n    this.bufferLength = dataLength;\n    this.eof = true;\n  };\n\n  return Jbig2Stream;\n}();\n\nexports.Jbig2Stream = Jbig2Stream;\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Jbig2Image = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _core_utils = __w_pdfjs_require__(7);\n\nvar _arithmetic_decoder = __w_pdfjs_require__(16);\n\nvar _ccitt = __w_pdfjs_require__(13);\n\nclass Jbig2Error extends _util.BaseException {\n  constructor(msg) {\n    super(`JBIG2 error: ${msg}`);\n  }\n\n}\n\nvar Jbig2Image = function Jbig2ImageClosure() {\n  function ContextCache() {}\n\n  ContextCache.prototype = {\n    getContexts(id) {\n      if (id in this) {\n        return this[id];\n      }\n\n      return this[id] = new Int8Array(1 << 16);\n    }\n\n  };\n\n  function DecodingContext(data, start, end) {\n    this.data = data;\n    this.start = start;\n    this.end = end;\n  }\n\n  DecodingContext.prototype = {\n    get decoder() {\n      var decoder = new _arithmetic_decoder.ArithmeticDecoder(this.data, this.start, this.end);\n      return (0, _util.shadow)(this, \"decoder\", decoder);\n    },\n\n    get contextCache() {\n      var cache = new ContextCache();\n      return (0, _util.shadow)(this, \"contextCache\", cache);\n    }\n\n  };\n\n  function decodeInteger(contextCache, procedure, decoder) {\n    var contexts = contextCache.getContexts(procedure);\n    var prev = 1;\n\n    function readBits(length) {\n      var v = 0;\n\n      for (var i = 0; i < length; i++) {\n        var bit = decoder.readBit(contexts, prev);\n        prev = prev < 256 ? prev << 1 | bit : (prev << 1 | bit) & 511 | 256;\n        v = v << 1 | bit;\n      }\n\n      return v >>> 0;\n    }\n\n    var sign = readBits(1);\n    var value = readBits(1) ? readBits(1) ? readBits(1) ? readBits(1) ? readBits(1) ? readBits(32) + 4436 : readBits(12) + 340 : readBits(8) + 84 : readBits(6) + 20 : readBits(4) + 4 : readBits(2);\n\n    if (sign === 0) {\n      return value;\n    } else if (value > 0) {\n      return -value;\n    }\n\n    return null;\n  }\n\n  function decodeIAID(contextCache, decoder, codeLength) {\n    var contexts = contextCache.getContexts(\"IAID\");\n    var prev = 1;\n\n    for (var i = 0; i < codeLength; i++) {\n      var bit = decoder.readBit(contexts, prev);\n      prev = prev << 1 | bit;\n    }\n\n    if (codeLength < 31) {\n      return prev & (1 << codeLength) - 1;\n    }\n\n    return prev & 0x7fffffff;\n  }\n\n  var SegmentTypes = [\"SymbolDictionary\", null, null, null, \"IntermediateTextRegion\", null, \"ImmediateTextRegion\", \"ImmediateLosslessTextRegion\", null, null, null, null, null, null, null, null, \"PatternDictionary\", null, null, null, \"IntermediateHalftoneRegion\", null, \"ImmediateHalftoneRegion\", \"ImmediateLosslessHalftoneRegion\", null, null, null, null, null, null, null, null, null, null, null, null, \"IntermediateGenericRegion\", null, \"ImmediateGenericRegion\", \"ImmediateLosslessGenericRegion\", \"IntermediateGenericRefinementRegion\", null, \"ImmediateGenericRefinementRegion\", \"ImmediateLosslessGenericRefinementRegion\", null, null, null, null, \"PageInformation\", \"EndOfPage\", \"EndOfStripe\", \"EndOfFile\", \"Profiles\", \"Tables\", null, null, null, null, null, null, null, null, \"Extension\"];\n  var CodingTemplates = [[{\n    x: -1,\n    y: -2\n  }, {\n    x: 0,\n    y: -2\n  }, {\n    x: 1,\n    y: -2\n  }, {\n    x: -2,\n    y: -1\n  }, {\n    x: -1,\n    y: -1\n  }, {\n    x: 0,\n    y: -1\n  }, {\n    x: 1,\n    y: -1\n  }, {\n    x: 2,\n    y: -1\n  }, {\n    x: -4,\n    y: 0\n  }, {\n    x: -3,\n    y: 0\n  }, {\n    x: -2,\n    y: 0\n  }, {\n    x: -1,\n    y: 0\n  }], [{\n    x: -1,\n    y: -2\n  }, {\n    x: 0,\n    y: -2\n  }, {\n    x: 1,\n    y: -2\n  }, {\n    x: 2,\n    y: -2\n  }, {\n    x: -2,\n    y: -1\n  }, {\n    x: -1,\n    y: -1\n  }, {\n    x: 0,\n    y: -1\n  }, {\n    x: 1,\n    y: -1\n  }, {\n    x: 2,\n    y: -1\n  }, {\n    x: -3,\n    y: 0\n  }, {\n    x: -2,\n    y: 0\n  }, {\n    x: -1,\n    y: 0\n  }], [{\n    x: -1,\n    y: -2\n  }, {\n    x: 0,\n    y: -2\n  }, {\n    x: 1,\n    y: -2\n  }, {\n    x: -2,\n    y: -1\n  }, {\n    x: -1,\n    y: -1\n  }, {\n    x: 0,\n    y: -1\n  }, {\n    x: 1,\n    y: -1\n  }, {\n    x: -2,\n    y: 0\n  }, {\n    x: -1,\n    y: 0\n  }], [{\n    x: -3,\n    y: -1\n  }, {\n    x: -2,\n    y: -1\n  }, {\n    x: -1,\n    y: -1\n  }, {\n    x: 0,\n    y: -1\n  }, {\n    x: 1,\n    y: -1\n  }, {\n    x: -4,\n    y: 0\n  }, {\n    x: -3,\n    y: 0\n  }, {\n    x: -2,\n    y: 0\n  }, {\n    x: -1,\n    y: 0\n  }]];\n  var RefinementTemplates = [{\n    coding: [{\n      x: 0,\n      y: -1\n    }, {\n      x: 1,\n      y: -1\n    }, {\n      x: -1,\n      y: 0\n    }],\n    reference: [{\n      x: 0,\n      y: -1\n    }, {\n      x: 1,\n      y: -1\n    }, {\n      x: -1,\n      y: 0\n    }, {\n      x: 0,\n      y: 0\n    }, {\n      x: 1,\n      y: 0\n    }, {\n      x: -1,\n      y: 1\n    }, {\n      x: 0,\n      y: 1\n    }, {\n      x: 1,\n      y: 1\n    }]\n  }, {\n    coding: [{\n      x: -1,\n      y: -1\n    }, {\n      x: 0,\n      y: -1\n    }, {\n      x: 1,\n      y: -1\n    }, {\n      x: -1,\n      y: 0\n    }],\n    reference: [{\n      x: 0,\n      y: -1\n    }, {\n      x: -1,\n      y: 0\n    }, {\n      x: 0,\n      y: 0\n    }, {\n      x: 1,\n      y: 0\n    }, {\n      x: 0,\n      y: 1\n    }, {\n      x: 1,\n      y: 1\n    }]\n  }];\n  var ReusedContexts = [0x9b25, 0x0795, 0x00e5, 0x0195];\n  var RefinementReusedContexts = [0x0020, 0x0008];\n\n  function decodeBitmapTemplate0(width, height, decodingContext) {\n    var decoder = decodingContext.decoder;\n    var contexts = decodingContext.contextCache.getContexts(\"GB\");\n    var contextLabel,\n        i,\n        j,\n        pixel,\n        row,\n        row1,\n        row2,\n        bitmap = [];\n    var OLD_PIXEL_MASK = 0x7bf7;\n\n    for (i = 0; i < height; i++) {\n      row = bitmap[i] = new Uint8Array(width);\n      row1 = i < 1 ? row : bitmap[i - 1];\n      row2 = i < 2 ? row : bitmap[i - 2];\n      contextLabel = row2[0] << 13 | row2[1] << 12 | row2[2] << 11 | row1[0] << 7 | row1[1] << 6 | row1[2] << 5 | row1[3] << 4;\n\n      for (j = 0; j < width; j++) {\n        row[j] = pixel = decoder.readBit(contexts, contextLabel);\n        contextLabel = (contextLabel & OLD_PIXEL_MASK) << 1 | (j + 3 < width ? row2[j + 3] << 11 : 0) | (j + 4 < width ? row1[j + 4] << 4 : 0) | pixel;\n      }\n    }\n\n    return bitmap;\n  }\n\n  function decodeBitmap(mmr, width, height, templateIndex, prediction, skip, at, decodingContext) {\n    if (mmr) {\n      const input = new Reader(decodingContext.data, decodingContext.start, decodingContext.end);\n      return decodeMMRBitmap(input, width, height, false);\n    }\n\n    if (templateIndex === 0 && !skip && !prediction && at.length === 4 && at[0].x === 3 && at[0].y === -1 && at[1].x === -3 && at[1].y === -1 && at[2].x === 2 && at[2].y === -2 && at[3].x === -2 && at[3].y === -2) {\n      return decodeBitmapTemplate0(width, height, decodingContext);\n    }\n\n    var useskip = !!skip;\n    var template = CodingTemplates[templateIndex].concat(at);\n    template.sort(function (a, b) {\n      return a.y - b.y || a.x - b.x;\n    });\n    var templateLength = template.length;\n    var templateX = new Int8Array(templateLength);\n    var templateY = new Int8Array(templateLength);\n    var changingTemplateEntries = [];\n    var reuseMask = 0,\n        minX = 0,\n        maxX = 0,\n        minY = 0;\n    var c, k;\n\n    for (k = 0; k < templateLength; k++) {\n      templateX[k] = template[k].x;\n      templateY[k] = template[k].y;\n      minX = Math.min(minX, template[k].x);\n      maxX = Math.max(maxX, template[k].x);\n      minY = Math.min(minY, template[k].y);\n\n      if (k < templateLength - 1 && template[k].y === template[k + 1].y && template[k].x === template[k + 1].x - 1) {\n        reuseMask |= 1 << templateLength - 1 - k;\n      } else {\n        changingTemplateEntries.push(k);\n      }\n    }\n\n    var changingEntriesLength = changingTemplateEntries.length;\n    var changingTemplateX = new Int8Array(changingEntriesLength);\n    var changingTemplateY = new Int8Array(changingEntriesLength);\n    var changingTemplateBit = new Uint16Array(changingEntriesLength);\n\n    for (c = 0; c < changingEntriesLength; c++) {\n      k = changingTemplateEntries[c];\n      changingTemplateX[c] = template[k].x;\n      changingTemplateY[c] = template[k].y;\n      changingTemplateBit[c] = 1 << templateLength - 1 - k;\n    }\n\n    var sbb_left = -minX;\n    var sbb_top = -minY;\n    var sbb_right = width - maxX;\n    var pseudoPixelContext = ReusedContexts[templateIndex];\n    var row = new Uint8Array(width);\n    var bitmap = [];\n    var decoder = decodingContext.decoder;\n    var contexts = decodingContext.contextCache.getContexts(\"GB\");\n    var ltp = 0,\n        j,\n        i0,\n        j0,\n        contextLabel = 0,\n        bit,\n        shift;\n\n    for (var i = 0; i < height; i++) {\n      if (prediction) {\n        var sltp = decoder.readBit(contexts, pseudoPixelContext);\n        ltp ^= sltp;\n\n        if (ltp) {\n          bitmap.push(row);\n          continue;\n        }\n      }\n\n      row = new Uint8Array(row);\n      bitmap.push(row);\n\n      for (j = 0; j < width; j++) {\n        if (useskip && skip[i][j]) {\n          row[j] = 0;\n          continue;\n        }\n\n        if (j >= sbb_left && j < sbb_right && i >= sbb_top) {\n          contextLabel = contextLabel << 1 & reuseMask;\n\n          for (k = 0; k < changingEntriesLength; k++) {\n            i0 = i + changingTemplateY[k];\n            j0 = j + changingTemplateX[k];\n            bit = bitmap[i0][j0];\n\n            if (bit) {\n              bit = changingTemplateBit[k];\n              contextLabel |= bit;\n            }\n          }\n        } else {\n          contextLabel = 0;\n          shift = templateLength - 1;\n\n          for (k = 0; k < templateLength; k++, shift--) {\n            j0 = j + templateX[k];\n\n            if (j0 >= 0 && j0 < width) {\n              i0 = i + templateY[k];\n\n              if (i0 >= 0) {\n                bit = bitmap[i0][j0];\n\n                if (bit) {\n                  contextLabel |= bit << shift;\n                }\n              }\n            }\n          }\n        }\n\n        var pixel = decoder.readBit(contexts, contextLabel);\n        row[j] = pixel;\n      }\n    }\n\n    return bitmap;\n  }\n\n  function decodeRefinement(width, height, templateIndex, referenceBitmap, offsetX, offsetY, prediction, at, decodingContext) {\n    var codingTemplate = RefinementTemplates[templateIndex].coding;\n\n    if (templateIndex === 0) {\n      codingTemplate = codingTemplate.concat([at[0]]);\n    }\n\n    var codingTemplateLength = codingTemplate.length;\n    var codingTemplateX = new Int32Array(codingTemplateLength);\n    var codingTemplateY = new Int32Array(codingTemplateLength);\n    var k;\n\n    for (k = 0; k < codingTemplateLength; k++) {\n      codingTemplateX[k] = codingTemplate[k].x;\n      codingTemplateY[k] = codingTemplate[k].y;\n    }\n\n    var referenceTemplate = RefinementTemplates[templateIndex].reference;\n\n    if (templateIndex === 0) {\n      referenceTemplate = referenceTemplate.concat([at[1]]);\n    }\n\n    var referenceTemplateLength = referenceTemplate.length;\n    var referenceTemplateX = new Int32Array(referenceTemplateLength);\n    var referenceTemplateY = new Int32Array(referenceTemplateLength);\n\n    for (k = 0; k < referenceTemplateLength; k++) {\n      referenceTemplateX[k] = referenceTemplate[k].x;\n      referenceTemplateY[k] = referenceTemplate[k].y;\n    }\n\n    var referenceWidth = referenceBitmap[0].length;\n    var referenceHeight = referenceBitmap.length;\n    var pseudoPixelContext = RefinementReusedContexts[templateIndex];\n    var bitmap = [];\n    var decoder = decodingContext.decoder;\n    var contexts = decodingContext.contextCache.getContexts(\"GR\");\n    var ltp = 0;\n\n    for (var i = 0; i < height; i++) {\n      if (prediction) {\n        var sltp = decoder.readBit(contexts, pseudoPixelContext);\n        ltp ^= sltp;\n\n        if (ltp) {\n          throw new Jbig2Error(\"prediction is not supported\");\n        }\n      }\n\n      var row = new Uint8Array(width);\n      bitmap.push(row);\n\n      for (var j = 0; j < width; j++) {\n        var i0, j0;\n        var contextLabel = 0;\n\n        for (k = 0; k < codingTemplateLength; k++) {\n          i0 = i + codingTemplateY[k];\n          j0 = j + codingTemplateX[k];\n\n          if (i0 < 0 || j0 < 0 || j0 >= width) {\n            contextLabel <<= 1;\n          } else {\n            contextLabel = contextLabel << 1 | bitmap[i0][j0];\n          }\n        }\n\n        for (k = 0; k < referenceTemplateLength; k++) {\n          i0 = i + referenceTemplateY[k] - offsetY;\n          j0 = j + referenceTemplateX[k] - offsetX;\n\n          if (i0 < 0 || i0 >= referenceHeight || j0 < 0 || j0 >= referenceWidth) {\n            contextLabel <<= 1;\n          } else {\n            contextLabel = contextLabel << 1 | referenceBitmap[i0][j0];\n          }\n        }\n\n        var pixel = decoder.readBit(contexts, contextLabel);\n        row[j] = pixel;\n      }\n    }\n\n    return bitmap;\n  }\n\n  function decodeSymbolDictionary(huffman, refinement, symbols, numberOfNewSymbols, numberOfExportedSymbols, huffmanTables, templateIndex, at, refinementTemplateIndex, refinementAt, decodingContext, huffmanInput) {\n    if (huffman && refinement) {\n      throw new Jbig2Error(\"symbol refinement with Huffman is not supported\");\n    }\n\n    var newSymbols = [];\n    var currentHeight = 0;\n    var symbolCodeLength = (0, _core_utils.log2)(symbols.length + numberOfNewSymbols);\n    var decoder = decodingContext.decoder;\n    var contextCache = decodingContext.contextCache;\n    let tableB1, symbolWidths;\n\n    if (huffman) {\n      tableB1 = getStandardTable(1);\n      symbolWidths = [];\n      symbolCodeLength = Math.max(symbolCodeLength, 1);\n    }\n\n    while (newSymbols.length < numberOfNewSymbols) {\n      var deltaHeight = huffman ? huffmanTables.tableDeltaHeight.decode(huffmanInput) : decodeInteger(contextCache, \"IADH\", decoder);\n      currentHeight += deltaHeight;\n      let currentWidth = 0,\n          totalWidth = 0;\n      const firstSymbol = huffman ? symbolWidths.length : 0;\n\n      while (true) {\n        var deltaWidth = huffman ? huffmanTables.tableDeltaWidth.decode(huffmanInput) : decodeInteger(contextCache, \"IADW\", decoder);\n\n        if (deltaWidth === null) {\n          break;\n        }\n\n        currentWidth += deltaWidth;\n        totalWidth += currentWidth;\n        var bitmap;\n\n        if (refinement) {\n          var numberOfInstances = decodeInteger(contextCache, \"IAAI\", decoder);\n\n          if (numberOfInstances > 1) {\n            bitmap = decodeTextRegion(huffman, refinement, currentWidth, currentHeight, 0, numberOfInstances, 1, symbols.concat(newSymbols), symbolCodeLength, 0, 0, 1, 0, huffmanTables, refinementTemplateIndex, refinementAt, decodingContext, 0, huffmanInput);\n          } else {\n            var symbolId = decodeIAID(contextCache, decoder, symbolCodeLength);\n            var rdx = decodeInteger(contextCache, \"IARDX\", decoder);\n            var rdy = decodeInteger(contextCache, \"IARDY\", decoder);\n            var symbol = symbolId < symbols.length ? symbols[symbolId] : newSymbols[symbolId - symbols.length];\n            bitmap = decodeRefinement(currentWidth, currentHeight, refinementTemplateIndex, symbol, rdx, rdy, false, refinementAt, decodingContext);\n          }\n\n          newSymbols.push(bitmap);\n        } else if (huffman) {\n          symbolWidths.push(currentWidth);\n        } else {\n          bitmap = decodeBitmap(false, currentWidth, currentHeight, templateIndex, false, null, at, decodingContext);\n          newSymbols.push(bitmap);\n        }\n      }\n\n      if (huffman && !refinement) {\n        const bitmapSize = huffmanTables.tableBitmapSize.decode(huffmanInput);\n        huffmanInput.byteAlign();\n        let collectiveBitmap;\n\n        if (bitmapSize === 0) {\n          collectiveBitmap = readUncompressedBitmap(huffmanInput, totalWidth, currentHeight);\n        } else {\n          const originalEnd = huffmanInput.end;\n          const bitmapEnd = huffmanInput.position + bitmapSize;\n          huffmanInput.end = bitmapEnd;\n          collectiveBitmap = decodeMMRBitmap(huffmanInput, totalWidth, currentHeight, false);\n          huffmanInput.end = originalEnd;\n          huffmanInput.position = bitmapEnd;\n        }\n\n        const numberOfSymbolsDecoded = symbolWidths.length;\n\n        if (firstSymbol === numberOfSymbolsDecoded - 1) {\n          newSymbols.push(collectiveBitmap);\n        } else {\n          let i,\n              y,\n              xMin = 0,\n              xMax,\n              bitmapWidth,\n              symbolBitmap;\n\n          for (i = firstSymbol; i < numberOfSymbolsDecoded; i++) {\n            bitmapWidth = symbolWidths[i];\n            xMax = xMin + bitmapWidth;\n            symbolBitmap = [];\n\n            for (y = 0; y < currentHeight; y++) {\n              symbolBitmap.push(collectiveBitmap[y].subarray(xMin, xMax));\n            }\n\n            newSymbols.push(symbolBitmap);\n            xMin = xMax;\n          }\n        }\n      }\n    }\n\n    var exportedSymbols = [];\n    var flags = [],\n        currentFlag = false;\n    var totalSymbolsLength = symbols.length + numberOfNewSymbols;\n\n    while (flags.length < totalSymbolsLength) {\n      var runLength = huffman ? tableB1.decode(huffmanInput) : decodeInteger(contextCache, \"IAEX\", decoder);\n\n      while (runLength--) {\n        flags.push(currentFlag);\n      }\n\n      currentFlag = !currentFlag;\n    }\n\n    for (var i = 0, ii = symbols.length; i < ii; i++) {\n      if (flags[i]) {\n        exportedSymbols.push(symbols[i]);\n      }\n    }\n\n    for (var j = 0; j < numberOfNewSymbols; i++, j++) {\n      if (flags[i]) {\n        exportedSymbols.push(newSymbols[j]);\n      }\n    }\n\n    return exportedSymbols;\n  }\n\n  function decodeTextRegion(huffman, refinement, width, height, defaultPixelValue, numberOfSymbolInstances, stripSize, inputSymbols, symbolCodeLength, transposed, dsOffset, referenceCorner, combinationOperator, huffmanTables, refinementTemplateIndex, refinementAt, decodingContext, logStripSize, huffmanInput) {\n    if (huffman && refinement) {\n      throw new Jbig2Error(\"refinement with Huffman is not supported\");\n    }\n\n    var bitmap = [];\n    var i, row;\n\n    for (i = 0; i < height; i++) {\n      row = new Uint8Array(width);\n\n      if (defaultPixelValue) {\n        for (var j = 0; j < width; j++) {\n          row[j] = defaultPixelValue;\n        }\n      }\n\n      bitmap.push(row);\n    }\n\n    var decoder = decodingContext.decoder;\n    var contextCache = decodingContext.contextCache;\n    var stripT = huffman ? -huffmanTables.tableDeltaT.decode(huffmanInput) : -decodeInteger(contextCache, \"IADT\", decoder);\n    var firstS = 0;\n    i = 0;\n\n    while (i < numberOfSymbolInstances) {\n      var deltaT = huffman ? huffmanTables.tableDeltaT.decode(huffmanInput) : decodeInteger(contextCache, \"IADT\", decoder);\n      stripT += deltaT;\n      var deltaFirstS = huffman ? huffmanTables.tableFirstS.decode(huffmanInput) : decodeInteger(contextCache, \"IAFS\", decoder);\n      firstS += deltaFirstS;\n      var currentS = firstS;\n\n      do {\n        let currentT = 0;\n\n        if (stripSize > 1) {\n          currentT = huffman ? huffmanInput.readBits(logStripSize) : decodeInteger(contextCache, \"IAIT\", decoder);\n        }\n\n        var t = stripSize * stripT + currentT;\n        var symbolId = huffman ? huffmanTables.symbolIDTable.decode(huffmanInput) : decodeIAID(contextCache, decoder, symbolCodeLength);\n        var applyRefinement = refinement && (huffman ? huffmanInput.readBit() : decodeInteger(contextCache, \"IARI\", decoder));\n        var symbolBitmap = inputSymbols[symbolId];\n        var symbolWidth = symbolBitmap[0].length;\n        var symbolHeight = symbolBitmap.length;\n\n        if (applyRefinement) {\n          var rdw = decodeInteger(contextCache, \"IARDW\", decoder);\n          var rdh = decodeInteger(contextCache, \"IARDH\", decoder);\n          var rdx = decodeInteger(contextCache, \"IARDX\", decoder);\n          var rdy = decodeInteger(contextCache, \"IARDY\", decoder);\n          symbolWidth += rdw;\n          symbolHeight += rdh;\n          symbolBitmap = decodeRefinement(symbolWidth, symbolHeight, refinementTemplateIndex, symbolBitmap, (rdw >> 1) + rdx, (rdh >> 1) + rdy, false, refinementAt, decodingContext);\n        }\n\n        var offsetT = t - (referenceCorner & 1 ? 0 : symbolHeight - 1);\n        var offsetS = currentS - (referenceCorner & 2 ? symbolWidth - 1 : 0);\n        var s2, t2, symbolRow;\n\n        if (transposed) {\n          for (s2 = 0; s2 < symbolHeight; s2++) {\n            row = bitmap[offsetS + s2];\n\n            if (!row) {\n              continue;\n            }\n\n            symbolRow = symbolBitmap[s2];\n            var maxWidth = Math.min(width - offsetT, symbolWidth);\n\n            switch (combinationOperator) {\n              case 0:\n                for (t2 = 0; t2 < maxWidth; t2++) {\n                  row[offsetT + t2] |= symbolRow[t2];\n                }\n\n                break;\n\n              case 2:\n                for (t2 = 0; t2 < maxWidth; t2++) {\n                  row[offsetT + t2] ^= symbolRow[t2];\n                }\n\n                break;\n\n              default:\n                throw new Jbig2Error(`operator ${combinationOperator} is not supported`);\n            }\n          }\n\n          currentS += symbolHeight - 1;\n        } else {\n          for (t2 = 0; t2 < symbolHeight; t2++) {\n            row = bitmap[offsetT + t2];\n\n            if (!row) {\n              continue;\n            }\n\n            symbolRow = symbolBitmap[t2];\n\n            switch (combinationOperator) {\n              case 0:\n                for (s2 = 0; s2 < symbolWidth; s2++) {\n                  row[offsetS + s2] |= symbolRow[s2];\n                }\n\n                break;\n\n              case 2:\n                for (s2 = 0; s2 < symbolWidth; s2++) {\n                  row[offsetS + s2] ^= symbolRow[s2];\n                }\n\n                break;\n\n              default:\n                throw new Jbig2Error(`operator ${combinationOperator} is not supported`);\n            }\n          }\n\n          currentS += symbolWidth - 1;\n        }\n\n        i++;\n        var deltaS = huffman ? huffmanTables.tableDeltaS.decode(huffmanInput) : decodeInteger(contextCache, \"IADS\", decoder);\n\n        if (deltaS === null) {\n          break;\n        }\n\n        currentS += deltaS + dsOffset;\n      } while (true);\n    }\n\n    return bitmap;\n  }\n\n  function decodePatternDictionary(mmr, patternWidth, patternHeight, maxPatternIndex, template, decodingContext) {\n    const at = [];\n\n    if (!mmr) {\n      at.push({\n        x: -patternWidth,\n        y: 0\n      });\n\n      if (template === 0) {\n        at.push({\n          x: -3,\n          y: -1\n        });\n        at.push({\n          x: 2,\n          y: -2\n        });\n        at.push({\n          x: -2,\n          y: -2\n        });\n      }\n    }\n\n    const collectiveWidth = (maxPatternIndex + 1) * patternWidth;\n    const collectiveBitmap = decodeBitmap(mmr, collectiveWidth, patternHeight, template, false, null, at, decodingContext);\n    const patterns = [];\n\n    for (let i = 0; i <= maxPatternIndex; i++) {\n      const patternBitmap = [];\n      const xMin = patternWidth * i;\n      const xMax = xMin + patternWidth;\n\n      for (let y = 0; y < patternHeight; y++) {\n        patternBitmap.push(collectiveBitmap[y].subarray(xMin, xMax));\n      }\n\n      patterns.push(patternBitmap);\n    }\n\n    return patterns;\n  }\n\n  function decodeHalftoneRegion(mmr, patterns, template, regionWidth, regionHeight, defaultPixelValue, enableSkip, combinationOperator, gridWidth, gridHeight, gridOffsetX, gridOffsetY, gridVectorX, gridVectorY, decodingContext) {\n    const skip = null;\n\n    if (enableSkip) {\n      throw new Jbig2Error(\"skip is not supported\");\n    }\n\n    if (combinationOperator !== 0) {\n      throw new Jbig2Error(\"operator \" + combinationOperator + \" is not supported in halftone region\");\n    }\n\n    const regionBitmap = [];\n    let i, j, row;\n\n    for (i = 0; i < regionHeight; i++) {\n      row = new Uint8Array(regionWidth);\n\n      if (defaultPixelValue) {\n        for (j = 0; j < regionWidth; j++) {\n          row[j] = defaultPixelValue;\n        }\n      }\n\n      regionBitmap.push(row);\n    }\n\n    const numberOfPatterns = patterns.length;\n    const pattern0 = patterns[0];\n    const patternWidth = pattern0[0].length,\n          patternHeight = pattern0.length;\n    const bitsPerValue = (0, _core_utils.log2)(numberOfPatterns);\n    const at = [];\n\n    if (!mmr) {\n      at.push({\n        x: template <= 1 ? 3 : 2,\n        y: -1\n      });\n\n      if (template === 0) {\n        at.push({\n          x: -3,\n          y: -1\n        });\n        at.push({\n          x: 2,\n          y: -2\n        });\n        at.push({\n          x: -2,\n          y: -2\n        });\n      }\n    }\n\n    const grayScaleBitPlanes = [];\n    let mmrInput, bitmap;\n\n    if (mmr) {\n      mmrInput = new Reader(decodingContext.data, decodingContext.start, decodingContext.end);\n    }\n\n    for (i = bitsPerValue - 1; i >= 0; i--) {\n      if (mmr) {\n        bitmap = decodeMMRBitmap(mmrInput, gridWidth, gridHeight, true);\n      } else {\n        bitmap = decodeBitmap(false, gridWidth, gridHeight, template, false, skip, at, decodingContext);\n      }\n\n      grayScaleBitPlanes[i] = bitmap;\n    }\n\n    let mg, ng, bit, patternIndex, patternBitmap, x, y, patternRow, regionRow;\n\n    for (mg = 0; mg < gridHeight; mg++) {\n      for (ng = 0; ng < gridWidth; ng++) {\n        bit = 0;\n        patternIndex = 0;\n\n        for (j = bitsPerValue - 1; j >= 0; j--) {\n          bit = grayScaleBitPlanes[j][mg][ng] ^ bit;\n          patternIndex |= bit << j;\n        }\n\n        patternBitmap = patterns[patternIndex];\n        x = gridOffsetX + mg * gridVectorY + ng * gridVectorX >> 8;\n        y = gridOffsetY + mg * gridVectorX - ng * gridVectorY >> 8;\n\n        if (x >= 0 && x + patternWidth <= regionWidth && y >= 0 && y + patternHeight <= regionHeight) {\n          for (i = 0; i < patternHeight; i++) {\n            regionRow = regionBitmap[y + i];\n            patternRow = patternBitmap[i];\n\n            for (j = 0; j < patternWidth; j++) {\n              regionRow[x + j] |= patternRow[j];\n            }\n          }\n        } else {\n          let regionX, regionY;\n\n          for (i = 0; i < patternHeight; i++) {\n            regionY = y + i;\n\n            if (regionY < 0 || regionY >= regionHeight) {\n              continue;\n            }\n\n            regionRow = regionBitmap[regionY];\n            patternRow = patternBitmap[i];\n\n            for (j = 0; j < patternWidth; j++) {\n              regionX = x + j;\n\n              if (regionX >= 0 && regionX < regionWidth) {\n                regionRow[regionX] |= patternRow[j];\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return regionBitmap;\n  }\n\n  function readSegmentHeader(data, start) {\n    var segmentHeader = {};\n    segmentHeader.number = (0, _core_utils.readUint32)(data, start);\n    var flags = data[start + 4];\n    var segmentType = flags & 0x3f;\n\n    if (!SegmentTypes[segmentType]) {\n      throw new Jbig2Error(\"invalid segment type: \" + segmentType);\n    }\n\n    segmentHeader.type = segmentType;\n    segmentHeader.typeName = SegmentTypes[segmentType];\n    segmentHeader.deferredNonRetain = !!(flags & 0x80);\n    var pageAssociationFieldSize = !!(flags & 0x40);\n    var referredFlags = data[start + 5];\n    var referredToCount = referredFlags >> 5 & 7;\n    var retainBits = [referredFlags & 31];\n    var position = start + 6;\n\n    if (referredFlags === 7) {\n      referredToCount = (0, _core_utils.readUint32)(data, position - 1) & 0x1fffffff;\n      position += 3;\n      var bytes = referredToCount + 7 >> 3;\n      retainBits[0] = data[position++];\n\n      while (--bytes > 0) {\n        retainBits.push(data[position++]);\n      }\n    } else if (referredFlags === 5 || referredFlags === 6) {\n      throw new Jbig2Error(\"invalid referred-to flags\");\n    }\n\n    segmentHeader.retainBits = retainBits;\n    let referredToSegmentNumberSize = 4;\n\n    if (segmentHeader.number <= 256) {\n      referredToSegmentNumberSize = 1;\n    } else if (segmentHeader.number <= 65536) {\n      referredToSegmentNumberSize = 2;\n    }\n\n    var referredTo = [];\n    var i, ii;\n\n    for (i = 0; i < referredToCount; i++) {\n      let number;\n\n      if (referredToSegmentNumberSize === 1) {\n        number = data[position];\n      } else if (referredToSegmentNumberSize === 2) {\n        number = (0, _core_utils.readUint16)(data, position);\n      } else {\n        number = (0, _core_utils.readUint32)(data, position);\n      }\n\n      referredTo.push(number);\n      position += referredToSegmentNumberSize;\n    }\n\n    segmentHeader.referredTo = referredTo;\n\n    if (!pageAssociationFieldSize) {\n      segmentHeader.pageAssociation = data[position++];\n    } else {\n      segmentHeader.pageAssociation = (0, _core_utils.readUint32)(data, position);\n      position += 4;\n    }\n\n    segmentHeader.length = (0, _core_utils.readUint32)(data, position);\n    position += 4;\n\n    if (segmentHeader.length === 0xffffffff) {\n      if (segmentType === 38) {\n        var genericRegionInfo = readRegionSegmentInformation(data, position);\n        var genericRegionSegmentFlags = data[position + RegionSegmentInformationFieldLength];\n        var genericRegionMmr = !!(genericRegionSegmentFlags & 1);\n        var searchPatternLength = 6;\n        var searchPattern = new Uint8Array(searchPatternLength);\n\n        if (!genericRegionMmr) {\n          searchPattern[0] = 0xff;\n          searchPattern[1] = 0xac;\n        }\n\n        searchPattern[2] = genericRegionInfo.height >>> 24 & 0xff;\n        searchPattern[3] = genericRegionInfo.height >> 16 & 0xff;\n        searchPattern[4] = genericRegionInfo.height >> 8 & 0xff;\n        searchPattern[5] = genericRegionInfo.height & 0xff;\n\n        for (i = position, ii = data.length; i < ii; i++) {\n          var j = 0;\n\n          while (j < searchPatternLength && searchPattern[j] === data[i + j]) {\n            j++;\n          }\n\n          if (j === searchPatternLength) {\n            segmentHeader.length = i + searchPatternLength;\n            break;\n          }\n        }\n\n        if (segmentHeader.length === 0xffffffff) {\n          throw new Jbig2Error(\"segment end was not found\");\n        }\n      } else {\n        throw new Jbig2Error(\"invalid unknown segment length\");\n      }\n    }\n\n    segmentHeader.headerEnd = position;\n    return segmentHeader;\n  }\n\n  function readSegments(header, data, start, end) {\n    var segments = [];\n    var position = start;\n\n    while (position < end) {\n      var segmentHeader = readSegmentHeader(data, position);\n      position = segmentHeader.headerEnd;\n      var segment = {\n        header: segmentHeader,\n        data\n      };\n\n      if (!header.randomAccess) {\n        segment.start = position;\n        position += segmentHeader.length;\n        segment.end = position;\n      }\n\n      segments.push(segment);\n\n      if (segmentHeader.type === 51) {\n        break;\n      }\n    }\n\n    if (header.randomAccess) {\n      for (var i = 0, ii = segments.length; i < ii; i++) {\n        segments[i].start = position;\n        position += segments[i].header.length;\n        segments[i].end = position;\n      }\n    }\n\n    return segments;\n  }\n\n  function readRegionSegmentInformation(data, start) {\n    return {\n      width: (0, _core_utils.readUint32)(data, start),\n      height: (0, _core_utils.readUint32)(data, start + 4),\n      x: (0, _core_utils.readUint32)(data, start + 8),\n      y: (0, _core_utils.readUint32)(data, start + 12),\n      combinationOperator: data[start + 16] & 7\n    };\n  }\n\n  var RegionSegmentInformationFieldLength = 17;\n\n  function processSegment(segment, visitor) {\n    var header = segment.header;\n    var data = segment.data,\n        position = segment.start,\n        end = segment.end;\n    var args, at, i, atLength;\n\n    switch (header.type) {\n      case 0:\n        var dictionary = {};\n        var dictionaryFlags = (0, _core_utils.readUint16)(data, position);\n        dictionary.huffman = !!(dictionaryFlags & 1);\n        dictionary.refinement = !!(dictionaryFlags & 2);\n        dictionary.huffmanDHSelector = dictionaryFlags >> 2 & 3;\n        dictionary.huffmanDWSelector = dictionaryFlags >> 4 & 3;\n        dictionary.bitmapSizeSelector = dictionaryFlags >> 6 & 1;\n        dictionary.aggregationInstancesSelector = dictionaryFlags >> 7 & 1;\n        dictionary.bitmapCodingContextUsed = !!(dictionaryFlags & 256);\n        dictionary.bitmapCodingContextRetained = !!(dictionaryFlags & 512);\n        dictionary.template = dictionaryFlags >> 10 & 3;\n        dictionary.refinementTemplate = dictionaryFlags >> 12 & 1;\n        position += 2;\n\n        if (!dictionary.huffman) {\n          atLength = dictionary.template === 0 ? 4 : 1;\n          at = [];\n\n          for (i = 0; i < atLength; i++) {\n            at.push({\n              x: (0, _core_utils.readInt8)(data, position),\n              y: (0, _core_utils.readInt8)(data, position + 1)\n            });\n            position += 2;\n          }\n\n          dictionary.at = at;\n        }\n\n        if (dictionary.refinement && !dictionary.refinementTemplate) {\n          at = [];\n\n          for (i = 0; i < 2; i++) {\n            at.push({\n              x: (0, _core_utils.readInt8)(data, position),\n              y: (0, _core_utils.readInt8)(data, position + 1)\n            });\n            position += 2;\n          }\n\n          dictionary.refinementAt = at;\n        }\n\n        dictionary.numberOfExportedSymbols = (0, _core_utils.readUint32)(data, position);\n        position += 4;\n        dictionary.numberOfNewSymbols = (0, _core_utils.readUint32)(data, position);\n        position += 4;\n        args = [dictionary, header.number, header.referredTo, data, position, end];\n        break;\n\n      case 6:\n      case 7:\n        var textRegion = {};\n        textRegion.info = readRegionSegmentInformation(data, position);\n        position += RegionSegmentInformationFieldLength;\n        var textRegionSegmentFlags = (0, _core_utils.readUint16)(data, position);\n        position += 2;\n        textRegion.huffman = !!(textRegionSegmentFlags & 1);\n        textRegion.refinement = !!(textRegionSegmentFlags & 2);\n        textRegion.logStripSize = textRegionSegmentFlags >> 2 & 3;\n        textRegion.stripSize = 1 << textRegion.logStripSize;\n        textRegion.referenceCorner = textRegionSegmentFlags >> 4 & 3;\n        textRegion.transposed = !!(textRegionSegmentFlags & 64);\n        textRegion.combinationOperator = textRegionSegmentFlags >> 7 & 3;\n        textRegion.defaultPixelValue = textRegionSegmentFlags >> 9 & 1;\n        textRegion.dsOffset = textRegionSegmentFlags << 17 >> 27;\n        textRegion.refinementTemplate = textRegionSegmentFlags >> 15 & 1;\n\n        if (textRegion.huffman) {\n          var textRegionHuffmanFlags = (0, _core_utils.readUint16)(data, position);\n          position += 2;\n          textRegion.huffmanFS = textRegionHuffmanFlags & 3;\n          textRegion.huffmanDS = textRegionHuffmanFlags >> 2 & 3;\n          textRegion.huffmanDT = textRegionHuffmanFlags >> 4 & 3;\n          textRegion.huffmanRefinementDW = textRegionHuffmanFlags >> 6 & 3;\n          textRegion.huffmanRefinementDH = textRegionHuffmanFlags >> 8 & 3;\n          textRegion.huffmanRefinementDX = textRegionHuffmanFlags >> 10 & 3;\n          textRegion.huffmanRefinementDY = textRegionHuffmanFlags >> 12 & 3;\n          textRegion.huffmanRefinementSizeSelector = !!(textRegionHuffmanFlags & 0x4000);\n        }\n\n        if (textRegion.refinement && !textRegion.refinementTemplate) {\n          at = [];\n\n          for (i = 0; i < 2; i++) {\n            at.push({\n              x: (0, _core_utils.readInt8)(data, position),\n              y: (0, _core_utils.readInt8)(data, position + 1)\n            });\n            position += 2;\n          }\n\n          textRegion.refinementAt = at;\n        }\n\n        textRegion.numberOfSymbolInstances = (0, _core_utils.readUint32)(data, position);\n        position += 4;\n        args = [textRegion, header.referredTo, data, position, end];\n        break;\n\n      case 16:\n        const patternDictionary = {};\n        const patternDictionaryFlags = data[position++];\n        patternDictionary.mmr = !!(patternDictionaryFlags & 1);\n        patternDictionary.template = patternDictionaryFlags >> 1 & 3;\n        patternDictionary.patternWidth = data[position++];\n        patternDictionary.patternHeight = data[position++];\n        patternDictionary.maxPatternIndex = (0, _core_utils.readUint32)(data, position);\n        position += 4;\n        args = [patternDictionary, header.number, data, position, end];\n        break;\n\n      case 22:\n      case 23:\n        const halftoneRegion = {};\n        halftoneRegion.info = readRegionSegmentInformation(data, position);\n        position += RegionSegmentInformationFieldLength;\n        const halftoneRegionFlags = data[position++];\n        halftoneRegion.mmr = !!(halftoneRegionFlags & 1);\n        halftoneRegion.template = halftoneRegionFlags >> 1 & 3;\n        halftoneRegion.enableSkip = !!(halftoneRegionFlags & 8);\n        halftoneRegion.combinationOperator = halftoneRegionFlags >> 4 & 7;\n        halftoneRegion.defaultPixelValue = halftoneRegionFlags >> 7 & 1;\n        halftoneRegion.gridWidth = (0, _core_utils.readUint32)(data, position);\n        position += 4;\n        halftoneRegion.gridHeight = (0, _core_utils.readUint32)(data, position);\n        position += 4;\n        halftoneRegion.gridOffsetX = (0, _core_utils.readUint32)(data, position) & 0xffffffff;\n        position += 4;\n        halftoneRegion.gridOffsetY = (0, _core_utils.readUint32)(data, position) & 0xffffffff;\n        position += 4;\n        halftoneRegion.gridVectorX = (0, _core_utils.readUint16)(data, position);\n        position += 2;\n        halftoneRegion.gridVectorY = (0, _core_utils.readUint16)(data, position);\n        position += 2;\n        args = [halftoneRegion, header.referredTo, data, position, end];\n        break;\n\n      case 38:\n      case 39:\n        var genericRegion = {};\n        genericRegion.info = readRegionSegmentInformation(data, position);\n        position += RegionSegmentInformationFieldLength;\n        var genericRegionSegmentFlags = data[position++];\n        genericRegion.mmr = !!(genericRegionSegmentFlags & 1);\n        genericRegion.template = genericRegionSegmentFlags >> 1 & 3;\n        genericRegion.prediction = !!(genericRegionSegmentFlags & 8);\n\n        if (!genericRegion.mmr) {\n          atLength = genericRegion.template === 0 ? 4 : 1;\n          at = [];\n\n          for (i = 0; i < atLength; i++) {\n            at.push({\n              x: (0, _core_utils.readInt8)(data, position),\n              y: (0, _core_utils.readInt8)(data, position + 1)\n            });\n            position += 2;\n          }\n\n          genericRegion.at = at;\n        }\n\n        args = [genericRegion, data, position, end];\n        break;\n\n      case 48:\n        var pageInfo = {\n          width: (0, _core_utils.readUint32)(data, position),\n          height: (0, _core_utils.readUint32)(data, position + 4),\n          resolutionX: (0, _core_utils.readUint32)(data, position + 8),\n          resolutionY: (0, _core_utils.readUint32)(data, position + 12)\n        };\n\n        if (pageInfo.height === 0xffffffff) {\n          delete pageInfo.height;\n        }\n\n        var pageSegmentFlags = data[position + 16];\n        (0, _core_utils.readUint16)(data, position + 17);\n        pageInfo.lossless = !!(pageSegmentFlags & 1);\n        pageInfo.refinement = !!(pageSegmentFlags & 2);\n        pageInfo.defaultPixelValue = pageSegmentFlags >> 2 & 1;\n        pageInfo.combinationOperator = pageSegmentFlags >> 3 & 3;\n        pageInfo.requiresBuffer = !!(pageSegmentFlags & 32);\n        pageInfo.combinationOperatorOverride = !!(pageSegmentFlags & 64);\n        args = [pageInfo];\n        break;\n\n      case 49:\n        break;\n\n      case 50:\n        break;\n\n      case 51:\n        break;\n\n      case 53:\n        args = [header.number, data, position, end];\n        break;\n\n      case 62:\n        break;\n\n      default:\n        throw new Jbig2Error(`segment type ${header.typeName}(${header.type})` + \" is not implemented\");\n    }\n\n    var callbackName = \"on\" + header.typeName;\n\n    if (callbackName in visitor) {\n      visitor[callbackName].apply(visitor, args);\n    }\n  }\n\n  function processSegments(segments, visitor) {\n    for (var i = 0, ii = segments.length; i < ii; i++) {\n      processSegment(segments[i], visitor);\n    }\n  }\n\n  function parseJbig2Chunks(chunks) {\n    var visitor = new SimpleSegmentVisitor();\n\n    for (var i = 0, ii = chunks.length; i < ii; i++) {\n      var chunk = chunks[i];\n      var segments = readSegments({}, chunk.data, chunk.start, chunk.end);\n      processSegments(segments, visitor);\n    }\n\n    return visitor.buffer;\n  }\n\n  function parseJbig2(data) {\n    const end = data.length;\n    let position = 0;\n\n    if (data[position] !== 0x97 || data[position + 1] !== 0x4a || data[position + 2] !== 0x42 || data[position + 3] !== 0x32 || data[position + 4] !== 0x0d || data[position + 5] !== 0x0a || data[position + 6] !== 0x1a || data[position + 7] !== 0x0a) {\n      throw new Jbig2Error(\"parseJbig2 - invalid header.\");\n    }\n\n    const header = Object.create(null);\n    position += 8;\n    const flags = data[position++];\n    header.randomAccess = !(flags & 1);\n\n    if (!(flags & 2)) {\n      header.numberOfPages = (0, _core_utils.readUint32)(data, position);\n      position += 4;\n    }\n\n    const segments = readSegments(header, data, position, end);\n    const visitor = new SimpleSegmentVisitor();\n    processSegments(segments, visitor);\n    const {\n      width,\n      height\n    } = visitor.currentPageInfo;\n    const bitPacked = visitor.buffer;\n    const imgData = new Uint8ClampedArray(width * height);\n    let q = 0,\n        k = 0;\n\n    for (let i = 0; i < height; i++) {\n      let mask = 0,\n          buffer;\n\n      for (let j = 0; j < width; j++) {\n        if (!mask) {\n          mask = 128;\n          buffer = bitPacked[k++];\n        }\n\n        imgData[q++] = buffer & mask ? 0 : 255;\n        mask >>= 1;\n      }\n    }\n\n    return {\n      imgData,\n      width,\n      height\n    };\n  }\n\n  function SimpleSegmentVisitor() {}\n\n  SimpleSegmentVisitor.prototype = {\n    onPageInformation: function SimpleSegmentVisitor_onPageInformation(info) {\n      this.currentPageInfo = info;\n      var rowSize = info.width + 7 >> 3;\n      var buffer = new Uint8ClampedArray(rowSize * info.height);\n\n      if (info.defaultPixelValue) {\n        for (var i = 0, ii = buffer.length; i < ii; i++) {\n          buffer[i] = 0xff;\n        }\n      }\n\n      this.buffer = buffer;\n    },\n    drawBitmap: function SimpleSegmentVisitor_drawBitmap(regionInfo, bitmap) {\n      var pageInfo = this.currentPageInfo;\n      var width = regionInfo.width,\n          height = regionInfo.height;\n      var rowSize = pageInfo.width + 7 >> 3;\n      var combinationOperator = pageInfo.combinationOperatorOverride ? regionInfo.combinationOperator : pageInfo.combinationOperator;\n      var buffer = this.buffer;\n      var mask0 = 128 >> (regionInfo.x & 7);\n      var offset0 = regionInfo.y * rowSize + (regionInfo.x >> 3);\n      var i, j, mask, offset;\n\n      switch (combinationOperator) {\n        case 0:\n          for (i = 0; i < height; i++) {\n            mask = mask0;\n            offset = offset0;\n\n            for (j = 0; j < width; j++) {\n              if (bitmap[i][j]) {\n                buffer[offset] |= mask;\n              }\n\n              mask >>= 1;\n\n              if (!mask) {\n                mask = 128;\n                offset++;\n              }\n            }\n\n            offset0 += rowSize;\n          }\n\n          break;\n\n        case 2:\n          for (i = 0; i < height; i++) {\n            mask = mask0;\n            offset = offset0;\n\n            for (j = 0; j < width; j++) {\n              if (bitmap[i][j]) {\n                buffer[offset] ^= mask;\n              }\n\n              mask >>= 1;\n\n              if (!mask) {\n                mask = 128;\n                offset++;\n              }\n            }\n\n            offset0 += rowSize;\n          }\n\n          break;\n\n        default:\n          throw new Jbig2Error(`operator ${combinationOperator} is not supported`);\n      }\n    },\n    onImmediateGenericRegion: function SimpleSegmentVisitor_onImmediateGenericRegion(region, data, start, end) {\n      var regionInfo = region.info;\n      var decodingContext = new DecodingContext(data, start, end);\n      var bitmap = decodeBitmap(region.mmr, regionInfo.width, regionInfo.height, region.template, region.prediction, null, region.at, decodingContext);\n      this.drawBitmap(regionInfo, bitmap);\n    },\n    onImmediateLosslessGenericRegion: function SimpleSegmentVisitor_onImmediateLosslessGenericRegion() {\n      this.onImmediateGenericRegion.apply(this, arguments);\n    },\n    onSymbolDictionary: function SimpleSegmentVisitor_onSymbolDictionary(dictionary, currentSegment, referredSegments, data, start, end) {\n      let huffmanTables, huffmanInput;\n\n      if (dictionary.huffman) {\n        huffmanTables = getSymbolDictionaryHuffmanTables(dictionary, referredSegments, this.customTables);\n        huffmanInput = new Reader(data, start, end);\n      }\n\n      var symbols = this.symbols;\n\n      if (!symbols) {\n        this.symbols = symbols = {};\n      }\n\n      var inputSymbols = [];\n\n      for (var i = 0, ii = referredSegments.length; i < ii; i++) {\n        const referredSymbols = symbols[referredSegments[i]];\n\n        if (referredSymbols) {\n          inputSymbols = inputSymbols.concat(referredSymbols);\n        }\n      }\n\n      var decodingContext = new DecodingContext(data, start, end);\n      symbols[currentSegment] = decodeSymbolDictionary(dictionary.huffman, dictionary.refinement, inputSymbols, dictionary.numberOfNewSymbols, dictionary.numberOfExportedSymbols, huffmanTables, dictionary.template, dictionary.at, dictionary.refinementTemplate, dictionary.refinementAt, decodingContext, huffmanInput);\n    },\n    onImmediateTextRegion: function SimpleSegmentVisitor_onImmediateTextRegion(region, referredSegments, data, start, end) {\n      var regionInfo = region.info;\n      let huffmanTables, huffmanInput;\n      var symbols = this.symbols;\n      var inputSymbols = [];\n\n      for (var i = 0, ii = referredSegments.length; i < ii; i++) {\n        const referredSymbols = symbols[referredSegments[i]];\n\n        if (referredSymbols) {\n          inputSymbols = inputSymbols.concat(referredSymbols);\n        }\n      }\n\n      var symbolCodeLength = (0, _core_utils.log2)(inputSymbols.length);\n\n      if (region.huffman) {\n        huffmanInput = new Reader(data, start, end);\n        huffmanTables = getTextRegionHuffmanTables(region, referredSegments, this.customTables, inputSymbols.length, huffmanInput);\n      }\n\n      var decodingContext = new DecodingContext(data, start, end);\n      var bitmap = decodeTextRegion(region.huffman, region.refinement, regionInfo.width, regionInfo.height, region.defaultPixelValue, region.numberOfSymbolInstances, region.stripSize, inputSymbols, symbolCodeLength, region.transposed, region.dsOffset, region.referenceCorner, region.combinationOperator, huffmanTables, region.refinementTemplate, region.refinementAt, decodingContext, region.logStripSize, huffmanInput);\n      this.drawBitmap(regionInfo, bitmap);\n    },\n    onImmediateLosslessTextRegion: function SimpleSegmentVisitor_onImmediateLosslessTextRegion() {\n      this.onImmediateTextRegion.apply(this, arguments);\n    },\n\n    onPatternDictionary(dictionary, currentSegment, data, start, end) {\n      let patterns = this.patterns;\n\n      if (!patterns) {\n        this.patterns = patterns = {};\n      }\n\n      const decodingContext = new DecodingContext(data, start, end);\n      patterns[currentSegment] = decodePatternDictionary(dictionary.mmr, dictionary.patternWidth, dictionary.patternHeight, dictionary.maxPatternIndex, dictionary.template, decodingContext);\n    },\n\n    onImmediateHalftoneRegion(region, referredSegments, data, start, end) {\n      const patterns = this.patterns[referredSegments[0]];\n      const regionInfo = region.info;\n      const decodingContext = new DecodingContext(data, start, end);\n      const bitmap = decodeHalftoneRegion(region.mmr, patterns, region.template, regionInfo.width, regionInfo.height, region.defaultPixelValue, region.enableSkip, region.combinationOperator, region.gridWidth, region.gridHeight, region.gridOffsetX, region.gridOffsetY, region.gridVectorX, region.gridVectorY, decodingContext);\n      this.drawBitmap(regionInfo, bitmap);\n    },\n\n    onImmediateLosslessHalftoneRegion() {\n      this.onImmediateHalftoneRegion.apply(this, arguments);\n    },\n\n    onTables(currentSegment, data, start, end) {\n      let customTables = this.customTables;\n\n      if (!customTables) {\n        this.customTables = customTables = {};\n      }\n\n      customTables[currentSegment] = decodeTablesSegment(data, start, end);\n    }\n\n  };\n\n  function HuffmanLine(lineData) {\n    if (lineData.length === 2) {\n      this.isOOB = true;\n      this.rangeLow = 0;\n      this.prefixLength = lineData[0];\n      this.rangeLength = 0;\n      this.prefixCode = lineData[1];\n      this.isLowerRange = false;\n    } else {\n      this.isOOB = false;\n      this.rangeLow = lineData[0];\n      this.prefixLength = lineData[1];\n      this.rangeLength = lineData[2];\n      this.prefixCode = lineData[3];\n      this.isLowerRange = lineData[4] === \"lower\";\n    }\n  }\n\n  function HuffmanTreeNode(line) {\n    this.children = [];\n\n    if (line) {\n      this.isLeaf = true;\n      this.rangeLength = line.rangeLength;\n      this.rangeLow = line.rangeLow;\n      this.isLowerRange = line.isLowerRange;\n      this.isOOB = line.isOOB;\n    } else {\n      this.isLeaf = false;\n    }\n  }\n\n  HuffmanTreeNode.prototype = {\n    buildTree(line, shift) {\n      const bit = line.prefixCode >> shift & 1;\n\n      if (shift <= 0) {\n        this.children[bit] = new HuffmanTreeNode(line);\n      } else {\n        let node = this.children[bit];\n\n        if (!node) {\n          this.children[bit] = node = new HuffmanTreeNode(null);\n        }\n\n        node.buildTree(line, shift - 1);\n      }\n    },\n\n    decodeNode(reader) {\n      if (this.isLeaf) {\n        if (this.isOOB) {\n          return null;\n        }\n\n        const htOffset = reader.readBits(this.rangeLength);\n        return this.rangeLow + (this.isLowerRange ? -htOffset : htOffset);\n      }\n\n      const node = this.children[reader.readBit()];\n\n      if (!node) {\n        throw new Jbig2Error(\"invalid Huffman data\");\n      }\n\n      return node.decodeNode(reader);\n    }\n\n  };\n\n  function HuffmanTable(lines, prefixCodesDone) {\n    if (!prefixCodesDone) {\n      this.assignPrefixCodes(lines);\n    }\n\n    this.rootNode = new HuffmanTreeNode(null);\n\n    for (let i = 0, ii = lines.length; i < ii; i++) {\n      const line = lines[i];\n\n      if (line.prefixLength > 0) {\n        this.rootNode.buildTree(line, line.prefixLength - 1);\n      }\n    }\n  }\n\n  HuffmanTable.prototype = {\n    decode(reader) {\n      return this.rootNode.decodeNode(reader);\n    },\n\n    assignPrefixCodes(lines) {\n      const linesLength = lines.length;\n      let prefixLengthMax = 0;\n\n      for (let i = 0; i < linesLength; i++) {\n        prefixLengthMax = Math.max(prefixLengthMax, lines[i].prefixLength);\n      }\n\n      const histogram = new Uint32Array(prefixLengthMax + 1);\n\n      for (let i = 0; i < linesLength; i++) {\n        histogram[lines[i].prefixLength]++;\n      }\n\n      let currentLength = 1,\n          firstCode = 0,\n          currentCode,\n          currentTemp,\n          line;\n      histogram[0] = 0;\n\n      while (currentLength <= prefixLengthMax) {\n        firstCode = firstCode + histogram[currentLength - 1] << 1;\n        currentCode = firstCode;\n        currentTemp = 0;\n\n        while (currentTemp < linesLength) {\n          line = lines[currentTemp];\n\n          if (line.prefixLength === currentLength) {\n            line.prefixCode = currentCode;\n            currentCode++;\n          }\n\n          currentTemp++;\n        }\n\n        currentLength++;\n      }\n    }\n\n  };\n\n  function decodeTablesSegment(data, start, end) {\n    const flags = data[start];\n    const lowestValue = (0, _core_utils.readUint32)(data, start + 1) & 0xffffffff;\n    const highestValue = (0, _core_utils.readUint32)(data, start + 5) & 0xffffffff;\n    const reader = new Reader(data, start + 9, end);\n    const prefixSizeBits = (flags >> 1 & 7) + 1;\n    const rangeSizeBits = (flags >> 4 & 7) + 1;\n    const lines = [];\n    let prefixLength,\n        rangeLength,\n        currentRangeLow = lowestValue;\n\n    do {\n      prefixLength = reader.readBits(prefixSizeBits);\n      rangeLength = reader.readBits(rangeSizeBits);\n      lines.push(new HuffmanLine([currentRangeLow, prefixLength, rangeLength, 0]));\n      currentRangeLow += 1 << rangeLength;\n    } while (currentRangeLow < highestValue);\n\n    prefixLength = reader.readBits(prefixSizeBits);\n    lines.push(new HuffmanLine([lowestValue - 1, prefixLength, 32, 0, \"lower\"]));\n    prefixLength = reader.readBits(prefixSizeBits);\n    lines.push(new HuffmanLine([highestValue, prefixLength, 32, 0]));\n\n    if (flags & 1) {\n      prefixLength = reader.readBits(prefixSizeBits);\n      lines.push(new HuffmanLine([prefixLength, 0]));\n    }\n\n    return new HuffmanTable(lines, false);\n  }\n\n  const standardTablesCache = {};\n\n  function getStandardTable(number) {\n    let table = standardTablesCache[number];\n\n    if (table) {\n      return table;\n    }\n\n    let lines;\n\n    switch (number) {\n      case 1:\n        lines = [[0, 1, 4, 0x0], [16, 2, 8, 0x2], [272, 3, 16, 0x6], [65808, 3, 32, 0x7]];\n        break;\n\n      case 2:\n        lines = [[0, 1, 0, 0x0], [1, 2, 0, 0x2], [2, 3, 0, 0x6], [3, 4, 3, 0xe], [11, 5, 6, 0x1e], [75, 6, 32, 0x3e], [6, 0x3f]];\n        break;\n\n      case 3:\n        lines = [[-256, 8, 8, 0xfe], [0, 1, 0, 0x0], [1, 2, 0, 0x2], [2, 3, 0, 0x6], [3, 4, 3, 0xe], [11, 5, 6, 0x1e], [-257, 8, 32, 0xff, \"lower\"], [75, 7, 32, 0x7e], [6, 0x3e]];\n        break;\n\n      case 4:\n        lines = [[1, 1, 0, 0x0], [2, 2, 0, 0x2], [3, 3, 0, 0x6], [4, 4, 3, 0xe], [12, 5, 6, 0x1e], [76, 5, 32, 0x1f]];\n        break;\n\n      case 5:\n        lines = [[-255, 7, 8, 0x7e], [1, 1, 0, 0x0], [2, 2, 0, 0x2], [3, 3, 0, 0x6], [4, 4, 3, 0xe], [12, 5, 6, 0x1e], [-256, 7, 32, 0x7f, \"lower\"], [76, 6, 32, 0x3e]];\n        break;\n\n      case 6:\n        lines = [[-2048, 5, 10, 0x1c], [-1024, 4, 9, 0x8], [-512, 4, 8, 0x9], [-256, 4, 7, 0xa], [-128, 5, 6, 0x1d], [-64, 5, 5, 0x1e], [-32, 4, 5, 0xb], [0, 2, 7, 0x0], [128, 3, 7, 0x2], [256, 3, 8, 0x3], [512, 4, 9, 0xc], [1024, 4, 10, 0xd], [-2049, 6, 32, 0x3e, \"lower\"], [2048, 6, 32, 0x3f]];\n        break;\n\n      case 7:\n        lines = [[-1024, 4, 9, 0x8], [-512, 3, 8, 0x0], [-256, 4, 7, 0x9], [-128, 5, 6, 0x1a], [-64, 5, 5, 0x1b], [-32, 4, 5, 0xa], [0, 4, 5, 0xb], [32, 5, 5, 0x1c], [64, 5, 6, 0x1d], [128, 4, 7, 0xc], [256, 3, 8, 0x1], [512, 3, 9, 0x2], [1024, 3, 10, 0x3], [-1025, 5, 32, 0x1e, \"lower\"], [2048, 5, 32, 0x1f]];\n        break;\n\n      case 8:\n        lines = [[-15, 8, 3, 0xfc], [-7, 9, 1, 0x1fc], [-5, 8, 1, 0xfd], [-3, 9, 0, 0x1fd], [-2, 7, 0, 0x7c], [-1, 4, 0, 0xa], [0, 2, 1, 0x0], [2, 5, 0, 0x1a], [3, 6, 0, 0x3a], [4, 3, 4, 0x4], [20, 6, 1, 0x3b], [22, 4, 4, 0xb], [38, 4, 5, 0xc], [70, 5, 6, 0x1b], [134, 5, 7, 0x1c], [262, 6, 7, 0x3c], [390, 7, 8, 0x7d], [646, 6, 10, 0x3d], [-16, 9, 32, 0x1fe, \"lower\"], [1670, 9, 32, 0x1ff], [2, 0x1]];\n        break;\n\n      case 9:\n        lines = [[-31, 8, 4, 0xfc], [-15, 9, 2, 0x1fc], [-11, 8, 2, 0xfd], [-7, 9, 1, 0x1fd], [-5, 7, 1, 0x7c], [-3, 4, 1, 0xa], [-1, 3, 1, 0x2], [1, 3, 1, 0x3], [3, 5, 1, 0x1a], [5, 6, 1, 0x3a], [7, 3, 5, 0x4], [39, 6, 2, 0x3b], [43, 4, 5, 0xb], [75, 4, 6, 0xc], [139, 5, 7, 0x1b], [267, 5, 8, 0x1c], [523, 6, 8, 0x3c], [779, 7, 9, 0x7d], [1291, 6, 11, 0x3d], [-32, 9, 32, 0x1fe, \"lower\"], [3339, 9, 32, 0x1ff], [2, 0x0]];\n        break;\n\n      case 10:\n        lines = [[-21, 7, 4, 0x7a], [-5, 8, 0, 0xfc], [-4, 7, 0, 0x7b], [-3, 5, 0, 0x18], [-2, 2, 2, 0x0], [2, 5, 0, 0x19], [3, 6, 0, 0x36], [4, 7, 0, 0x7c], [5, 8, 0, 0xfd], [6, 2, 6, 0x1], [70, 5, 5, 0x1a], [102, 6, 5, 0x37], [134, 6, 6, 0x38], [198, 6, 7, 0x39], [326, 6, 8, 0x3a], [582, 6, 9, 0x3b], [1094, 6, 10, 0x3c], [2118, 7, 11, 0x7d], [-22, 8, 32, 0xfe, \"lower\"], [4166, 8, 32, 0xff], [2, 0x2]];\n        break;\n\n      case 11:\n        lines = [[1, 1, 0, 0x0], [2, 2, 1, 0x2], [4, 4, 0, 0xc], [5, 4, 1, 0xd], [7, 5, 1, 0x1c], [9, 5, 2, 0x1d], [13, 6, 2, 0x3c], [17, 7, 2, 0x7a], [21, 7, 3, 0x7b], [29, 7, 4, 0x7c], [45, 7, 5, 0x7d], [77, 7, 6, 0x7e], [141, 7, 32, 0x7f]];\n        break;\n\n      case 12:\n        lines = [[1, 1, 0, 0x0], [2, 2, 0, 0x2], [3, 3, 1, 0x6], [5, 5, 0, 0x1c], [6, 5, 1, 0x1d], [8, 6, 1, 0x3c], [10, 7, 0, 0x7a], [11, 7, 1, 0x7b], [13, 7, 2, 0x7c], [17, 7, 3, 0x7d], [25, 7, 4, 0x7e], [41, 8, 5, 0xfe], [73, 8, 32, 0xff]];\n        break;\n\n      case 13:\n        lines = [[1, 1, 0, 0x0], [2, 3, 0, 0x4], [3, 4, 0, 0xc], [4, 5, 0, 0x1c], [5, 4, 1, 0xd], [7, 3, 3, 0x5], [15, 6, 1, 0x3a], [17, 6, 2, 0x3b], [21, 6, 3, 0x3c], [29, 6, 4, 0x3d], [45, 6, 5, 0x3e], [77, 7, 6, 0x7e], [141, 7, 32, 0x7f]];\n        break;\n\n      case 14:\n        lines = [[-2, 3, 0, 0x4], [-1, 3, 0, 0x5], [0, 1, 0, 0x0], [1, 3, 0, 0x6], [2, 3, 0, 0x7]];\n        break;\n\n      case 15:\n        lines = [[-24, 7, 4, 0x7c], [-8, 6, 2, 0x3c], [-4, 5, 1, 0x1c], [-2, 4, 0, 0xc], [-1, 3, 0, 0x4], [0, 1, 0, 0x0], [1, 3, 0, 0x5], [2, 4, 0, 0xd], [3, 5, 1, 0x1d], [5, 6, 2, 0x3d], [9, 7, 4, 0x7d], [-25, 7, 32, 0x7e, \"lower\"], [25, 7, 32, 0x7f]];\n        break;\n\n      default:\n        throw new Jbig2Error(`standard table B.${number} does not exist`);\n    }\n\n    for (let i = 0, ii = lines.length; i < ii; i++) {\n      lines[i] = new HuffmanLine(lines[i]);\n    }\n\n    table = new HuffmanTable(lines, true);\n    standardTablesCache[number] = table;\n    return table;\n  }\n\n  function Reader(data, start, end) {\n    this.data = data;\n    this.start = start;\n    this.end = end;\n    this.position = start;\n    this.shift = -1;\n    this.currentByte = 0;\n  }\n\n  Reader.prototype = {\n    readBit() {\n      if (this.shift < 0) {\n        if (this.position >= this.end) {\n          throw new Jbig2Error(\"end of data while reading bit\");\n        }\n\n        this.currentByte = this.data[this.position++];\n        this.shift = 7;\n      }\n\n      const bit = this.currentByte >> this.shift & 1;\n      this.shift--;\n      return bit;\n    },\n\n    readBits(numBits) {\n      let result = 0,\n          i;\n\n      for (i = numBits - 1; i >= 0; i--) {\n        result |= this.readBit() << i;\n      }\n\n      return result;\n    },\n\n    byteAlign() {\n      this.shift = -1;\n    },\n\n    next() {\n      if (this.position >= this.end) {\n        return -1;\n      }\n\n      return this.data[this.position++];\n    }\n\n  };\n\n  function getCustomHuffmanTable(index, referredTo, customTables) {\n    let currentIndex = 0;\n\n    for (let i = 0, ii = referredTo.length; i < ii; i++) {\n      const table = customTables[referredTo[i]];\n\n      if (table) {\n        if (index === currentIndex) {\n          return table;\n        }\n\n        currentIndex++;\n      }\n    }\n\n    throw new Jbig2Error(\"can't find custom Huffman table\");\n  }\n\n  function getTextRegionHuffmanTables(textRegion, referredTo, customTables, numberOfSymbols, reader) {\n    const codes = [];\n\n    for (let i = 0; i <= 34; i++) {\n      const codeLength = reader.readBits(4);\n      codes.push(new HuffmanLine([i, codeLength, 0, 0]));\n    }\n\n    const runCodesTable = new HuffmanTable(codes, false);\n    codes.length = 0;\n\n    for (let i = 0; i < numberOfSymbols;) {\n      const codeLength = runCodesTable.decode(reader);\n\n      if (codeLength >= 32) {\n        let repeatedLength, numberOfRepeats, j;\n\n        switch (codeLength) {\n          case 32:\n            if (i === 0) {\n              throw new Jbig2Error(\"no previous value in symbol ID table\");\n            }\n\n            numberOfRepeats = reader.readBits(2) + 3;\n            repeatedLength = codes[i - 1].prefixLength;\n            break;\n\n          case 33:\n            numberOfRepeats = reader.readBits(3) + 3;\n            repeatedLength = 0;\n            break;\n\n          case 34:\n            numberOfRepeats = reader.readBits(7) + 11;\n            repeatedLength = 0;\n            break;\n\n          default:\n            throw new Jbig2Error(\"invalid code length in symbol ID table\");\n        }\n\n        for (j = 0; j < numberOfRepeats; j++) {\n          codes.push(new HuffmanLine([i, repeatedLength, 0, 0]));\n          i++;\n        }\n      } else {\n        codes.push(new HuffmanLine([i, codeLength, 0, 0]));\n        i++;\n      }\n    }\n\n    reader.byteAlign();\n    const symbolIDTable = new HuffmanTable(codes, false);\n    let customIndex = 0,\n        tableFirstS,\n        tableDeltaS,\n        tableDeltaT;\n\n    switch (textRegion.huffmanFS) {\n      case 0:\n      case 1:\n        tableFirstS = getStandardTable(textRegion.huffmanFS + 6);\n        break;\n\n      case 3:\n        tableFirstS = getCustomHuffmanTable(customIndex, referredTo, customTables);\n        customIndex++;\n        break;\n\n      default:\n        throw new Jbig2Error(\"invalid Huffman FS selector\");\n    }\n\n    switch (textRegion.huffmanDS) {\n      case 0:\n      case 1:\n      case 2:\n        tableDeltaS = getStandardTable(textRegion.huffmanDS + 8);\n        break;\n\n      case 3:\n        tableDeltaS = getCustomHuffmanTable(customIndex, referredTo, customTables);\n        customIndex++;\n        break;\n\n      default:\n        throw new Jbig2Error(\"invalid Huffman DS selector\");\n    }\n\n    switch (textRegion.huffmanDT) {\n      case 0:\n      case 1:\n      case 2:\n        tableDeltaT = getStandardTable(textRegion.huffmanDT + 11);\n        break;\n\n      case 3:\n        tableDeltaT = getCustomHuffmanTable(customIndex, referredTo, customTables);\n        customIndex++;\n        break;\n\n      default:\n        throw new Jbig2Error(\"invalid Huffman DT selector\");\n    }\n\n    if (textRegion.refinement) {\n      throw new Jbig2Error(\"refinement with Huffman is not supported\");\n    }\n\n    return {\n      symbolIDTable,\n      tableFirstS,\n      tableDeltaS,\n      tableDeltaT\n    };\n  }\n\n  function getSymbolDictionaryHuffmanTables(dictionary, referredTo, customTables) {\n    let customIndex = 0,\n        tableDeltaHeight,\n        tableDeltaWidth;\n\n    switch (dictionary.huffmanDHSelector) {\n      case 0:\n      case 1:\n        tableDeltaHeight = getStandardTable(dictionary.huffmanDHSelector + 4);\n        break;\n\n      case 3:\n        tableDeltaHeight = getCustomHuffmanTable(customIndex, referredTo, customTables);\n        customIndex++;\n        break;\n\n      default:\n        throw new Jbig2Error(\"invalid Huffman DH selector\");\n    }\n\n    switch (dictionary.huffmanDWSelector) {\n      case 0:\n      case 1:\n        tableDeltaWidth = getStandardTable(dictionary.huffmanDWSelector + 2);\n        break;\n\n      case 3:\n        tableDeltaWidth = getCustomHuffmanTable(customIndex, referredTo, customTables);\n        customIndex++;\n        break;\n\n      default:\n        throw new Jbig2Error(\"invalid Huffman DW selector\");\n    }\n\n    let tableBitmapSize, tableAggregateInstances;\n\n    if (dictionary.bitmapSizeSelector) {\n      tableBitmapSize = getCustomHuffmanTable(customIndex, referredTo, customTables);\n      customIndex++;\n    } else {\n      tableBitmapSize = getStandardTable(1);\n    }\n\n    if (dictionary.aggregationInstancesSelector) {\n      tableAggregateInstances = getCustomHuffmanTable(customIndex, referredTo, customTables);\n    } else {\n      tableAggregateInstances = getStandardTable(1);\n    }\n\n    return {\n      tableDeltaHeight,\n      tableDeltaWidth,\n      tableBitmapSize,\n      tableAggregateInstances\n    };\n  }\n\n  function readUncompressedBitmap(reader, width, height) {\n    const bitmap = [];\n\n    for (let y = 0; y < height; y++) {\n      const row = new Uint8Array(width);\n      bitmap.push(row);\n\n      for (let x = 0; x < width; x++) {\n        row[x] = reader.readBit();\n      }\n\n      reader.byteAlign();\n    }\n\n    return bitmap;\n  }\n\n  function decodeMMRBitmap(input, width, height, endOfBlock) {\n    const params = {\n      K: -1,\n      Columns: width,\n      Rows: height,\n      BlackIs1: true,\n      EndOfBlock: endOfBlock\n    };\n    const decoder = new _ccitt.CCITTFaxDecoder(input, params);\n    const bitmap = [];\n    let currentByte,\n        eof = false;\n\n    for (let y = 0; y < height; y++) {\n      const row = new Uint8Array(width);\n      bitmap.push(row);\n      let shift = -1;\n\n      for (let x = 0; x < width; x++) {\n        if (shift < 0) {\n          currentByte = decoder.readNextChar();\n\n          if (currentByte === -1) {\n            currentByte = 0;\n            eof = true;\n          }\n\n          shift = 7;\n        }\n\n        row[x] = currentByte >> shift & 1;\n        shift--;\n      }\n    }\n\n    if (endOfBlock && !eof) {\n      const lookForEOFLimit = 5;\n\n      for (let i = 0; i < lookForEOFLimit; i++) {\n        if (decoder.readNextChar() === -1) {\n          break;\n        }\n      }\n    }\n\n    return bitmap;\n  }\n\n  function Jbig2Image() {}\n\n  Jbig2Image.prototype = {\n    parseChunks(chunks) {\n      return parseJbig2Chunks(chunks);\n    },\n\n    parse(data) {\n      const {\n        imgData,\n        width,\n        height\n      } = parseJbig2(data);\n      this.width = width;\n      this.height = height;\n      return imgData;\n    }\n\n  };\n  return Jbig2Image;\n}();\n\nexports.Jbig2Image = Jbig2Image;\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArithmeticDecoder = void 0;\nconst QeTable = [{\n  qe: 0x5601,\n  nmps: 1,\n  nlps: 1,\n  switchFlag: 1\n}, {\n  qe: 0x3401,\n  nmps: 2,\n  nlps: 6,\n  switchFlag: 0\n}, {\n  qe: 0x1801,\n  nmps: 3,\n  nlps: 9,\n  switchFlag: 0\n}, {\n  qe: 0x0ac1,\n  nmps: 4,\n  nlps: 12,\n  switchFlag: 0\n}, {\n  qe: 0x0521,\n  nmps: 5,\n  nlps: 29,\n  switchFlag: 0\n}, {\n  qe: 0x0221,\n  nmps: 38,\n  nlps: 33,\n  switchFlag: 0\n}, {\n  qe: 0x5601,\n  nmps: 7,\n  nlps: 6,\n  switchFlag: 1\n}, {\n  qe: 0x5401,\n  nmps: 8,\n  nlps: 14,\n  switchFlag: 0\n}, {\n  qe: 0x4801,\n  nmps: 9,\n  nlps: 14,\n  switchFlag: 0\n}, {\n  qe: 0x3801,\n  nmps: 10,\n  nlps: 14,\n  switchFlag: 0\n}, {\n  qe: 0x3001,\n  nmps: 11,\n  nlps: 17,\n  switchFlag: 0\n}, {\n  qe: 0x2401,\n  nmps: 12,\n  nlps: 18,\n  switchFlag: 0\n}, {\n  qe: 0x1c01,\n  nmps: 13,\n  nlps: 20,\n  switchFlag: 0\n}, {\n  qe: 0x1601,\n  nmps: 29,\n  nlps: 21,\n  switchFlag: 0\n}, {\n  qe: 0x5601,\n  nmps: 15,\n  nlps: 14,\n  switchFlag: 1\n}, {\n  qe: 0x5401,\n  nmps: 16,\n  nlps: 14,\n  switchFlag: 0\n}, {\n  qe: 0x5101,\n  nmps: 17,\n  nlps: 15,\n  switchFlag: 0\n}, {\n  qe: 0x4801,\n  nmps: 18,\n  nlps: 16,\n  switchFlag: 0\n}, {\n  qe: 0x3801,\n  nmps: 19,\n  nlps: 17,\n  switchFlag: 0\n}, {\n  qe: 0x3401,\n  nmps: 20,\n  nlps: 18,\n  switchFlag: 0\n}, {\n  qe: 0x3001,\n  nmps: 21,\n  nlps: 19,\n  switchFlag: 0\n}, {\n  qe: 0x2801,\n  nmps: 22,\n  nlps: 19,\n  switchFlag: 0\n}, {\n  qe: 0x2401,\n  nmps: 23,\n  nlps: 20,\n  switchFlag: 0\n}, {\n  qe: 0x2201,\n  nmps: 24,\n  nlps: 21,\n  switchFlag: 0\n}, {\n  qe: 0x1c01,\n  nmps: 25,\n  nlps: 22,\n  switchFlag: 0\n}, {\n  qe: 0x1801,\n  nmps: 26,\n  nlps: 23,\n  switchFlag: 0\n}, {\n  qe: 0x1601,\n  nmps: 27,\n  nlps: 24,\n  switchFlag: 0\n}, {\n  qe: 0x1401,\n  nmps: 28,\n  nlps: 25,\n  switchFlag: 0\n}, {\n  qe: 0x1201,\n  nmps: 29,\n  nlps: 26,\n  switchFlag: 0\n}, {\n  qe: 0x1101,\n  nmps: 30,\n  nlps: 27,\n  switchFlag: 0\n}, {\n  qe: 0x0ac1,\n  nmps: 31,\n  nlps: 28,\n  switchFlag: 0\n}, {\n  qe: 0x09c1,\n  nmps: 32,\n  nlps: 29,\n  switchFlag: 0\n}, {\n  qe: 0x08a1,\n  nmps: 33,\n  nlps: 30,\n  switchFlag: 0\n}, {\n  qe: 0x0521,\n  nmps: 34,\n  nlps: 31,\n  switchFlag: 0\n}, {\n  qe: 0x0441,\n  nmps: 35,\n  nlps: 32,\n  switchFlag: 0\n}, {\n  qe: 0x02a1,\n  nmps: 36,\n  nlps: 33,\n  switchFlag: 0\n}, {\n  qe: 0x0221,\n  nmps: 37,\n  nlps: 34,\n  switchFlag: 0\n}, {\n  qe: 0x0141,\n  nmps: 38,\n  nlps: 35,\n  switchFlag: 0\n}, {\n  qe: 0x0111,\n  nmps: 39,\n  nlps: 36,\n  switchFlag: 0\n}, {\n  qe: 0x0085,\n  nmps: 40,\n  nlps: 37,\n  switchFlag: 0\n}, {\n  qe: 0x0049,\n  nmps: 41,\n  nlps: 38,\n  switchFlag: 0\n}, {\n  qe: 0x0025,\n  nmps: 42,\n  nlps: 39,\n  switchFlag: 0\n}, {\n  qe: 0x0015,\n  nmps: 43,\n  nlps: 40,\n  switchFlag: 0\n}, {\n  qe: 0x0009,\n  nmps: 44,\n  nlps: 41,\n  switchFlag: 0\n}, {\n  qe: 0x0005,\n  nmps: 45,\n  nlps: 42,\n  switchFlag: 0\n}, {\n  qe: 0x0001,\n  nmps: 45,\n  nlps: 43,\n  switchFlag: 0\n}, {\n  qe: 0x5601,\n  nmps: 46,\n  nlps: 46,\n  switchFlag: 0\n}];\n\nclass ArithmeticDecoder {\n  constructor(data, start, end) {\n    this.data = data;\n    this.bp = start;\n    this.dataEnd = end;\n    this.chigh = data[start];\n    this.clow = 0;\n    this.byteIn();\n    this.chigh = this.chigh << 7 & 0xffff | this.clow >> 9 & 0x7f;\n    this.clow = this.clow << 7 & 0xffff;\n    this.ct -= 7;\n    this.a = 0x8000;\n  }\n\n  byteIn() {\n    const data = this.data;\n    let bp = this.bp;\n\n    if (data[bp] === 0xff) {\n      if (data[bp + 1] > 0x8f) {\n        this.clow += 0xff00;\n        this.ct = 8;\n      } else {\n        bp++;\n        this.clow += data[bp] << 9;\n        this.ct = 7;\n        this.bp = bp;\n      }\n    } else {\n      bp++;\n      this.clow += bp < this.dataEnd ? data[bp] << 8 : 0xff00;\n      this.ct = 8;\n      this.bp = bp;\n    }\n\n    if (this.clow > 0xffff) {\n      this.chigh += this.clow >> 16;\n      this.clow &= 0xffff;\n    }\n  }\n\n  readBit(contexts, pos) {\n    let cx_index = contexts[pos] >> 1,\n        cx_mps = contexts[pos] & 1;\n    const qeTableIcx = QeTable[cx_index];\n    const qeIcx = qeTableIcx.qe;\n    let d;\n    let a = this.a - qeIcx;\n\n    if (this.chigh < qeIcx) {\n      if (a < qeIcx) {\n        a = qeIcx;\n        d = cx_mps;\n        cx_index = qeTableIcx.nmps;\n      } else {\n        a = qeIcx;\n        d = 1 ^ cx_mps;\n\n        if (qeTableIcx.switchFlag === 1) {\n          cx_mps = d;\n        }\n\n        cx_index = qeTableIcx.nlps;\n      }\n    } else {\n      this.chigh -= qeIcx;\n\n      if ((a & 0x8000) !== 0) {\n        this.a = a;\n        return cx_mps;\n      }\n\n      if (a < qeIcx) {\n        d = 1 ^ cx_mps;\n\n        if (qeTableIcx.switchFlag === 1) {\n          cx_mps = d;\n        }\n\n        cx_index = qeTableIcx.nlps;\n      } else {\n        d = cx_mps;\n        cx_index = qeTableIcx.nmps;\n      }\n    }\n\n    do {\n      if (this.ct === 0) {\n        this.byteIn();\n      }\n\n      a <<= 1;\n      this.chigh = this.chigh << 1 & 0xffff | this.clow >> 15 & 1;\n      this.clow = this.clow << 1 & 0xffff;\n      this.ct--;\n    } while ((a & 0x8000) === 0);\n\n    this.a = a;\n    contexts[pos] = cx_index << 1 | cx_mps;\n    return d;\n  }\n\n}\n\nexports.ArithmeticDecoder = ArithmeticDecoder;\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JpegStream = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _stream = __w_pdfjs_require__(11);\n\nvar _primitives = __w_pdfjs_require__(4);\n\nvar _jpg = __w_pdfjs_require__(18);\n\nconst JpegStream = function JpegStreamClosure() {\n  function JpegStream(stream, maybeLength, dict, params) {\n    let ch;\n\n    while ((ch = stream.getByte()) !== -1) {\n      if (ch === 0xff) {\n        stream.skip(-1);\n        break;\n      }\n    }\n\n    this.stream = stream;\n    this.maybeLength = maybeLength;\n    this.dict = dict;\n    this.params = params;\n\n    _stream.DecodeStream.call(this, maybeLength);\n  }\n\n  JpegStream.prototype = Object.create(_stream.DecodeStream.prototype);\n  Object.defineProperty(JpegStream.prototype, \"bytes\", {\n    get: function JpegStream_bytes() {\n      return (0, _util.shadow)(this, \"bytes\", this.stream.getBytes(this.maybeLength));\n    },\n    configurable: true\n  });\n\n  JpegStream.prototype.ensureBuffer = function (requested) {};\n\n  JpegStream.prototype.readBlock = function () {\n    if (this.eof) {\n      return;\n    }\n\n    const jpegOptions = {\n      decodeTransform: undefined,\n      colorTransform: undefined\n    };\n    const decodeArr = this.dict.getArray(\"Decode\", \"D\");\n\n    if (this.forceRGB && Array.isArray(decodeArr)) {\n      const bitsPerComponent = this.dict.get(\"BitsPerComponent\") || 8;\n      const decodeArrLength = decodeArr.length;\n      const transform = new Int32Array(decodeArrLength);\n      let transformNeeded = false;\n      const maxValue = (1 << bitsPerComponent) - 1;\n\n      for (let i = 0; i < decodeArrLength; i += 2) {\n        transform[i] = (decodeArr[i + 1] - decodeArr[i]) * 256 | 0;\n        transform[i + 1] = decodeArr[i] * maxValue | 0;\n\n        if (transform[i] !== 256 || transform[i + 1] !== 0) {\n          transformNeeded = true;\n        }\n      }\n\n      if (transformNeeded) {\n        jpegOptions.decodeTransform = transform;\n      }\n    }\n\n    if ((0, _primitives.isDict)(this.params)) {\n      const colorTransform = this.params.get(\"ColorTransform\");\n\n      if (Number.isInteger(colorTransform)) {\n        jpegOptions.colorTransform = colorTransform;\n      }\n    }\n\n    const jpegImage = new _jpg.JpegImage(jpegOptions);\n    jpegImage.parse(this.bytes);\n    const data = jpegImage.getData({\n      width: this.drawWidth,\n      height: this.drawHeight,\n      forceRGB: this.forceRGB,\n      isSourcePDF: true\n    });\n    this.buffer = data;\n    this.bufferLength = data.length;\n    this.eof = true;\n  };\n\n  Object.defineProperty(JpegStream.prototype, \"maybeValidDimensions\", {\n    get: function JpegStream_maybeValidDimensions() {\n      const {\n        dict,\n        stream\n      } = this;\n      const dictHeight = dict.get(\"Height\", \"H\");\n      const startPos = stream.pos;\n      let validDimensions = true,\n          foundSOF = false,\n          b;\n\n      while ((b = stream.getByte()) !== -1) {\n        if (b !== 0xff) {\n          continue;\n        }\n\n        switch (stream.getByte()) {\n          case 0xc0:\n          case 0xc1:\n          case 0xc2:\n            foundSOF = true;\n            stream.pos += 2;\n            stream.pos += 1;\n            const scanLines = stream.getUint16();\n\n            if (scanLines === dictHeight) {\n              break;\n            }\n\n            if (scanLines === 0) {\n              validDimensions = false;\n              break;\n            }\n\n            if (scanLines > dictHeight * 10) {\n              validDimensions = false;\n              break;\n            }\n\n            break;\n\n          case 0xc3:\n          case 0xc5:\n          case 0xc6:\n          case 0xc7:\n          case 0xc9:\n          case 0xca:\n          case 0xcb:\n          case 0xcd:\n          case 0xce:\n          case 0xcf:\n            foundSOF = true;\n            break;\n\n          case 0xc4:\n          case 0xcc:\n          case 0xda:\n          case 0xdb:\n          case 0xdc:\n          case 0xdd:\n          case 0xde:\n          case 0xdf:\n          case 0xe0:\n          case 0xe1:\n          case 0xe2:\n          case 0xe3:\n          case 0xe4:\n          case 0xe5:\n          case 0xe6:\n          case 0xe7:\n          case 0xe8:\n          case 0xe9:\n          case 0xea:\n          case 0xeb:\n          case 0xec:\n          case 0xed:\n          case 0xee:\n          case 0xef:\n          case 0xfe:\n            const markerLength = stream.getUint16();\n\n            if (markerLength > 2) {\n              stream.skip(markerLength - 2);\n            } else {\n              stream.skip(-2);\n            }\n\n            break;\n\n          case 0xff:\n            stream.skip(-1);\n            break;\n\n          case 0xd9:\n            foundSOF = true;\n            break;\n        }\n\n        if (foundSOF) {\n          break;\n        }\n      }\n\n      stream.pos = startPos;\n      return (0, _util.shadow)(this, \"maybeValidDimensions\", validDimensions);\n    },\n    configurable: true\n  });\n\n  JpegStream.prototype.getIR = function (forceDataSchema = false) {\n    return (0, _util.createObjectURL)(this.bytes, \"image/jpeg\", forceDataSchema);\n  };\n\n  return JpegStream;\n}();\n\nexports.JpegStream = JpegStream;\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JpegImage = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _core_utils = __w_pdfjs_require__(7);\n\nclass JpegError extends _util.BaseException {\n  constructor(msg) {\n    super(`JPEG error: ${msg}`);\n  }\n\n}\n\nclass DNLMarkerError extends _util.BaseException {\n  constructor(message, scanLines) {\n    super(message);\n    this.scanLines = scanLines;\n  }\n\n}\n\nclass EOIMarkerError extends _util.BaseException {}\n\nvar JpegImage = function JpegImageClosure() {\n  var dctZigZag = new Uint8Array([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63]);\n  var dctCos1 = 4017;\n  var dctSin1 = 799;\n  var dctCos3 = 3406;\n  var dctSin3 = 2276;\n  var dctCos6 = 1567;\n  var dctSin6 = 3784;\n  var dctSqrt2 = 5793;\n  var dctSqrt1d2 = 2896;\n\n  function JpegImage({\n    decodeTransform = null,\n    colorTransform = -1\n  } = {}) {\n    this._decodeTransform = decodeTransform;\n    this._colorTransform = colorTransform;\n  }\n\n  function buildHuffmanTable(codeLengths, values) {\n    var k = 0,\n        code = [],\n        i,\n        j,\n        length = 16;\n\n    while (length > 0 && !codeLengths[length - 1]) {\n      length--;\n    }\n\n    code.push({\n      children: [],\n      index: 0\n    });\n    var p = code[0],\n        q;\n\n    for (i = 0; i < length; i++) {\n      for (j = 0; j < codeLengths[i]; j++) {\n        p = code.pop();\n        p.children[p.index] = values[k];\n\n        while (p.index > 0) {\n          p = code.pop();\n        }\n\n        p.index++;\n        code.push(p);\n\n        while (code.length <= i) {\n          code.push(q = {\n            children: [],\n            index: 0\n          });\n          p.children[p.index] = q.children;\n          p = q;\n        }\n\n        k++;\n      }\n\n      if (i + 1 < length) {\n        code.push(q = {\n          children: [],\n          index: 0\n        });\n        p.children[p.index] = q.children;\n        p = q;\n      }\n    }\n\n    return code[0].children;\n  }\n\n  function getBlockBufferOffset(component, row, col) {\n    return 64 * ((component.blocksPerLine + 1) * row + col);\n  }\n\n  function decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successivePrev, successive, parseDNLMarker = false) {\n    var mcusPerLine = frame.mcusPerLine;\n    var progressive = frame.progressive;\n    var startOffset = offset,\n        bitsData = 0,\n        bitsCount = 0;\n\n    function readBit() {\n      if (bitsCount > 0) {\n        bitsCount--;\n        return bitsData >> bitsCount & 1;\n      }\n\n      bitsData = data[offset++];\n\n      if (bitsData === 0xff) {\n        var nextByte = data[offset++];\n\n        if (nextByte) {\n          if (nextByte === 0xdc && parseDNLMarker) {\n            offset += 2;\n            const scanLines = (0, _core_utils.readUint16)(data, offset);\n            offset += 2;\n\n            if (scanLines > 0 && scanLines !== frame.scanLines) {\n              throw new DNLMarkerError(\"Found DNL marker (0xFFDC) while parsing scan data\", scanLines);\n            }\n          } else if (nextByte === 0xd9) {\n            if (parseDNLMarker) {\n              const maybeScanLines = blockRow * 8;\n\n              if (maybeScanLines > 0 && maybeScanLines < frame.scanLines / 10) {\n                throw new DNLMarkerError(\"Found EOI marker (0xFFD9) while parsing scan data, \" + \"possibly caused by incorrect `scanLines` parameter\", maybeScanLines);\n              }\n            }\n\n            throw new EOIMarkerError(\"Found EOI marker (0xFFD9) while parsing scan data\");\n          }\n\n          throw new JpegError(`unexpected marker ${(bitsData << 8 | nextByte).toString(16)}`);\n        }\n      }\n\n      bitsCount = 7;\n      return bitsData >>> 7;\n    }\n\n    function decodeHuffman(tree) {\n      var node = tree;\n\n      while (true) {\n        node = node[readBit()];\n\n        switch (typeof node) {\n          case \"number\":\n            return node;\n\n          case \"object\":\n            continue;\n        }\n\n        throw new JpegError(\"invalid huffman sequence\");\n      }\n    }\n\n    function receive(length) {\n      var n = 0;\n\n      while (length > 0) {\n        n = n << 1 | readBit();\n        length--;\n      }\n\n      return n;\n    }\n\n    function receiveAndExtend(length) {\n      if (length === 1) {\n        return readBit() === 1 ? 1 : -1;\n      }\n\n      var n = receive(length);\n\n      if (n >= 1 << length - 1) {\n        return n;\n      }\n\n      return n + (-1 << length) + 1;\n    }\n\n    function decodeBaseline(component, offset) {\n      var t = decodeHuffman(component.huffmanTableDC);\n      var diff = t === 0 ? 0 : receiveAndExtend(t);\n      component.blockData[offset] = component.pred += diff;\n      var k = 1;\n\n      while (k < 64) {\n        var rs = decodeHuffman(component.huffmanTableAC);\n        var s = rs & 15,\n            r = rs >> 4;\n\n        if (s === 0) {\n          if (r < 15) {\n            break;\n          }\n\n          k += 16;\n          continue;\n        }\n\n        k += r;\n        var z = dctZigZag[k];\n        component.blockData[offset + z] = receiveAndExtend(s);\n        k++;\n      }\n    }\n\n    function decodeDCFirst(component, offset) {\n      var t = decodeHuffman(component.huffmanTableDC);\n      var diff = t === 0 ? 0 : receiveAndExtend(t) << successive;\n      component.blockData[offset] = component.pred += diff;\n    }\n\n    function decodeDCSuccessive(component, offset) {\n      component.blockData[offset] |= readBit() << successive;\n    }\n\n    var eobrun = 0;\n\n    function decodeACFirst(component, offset) {\n      if (eobrun > 0) {\n        eobrun--;\n        return;\n      }\n\n      var k = spectralStart,\n          e = spectralEnd;\n\n      while (k <= e) {\n        var rs = decodeHuffman(component.huffmanTableAC);\n        var s = rs & 15,\n            r = rs >> 4;\n\n        if (s === 0) {\n          if (r < 15) {\n            eobrun = receive(r) + (1 << r) - 1;\n            break;\n          }\n\n          k += 16;\n          continue;\n        }\n\n        k += r;\n        var z = dctZigZag[k];\n        component.blockData[offset + z] = receiveAndExtend(s) * (1 << successive);\n        k++;\n      }\n    }\n\n    var successiveACState = 0,\n        successiveACNextValue;\n\n    function decodeACSuccessive(component, offset) {\n      var k = spectralStart;\n      var e = spectralEnd;\n      var r = 0;\n      var s;\n      var rs;\n\n      while (k <= e) {\n        const offsetZ = offset + dctZigZag[k];\n        const sign = component.blockData[offsetZ] < 0 ? -1 : 1;\n\n        switch (successiveACState) {\n          case 0:\n            rs = decodeHuffman(component.huffmanTableAC);\n            s = rs & 15;\n            r = rs >> 4;\n\n            if (s === 0) {\n              if (r < 15) {\n                eobrun = receive(r) + (1 << r);\n                successiveACState = 4;\n              } else {\n                r = 16;\n                successiveACState = 1;\n              }\n            } else {\n              if (s !== 1) {\n                throw new JpegError(\"invalid ACn encoding\");\n              }\n\n              successiveACNextValue = receiveAndExtend(s);\n              successiveACState = r ? 2 : 3;\n            }\n\n            continue;\n\n          case 1:\n          case 2:\n            if (component.blockData[offsetZ]) {\n              component.blockData[offsetZ] += sign * (readBit() << successive);\n            } else {\n              r--;\n\n              if (r === 0) {\n                successiveACState = successiveACState === 2 ? 3 : 0;\n              }\n            }\n\n            break;\n\n          case 3:\n            if (component.blockData[offsetZ]) {\n              component.blockData[offsetZ] += sign * (readBit() << successive);\n            } else {\n              component.blockData[offsetZ] = successiveACNextValue << successive;\n              successiveACState = 0;\n            }\n\n            break;\n\n          case 4:\n            if (component.blockData[offsetZ]) {\n              component.blockData[offsetZ] += sign * (readBit() << successive);\n            }\n\n            break;\n        }\n\n        k++;\n      }\n\n      if (successiveACState === 4) {\n        eobrun--;\n\n        if (eobrun === 0) {\n          successiveACState = 0;\n        }\n      }\n    }\n\n    let blockRow = 0;\n\n    function decodeMcu(component, decode, mcu, row, col) {\n      var mcuRow = mcu / mcusPerLine | 0;\n      var mcuCol = mcu % mcusPerLine;\n      blockRow = mcuRow * component.v + row;\n      var blockCol = mcuCol * component.h + col;\n      var offset = getBlockBufferOffset(component, blockRow, blockCol);\n      decode(component, offset);\n    }\n\n    function decodeBlock(component, decode, mcu) {\n      blockRow = mcu / component.blocksPerLine | 0;\n      var blockCol = mcu % component.blocksPerLine;\n      var offset = getBlockBufferOffset(component, blockRow, blockCol);\n      decode(component, offset);\n    }\n\n    var componentsLength = components.length;\n    var component, i, j, k, n;\n    var decodeFn;\n\n    if (progressive) {\n      if (spectralStart === 0) {\n        decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;\n      } else {\n        decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;\n      }\n    } else {\n      decodeFn = decodeBaseline;\n    }\n\n    var mcu = 0,\n        fileMarker;\n    var mcuExpected;\n\n    if (componentsLength === 1) {\n      mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;\n    } else {\n      mcuExpected = mcusPerLine * frame.mcusPerColumn;\n    }\n\n    var h, v;\n\n    while (mcu < mcuExpected) {\n      var mcuToRead = resetInterval ? Math.min(mcuExpected - mcu, resetInterval) : mcuExpected;\n\n      for (i = 0; i < componentsLength; i++) {\n        components[i].pred = 0;\n      }\n\n      eobrun = 0;\n\n      if (componentsLength === 1) {\n        component = components[0];\n\n        for (n = 0; n < mcuToRead; n++) {\n          decodeBlock(component, decodeFn, mcu);\n          mcu++;\n        }\n      } else {\n        for (n = 0; n < mcuToRead; n++) {\n          for (i = 0; i < componentsLength; i++) {\n            component = components[i];\n            h = component.h;\n            v = component.v;\n\n            for (j = 0; j < v; j++) {\n              for (k = 0; k < h; k++) {\n                decodeMcu(component, decodeFn, mcu, j, k);\n              }\n            }\n          }\n\n          mcu++;\n        }\n      }\n\n      bitsCount = 0;\n      fileMarker = findNextFileMarker(data, offset);\n\n      if (!fileMarker) {\n        break;\n      } else if (fileMarker.invalid) {\n        (0, _util.warn)(\"decodeScan - unexpected MCU data, current marker is: \" + fileMarker.invalid);\n        offset = fileMarker.offset;\n      }\n\n      var marker = fileMarker && fileMarker.marker;\n\n      if (!marker || marker <= 0xff00) {\n        throw new JpegError(\"decodeScan - a valid marker was not found.\");\n      }\n\n      if (marker >= 0xffd0 && marker <= 0xffd7) {\n        offset += 2;\n      } else {\n        break;\n      }\n    }\n\n    fileMarker = findNextFileMarker(data, offset);\n\n    if (fileMarker && fileMarker.invalid) {\n      (0, _util.warn)(\"decodeScan - unexpected Scan data, current marker is: \" + fileMarker.invalid);\n      offset = fileMarker.offset;\n    }\n\n    return offset - startOffset;\n  }\n\n  function quantizeAndInverse(component, blockBufferOffset, p) {\n    var qt = component.quantizationTable,\n        blockData = component.blockData;\n    var v0, v1, v2, v3, v4, v5, v6, v7;\n    var p0, p1, p2, p3, p4, p5, p6, p7;\n    var t;\n\n    if (!qt) {\n      throw new JpegError(\"missing required Quantization Table.\");\n    }\n\n    for (var row = 0; row < 64; row += 8) {\n      p0 = blockData[blockBufferOffset + row];\n      p1 = blockData[blockBufferOffset + row + 1];\n      p2 = blockData[blockBufferOffset + row + 2];\n      p3 = blockData[blockBufferOffset + row + 3];\n      p4 = blockData[blockBufferOffset + row + 4];\n      p5 = blockData[blockBufferOffset + row + 5];\n      p6 = blockData[blockBufferOffset + row + 6];\n      p7 = blockData[blockBufferOffset + row + 7];\n      p0 *= qt[row];\n\n      if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {\n        t = dctSqrt2 * p0 + 512 >> 10;\n        p[row] = t;\n        p[row + 1] = t;\n        p[row + 2] = t;\n        p[row + 3] = t;\n        p[row + 4] = t;\n        p[row + 5] = t;\n        p[row + 6] = t;\n        p[row + 7] = t;\n        continue;\n      }\n\n      p1 *= qt[row + 1];\n      p2 *= qt[row + 2];\n      p3 *= qt[row + 3];\n      p4 *= qt[row + 4];\n      p5 *= qt[row + 5];\n      p6 *= qt[row + 6];\n      p7 *= qt[row + 7];\n      v0 = dctSqrt2 * p0 + 128 >> 8;\n      v1 = dctSqrt2 * p4 + 128 >> 8;\n      v2 = p2;\n      v3 = p6;\n      v4 = dctSqrt1d2 * (p1 - p7) + 128 >> 8;\n      v7 = dctSqrt1d2 * (p1 + p7) + 128 >> 8;\n      v5 = p3 << 4;\n      v6 = p5 << 4;\n      v0 = v0 + v1 + 1 >> 1;\n      v1 = v0 - v1;\n      t = v2 * dctSin6 + v3 * dctCos6 + 128 >> 8;\n      v2 = v2 * dctCos6 - v3 * dctSin6 + 128 >> 8;\n      v3 = t;\n      v4 = v4 + v6 + 1 >> 1;\n      v6 = v4 - v6;\n      v7 = v7 + v5 + 1 >> 1;\n      v5 = v7 - v5;\n      v0 = v0 + v3 + 1 >> 1;\n      v3 = v0 - v3;\n      v1 = v1 + v2 + 1 >> 1;\n      v2 = v1 - v2;\n      t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;\n      v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;\n      v7 = t;\n      t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;\n      v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;\n      v6 = t;\n      p[row] = v0 + v7;\n      p[row + 7] = v0 - v7;\n      p[row + 1] = v1 + v6;\n      p[row + 6] = v1 - v6;\n      p[row + 2] = v2 + v5;\n      p[row + 5] = v2 - v5;\n      p[row + 3] = v3 + v4;\n      p[row + 4] = v3 - v4;\n    }\n\n    for (var col = 0; col < 8; ++col) {\n      p0 = p[col];\n      p1 = p[col + 8];\n      p2 = p[col + 16];\n      p3 = p[col + 24];\n      p4 = p[col + 32];\n      p5 = p[col + 40];\n      p6 = p[col + 48];\n      p7 = p[col + 56];\n\n      if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {\n        t = dctSqrt2 * p0 + 8192 >> 14;\n\n        if (t < -2040) {\n          t = 0;\n        } else if (t >= 2024) {\n          t = 255;\n        } else {\n          t = t + 2056 >> 4;\n        }\n\n        blockData[blockBufferOffset + col] = t;\n        blockData[blockBufferOffset + col + 8] = t;\n        blockData[blockBufferOffset + col + 16] = t;\n        blockData[blockBufferOffset + col + 24] = t;\n        blockData[blockBufferOffset + col + 32] = t;\n        blockData[blockBufferOffset + col + 40] = t;\n        blockData[blockBufferOffset + col + 48] = t;\n        blockData[blockBufferOffset + col + 56] = t;\n        continue;\n      }\n\n      v0 = dctSqrt2 * p0 + 2048 >> 12;\n      v1 = dctSqrt2 * p4 + 2048 >> 12;\n      v2 = p2;\n      v3 = p6;\n      v4 = dctSqrt1d2 * (p1 - p7) + 2048 >> 12;\n      v7 = dctSqrt1d2 * (p1 + p7) + 2048 >> 12;\n      v5 = p3;\n      v6 = p5;\n      v0 = (v0 + v1 + 1 >> 1) + 4112;\n      v1 = v0 - v1;\n      t = v2 * dctSin6 + v3 * dctCos6 + 2048 >> 12;\n      v2 = v2 * dctCos6 - v3 * dctSin6 + 2048 >> 12;\n      v3 = t;\n      v4 = v4 + v6 + 1 >> 1;\n      v6 = v4 - v6;\n      v7 = v7 + v5 + 1 >> 1;\n      v5 = v7 - v5;\n      v0 = v0 + v3 + 1 >> 1;\n      v3 = v0 - v3;\n      v1 = v1 + v2 + 1 >> 1;\n      v2 = v1 - v2;\n      t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;\n      v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;\n      v7 = t;\n      t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;\n      v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;\n      v6 = t;\n      p0 = v0 + v7;\n      p7 = v0 - v7;\n      p1 = v1 + v6;\n      p6 = v1 - v6;\n      p2 = v2 + v5;\n      p5 = v2 - v5;\n      p3 = v3 + v4;\n      p4 = v3 - v4;\n\n      if (p0 < 16) {\n        p0 = 0;\n      } else if (p0 >= 4080) {\n        p0 = 255;\n      } else {\n        p0 >>= 4;\n      }\n\n      if (p1 < 16) {\n        p1 = 0;\n      } else if (p1 >= 4080) {\n        p1 = 255;\n      } else {\n        p1 >>= 4;\n      }\n\n      if (p2 < 16) {\n        p2 = 0;\n      } else if (p2 >= 4080) {\n        p2 = 255;\n      } else {\n        p2 >>= 4;\n      }\n\n      if (p3 < 16) {\n        p3 = 0;\n      } else if (p3 >= 4080) {\n        p3 = 255;\n      } else {\n        p3 >>= 4;\n      }\n\n      if (p4 < 16) {\n        p4 = 0;\n      } else if (p4 >= 4080) {\n        p4 = 255;\n      } else {\n        p4 >>= 4;\n      }\n\n      if (p5 < 16) {\n        p5 = 0;\n      } else if (p5 >= 4080) {\n        p5 = 255;\n      } else {\n        p5 >>= 4;\n      }\n\n      if (p6 < 16) {\n        p6 = 0;\n      } else if (p6 >= 4080) {\n        p6 = 255;\n      } else {\n        p6 >>= 4;\n      }\n\n      if (p7 < 16) {\n        p7 = 0;\n      } else if (p7 >= 4080) {\n        p7 = 255;\n      } else {\n        p7 >>= 4;\n      }\n\n      blockData[blockBufferOffset + col] = p0;\n      blockData[blockBufferOffset + col + 8] = p1;\n      blockData[blockBufferOffset + col + 16] = p2;\n      blockData[blockBufferOffset + col + 24] = p3;\n      blockData[blockBufferOffset + col + 32] = p4;\n      blockData[blockBufferOffset + col + 40] = p5;\n      blockData[blockBufferOffset + col + 48] = p6;\n      blockData[blockBufferOffset + col + 56] = p7;\n    }\n  }\n\n  function buildComponentData(frame, component) {\n    var blocksPerLine = component.blocksPerLine;\n    var blocksPerColumn = component.blocksPerColumn;\n    var computationBuffer = new Int16Array(64);\n\n    for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n      for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n        var offset = getBlockBufferOffset(component, blockRow, blockCol);\n        quantizeAndInverse(component, offset, computationBuffer);\n      }\n    }\n\n    return component.blockData;\n  }\n\n  function findNextFileMarker(data, currentPos, startPos = currentPos) {\n    const maxPos = data.length - 1;\n    var newPos = startPos < currentPos ? startPos : currentPos;\n\n    if (currentPos >= maxPos) {\n      return null;\n    }\n\n    var currentMarker = (0, _core_utils.readUint16)(data, currentPos);\n\n    if (currentMarker >= 0xffc0 && currentMarker <= 0xfffe) {\n      return {\n        invalid: null,\n        marker: currentMarker,\n        offset: currentPos\n      };\n    }\n\n    var newMarker = (0, _core_utils.readUint16)(data, newPos);\n\n    while (!(newMarker >= 0xffc0 && newMarker <= 0xfffe)) {\n      if (++newPos >= maxPos) {\n        return null;\n      }\n\n      newMarker = (0, _core_utils.readUint16)(data, newPos);\n    }\n\n    return {\n      invalid: currentMarker.toString(16),\n      marker: newMarker,\n      offset: newPos\n    };\n  }\n\n  JpegImage.prototype = {\n    parse(data, {\n      dnlScanLines = null\n    } = {}) {\n      function readDataBlock() {\n        const length = (0, _core_utils.readUint16)(data, offset);\n        offset += 2;\n        let endOffset = offset + length - 2;\n        var fileMarker = findNextFileMarker(data, endOffset, offset);\n\n        if (fileMarker && fileMarker.invalid) {\n          (0, _util.warn)(\"readDataBlock - incorrect length, current marker is: \" + fileMarker.invalid);\n          endOffset = fileMarker.offset;\n        }\n\n        var array = data.subarray(offset, endOffset);\n        offset += array.length;\n        return array;\n      }\n\n      function prepareComponents(frame) {\n        var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / frame.maxH);\n        var mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);\n\n        for (var i = 0; i < frame.components.length; i++) {\n          component = frame.components[i];\n          var blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) * component.h / frame.maxH);\n          var blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines / 8) * component.v / frame.maxV);\n          var blocksPerLineForMcu = mcusPerLine * component.h;\n          var blocksPerColumnForMcu = mcusPerColumn * component.v;\n          var blocksBufferSize = 64 * blocksPerColumnForMcu * (blocksPerLineForMcu + 1);\n          component.blockData = new Int16Array(blocksBufferSize);\n          component.blocksPerLine = blocksPerLine;\n          component.blocksPerColumn = blocksPerColumn;\n        }\n\n        frame.mcusPerLine = mcusPerLine;\n        frame.mcusPerColumn = mcusPerColumn;\n      }\n\n      var offset = 0;\n      var jfif = null;\n      var adobe = null;\n      var frame, resetInterval;\n      let numSOSMarkers = 0;\n      var quantizationTables = [];\n      var huffmanTablesAC = [],\n          huffmanTablesDC = [];\n      let fileMarker = (0, _core_utils.readUint16)(data, offset);\n      offset += 2;\n\n      if (fileMarker !== 0xffd8) {\n        throw new JpegError(\"SOI not found\");\n      }\n\n      fileMarker = (0, _core_utils.readUint16)(data, offset);\n      offset += 2;\n\n      markerLoop: while (fileMarker !== 0xffd9) {\n        var i, j, l;\n\n        switch (fileMarker) {\n          case 0xffe0:\n          case 0xffe1:\n          case 0xffe2:\n          case 0xffe3:\n          case 0xffe4:\n          case 0xffe5:\n          case 0xffe6:\n          case 0xffe7:\n          case 0xffe8:\n          case 0xffe9:\n          case 0xffea:\n          case 0xffeb:\n          case 0xffec:\n          case 0xffed:\n          case 0xffee:\n          case 0xffef:\n          case 0xfffe:\n            var appData = readDataBlock();\n\n            if (fileMarker === 0xffe0) {\n              if (appData[0] === 0x4a && appData[1] === 0x46 && appData[2] === 0x49 && appData[3] === 0x46 && appData[4] === 0) {\n                jfif = {\n                  version: {\n                    major: appData[5],\n                    minor: appData[6]\n                  },\n                  densityUnits: appData[7],\n                  xDensity: appData[8] << 8 | appData[9],\n                  yDensity: appData[10] << 8 | appData[11],\n                  thumbWidth: appData[12],\n                  thumbHeight: appData[13],\n                  thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13])\n                };\n              }\n            }\n\n            if (fileMarker === 0xffee) {\n              if (appData[0] === 0x41 && appData[1] === 0x64 && appData[2] === 0x6f && appData[3] === 0x62 && appData[4] === 0x65) {\n                adobe = {\n                  version: appData[5] << 8 | appData[6],\n                  flags0: appData[7] << 8 | appData[8],\n                  flags1: appData[9] << 8 | appData[10],\n                  transformCode: appData[11]\n                };\n              }\n            }\n\n            break;\n\n          case 0xffdb:\n            const quantizationTablesLength = (0, _core_utils.readUint16)(data, offset);\n            offset += 2;\n            var quantizationTablesEnd = quantizationTablesLength + offset - 2;\n            var z;\n\n            while (offset < quantizationTablesEnd) {\n              var quantizationTableSpec = data[offset++];\n              var tableData = new Uint16Array(64);\n\n              if (quantizationTableSpec >> 4 === 0) {\n                for (j = 0; j < 64; j++) {\n                  z = dctZigZag[j];\n                  tableData[z] = data[offset++];\n                }\n              } else if (quantizationTableSpec >> 4 === 1) {\n                for (j = 0; j < 64; j++) {\n                  z = dctZigZag[j];\n                  tableData[z] = (0, _core_utils.readUint16)(data, offset);\n                  offset += 2;\n                }\n              } else {\n                throw new JpegError(\"DQT - invalid table spec\");\n              }\n\n              quantizationTables[quantizationTableSpec & 15] = tableData;\n            }\n\n            break;\n\n          case 0xffc0:\n          case 0xffc1:\n          case 0xffc2:\n            if (frame) {\n              throw new JpegError(\"Only single frame JPEGs supported\");\n            }\n\n            offset += 2;\n            frame = {};\n            frame.extended = fileMarker === 0xffc1;\n            frame.progressive = fileMarker === 0xffc2;\n            frame.precision = data[offset++];\n            const sofScanLines = (0, _core_utils.readUint16)(data, offset);\n            offset += 2;\n            frame.scanLines = dnlScanLines || sofScanLines;\n            frame.samplesPerLine = (0, _core_utils.readUint16)(data, offset);\n            offset += 2;\n            frame.components = [];\n            frame.componentIds = {};\n            var componentsCount = data[offset++],\n                componentId;\n            var maxH = 0,\n                maxV = 0;\n\n            for (i = 0; i < componentsCount; i++) {\n              componentId = data[offset];\n              var h = data[offset + 1] >> 4;\n              var v = data[offset + 1] & 15;\n\n              if (maxH < h) {\n                maxH = h;\n              }\n\n              if (maxV < v) {\n                maxV = v;\n              }\n\n              var qId = data[offset + 2];\n              l = frame.components.push({\n                h,\n                v,\n                quantizationId: qId,\n                quantizationTable: null\n              });\n              frame.componentIds[componentId] = l - 1;\n              offset += 3;\n            }\n\n            frame.maxH = maxH;\n            frame.maxV = maxV;\n            prepareComponents(frame);\n            break;\n\n          case 0xffc4:\n            const huffmanLength = (0, _core_utils.readUint16)(data, offset);\n            offset += 2;\n\n            for (i = 2; i < huffmanLength;) {\n              var huffmanTableSpec = data[offset++];\n              var codeLengths = new Uint8Array(16);\n              var codeLengthSum = 0;\n\n              for (j = 0; j < 16; j++, offset++) {\n                codeLengthSum += codeLengths[j] = data[offset];\n              }\n\n              var huffmanValues = new Uint8Array(codeLengthSum);\n\n              for (j = 0; j < codeLengthSum; j++, offset++) {\n                huffmanValues[j] = data[offset];\n              }\n\n              i += 17 + codeLengthSum;\n              (huffmanTableSpec >> 4 === 0 ? huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] = buildHuffmanTable(codeLengths, huffmanValues);\n            }\n\n            break;\n\n          case 0xffdd:\n            offset += 2;\n            resetInterval = (0, _core_utils.readUint16)(data, offset);\n            offset += 2;\n            break;\n\n          case 0xffda:\n            const parseDNLMarker = ++numSOSMarkers === 1 && !dnlScanLines;\n            offset += 2;\n            var selectorsCount = data[offset++];\n            var components = [],\n                component;\n\n            for (i = 0; i < selectorsCount; i++) {\n              var componentIndex = frame.componentIds[data[offset++]];\n              component = frame.components[componentIndex];\n              var tableSpec = data[offset++];\n              component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];\n              component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];\n              components.push(component);\n            }\n\n            var spectralStart = data[offset++];\n            var spectralEnd = data[offset++];\n            var successiveApproximation = data[offset++];\n\n            try {\n              var processed = decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successiveApproximation >> 4, successiveApproximation & 15, parseDNLMarker);\n              offset += processed;\n            } catch (ex) {\n              if (ex instanceof DNLMarkerError) {\n                (0, _util.warn)(`${ex.message} -- attempting to re-parse the JPEG image.`);\n                return this.parse(data, {\n                  dnlScanLines: ex.scanLines\n                });\n              } else if (ex instanceof EOIMarkerError) {\n                (0, _util.warn)(`${ex.message} -- ignoring the rest of the image data.`);\n                break markerLoop;\n              }\n\n              throw ex;\n            }\n\n            break;\n\n          case 0xffdc:\n            offset += 4;\n            break;\n\n          case 0xffff:\n            if (data[offset] !== 0xff) {\n              offset--;\n            }\n\n            break;\n\n          default:\n            const nextFileMarker = findNextFileMarker(data, offset - 2, offset - 3);\n\n            if (nextFileMarker && nextFileMarker.invalid) {\n              (0, _util.warn)(\"JpegImage.parse - unexpected data, current marker is: \" + nextFileMarker.invalid);\n              offset = nextFileMarker.offset;\n              break;\n            }\n\n            if (offset >= data.length - 1) {\n              (0, _util.warn)(\"JpegImage.parse - reached the end of the image data \" + \"without finding an EOI marker (0xFFD9).\");\n              break markerLoop;\n            }\n\n            throw new JpegError(\"JpegImage.parse - unknown marker: \" + fileMarker.toString(16));\n        }\n\n        fileMarker = (0, _core_utils.readUint16)(data, offset);\n        offset += 2;\n      }\n\n      this.width = frame.samplesPerLine;\n      this.height = frame.scanLines;\n      this.jfif = jfif;\n      this.adobe = adobe;\n      this.components = [];\n\n      for (i = 0; i < frame.components.length; i++) {\n        component = frame.components[i];\n        var quantizationTable = quantizationTables[component.quantizationId];\n\n        if (quantizationTable) {\n          component.quantizationTable = quantizationTable;\n        }\n\n        this.components.push({\n          output: buildComponentData(frame, component),\n          scaleX: component.h / frame.maxH,\n          scaleY: component.v / frame.maxV,\n          blocksPerLine: component.blocksPerLine,\n          blocksPerColumn: component.blocksPerColumn\n        });\n      }\n\n      this.numComponents = this.components.length;\n      return undefined;\n    },\n\n    _getLinearizedBlockData(width, height, isSourcePDF = false) {\n      var scaleX = this.width / width,\n          scaleY = this.height / height;\n      var component, componentScaleX, componentScaleY, blocksPerScanline;\n      var x, y, i, j, k;\n      var index;\n      var offset = 0;\n      var output;\n      var numComponents = this.components.length;\n      var dataLength = width * height * numComponents;\n      var data = new Uint8ClampedArray(dataLength);\n      var xScaleBlockOffset = new Uint32Array(width);\n      var mask3LSB = 0xfffffff8;\n      let lastComponentScaleX;\n\n      for (i = 0; i < numComponents; i++) {\n        component = this.components[i];\n        componentScaleX = component.scaleX * scaleX;\n        componentScaleY = component.scaleY * scaleY;\n        offset = i;\n        output = component.output;\n        blocksPerScanline = component.blocksPerLine + 1 << 3;\n\n        if (componentScaleX !== lastComponentScaleX) {\n          for (x = 0; x < width; x++) {\n            j = 0 | x * componentScaleX;\n            xScaleBlockOffset[x] = (j & mask3LSB) << 3 | j & 7;\n          }\n\n          lastComponentScaleX = componentScaleX;\n        }\n\n        for (y = 0; y < height; y++) {\n          j = 0 | y * componentScaleY;\n          index = blocksPerScanline * (j & mask3LSB) | (j & 7) << 3;\n\n          for (x = 0; x < width; x++) {\n            data[offset] = output[index + xScaleBlockOffset[x]];\n            offset += numComponents;\n          }\n        }\n      }\n\n      let transform = this._decodeTransform;\n\n      if (!isSourcePDF && numComponents === 4 && !transform) {\n        transform = new Int32Array([-256, 255, -256, 255, -256, 255, -256, 255]);\n      }\n\n      if (transform) {\n        for (i = 0; i < dataLength;) {\n          for (j = 0, k = 0; j < numComponents; j++, i++, k += 2) {\n            data[i] = (data[i] * transform[k] >> 8) + transform[k + 1];\n          }\n        }\n      }\n\n      return data;\n    },\n\n    get _isColorConversionNeeded() {\n      if (this.adobe) {\n        return !!this.adobe.transformCode;\n      }\n\n      if (this.numComponents === 3) {\n        if (this._colorTransform === 0) {\n          return false;\n        }\n\n        return true;\n      }\n\n      if (this._colorTransform === 1) {\n        return true;\n      }\n\n      return false;\n    },\n\n    _convertYccToRgb: function convertYccToRgb(data) {\n      var Y, Cb, Cr;\n\n      for (var i = 0, length = data.length; i < length; i += 3) {\n        Y = data[i];\n        Cb = data[i + 1];\n        Cr = data[i + 2];\n        data[i] = Y - 179.456 + 1.402 * Cr;\n        data[i + 1] = Y + 135.459 - 0.344 * Cb - 0.714 * Cr;\n        data[i + 2] = Y - 226.816 + 1.772 * Cb;\n      }\n\n      return data;\n    },\n    _convertYcckToRgb: function convertYcckToRgb(data) {\n      var Y, Cb, Cr, k;\n      var offset = 0;\n\n      for (var i = 0, length = data.length; i < length; i += 4) {\n        Y = data[i];\n        Cb = data[i + 1];\n        Cr = data[i + 2];\n        k = data[i + 3];\n        data[offset++] = -122.67195406894 + Cb * (-6.60635669420364e-5 * Cb + 0.000437130475926232 * Cr - 5.4080610064599e-5 * Y + 0.00048449797120281 * k - 0.154362151871126) + Cr * (-0.000957964378445773 * Cr + 0.000817076911346625 * Y - 0.00477271405408747 * k + 1.53380253221734) + Y * (0.000961250184130688 * Y - 0.00266257332283933 * k + 0.48357088451265) + k * (-0.000336197177618394 * k + 0.484791561490776);\n        data[offset++] = 107.268039397724 + Cb * (2.19927104525741e-5 * Cb - 0.000640992018297945 * Cr + 0.000659397001245577 * Y + 0.000426105652938837 * k - 0.176491792462875) + Cr * (-0.000778269941513683 * Cr + 0.00130872261408275 * Y + 0.000770482631801132 * k - 0.151051492775562) + Y * (0.00126935368114843 * Y - 0.00265090189010898 * k + 0.25802910206845) + k * (-0.000318913117588328 * k - 0.213742400323665);\n        data[offset++] = -20.810012546947 + Cb * (-0.000570115196973677 * Cb - 2.63409051004589e-5 * Cr + 0.0020741088115012 * Y - 0.00288260236853442 * k + 0.814272968359295) + Cr * (-1.53496057440975e-5 * Cr - 0.000132689043961446 * Y + 0.000560833691242812 * k - 0.195152027534049) + Y * (0.00174418132927582 * Y - 0.00255243321439347 * k + 0.116935020465145) + k * (-0.000343531996510555 * k + 0.24165260232407);\n      }\n\n      return data.subarray(0, offset);\n    },\n    _convertYcckToCmyk: function convertYcckToCmyk(data) {\n      var Y, Cb, Cr;\n\n      for (var i = 0, length = data.length; i < length; i += 4) {\n        Y = data[i];\n        Cb = data[i + 1];\n        Cr = data[i + 2];\n        data[i] = 434.456 - Y - 1.402 * Cr;\n        data[i + 1] = 119.541 - Y + 0.344 * Cb + 0.714 * Cr;\n        data[i + 2] = 481.816 - Y - 1.772 * Cb;\n      }\n\n      return data;\n    },\n    _convertCmykToRgb: function convertCmykToRgb(data) {\n      var c, m, y, k;\n      var offset = 0;\n\n      for (var i = 0, length = data.length; i < length; i += 4) {\n        c = data[i];\n        m = data[i + 1];\n        y = data[i + 2];\n        k = data[i + 3];\n        data[offset++] = 255 + c * (-0.00006747147073602441 * c + 0.0008379262121013727 * m + 0.0002894718188643294 * y + 0.003264231057537806 * k - 1.1185611867203937) + m * (0.000026374107616089405 * m - 0.00008626949158638572 * y - 0.0002748769067499491 * k - 0.02155688794978967) + y * (-0.00003878099212869363 * y - 0.0003267808279485286 * k + 0.0686742238595345) - k * (0.0003361971776183937 * k + 0.7430659151342254);\n        data[offset++] = 255 + c * (0.00013596372813588848 * c + 0.000924537132573585 * m + 0.00010567359618683593 * y + 0.0004791864687436512 * k - 0.3109689587515875) + m * (-0.00023545346108370344 * m + 0.0002702845253534714 * y + 0.0020200308977307156 * k - 0.7488052167015494) + y * (0.00006834815998235662 * y + 0.00015168452363460973 * k - 0.09751927774728933) - k * (0.00031891311758832814 * k + 0.7364883807733168);\n        data[offset++] = 255 + c * (0.000013598650411385307 * c + 0.00012423956175490851 * m + 0.0004751985097583589 * y - 0.0000036729317476630422 * k - 0.05562186980264034) + m * (0.00016141380598724676 * m + 0.0009692239130725186 * y + 0.0007782692450036253 * k - 0.44015232367526463) + y * (5.068882914068769e-7 * y + 0.0017778369011375071 * k - 0.7591454649749609) - k * (0.0003435319965105553 * k + 0.7063770186160144);\n      }\n\n      return data.subarray(0, offset);\n    },\n\n    getData({\n      width,\n      height,\n      forceRGB = false,\n      isSourcePDF = false\n    }) {\n      if (this.numComponents > 4) {\n        throw new JpegError(\"Unsupported color mode\");\n      }\n\n      var data = this._getLinearizedBlockData(width, height, isSourcePDF);\n\n      if (this.numComponents === 1 && forceRGB) {\n        var dataLength = data.length;\n        var rgbData = new Uint8ClampedArray(dataLength * 3);\n        var offset = 0;\n\n        for (var i = 0; i < dataLength; i++) {\n          var grayColor = data[i];\n          rgbData[offset++] = grayColor;\n          rgbData[offset++] = grayColor;\n          rgbData[offset++] = grayColor;\n        }\n\n        return rgbData;\n      } else if (this.numComponents === 3 && this._isColorConversionNeeded) {\n        return this._convertYccToRgb(data);\n      } else if (this.numComponents === 4) {\n        if (this._isColorConversionNeeded) {\n          if (forceRGB) {\n            return this._convertYcckToRgb(data);\n          }\n\n          return this._convertYcckToCmyk(data);\n        } else if (forceRGB) {\n          return this._convertCmykToRgb(data);\n        }\n      }\n\n      return data;\n    }\n\n  };\n  return JpegImage;\n}();\n\nexports.JpegImage = JpegImage;\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JpxStream = void 0;\n\nvar _stream = __w_pdfjs_require__(11);\n\nvar _jpx = __w_pdfjs_require__(20);\n\nvar _util = __w_pdfjs_require__(2);\n\nconst JpxStream = function JpxStreamClosure() {\n  function JpxStream(stream, maybeLength, dict, params) {\n    this.stream = stream;\n    this.maybeLength = maybeLength;\n    this.dict = dict;\n    this.params = params;\n\n    _stream.DecodeStream.call(this, maybeLength);\n  }\n\n  JpxStream.prototype = Object.create(_stream.DecodeStream.prototype);\n  Object.defineProperty(JpxStream.prototype, \"bytes\", {\n    get: function JpxStream_bytes() {\n      return (0, _util.shadow)(this, \"bytes\", this.stream.getBytes(this.maybeLength));\n    },\n    configurable: true\n  });\n\n  JpxStream.prototype.ensureBuffer = function (requested) {};\n\n  JpxStream.prototype.readBlock = function () {\n    if (this.eof) {\n      return;\n    }\n\n    const jpxImage = new _jpx.JpxImage();\n    jpxImage.parse(this.bytes);\n    const width = jpxImage.width;\n    const height = jpxImage.height;\n    const componentsCount = jpxImage.componentsCount;\n    const tileCount = jpxImage.tiles.length;\n\n    if (tileCount === 1) {\n      this.buffer = jpxImage.tiles[0].items;\n    } else {\n      const data = new Uint8ClampedArray(width * height * componentsCount);\n\n      for (let k = 0; k < tileCount; k++) {\n        const tileComponents = jpxImage.tiles[k];\n        const tileWidth = tileComponents.width;\n        const tileHeight = tileComponents.height;\n        const tileLeft = tileComponents.left;\n        const tileTop = tileComponents.top;\n        const src = tileComponents.items;\n        let srcPosition = 0;\n        let dataPosition = (width * tileTop + tileLeft) * componentsCount;\n        const imgRowSize = width * componentsCount;\n        const tileRowSize = tileWidth * componentsCount;\n\n        for (let j = 0; j < tileHeight; j++) {\n          const rowBytes = src.subarray(srcPosition, srcPosition + tileRowSize);\n          data.set(rowBytes, dataPosition);\n          srcPosition += tileRowSize;\n          dataPosition += imgRowSize;\n        }\n      }\n\n      this.buffer = data;\n    }\n\n    this.bufferLength = this.buffer.length;\n    this.eof = true;\n  };\n\n  return JpxStream;\n}();\n\nexports.JpxStream = JpxStream;\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JpxImage = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _core_utils = __w_pdfjs_require__(7);\n\nvar _arithmetic_decoder = __w_pdfjs_require__(16);\n\nclass JpxError extends _util.BaseException {\n  constructor(msg) {\n    super(`JPX error: ${msg}`);\n  }\n\n}\n\nvar JpxImage = function JpxImageClosure() {\n  var SubbandsGainLog2 = {\n    LL: 0,\n    LH: 1,\n    HL: 1,\n    HH: 2\n  };\n\n  function JpxImage() {\n    this.failOnCorruptedImage = false;\n  }\n\n  JpxImage.prototype = {\n    parse: function JpxImage_parse(data) {\n      var head = (0, _core_utils.readUint16)(data, 0);\n\n      if (head === 0xff4f) {\n        this.parseCodestream(data, 0, data.length);\n        return;\n      }\n\n      var position = 0,\n          length = data.length;\n\n      while (position < length) {\n        var headerSize = 8;\n        var lbox = (0, _core_utils.readUint32)(data, position);\n        var tbox = (0, _core_utils.readUint32)(data, position + 4);\n        position += headerSize;\n\n        if (lbox === 1) {\n          lbox = (0, _core_utils.readUint32)(data, position) * 4294967296 + (0, _core_utils.readUint32)(data, position + 4);\n          position += 8;\n          headerSize += 8;\n        }\n\n        if (lbox === 0) {\n          lbox = length - position + headerSize;\n        }\n\n        if (lbox < headerSize) {\n          throw new JpxError(\"Invalid box field size\");\n        }\n\n        var dataLength = lbox - headerSize;\n        var jumpDataLength = true;\n\n        switch (tbox) {\n          case 0x6a703268:\n            jumpDataLength = false;\n            break;\n\n          case 0x636f6c72:\n            var method = data[position];\n\n            if (method === 1) {\n              var colorspace = (0, _core_utils.readUint32)(data, position + 3);\n\n              switch (colorspace) {\n                case 16:\n                case 17:\n                case 18:\n                  break;\n\n                default:\n                  (0, _util.warn)(\"Unknown colorspace \" + colorspace);\n                  break;\n              }\n            } else if (method === 2) {\n              (0, _util.info)(\"ICC profile not supported\");\n            }\n\n            break;\n\n          case 0x6a703263:\n            this.parseCodestream(data, position, position + dataLength);\n            break;\n\n          case 0x6a502020:\n            if ((0, _core_utils.readUint32)(data, position) !== 0x0d0a870a) {\n              (0, _util.warn)(\"Invalid JP2 signature\");\n            }\n\n            break;\n\n          case 0x6a501a1a:\n          case 0x66747970:\n          case 0x72726571:\n          case 0x72657320:\n          case 0x69686472:\n            break;\n\n          default:\n            var headerType = String.fromCharCode(tbox >> 24 & 0xff, tbox >> 16 & 0xff, tbox >> 8 & 0xff, tbox & 0xff);\n            (0, _util.warn)(\"Unsupported header type \" + tbox + \" (\" + headerType + \")\");\n            break;\n        }\n\n        if (jumpDataLength) {\n          position += dataLength;\n        }\n      }\n    },\n    parseImageProperties: function JpxImage_parseImageProperties(stream) {\n      var newByte = stream.getByte();\n\n      while (newByte >= 0) {\n        var oldByte = newByte;\n        newByte = stream.getByte();\n        var code = oldByte << 8 | newByte;\n\n        if (code === 0xff51) {\n          stream.skip(4);\n          var Xsiz = stream.getInt32() >>> 0;\n          var Ysiz = stream.getInt32() >>> 0;\n          var XOsiz = stream.getInt32() >>> 0;\n          var YOsiz = stream.getInt32() >>> 0;\n          stream.skip(16);\n          var Csiz = stream.getUint16();\n          this.width = Xsiz - XOsiz;\n          this.height = Ysiz - YOsiz;\n          this.componentsCount = Csiz;\n          this.bitsPerComponent = 8;\n          return;\n        }\n      }\n\n      throw new JpxError(\"No size marker found in JPX stream\");\n    },\n    parseCodestream: function JpxImage_parseCodestream(data, start, end) {\n      var context = {};\n      var doNotRecover = false;\n\n      try {\n        var position = start;\n\n        while (position + 1 < end) {\n          var code = (0, _core_utils.readUint16)(data, position);\n          position += 2;\n          var length = 0,\n              j,\n              sqcd,\n              spqcds,\n              spqcdSize,\n              scalarExpounded,\n              tile;\n\n          switch (code) {\n            case 0xff4f:\n              context.mainHeader = true;\n              break;\n\n            case 0xffd9:\n              break;\n\n            case 0xff51:\n              length = (0, _core_utils.readUint16)(data, position);\n              var siz = {};\n              siz.Xsiz = (0, _core_utils.readUint32)(data, position + 4);\n              siz.Ysiz = (0, _core_utils.readUint32)(data, position + 8);\n              siz.XOsiz = (0, _core_utils.readUint32)(data, position + 12);\n              siz.YOsiz = (0, _core_utils.readUint32)(data, position + 16);\n              siz.XTsiz = (0, _core_utils.readUint32)(data, position + 20);\n              siz.YTsiz = (0, _core_utils.readUint32)(data, position + 24);\n              siz.XTOsiz = (0, _core_utils.readUint32)(data, position + 28);\n              siz.YTOsiz = (0, _core_utils.readUint32)(data, position + 32);\n              var componentsCount = (0, _core_utils.readUint16)(data, position + 36);\n              siz.Csiz = componentsCount;\n              var components = [];\n              j = position + 38;\n\n              for (var i = 0; i < componentsCount; i++) {\n                var component = {\n                  precision: (data[j] & 0x7f) + 1,\n                  isSigned: !!(data[j] & 0x80),\n                  XRsiz: data[j + 1],\n                  YRsiz: data[j + 2]\n                };\n                j += 3;\n                calculateComponentDimensions(component, siz);\n                components.push(component);\n              }\n\n              context.SIZ = siz;\n              context.components = components;\n              calculateTileGrids(context, components);\n              context.QCC = [];\n              context.COC = [];\n              break;\n\n            case 0xff5c:\n              length = (0, _core_utils.readUint16)(data, position);\n              var qcd = {};\n              j = position + 2;\n              sqcd = data[j++];\n\n              switch (sqcd & 0x1f) {\n                case 0:\n                  spqcdSize = 8;\n                  scalarExpounded = true;\n                  break;\n\n                case 1:\n                  spqcdSize = 16;\n                  scalarExpounded = false;\n                  break;\n\n                case 2:\n                  spqcdSize = 16;\n                  scalarExpounded = true;\n                  break;\n\n                default:\n                  throw new Error(\"Invalid SQcd value \" + sqcd);\n              }\n\n              qcd.noQuantization = spqcdSize === 8;\n              qcd.scalarExpounded = scalarExpounded;\n              qcd.guardBits = sqcd >> 5;\n              spqcds = [];\n\n              while (j < length + position) {\n                var spqcd = {};\n\n                if (spqcdSize === 8) {\n                  spqcd.epsilon = data[j++] >> 3;\n                  spqcd.mu = 0;\n                } else {\n                  spqcd.epsilon = data[j] >> 3;\n                  spqcd.mu = (data[j] & 0x7) << 8 | data[j + 1];\n                  j += 2;\n                }\n\n                spqcds.push(spqcd);\n              }\n\n              qcd.SPqcds = spqcds;\n\n              if (context.mainHeader) {\n                context.QCD = qcd;\n              } else {\n                context.currentTile.QCD = qcd;\n                context.currentTile.QCC = [];\n              }\n\n              break;\n\n            case 0xff5d:\n              length = (0, _core_utils.readUint16)(data, position);\n              var qcc = {};\n              j = position + 2;\n              var cqcc;\n\n              if (context.SIZ.Csiz < 257) {\n                cqcc = data[j++];\n              } else {\n                cqcc = (0, _core_utils.readUint16)(data, j);\n                j += 2;\n              }\n\n              sqcd = data[j++];\n\n              switch (sqcd & 0x1f) {\n                case 0:\n                  spqcdSize = 8;\n                  scalarExpounded = true;\n                  break;\n\n                case 1:\n                  spqcdSize = 16;\n                  scalarExpounded = false;\n                  break;\n\n                case 2:\n                  spqcdSize = 16;\n                  scalarExpounded = true;\n                  break;\n\n                default:\n                  throw new Error(\"Invalid SQcd value \" + sqcd);\n              }\n\n              qcc.noQuantization = spqcdSize === 8;\n              qcc.scalarExpounded = scalarExpounded;\n              qcc.guardBits = sqcd >> 5;\n              spqcds = [];\n\n              while (j < length + position) {\n                spqcd = {};\n\n                if (spqcdSize === 8) {\n                  spqcd.epsilon = data[j++] >> 3;\n                  spqcd.mu = 0;\n                } else {\n                  spqcd.epsilon = data[j] >> 3;\n                  spqcd.mu = (data[j] & 0x7) << 8 | data[j + 1];\n                  j += 2;\n                }\n\n                spqcds.push(spqcd);\n              }\n\n              qcc.SPqcds = spqcds;\n\n              if (context.mainHeader) {\n                context.QCC[cqcc] = qcc;\n              } else {\n                context.currentTile.QCC[cqcc] = qcc;\n              }\n\n              break;\n\n            case 0xff52:\n              length = (0, _core_utils.readUint16)(data, position);\n              var cod = {};\n              j = position + 2;\n              var scod = data[j++];\n              cod.entropyCoderWithCustomPrecincts = !!(scod & 1);\n              cod.sopMarkerUsed = !!(scod & 2);\n              cod.ephMarkerUsed = !!(scod & 4);\n              cod.progressionOrder = data[j++];\n              cod.layersCount = (0, _core_utils.readUint16)(data, j);\n              j += 2;\n              cod.multipleComponentTransform = data[j++];\n              cod.decompositionLevelsCount = data[j++];\n              cod.xcb = (data[j++] & 0xf) + 2;\n              cod.ycb = (data[j++] & 0xf) + 2;\n              var blockStyle = data[j++];\n              cod.selectiveArithmeticCodingBypass = !!(blockStyle & 1);\n              cod.resetContextProbabilities = !!(blockStyle & 2);\n              cod.terminationOnEachCodingPass = !!(blockStyle & 4);\n              cod.verticallyStripe = !!(blockStyle & 8);\n              cod.predictableTermination = !!(blockStyle & 16);\n              cod.segmentationSymbolUsed = !!(blockStyle & 32);\n              cod.reversibleTransformation = data[j++];\n\n              if (cod.entropyCoderWithCustomPrecincts) {\n                var precinctsSizes = [];\n\n                while (j < length + position) {\n                  var precinctsSize = data[j++];\n                  precinctsSizes.push({\n                    PPx: precinctsSize & 0xf,\n                    PPy: precinctsSize >> 4\n                  });\n                }\n\n                cod.precinctsSizes = precinctsSizes;\n              }\n\n              var unsupported = [];\n\n              if (cod.selectiveArithmeticCodingBypass) {\n                unsupported.push(\"selectiveArithmeticCodingBypass\");\n              }\n\n              if (cod.resetContextProbabilities) {\n                unsupported.push(\"resetContextProbabilities\");\n              }\n\n              if (cod.terminationOnEachCodingPass) {\n                unsupported.push(\"terminationOnEachCodingPass\");\n              }\n\n              if (cod.verticallyStripe) {\n                unsupported.push(\"verticallyStripe\");\n              }\n\n              if (cod.predictableTermination) {\n                unsupported.push(\"predictableTermination\");\n              }\n\n              if (unsupported.length > 0) {\n                doNotRecover = true;\n                throw new Error(\"Unsupported COD options (\" + unsupported.join(\", \") + \")\");\n              }\n\n              if (context.mainHeader) {\n                context.COD = cod;\n              } else {\n                context.currentTile.COD = cod;\n                context.currentTile.COC = [];\n              }\n\n              break;\n\n            case 0xff90:\n              length = (0, _core_utils.readUint16)(data, position);\n              tile = {};\n              tile.index = (0, _core_utils.readUint16)(data, position + 2);\n              tile.length = (0, _core_utils.readUint32)(data, position + 4);\n              tile.dataEnd = tile.length + position - 2;\n              tile.partIndex = data[position + 8];\n              tile.partsCount = data[position + 9];\n              context.mainHeader = false;\n\n              if (tile.partIndex === 0) {\n                tile.COD = context.COD;\n                tile.COC = context.COC.slice(0);\n                tile.QCD = context.QCD;\n                tile.QCC = context.QCC.slice(0);\n              }\n\n              context.currentTile = tile;\n              break;\n\n            case 0xff93:\n              tile = context.currentTile;\n\n              if (tile.partIndex === 0) {\n                initializeTile(context, tile.index);\n                buildPackets(context);\n              }\n\n              length = tile.dataEnd - position;\n              parseTilePackets(context, data, position, length);\n              break;\n\n            case 0xff55:\n            case 0xff57:\n            case 0xff58:\n            case 0xff64:\n              length = (0, _core_utils.readUint16)(data, position);\n              break;\n\n            case 0xff53:\n              throw new Error(\"Codestream code 0xFF53 (COC) is not implemented\");\n\n            default:\n              throw new Error(\"Unknown codestream code: \" + code.toString(16));\n          }\n\n          position += length;\n        }\n      } catch (e) {\n        if (doNotRecover || this.failOnCorruptedImage) {\n          throw new JpxError(e.message);\n        } else {\n          (0, _util.warn)(\"JPX: Trying to recover from: \" + e.message);\n        }\n      }\n\n      this.tiles = transformComponents(context);\n      this.width = context.SIZ.Xsiz - context.SIZ.XOsiz;\n      this.height = context.SIZ.Ysiz - context.SIZ.YOsiz;\n      this.componentsCount = context.SIZ.Csiz;\n    }\n  };\n\n  function calculateComponentDimensions(component, siz) {\n    component.x0 = Math.ceil(siz.XOsiz / component.XRsiz);\n    component.x1 = Math.ceil(siz.Xsiz / component.XRsiz);\n    component.y0 = Math.ceil(siz.YOsiz / component.YRsiz);\n    component.y1 = Math.ceil(siz.Ysiz / component.YRsiz);\n    component.width = component.x1 - component.x0;\n    component.height = component.y1 - component.y0;\n  }\n\n  function calculateTileGrids(context, components) {\n    var siz = context.SIZ;\n    var tile,\n        tiles = [];\n    var numXtiles = Math.ceil((siz.Xsiz - siz.XTOsiz) / siz.XTsiz);\n    var numYtiles = Math.ceil((siz.Ysiz - siz.YTOsiz) / siz.YTsiz);\n\n    for (var q = 0; q < numYtiles; q++) {\n      for (var p = 0; p < numXtiles; p++) {\n        tile = {};\n        tile.tx0 = Math.max(siz.XTOsiz + p * siz.XTsiz, siz.XOsiz);\n        tile.ty0 = Math.max(siz.YTOsiz + q * siz.YTsiz, siz.YOsiz);\n        tile.tx1 = Math.min(siz.XTOsiz + (p + 1) * siz.XTsiz, siz.Xsiz);\n        tile.ty1 = Math.min(siz.YTOsiz + (q + 1) * siz.YTsiz, siz.Ysiz);\n        tile.width = tile.tx1 - tile.tx0;\n        tile.height = tile.ty1 - tile.ty0;\n        tile.components = [];\n        tiles.push(tile);\n      }\n    }\n\n    context.tiles = tiles;\n    var componentsCount = siz.Csiz;\n\n    for (var i = 0, ii = componentsCount; i < ii; i++) {\n      var component = components[i];\n\n      for (var j = 0, jj = tiles.length; j < jj; j++) {\n        var tileComponent = {};\n        tile = tiles[j];\n        tileComponent.tcx0 = Math.ceil(tile.tx0 / component.XRsiz);\n        tileComponent.tcy0 = Math.ceil(tile.ty0 / component.YRsiz);\n        tileComponent.tcx1 = Math.ceil(tile.tx1 / component.XRsiz);\n        tileComponent.tcy1 = Math.ceil(tile.ty1 / component.YRsiz);\n        tileComponent.width = tileComponent.tcx1 - tileComponent.tcx0;\n        tileComponent.height = tileComponent.tcy1 - tileComponent.tcy0;\n        tile.components[i] = tileComponent;\n      }\n    }\n  }\n\n  function getBlocksDimensions(context, component, r) {\n    var codOrCoc = component.codingStyleParameters;\n    var result = {};\n\n    if (!codOrCoc.entropyCoderWithCustomPrecincts) {\n      result.PPx = 15;\n      result.PPy = 15;\n    } else {\n      result.PPx = codOrCoc.precinctsSizes[r].PPx;\n      result.PPy = codOrCoc.precinctsSizes[r].PPy;\n    }\n\n    result.xcb_ = r > 0 ? Math.min(codOrCoc.xcb, result.PPx - 1) : Math.min(codOrCoc.xcb, result.PPx);\n    result.ycb_ = r > 0 ? Math.min(codOrCoc.ycb, result.PPy - 1) : Math.min(codOrCoc.ycb, result.PPy);\n    return result;\n  }\n\n  function buildPrecincts(context, resolution, dimensions) {\n    var precinctWidth = 1 << dimensions.PPx;\n    var precinctHeight = 1 << dimensions.PPy;\n    var isZeroRes = resolution.resLevel === 0;\n    var precinctWidthInSubband = 1 << dimensions.PPx + (isZeroRes ? 0 : -1);\n    var precinctHeightInSubband = 1 << dimensions.PPy + (isZeroRes ? 0 : -1);\n    var numprecinctswide = resolution.trx1 > resolution.trx0 ? Math.ceil(resolution.trx1 / precinctWidth) - Math.floor(resolution.trx0 / precinctWidth) : 0;\n    var numprecinctshigh = resolution.try1 > resolution.try0 ? Math.ceil(resolution.try1 / precinctHeight) - Math.floor(resolution.try0 / precinctHeight) : 0;\n    var numprecincts = numprecinctswide * numprecinctshigh;\n    resolution.precinctParameters = {\n      precinctWidth,\n      precinctHeight,\n      numprecinctswide,\n      numprecinctshigh,\n      numprecincts,\n      precinctWidthInSubband,\n      precinctHeightInSubband\n    };\n  }\n\n  function buildCodeblocks(context, subband, dimensions) {\n    var xcb_ = dimensions.xcb_;\n    var ycb_ = dimensions.ycb_;\n    var codeblockWidth = 1 << xcb_;\n    var codeblockHeight = 1 << ycb_;\n    var cbx0 = subband.tbx0 >> xcb_;\n    var cby0 = subband.tby0 >> ycb_;\n    var cbx1 = subband.tbx1 + codeblockWidth - 1 >> xcb_;\n    var cby1 = subband.tby1 + codeblockHeight - 1 >> ycb_;\n    var precinctParameters = subband.resolution.precinctParameters;\n    var codeblocks = [];\n    var precincts = [];\n    var i, j, codeblock, precinctNumber;\n\n    for (j = cby0; j < cby1; j++) {\n      for (i = cbx0; i < cbx1; i++) {\n        codeblock = {\n          cbx: i,\n          cby: j,\n          tbx0: codeblockWidth * i,\n          tby0: codeblockHeight * j,\n          tbx1: codeblockWidth * (i + 1),\n          tby1: codeblockHeight * (j + 1)\n        };\n        codeblock.tbx0_ = Math.max(subband.tbx0, codeblock.tbx0);\n        codeblock.tby0_ = Math.max(subband.tby0, codeblock.tby0);\n        codeblock.tbx1_ = Math.min(subband.tbx1, codeblock.tbx1);\n        codeblock.tby1_ = Math.min(subband.tby1, codeblock.tby1);\n        var pi = Math.floor((codeblock.tbx0_ - subband.tbx0) / precinctParameters.precinctWidthInSubband);\n        var pj = Math.floor((codeblock.tby0_ - subband.tby0) / precinctParameters.precinctHeightInSubband);\n        precinctNumber = pi + pj * precinctParameters.numprecinctswide;\n        codeblock.precinctNumber = precinctNumber;\n        codeblock.subbandType = subband.type;\n        codeblock.Lblock = 3;\n\n        if (codeblock.tbx1_ <= codeblock.tbx0_ || codeblock.tby1_ <= codeblock.tby0_) {\n          continue;\n        }\n\n        codeblocks.push(codeblock);\n        var precinct = precincts[precinctNumber];\n\n        if (precinct !== undefined) {\n          if (i < precinct.cbxMin) {\n            precinct.cbxMin = i;\n          } else if (i > precinct.cbxMax) {\n            precinct.cbxMax = i;\n          }\n\n          if (j < precinct.cbyMin) {\n            precinct.cbxMin = j;\n          } else if (j > precinct.cbyMax) {\n            precinct.cbyMax = j;\n          }\n        } else {\n          precincts[precinctNumber] = precinct = {\n            cbxMin: i,\n            cbyMin: j,\n            cbxMax: i,\n            cbyMax: j\n          };\n        }\n\n        codeblock.precinct = precinct;\n      }\n    }\n\n    subband.codeblockParameters = {\n      codeblockWidth: xcb_,\n      codeblockHeight: ycb_,\n      numcodeblockwide: cbx1 - cbx0 + 1,\n      numcodeblockhigh: cby1 - cby0 + 1\n    };\n    subband.codeblocks = codeblocks;\n    subband.precincts = precincts;\n  }\n\n  function createPacket(resolution, precinctNumber, layerNumber) {\n    var precinctCodeblocks = [];\n    var subbands = resolution.subbands;\n\n    for (var i = 0, ii = subbands.length; i < ii; i++) {\n      var subband = subbands[i];\n      var codeblocks = subband.codeblocks;\n\n      for (var j = 0, jj = codeblocks.length; j < jj; j++) {\n        var codeblock = codeblocks[j];\n\n        if (codeblock.precinctNumber !== precinctNumber) {\n          continue;\n        }\n\n        precinctCodeblocks.push(codeblock);\n      }\n    }\n\n    return {\n      layerNumber,\n      codeblocks: precinctCodeblocks\n    };\n  }\n\n  function LayerResolutionComponentPositionIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var maxDecompositionLevelsCount = 0;\n\n    for (var q = 0; q < componentsCount; q++) {\n      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, tile.components[q].codingStyleParameters.decompositionLevelsCount);\n    }\n\n    var l = 0,\n        r = 0,\n        i = 0,\n        k = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      for (; l < layersCount; l++) {\n        for (; r <= maxDecompositionLevelsCount; r++) {\n          for (; i < componentsCount; i++) {\n            var component = tile.components[i];\n\n            if (r > component.codingStyleParameters.decompositionLevelsCount) {\n              continue;\n            }\n\n            var resolution = component.resolutions[r];\n            var numprecincts = resolution.precinctParameters.numprecincts;\n\n            for (; k < numprecincts;) {\n              var packet = createPacket(resolution, k, l);\n              k++;\n              return packet;\n            }\n\n            k = 0;\n          }\n\n          i = 0;\n        }\n\n        r = 0;\n      }\n\n      throw new JpxError(\"Out of packets\");\n    };\n  }\n\n  function ResolutionLayerComponentPositionIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var maxDecompositionLevelsCount = 0;\n\n    for (var q = 0; q < componentsCount; q++) {\n      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, tile.components[q].codingStyleParameters.decompositionLevelsCount);\n    }\n\n    var r = 0,\n        l = 0,\n        i = 0,\n        k = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      for (; r <= maxDecompositionLevelsCount; r++) {\n        for (; l < layersCount; l++) {\n          for (; i < componentsCount; i++) {\n            var component = tile.components[i];\n\n            if (r > component.codingStyleParameters.decompositionLevelsCount) {\n              continue;\n            }\n\n            var resolution = component.resolutions[r];\n            var numprecincts = resolution.precinctParameters.numprecincts;\n\n            for (; k < numprecincts;) {\n              var packet = createPacket(resolution, k, l);\n              k++;\n              return packet;\n            }\n\n            k = 0;\n          }\n\n          i = 0;\n        }\n\n        l = 0;\n      }\n\n      throw new JpxError(\"Out of packets\");\n    };\n  }\n\n  function ResolutionPositionComponentLayerIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var l, r, c, p;\n    var maxDecompositionLevelsCount = 0;\n\n    for (c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, component.codingStyleParameters.decompositionLevelsCount);\n    }\n\n    var maxNumPrecinctsInLevel = new Int32Array(maxDecompositionLevelsCount + 1);\n\n    for (r = 0; r <= maxDecompositionLevelsCount; ++r) {\n      var maxNumPrecincts = 0;\n\n      for (c = 0; c < componentsCount; ++c) {\n        var resolutions = tile.components[c].resolutions;\n\n        if (r < resolutions.length) {\n          maxNumPrecincts = Math.max(maxNumPrecincts, resolutions[r].precinctParameters.numprecincts);\n        }\n      }\n\n      maxNumPrecinctsInLevel[r] = maxNumPrecincts;\n    }\n\n    l = 0;\n    r = 0;\n    c = 0;\n    p = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      for (; r <= maxDecompositionLevelsCount; r++) {\n        for (; p < maxNumPrecinctsInLevel[r]; p++) {\n          for (; c < componentsCount; c++) {\n            var component = tile.components[c];\n\n            if (r > component.codingStyleParameters.decompositionLevelsCount) {\n              continue;\n            }\n\n            var resolution = component.resolutions[r];\n            var numprecincts = resolution.precinctParameters.numprecincts;\n\n            if (p >= numprecincts) {\n              continue;\n            }\n\n            for (; l < layersCount;) {\n              var packet = createPacket(resolution, p, l);\n              l++;\n              return packet;\n            }\n\n            l = 0;\n          }\n\n          c = 0;\n        }\n\n        p = 0;\n      }\n\n      throw new JpxError(\"Out of packets\");\n    };\n  }\n\n  function PositionComponentResolutionLayerIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var precinctsSizes = getPrecinctSizesInImageScale(tile);\n    var precinctsIterationSizes = precinctsSizes;\n    var l = 0,\n        r = 0,\n        c = 0,\n        px = 0,\n        py = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      for (; py < precinctsIterationSizes.maxNumHigh; py++) {\n        for (; px < precinctsIterationSizes.maxNumWide; px++) {\n          for (; c < componentsCount; c++) {\n            var component = tile.components[c];\n            var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;\n\n            for (; r <= decompositionLevelsCount; r++) {\n              var resolution = component.resolutions[r];\n              var sizeInImageScale = precinctsSizes.components[c].resolutions[r];\n              var k = getPrecinctIndexIfExist(px, py, sizeInImageScale, precinctsIterationSizes, resolution);\n\n              if (k === null) {\n                continue;\n              }\n\n              for (; l < layersCount;) {\n                var packet = createPacket(resolution, k, l);\n                l++;\n                return packet;\n              }\n\n              l = 0;\n            }\n\n            r = 0;\n          }\n\n          c = 0;\n        }\n\n        px = 0;\n      }\n\n      throw new JpxError(\"Out of packets\");\n    };\n  }\n\n  function ComponentPositionResolutionLayerIterator(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var layersCount = tile.codingStyleDefaultParameters.layersCount;\n    var componentsCount = siz.Csiz;\n    var precinctsSizes = getPrecinctSizesInImageScale(tile);\n    var l = 0,\n        r = 0,\n        c = 0,\n        px = 0,\n        py = 0;\n\n    this.nextPacket = function JpxImage_nextPacket() {\n      for (; c < componentsCount; ++c) {\n        var component = tile.components[c];\n        var precinctsIterationSizes = precinctsSizes.components[c];\n        var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;\n\n        for (; py < precinctsIterationSizes.maxNumHigh; py++) {\n          for (; px < precinctsIterationSizes.maxNumWide; px++) {\n            for (; r <= decompositionLevelsCount; r++) {\n              var resolution = component.resolutions[r];\n              var sizeInImageScale = precinctsIterationSizes.resolutions[r];\n              var k = getPrecinctIndexIfExist(px, py, sizeInImageScale, precinctsIterationSizes, resolution);\n\n              if (k === null) {\n                continue;\n              }\n\n              for (; l < layersCount;) {\n                var packet = createPacket(resolution, k, l);\n                l++;\n                return packet;\n              }\n\n              l = 0;\n            }\n\n            r = 0;\n          }\n\n          px = 0;\n        }\n\n        py = 0;\n      }\n\n      throw new JpxError(\"Out of packets\");\n    };\n  }\n\n  function getPrecinctIndexIfExist(pxIndex, pyIndex, sizeInImageScale, precinctIterationSizes, resolution) {\n    var posX = pxIndex * precinctIterationSizes.minWidth;\n    var posY = pyIndex * precinctIterationSizes.minHeight;\n\n    if (posX % sizeInImageScale.width !== 0 || posY % sizeInImageScale.height !== 0) {\n      return null;\n    }\n\n    var startPrecinctRowIndex = posY / sizeInImageScale.width * resolution.precinctParameters.numprecinctswide;\n    return posX / sizeInImageScale.height + startPrecinctRowIndex;\n  }\n\n  function getPrecinctSizesInImageScale(tile) {\n    var componentsCount = tile.components.length;\n    var minWidth = Number.MAX_VALUE;\n    var minHeight = Number.MAX_VALUE;\n    var maxNumWide = 0;\n    var maxNumHigh = 0;\n    var sizePerComponent = new Array(componentsCount);\n\n    for (var c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;\n      var sizePerResolution = new Array(decompositionLevelsCount + 1);\n      var minWidthCurrentComponent = Number.MAX_VALUE;\n      var minHeightCurrentComponent = Number.MAX_VALUE;\n      var maxNumWideCurrentComponent = 0;\n      var maxNumHighCurrentComponent = 0;\n      var scale = 1;\n\n      for (var r = decompositionLevelsCount; r >= 0; --r) {\n        var resolution = component.resolutions[r];\n        var widthCurrentResolution = scale * resolution.precinctParameters.precinctWidth;\n        var heightCurrentResolution = scale * resolution.precinctParameters.precinctHeight;\n        minWidthCurrentComponent = Math.min(minWidthCurrentComponent, widthCurrentResolution);\n        minHeightCurrentComponent = Math.min(minHeightCurrentComponent, heightCurrentResolution);\n        maxNumWideCurrentComponent = Math.max(maxNumWideCurrentComponent, resolution.precinctParameters.numprecinctswide);\n        maxNumHighCurrentComponent = Math.max(maxNumHighCurrentComponent, resolution.precinctParameters.numprecinctshigh);\n        sizePerResolution[r] = {\n          width: widthCurrentResolution,\n          height: heightCurrentResolution\n        };\n        scale <<= 1;\n      }\n\n      minWidth = Math.min(minWidth, minWidthCurrentComponent);\n      minHeight = Math.min(minHeight, minHeightCurrentComponent);\n      maxNumWide = Math.max(maxNumWide, maxNumWideCurrentComponent);\n      maxNumHigh = Math.max(maxNumHigh, maxNumHighCurrentComponent);\n      sizePerComponent[c] = {\n        resolutions: sizePerResolution,\n        minWidth: minWidthCurrentComponent,\n        minHeight: minHeightCurrentComponent,\n        maxNumWide: maxNumWideCurrentComponent,\n        maxNumHigh: maxNumHighCurrentComponent\n      };\n    }\n\n    return {\n      components: sizePerComponent,\n      minWidth,\n      minHeight,\n      maxNumWide,\n      maxNumHigh\n    };\n  }\n\n  function buildPackets(context) {\n    var siz = context.SIZ;\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var componentsCount = siz.Csiz;\n\n    for (var c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;\n      var resolutions = [];\n      var subbands = [];\n\n      for (var r = 0; r <= decompositionLevelsCount; r++) {\n        var blocksDimensions = getBlocksDimensions(context, component, r);\n        var resolution = {};\n        var scale = 1 << decompositionLevelsCount - r;\n        resolution.trx0 = Math.ceil(component.tcx0 / scale);\n        resolution.try0 = Math.ceil(component.tcy0 / scale);\n        resolution.trx1 = Math.ceil(component.tcx1 / scale);\n        resolution.try1 = Math.ceil(component.tcy1 / scale);\n        resolution.resLevel = r;\n        buildPrecincts(context, resolution, blocksDimensions);\n        resolutions.push(resolution);\n        var subband;\n\n        if (r === 0) {\n          subband = {};\n          subband.type = \"LL\";\n          subband.tbx0 = Math.ceil(component.tcx0 / scale);\n          subband.tby0 = Math.ceil(component.tcy0 / scale);\n          subband.tbx1 = Math.ceil(component.tcx1 / scale);\n          subband.tby1 = Math.ceil(component.tcy1 / scale);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolution.subbands = [subband];\n        } else {\n          var bscale = 1 << decompositionLevelsCount - r + 1;\n          var resolutionSubbands = [];\n          subband = {};\n          subband.type = \"HL\";\n          subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);\n          subband.tby0 = Math.ceil(component.tcy0 / bscale);\n          subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);\n          subband.tby1 = Math.ceil(component.tcy1 / bscale);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolutionSubbands.push(subband);\n          subband = {};\n          subband.type = \"LH\";\n          subband.tbx0 = Math.ceil(component.tcx0 / bscale);\n          subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);\n          subband.tbx1 = Math.ceil(component.tcx1 / bscale);\n          subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolutionSubbands.push(subband);\n          subband = {};\n          subband.type = \"HH\";\n          subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);\n          subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);\n          subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);\n          subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);\n          subband.resolution = resolution;\n          buildCodeblocks(context, subband, blocksDimensions);\n          subbands.push(subband);\n          resolutionSubbands.push(subband);\n          resolution.subbands = resolutionSubbands;\n        }\n      }\n\n      component.resolutions = resolutions;\n      component.subbands = subbands;\n    }\n\n    var progressionOrder = tile.codingStyleDefaultParameters.progressionOrder;\n\n    switch (progressionOrder) {\n      case 0:\n        tile.packetsIterator = new LayerResolutionComponentPositionIterator(context);\n        break;\n\n      case 1:\n        tile.packetsIterator = new ResolutionLayerComponentPositionIterator(context);\n        break;\n\n      case 2:\n        tile.packetsIterator = new ResolutionPositionComponentLayerIterator(context);\n        break;\n\n      case 3:\n        tile.packetsIterator = new PositionComponentResolutionLayerIterator(context);\n        break;\n\n      case 4:\n        tile.packetsIterator = new ComponentPositionResolutionLayerIterator(context);\n        break;\n\n      default:\n        throw new JpxError(`Unsupported progression order ${progressionOrder}`);\n    }\n  }\n\n  function parseTilePackets(context, data, offset, dataLength) {\n    var position = 0;\n    var buffer,\n        bufferSize = 0,\n        skipNextBit = false;\n\n    function readBits(count) {\n      while (bufferSize < count) {\n        var b = data[offset + position];\n        position++;\n\n        if (skipNextBit) {\n          buffer = buffer << 7 | b;\n          bufferSize += 7;\n          skipNextBit = false;\n        } else {\n          buffer = buffer << 8 | b;\n          bufferSize += 8;\n        }\n\n        if (b === 0xff) {\n          skipNextBit = true;\n        }\n      }\n\n      bufferSize -= count;\n      return buffer >>> bufferSize & (1 << count) - 1;\n    }\n\n    function skipMarkerIfEqual(value) {\n      if (data[offset + position - 1] === 0xff && data[offset + position] === value) {\n        skipBytes(1);\n        return true;\n      } else if (data[offset + position] === 0xff && data[offset + position + 1] === value) {\n        skipBytes(2);\n        return true;\n      }\n\n      return false;\n    }\n\n    function skipBytes(count) {\n      position += count;\n    }\n\n    function alignToByte() {\n      bufferSize = 0;\n\n      if (skipNextBit) {\n        position++;\n        skipNextBit = false;\n      }\n    }\n\n    function readCodingpasses() {\n      if (readBits(1) === 0) {\n        return 1;\n      }\n\n      if (readBits(1) === 0) {\n        return 2;\n      }\n\n      var value = readBits(2);\n\n      if (value < 3) {\n        return value + 3;\n      }\n\n      value = readBits(5);\n\n      if (value < 31) {\n        return value + 6;\n      }\n\n      value = readBits(7);\n      return value + 37;\n    }\n\n    var tileIndex = context.currentTile.index;\n    var tile = context.tiles[tileIndex];\n    var sopMarkerUsed = context.COD.sopMarkerUsed;\n    var ephMarkerUsed = context.COD.ephMarkerUsed;\n    var packetsIterator = tile.packetsIterator;\n\n    while (position < dataLength) {\n      alignToByte();\n\n      if (sopMarkerUsed && skipMarkerIfEqual(0x91)) {\n        skipBytes(4);\n      }\n\n      var packet = packetsIterator.nextPacket();\n\n      if (!readBits(1)) {\n        continue;\n      }\n\n      var layerNumber = packet.layerNumber;\n      var queue = [],\n          codeblock;\n\n      for (var i = 0, ii = packet.codeblocks.length; i < ii; i++) {\n        codeblock = packet.codeblocks[i];\n        var precinct = codeblock.precinct;\n        var codeblockColumn = codeblock.cbx - precinct.cbxMin;\n        var codeblockRow = codeblock.cby - precinct.cbyMin;\n        var codeblockIncluded = false;\n        var firstTimeInclusion = false;\n        var valueReady;\n\n        if (codeblock[\"included\"] !== undefined) {\n          codeblockIncluded = !!readBits(1);\n        } else {\n          precinct = codeblock.precinct;\n          var inclusionTree, zeroBitPlanesTree;\n\n          if (precinct[\"inclusionTree\"] !== undefined) {\n            inclusionTree = precinct.inclusionTree;\n          } else {\n            var width = precinct.cbxMax - precinct.cbxMin + 1;\n            var height = precinct.cbyMax - precinct.cbyMin + 1;\n            inclusionTree = new InclusionTree(width, height, layerNumber);\n            zeroBitPlanesTree = new TagTree(width, height);\n            precinct.inclusionTree = inclusionTree;\n            precinct.zeroBitPlanesTree = zeroBitPlanesTree;\n          }\n\n          if (inclusionTree.reset(codeblockColumn, codeblockRow, layerNumber)) {\n            while (true) {\n              if (readBits(1)) {\n                valueReady = !inclusionTree.nextLevel();\n\n                if (valueReady) {\n                  codeblock.included = true;\n                  codeblockIncluded = firstTimeInclusion = true;\n                  break;\n                }\n              } else {\n                inclusionTree.incrementValue(layerNumber);\n                break;\n              }\n            }\n          }\n        }\n\n        if (!codeblockIncluded) {\n          continue;\n        }\n\n        if (firstTimeInclusion) {\n          zeroBitPlanesTree = precinct.zeroBitPlanesTree;\n          zeroBitPlanesTree.reset(codeblockColumn, codeblockRow);\n\n          while (true) {\n            if (readBits(1)) {\n              valueReady = !zeroBitPlanesTree.nextLevel();\n\n              if (valueReady) {\n                break;\n              }\n            } else {\n              zeroBitPlanesTree.incrementValue();\n            }\n          }\n\n          codeblock.zeroBitPlanes = zeroBitPlanesTree.value;\n        }\n\n        var codingpasses = readCodingpasses();\n\n        while (readBits(1)) {\n          codeblock.Lblock++;\n        }\n\n        var codingpassesLog2 = (0, _core_utils.log2)(codingpasses);\n        var bits = (codingpasses < 1 << codingpassesLog2 ? codingpassesLog2 - 1 : codingpassesLog2) + codeblock.Lblock;\n        var codedDataLength = readBits(bits);\n        queue.push({\n          codeblock,\n          codingpasses,\n          dataLength: codedDataLength\n        });\n      }\n\n      alignToByte();\n\n      if (ephMarkerUsed) {\n        skipMarkerIfEqual(0x92);\n      }\n\n      while (queue.length > 0) {\n        var packetItem = queue.shift();\n        codeblock = packetItem.codeblock;\n\n        if (codeblock[\"data\"] === undefined) {\n          codeblock.data = [];\n        }\n\n        codeblock.data.push({\n          data,\n          start: offset + position,\n          end: offset + position + packetItem.dataLength,\n          codingpasses: packetItem.codingpasses\n        });\n        position += packetItem.dataLength;\n      }\n    }\n\n    return position;\n  }\n\n  function copyCoefficients(coefficients, levelWidth, levelHeight, subband, delta, mb, reversible, segmentationSymbolUsed) {\n    var x0 = subband.tbx0;\n    var y0 = subband.tby0;\n    var width = subband.tbx1 - subband.tbx0;\n    var codeblocks = subband.codeblocks;\n    var right = subband.type.charAt(0) === \"H\" ? 1 : 0;\n    var bottom = subband.type.charAt(1) === \"H\" ? levelWidth : 0;\n\n    for (var i = 0, ii = codeblocks.length; i < ii; ++i) {\n      var codeblock = codeblocks[i];\n      var blockWidth = codeblock.tbx1_ - codeblock.tbx0_;\n      var blockHeight = codeblock.tby1_ - codeblock.tby0_;\n\n      if (blockWidth === 0 || blockHeight === 0) {\n        continue;\n      }\n\n      if (codeblock[\"data\"] === undefined) {\n        continue;\n      }\n\n      var bitModel, currentCodingpassType;\n      bitModel = new BitModel(blockWidth, blockHeight, codeblock.subbandType, codeblock.zeroBitPlanes, mb);\n      currentCodingpassType = 2;\n      var data = codeblock.data,\n          totalLength = 0,\n          codingpasses = 0;\n      var j, jj, dataItem;\n\n      for (j = 0, jj = data.length; j < jj; j++) {\n        dataItem = data[j];\n        totalLength += dataItem.end - dataItem.start;\n        codingpasses += dataItem.codingpasses;\n      }\n\n      var encodedData = new Uint8Array(totalLength);\n      var position = 0;\n\n      for (j = 0, jj = data.length; j < jj; j++) {\n        dataItem = data[j];\n        var chunk = dataItem.data.subarray(dataItem.start, dataItem.end);\n        encodedData.set(chunk, position);\n        position += chunk.length;\n      }\n\n      var decoder = new _arithmetic_decoder.ArithmeticDecoder(encodedData, 0, totalLength);\n      bitModel.setDecoder(decoder);\n\n      for (j = 0; j < codingpasses; j++) {\n        switch (currentCodingpassType) {\n          case 0:\n            bitModel.runSignificancePropagationPass();\n            break;\n\n          case 1:\n            bitModel.runMagnitudeRefinementPass();\n            break;\n\n          case 2:\n            bitModel.runCleanupPass();\n\n            if (segmentationSymbolUsed) {\n              bitModel.checkSegmentationSymbol();\n            }\n\n            break;\n        }\n\n        currentCodingpassType = (currentCodingpassType + 1) % 3;\n      }\n\n      var offset = codeblock.tbx0_ - x0 + (codeblock.tby0_ - y0) * width;\n      var sign = bitModel.coefficentsSign;\n      var magnitude = bitModel.coefficentsMagnitude;\n      var bitsDecoded = bitModel.bitsDecoded;\n      var magnitudeCorrection = reversible ? 0 : 0.5;\n      var k, n, nb;\n      position = 0;\n      var interleave = subband.type !== \"LL\";\n\n      for (j = 0; j < blockHeight; j++) {\n        var row = offset / width | 0;\n        var levelOffset = 2 * row * (levelWidth - width) + right + bottom;\n\n        for (k = 0; k < blockWidth; k++) {\n          n = magnitude[position];\n\n          if (n !== 0) {\n            n = (n + magnitudeCorrection) * delta;\n\n            if (sign[position] !== 0) {\n              n = -n;\n            }\n\n            nb = bitsDecoded[position];\n            var pos = interleave ? levelOffset + (offset << 1) : offset;\n\n            if (reversible && nb >= mb) {\n              coefficients[pos] = n;\n            } else {\n              coefficients[pos] = n * (1 << mb - nb);\n            }\n          }\n\n          offset++;\n          position++;\n        }\n\n        offset += width - blockWidth;\n      }\n    }\n  }\n\n  function transformTile(context, tile, c) {\n    var component = tile.components[c];\n    var codingStyleParameters = component.codingStyleParameters;\n    var quantizationParameters = component.quantizationParameters;\n    var decompositionLevelsCount = codingStyleParameters.decompositionLevelsCount;\n    var spqcds = quantizationParameters.SPqcds;\n    var scalarExpounded = quantizationParameters.scalarExpounded;\n    var guardBits = quantizationParameters.guardBits;\n    var segmentationSymbolUsed = codingStyleParameters.segmentationSymbolUsed;\n    var precision = context.components[c].precision;\n    var reversible = codingStyleParameters.reversibleTransformation;\n    var transform = reversible ? new ReversibleTransform() : new IrreversibleTransform();\n    var subbandCoefficients = [];\n    var b = 0;\n\n    for (var i = 0; i <= decompositionLevelsCount; i++) {\n      var resolution = component.resolutions[i];\n      var width = resolution.trx1 - resolution.trx0;\n      var height = resolution.try1 - resolution.try0;\n      var coefficients = new Float32Array(width * height);\n\n      for (var j = 0, jj = resolution.subbands.length; j < jj; j++) {\n        var mu, epsilon;\n\n        if (!scalarExpounded) {\n          mu = spqcds[0].mu;\n          epsilon = spqcds[0].epsilon + (i > 0 ? 1 - i : 0);\n        } else {\n          mu = spqcds[b].mu;\n          epsilon = spqcds[b].epsilon;\n          b++;\n        }\n\n        var subband = resolution.subbands[j];\n        var gainLog2 = SubbandsGainLog2[subband.type];\n        var delta = reversible ? 1 : 2 ** (precision + gainLog2 - epsilon) * (1 + mu / 2048);\n        var mb = guardBits + epsilon - 1;\n        copyCoefficients(coefficients, width, height, subband, delta, mb, reversible, segmentationSymbolUsed);\n      }\n\n      subbandCoefficients.push({\n        width,\n        height,\n        items: coefficients\n      });\n    }\n\n    var result = transform.calculate(subbandCoefficients, component.tcx0, component.tcy0);\n    return {\n      left: component.tcx0,\n      top: component.tcy0,\n      width: result.width,\n      height: result.height,\n      items: result.items\n    };\n  }\n\n  function transformComponents(context) {\n    var siz = context.SIZ;\n    var components = context.components;\n    var componentsCount = siz.Csiz;\n    var resultImages = [];\n\n    for (var i = 0, ii = context.tiles.length; i < ii; i++) {\n      var tile = context.tiles[i];\n      var transformedTiles = [];\n      var c;\n\n      for (c = 0; c < componentsCount; c++) {\n        transformedTiles[c] = transformTile(context, tile, c);\n      }\n\n      var tile0 = transformedTiles[0];\n      var out = new Uint8ClampedArray(tile0.items.length * componentsCount);\n      var result = {\n        left: tile0.left,\n        top: tile0.top,\n        width: tile0.width,\n        height: tile0.height,\n        items: out\n      };\n      var shift, offset;\n      var pos = 0,\n          j,\n          jj,\n          y0,\n          y1,\n          y2;\n\n      if (tile.codingStyleDefaultParameters.multipleComponentTransform) {\n        var fourComponents = componentsCount === 4;\n        var y0items = transformedTiles[0].items;\n        var y1items = transformedTiles[1].items;\n        var y2items = transformedTiles[2].items;\n        var y3items = fourComponents ? transformedTiles[3].items : null;\n        shift = components[0].precision - 8;\n        offset = (128 << shift) + 0.5;\n        var component0 = tile.components[0];\n        var alpha01 = componentsCount - 3;\n        jj = y0items.length;\n\n        if (!component0.codingStyleParameters.reversibleTransformation) {\n          for (j = 0; j < jj; j++, pos += alpha01) {\n            y0 = y0items[j] + offset;\n            y1 = y1items[j];\n            y2 = y2items[j];\n            out[pos++] = y0 + 1.402 * y2 >> shift;\n            out[pos++] = y0 - 0.34413 * y1 - 0.71414 * y2 >> shift;\n            out[pos++] = y0 + 1.772 * y1 >> shift;\n          }\n        } else {\n          for (j = 0; j < jj; j++, pos += alpha01) {\n            y0 = y0items[j] + offset;\n            y1 = y1items[j];\n            y2 = y2items[j];\n            const g = y0 - (y2 + y1 >> 2);\n            out[pos++] = g + y2 >> shift;\n            out[pos++] = g >> shift;\n            out[pos++] = g + y1 >> shift;\n          }\n        }\n\n        if (fourComponents) {\n          for (j = 0, pos = 3; j < jj; j++, pos += 4) {\n            out[pos] = y3items[j] + offset >> shift;\n          }\n        }\n      } else {\n        for (c = 0; c < componentsCount; c++) {\n          var items = transformedTiles[c].items;\n          shift = components[c].precision - 8;\n          offset = (128 << shift) + 0.5;\n\n          for (pos = c, j = 0, jj = items.length; j < jj; j++) {\n            out[pos] = items[j] + offset >> shift;\n            pos += componentsCount;\n          }\n        }\n      }\n\n      resultImages.push(result);\n    }\n\n    return resultImages;\n  }\n\n  function initializeTile(context, tileIndex) {\n    var siz = context.SIZ;\n    var componentsCount = siz.Csiz;\n    var tile = context.tiles[tileIndex];\n\n    for (var c = 0; c < componentsCount; c++) {\n      var component = tile.components[c];\n      var qcdOrQcc = context.currentTile.QCC[c] !== undefined ? context.currentTile.QCC[c] : context.currentTile.QCD;\n      component.quantizationParameters = qcdOrQcc;\n      var codOrCoc = context.currentTile.COC[c] !== undefined ? context.currentTile.COC[c] : context.currentTile.COD;\n      component.codingStyleParameters = codOrCoc;\n    }\n\n    tile.codingStyleDefaultParameters = context.currentTile.COD;\n  }\n\n  var TagTree = function TagTreeClosure() {\n    function TagTree(width, height) {\n      var levelsLength = (0, _core_utils.log2)(Math.max(width, height)) + 1;\n      this.levels = [];\n\n      for (var i = 0; i < levelsLength; i++) {\n        var level = {\n          width,\n          height,\n          items: []\n        };\n        this.levels.push(level);\n        width = Math.ceil(width / 2);\n        height = Math.ceil(height / 2);\n      }\n    }\n\n    TagTree.prototype = {\n      reset: function TagTree_reset(i, j) {\n        var currentLevel = 0,\n            value = 0,\n            level;\n\n        while (currentLevel < this.levels.length) {\n          level = this.levels[currentLevel];\n          var index = i + j * level.width;\n\n          if (level.items[index] !== undefined) {\n            value = level.items[index];\n            break;\n          }\n\n          level.index = index;\n          i >>= 1;\n          j >>= 1;\n          currentLevel++;\n        }\n\n        currentLevel--;\n        level = this.levels[currentLevel];\n        level.items[level.index] = value;\n        this.currentLevel = currentLevel;\n        delete this.value;\n      },\n      incrementValue: function TagTree_incrementValue() {\n        var level = this.levels[this.currentLevel];\n        level.items[level.index]++;\n      },\n      nextLevel: function TagTree_nextLevel() {\n        var currentLevel = this.currentLevel;\n        var level = this.levels[currentLevel];\n        var value = level.items[level.index];\n        currentLevel--;\n\n        if (currentLevel < 0) {\n          this.value = value;\n          return false;\n        }\n\n        this.currentLevel = currentLevel;\n        level = this.levels[currentLevel];\n        level.items[level.index] = value;\n        return true;\n      }\n    };\n    return TagTree;\n  }();\n\n  var InclusionTree = function InclusionTreeClosure() {\n    function InclusionTree(width, height, defaultValue) {\n      var levelsLength = (0, _core_utils.log2)(Math.max(width, height)) + 1;\n      this.levels = [];\n\n      for (var i = 0; i < levelsLength; i++) {\n        var items = new Uint8Array(width * height);\n\n        for (var j = 0, jj = items.length; j < jj; j++) {\n          items[j] = defaultValue;\n        }\n\n        var level = {\n          width,\n          height,\n          items\n        };\n        this.levels.push(level);\n        width = Math.ceil(width / 2);\n        height = Math.ceil(height / 2);\n      }\n    }\n\n    InclusionTree.prototype = {\n      reset: function InclusionTree_reset(i, j, stopValue) {\n        var currentLevel = 0;\n\n        while (currentLevel < this.levels.length) {\n          var level = this.levels[currentLevel];\n          var index = i + j * level.width;\n          level.index = index;\n          var value = level.items[index];\n\n          if (value === 0xff) {\n            break;\n          }\n\n          if (value > stopValue) {\n            this.currentLevel = currentLevel;\n            this.propagateValues();\n            return false;\n          }\n\n          i >>= 1;\n          j >>= 1;\n          currentLevel++;\n        }\n\n        this.currentLevel = currentLevel - 1;\n        return true;\n      },\n      incrementValue: function InclusionTree_incrementValue(stopValue) {\n        var level = this.levels[this.currentLevel];\n        level.items[level.index] = stopValue + 1;\n        this.propagateValues();\n      },\n      propagateValues: function InclusionTree_propagateValues() {\n        var levelIndex = this.currentLevel;\n        var level = this.levels[levelIndex];\n        var currentValue = level.items[level.index];\n\n        while (--levelIndex >= 0) {\n          level = this.levels[levelIndex];\n          level.items[level.index] = currentValue;\n        }\n      },\n      nextLevel: function InclusionTree_nextLevel() {\n        var currentLevel = this.currentLevel;\n        var level = this.levels[currentLevel];\n        var value = level.items[level.index];\n        level.items[level.index] = 0xff;\n        currentLevel--;\n\n        if (currentLevel < 0) {\n          return false;\n        }\n\n        this.currentLevel = currentLevel;\n        level = this.levels[currentLevel];\n        level.items[level.index] = value;\n        return true;\n      }\n    };\n    return InclusionTree;\n  }();\n\n  var BitModel = function BitModelClosure() {\n    var UNIFORM_CONTEXT = 17;\n    var RUNLENGTH_CONTEXT = 18;\n    var LLAndLHContextsLabel = new Uint8Array([0, 5, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 1, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8]);\n    var HLContextLabel = new Uint8Array([0, 3, 4, 0, 5, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 1, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8]);\n    var HHContextLabel = new Uint8Array([0, 1, 2, 0, 1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 3, 4, 5, 0, 4, 5, 5, 0, 5, 5, 5, 0, 0, 0, 0, 0, 6, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8]);\n\n    function BitModel(width, height, subband, zeroBitPlanes, mb) {\n      this.width = width;\n      this.height = height;\n      let contextLabelTable;\n\n      if (subband === \"HH\") {\n        contextLabelTable = HHContextLabel;\n      } else if (subband === \"HL\") {\n        contextLabelTable = HLContextLabel;\n      } else {\n        contextLabelTable = LLAndLHContextsLabel;\n      }\n\n      this.contextLabelTable = contextLabelTable;\n      var coefficientCount = width * height;\n      this.neighborsSignificance = new Uint8Array(coefficientCount);\n      this.coefficentsSign = new Uint8Array(coefficientCount);\n      let coefficentsMagnitude;\n\n      if (mb > 14) {\n        coefficentsMagnitude = new Uint32Array(coefficientCount);\n      } else if (mb > 6) {\n        coefficentsMagnitude = new Uint16Array(coefficientCount);\n      } else {\n        coefficentsMagnitude = new Uint8Array(coefficientCount);\n      }\n\n      this.coefficentsMagnitude = coefficentsMagnitude;\n      this.processingFlags = new Uint8Array(coefficientCount);\n      var bitsDecoded = new Uint8Array(coefficientCount);\n\n      if (zeroBitPlanes !== 0) {\n        for (var i = 0; i < coefficientCount; i++) {\n          bitsDecoded[i] = zeroBitPlanes;\n        }\n      }\n\n      this.bitsDecoded = bitsDecoded;\n      this.reset();\n    }\n\n    BitModel.prototype = {\n      setDecoder: function BitModel_setDecoder(decoder) {\n        this.decoder = decoder;\n      },\n      reset: function BitModel_reset() {\n        this.contexts = new Int8Array(19);\n        this.contexts[0] = 4 << 1 | 0;\n        this.contexts[UNIFORM_CONTEXT] = 46 << 1 | 0;\n        this.contexts[RUNLENGTH_CONTEXT] = 3 << 1 | 0;\n      },\n      setNeighborsSignificance: function BitModel_setNeighborsSignificance(row, column, index) {\n        var neighborsSignificance = this.neighborsSignificance;\n        var width = this.width,\n            height = this.height;\n        var left = column > 0;\n        var right = column + 1 < width;\n        var i;\n\n        if (row > 0) {\n          i = index - width;\n\n          if (left) {\n            neighborsSignificance[i - 1] += 0x10;\n          }\n\n          if (right) {\n            neighborsSignificance[i + 1] += 0x10;\n          }\n\n          neighborsSignificance[i] += 0x04;\n        }\n\n        if (row + 1 < height) {\n          i = index + width;\n\n          if (left) {\n            neighborsSignificance[i - 1] += 0x10;\n          }\n\n          if (right) {\n            neighborsSignificance[i + 1] += 0x10;\n          }\n\n          neighborsSignificance[i] += 0x04;\n        }\n\n        if (left) {\n          neighborsSignificance[index - 1] += 0x01;\n        }\n\n        if (right) {\n          neighborsSignificance[index + 1] += 0x01;\n        }\n\n        neighborsSignificance[index] |= 0x80;\n      },\n      runSignificancePropagationPass: function BitModel_runSignificancePropagationPass() {\n        var decoder = this.decoder;\n        var width = this.width,\n            height = this.height;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var coefficentsSign = this.coefficentsSign;\n        var neighborsSignificance = this.neighborsSignificance;\n        var processingFlags = this.processingFlags;\n        var contexts = this.contexts;\n        var labels = this.contextLabelTable;\n        var bitsDecoded = this.bitsDecoded;\n        var processedInverseMask = ~1;\n        var processedMask = 1;\n        var firstMagnitudeBitMask = 2;\n\n        for (var i0 = 0; i0 < height; i0 += 4) {\n          for (var j = 0; j < width; j++) {\n            var index = i0 * width + j;\n\n            for (var i1 = 0; i1 < 4; i1++, index += width) {\n              var i = i0 + i1;\n\n              if (i >= height) {\n                break;\n              }\n\n              processingFlags[index] &= processedInverseMask;\n\n              if (coefficentsMagnitude[index] || !neighborsSignificance[index]) {\n                continue;\n              }\n\n              var contextLabel = labels[neighborsSignificance[index]];\n              var decision = decoder.readBit(contexts, contextLabel);\n\n              if (decision) {\n                var sign = this.decodeSignBit(i, j, index);\n                coefficentsSign[index] = sign;\n                coefficentsMagnitude[index] = 1;\n                this.setNeighborsSignificance(i, j, index);\n                processingFlags[index] |= firstMagnitudeBitMask;\n              }\n\n              bitsDecoded[index]++;\n              processingFlags[index] |= processedMask;\n            }\n          }\n        }\n      },\n      decodeSignBit: function BitModel_decodeSignBit(row, column, index) {\n        var width = this.width,\n            height = this.height;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var coefficentsSign = this.coefficentsSign;\n        var contribution, sign0, sign1, significance1;\n        var contextLabel, decoded;\n        significance1 = column > 0 && coefficentsMagnitude[index - 1] !== 0;\n\n        if (column + 1 < width && coefficentsMagnitude[index + 1] !== 0) {\n          sign1 = coefficentsSign[index + 1];\n\n          if (significance1) {\n            sign0 = coefficentsSign[index - 1];\n            contribution = 1 - sign1 - sign0;\n          } else {\n            contribution = 1 - sign1 - sign1;\n          }\n        } else if (significance1) {\n          sign0 = coefficentsSign[index - 1];\n          contribution = 1 - sign0 - sign0;\n        } else {\n          contribution = 0;\n        }\n\n        var horizontalContribution = 3 * contribution;\n        significance1 = row > 0 && coefficentsMagnitude[index - width] !== 0;\n\n        if (row + 1 < height && coefficentsMagnitude[index + width] !== 0) {\n          sign1 = coefficentsSign[index + width];\n\n          if (significance1) {\n            sign0 = coefficentsSign[index - width];\n            contribution = 1 - sign1 - sign0 + horizontalContribution;\n          } else {\n            contribution = 1 - sign1 - sign1 + horizontalContribution;\n          }\n        } else if (significance1) {\n          sign0 = coefficentsSign[index - width];\n          contribution = 1 - sign0 - sign0 + horizontalContribution;\n        } else {\n          contribution = horizontalContribution;\n        }\n\n        if (contribution >= 0) {\n          contextLabel = 9 + contribution;\n          decoded = this.decoder.readBit(this.contexts, contextLabel);\n        } else {\n          contextLabel = 9 - contribution;\n          decoded = this.decoder.readBit(this.contexts, contextLabel) ^ 1;\n        }\n\n        return decoded;\n      },\n      runMagnitudeRefinementPass: function BitModel_runMagnitudeRefinementPass() {\n        var decoder = this.decoder;\n        var width = this.width,\n            height = this.height;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var neighborsSignificance = this.neighborsSignificance;\n        var contexts = this.contexts;\n        var bitsDecoded = this.bitsDecoded;\n        var processingFlags = this.processingFlags;\n        var processedMask = 1;\n        var firstMagnitudeBitMask = 2;\n        var length = width * height;\n        var width4 = width * 4;\n\n        for (var index0 = 0, indexNext; index0 < length; index0 = indexNext) {\n          indexNext = Math.min(length, index0 + width4);\n\n          for (var j = 0; j < width; j++) {\n            for (var index = index0 + j; index < indexNext; index += width) {\n              if (!coefficentsMagnitude[index] || (processingFlags[index] & processedMask) !== 0) {\n                continue;\n              }\n\n              var contextLabel = 16;\n\n              if ((processingFlags[index] & firstMagnitudeBitMask) !== 0) {\n                processingFlags[index] ^= firstMagnitudeBitMask;\n                var significance = neighborsSignificance[index] & 127;\n                contextLabel = significance === 0 ? 15 : 14;\n              }\n\n              var bit = decoder.readBit(contexts, contextLabel);\n              coefficentsMagnitude[index] = coefficentsMagnitude[index] << 1 | bit;\n              bitsDecoded[index]++;\n              processingFlags[index] |= processedMask;\n            }\n          }\n        }\n      },\n      runCleanupPass: function BitModel_runCleanupPass() {\n        var decoder = this.decoder;\n        var width = this.width,\n            height = this.height;\n        var neighborsSignificance = this.neighborsSignificance;\n        var coefficentsMagnitude = this.coefficentsMagnitude;\n        var coefficentsSign = this.coefficentsSign;\n        var contexts = this.contexts;\n        var labels = this.contextLabelTable;\n        var bitsDecoded = this.bitsDecoded;\n        var processingFlags = this.processingFlags;\n        var processedMask = 1;\n        var firstMagnitudeBitMask = 2;\n        var oneRowDown = width;\n        var twoRowsDown = width * 2;\n        var threeRowsDown = width * 3;\n        var iNext;\n\n        for (var i0 = 0; i0 < height; i0 = iNext) {\n          iNext = Math.min(i0 + 4, height);\n          var indexBase = i0 * width;\n          var checkAllEmpty = i0 + 3 < height;\n\n          for (var j = 0; j < width; j++) {\n            var index0 = indexBase + j;\n            var allEmpty = checkAllEmpty && processingFlags[index0] === 0 && processingFlags[index0 + oneRowDown] === 0 && processingFlags[index0 + twoRowsDown] === 0 && processingFlags[index0 + threeRowsDown] === 0 && neighborsSignificance[index0] === 0 && neighborsSignificance[index0 + oneRowDown] === 0 && neighborsSignificance[index0 + twoRowsDown] === 0 && neighborsSignificance[index0 + threeRowsDown] === 0;\n            var i1 = 0,\n                index = index0;\n            var i = i0,\n                sign;\n\n            if (allEmpty) {\n              var hasSignificantCoefficent = decoder.readBit(contexts, RUNLENGTH_CONTEXT);\n\n              if (!hasSignificantCoefficent) {\n                bitsDecoded[index0]++;\n                bitsDecoded[index0 + oneRowDown]++;\n                bitsDecoded[index0 + twoRowsDown]++;\n                bitsDecoded[index0 + threeRowsDown]++;\n                continue;\n              }\n\n              i1 = decoder.readBit(contexts, UNIFORM_CONTEXT) << 1 | decoder.readBit(contexts, UNIFORM_CONTEXT);\n\n              if (i1 !== 0) {\n                i = i0 + i1;\n                index += i1 * width;\n              }\n\n              sign = this.decodeSignBit(i, j, index);\n              coefficentsSign[index] = sign;\n              coefficentsMagnitude[index] = 1;\n              this.setNeighborsSignificance(i, j, index);\n              processingFlags[index] |= firstMagnitudeBitMask;\n              index = index0;\n\n              for (var i2 = i0; i2 <= i; i2++, index += width) {\n                bitsDecoded[index]++;\n              }\n\n              i1++;\n            }\n\n            for (i = i0 + i1; i < iNext; i++, index += width) {\n              if (coefficentsMagnitude[index] || (processingFlags[index] & processedMask) !== 0) {\n                continue;\n              }\n\n              var contextLabel = labels[neighborsSignificance[index]];\n              var decision = decoder.readBit(contexts, contextLabel);\n\n              if (decision === 1) {\n                sign = this.decodeSignBit(i, j, index);\n                coefficentsSign[index] = sign;\n                coefficentsMagnitude[index] = 1;\n                this.setNeighborsSignificance(i, j, index);\n                processingFlags[index] |= firstMagnitudeBitMask;\n              }\n\n              bitsDecoded[index]++;\n            }\n          }\n        }\n      },\n      checkSegmentationSymbol: function BitModel_checkSegmentationSymbol() {\n        var decoder = this.decoder;\n        var contexts = this.contexts;\n        var symbol = decoder.readBit(contexts, UNIFORM_CONTEXT) << 3 | decoder.readBit(contexts, UNIFORM_CONTEXT) << 2 | decoder.readBit(contexts, UNIFORM_CONTEXT) << 1 | decoder.readBit(contexts, UNIFORM_CONTEXT);\n\n        if (symbol !== 0xa) {\n          throw new JpxError(\"Invalid segmentation symbol\");\n        }\n      }\n    };\n    return BitModel;\n  }();\n\n  var Transform = function TransformClosure() {\n    function Transform() {}\n\n    Transform.prototype.calculate = function transformCalculate(subbands, u0, v0) {\n      var ll = subbands[0];\n\n      for (var i = 1, ii = subbands.length; i < ii; i++) {\n        ll = this.iterate(ll, subbands[i], u0, v0);\n      }\n\n      return ll;\n    };\n\n    Transform.prototype.extend = function extend(buffer, offset, size) {\n      var i1 = offset - 1,\n          j1 = offset + 1;\n      var i2 = offset + size - 2,\n          j2 = offset + size;\n      buffer[i1--] = buffer[j1++];\n      buffer[j2++] = buffer[i2--];\n      buffer[i1--] = buffer[j1++];\n      buffer[j2++] = buffer[i2--];\n      buffer[i1--] = buffer[j1++];\n      buffer[j2++] = buffer[i2--];\n      buffer[i1] = buffer[j1];\n      buffer[j2] = buffer[i2];\n    };\n\n    Transform.prototype.iterate = function Transform_iterate(ll, hl_lh_hh, u0, v0) {\n      var llWidth = ll.width,\n          llHeight = ll.height,\n          llItems = ll.items;\n      var width = hl_lh_hh.width;\n      var height = hl_lh_hh.height;\n      var items = hl_lh_hh.items;\n      var i, j, k, l, u, v;\n\n      for (k = 0, i = 0; i < llHeight; i++) {\n        l = i * 2 * width;\n\n        for (j = 0; j < llWidth; j++, k++, l += 2) {\n          items[l] = llItems[k];\n        }\n      }\n\n      llItems = ll.items = null;\n      var bufferPadding = 4;\n      var rowBuffer = new Float32Array(width + 2 * bufferPadding);\n\n      if (width === 1) {\n        if ((u0 & 1) !== 0) {\n          for (v = 0, k = 0; v < height; v++, k += width) {\n            items[k] *= 0.5;\n          }\n        }\n      } else {\n        for (v = 0, k = 0; v < height; v++, k += width) {\n          rowBuffer.set(items.subarray(k, k + width), bufferPadding);\n          this.extend(rowBuffer, bufferPadding, width);\n          this.filter(rowBuffer, bufferPadding, width);\n          items.set(rowBuffer.subarray(bufferPadding, bufferPadding + width), k);\n        }\n      }\n\n      var numBuffers = 16;\n      var colBuffers = [];\n\n      for (i = 0; i < numBuffers; i++) {\n        colBuffers.push(new Float32Array(height + 2 * bufferPadding));\n      }\n\n      var b,\n          currentBuffer = 0;\n      ll = bufferPadding + height;\n\n      if (height === 1) {\n        if ((v0 & 1) !== 0) {\n          for (u = 0; u < width; u++) {\n            items[u] *= 0.5;\n          }\n        }\n      } else {\n        for (u = 0; u < width; u++) {\n          if (currentBuffer === 0) {\n            numBuffers = Math.min(width - u, numBuffers);\n\n            for (k = u, l = bufferPadding; l < ll; k += width, l++) {\n              for (b = 0; b < numBuffers; b++) {\n                colBuffers[b][l] = items[k + b];\n              }\n            }\n\n            currentBuffer = numBuffers;\n          }\n\n          currentBuffer--;\n          var buffer = colBuffers[currentBuffer];\n          this.extend(buffer, bufferPadding, height);\n          this.filter(buffer, bufferPadding, height);\n\n          if (currentBuffer === 0) {\n            k = u - numBuffers + 1;\n\n            for (l = bufferPadding; l < ll; k += width, l++) {\n              for (b = 0; b < numBuffers; b++) {\n                items[k + b] = colBuffers[b][l];\n              }\n            }\n          }\n        }\n      }\n\n      return {\n        width,\n        height,\n        items\n      };\n    };\n\n    return Transform;\n  }();\n\n  var IrreversibleTransform = function IrreversibleTransformClosure() {\n    function IrreversibleTransform() {\n      Transform.call(this);\n    }\n\n    IrreversibleTransform.prototype = Object.create(Transform.prototype);\n\n    IrreversibleTransform.prototype.filter = function irreversibleTransformFilter(x, offset, length) {\n      var len = length >> 1;\n      offset = offset | 0;\n      var j, n, current, next;\n      var alpha = -1.586134342059924;\n      var beta = -0.052980118572961;\n      var gamma = 0.882911075530934;\n      var delta = 0.443506852043971;\n      var K = 1.230174104914001;\n      var K_ = 1 / K;\n      j = offset - 3;\n\n      for (n = len + 4; n--; j += 2) {\n        x[j] *= K_;\n      }\n\n      j = offset - 2;\n      current = delta * x[j - 1];\n\n      for (n = len + 3; n--; j += 2) {\n        next = delta * x[j + 1];\n        x[j] = K * x[j] - current - next;\n\n        if (n--) {\n          j += 2;\n          current = delta * x[j + 1];\n          x[j] = K * x[j] - current - next;\n        } else {\n          break;\n        }\n      }\n\n      j = offset - 1;\n      current = gamma * x[j - 1];\n\n      for (n = len + 2; n--; j += 2) {\n        next = gamma * x[j + 1];\n        x[j] -= current + next;\n\n        if (n--) {\n          j += 2;\n          current = gamma * x[j + 1];\n          x[j] -= current + next;\n        } else {\n          break;\n        }\n      }\n\n      j = offset;\n      current = beta * x[j - 1];\n\n      for (n = len + 1; n--; j += 2) {\n        next = beta * x[j + 1];\n        x[j] -= current + next;\n\n        if (n--) {\n          j += 2;\n          current = beta * x[j + 1];\n          x[j] -= current + next;\n        } else {\n          break;\n        }\n      }\n\n      if (len !== 0) {\n        j = offset + 1;\n        current = alpha * x[j - 1];\n\n        for (n = len; n--; j += 2) {\n          next = alpha * x[j + 1];\n          x[j] -= current + next;\n\n          if (n--) {\n            j += 2;\n            current = alpha * x[j + 1];\n            x[j] -= current + next;\n          } else {\n            break;\n          }\n        }\n      }\n    };\n\n    return IrreversibleTransform;\n  }();\n\n  var ReversibleTransform = function ReversibleTransformClosure() {\n    function ReversibleTransform() {\n      Transform.call(this);\n    }\n\n    ReversibleTransform.prototype = Object.create(Transform.prototype);\n\n    ReversibleTransform.prototype.filter = function reversibleTransformFilter(x, offset, length) {\n      var len = length >> 1;\n      offset = offset | 0;\n      var j, n;\n\n      for (j = offset, n = len + 1; n--; j += 2) {\n        x[j] -= x[j - 1] + x[j + 1] + 2 >> 2;\n      }\n\n      for (j = offset + 1, n = len; n--; j += 2) {\n        x[j] += x[j - 1] + x[j + 1] >> 1;\n      }\n    };\n\n    return ReversibleTransform;\n  }();\n\n  return JpxImage;\n}();\n\nexports.JpxImage = JpxImage;\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calculateSHA512 = exports.calculateSHA384 = exports.calculateSHA256 = exports.calculateMD5 = exports.PDF20 = exports.PDF17 = exports.CipherTransformFactory = exports.ARCFourCipher = exports.AES256Cipher = exports.AES128Cipher = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(4);\n\nvar _stream = __w_pdfjs_require__(11);\n\nvar ARCFourCipher = function ARCFourCipherClosure() {\n  function ARCFourCipher(key) {\n    this.a = 0;\n    this.b = 0;\n    var s = new Uint8Array(256);\n    var i,\n        j = 0,\n        tmp,\n        keyLength = key.length;\n\n    for (i = 0; i < 256; ++i) {\n      s[i] = i;\n    }\n\n    for (i = 0; i < 256; ++i) {\n      tmp = s[i];\n      j = j + tmp + key[i % keyLength] & 0xff;\n      s[i] = s[j];\n      s[j] = tmp;\n    }\n\n    this.s = s;\n  }\n\n  ARCFourCipher.prototype = {\n    encryptBlock: function ARCFourCipher_encryptBlock(data) {\n      var i,\n          n = data.length,\n          tmp,\n          tmp2;\n      var a = this.a,\n          b = this.b,\n          s = this.s;\n      var output = new Uint8Array(n);\n\n      for (i = 0; i < n; ++i) {\n        a = a + 1 & 0xff;\n        tmp = s[a];\n        b = b + tmp & 0xff;\n        tmp2 = s[b];\n        s[a] = tmp2;\n        s[b] = tmp;\n        output[i] = data[i] ^ s[tmp + tmp2 & 0xff];\n      }\n\n      this.a = a;\n      this.b = b;\n      return output;\n    }\n  };\n  ARCFourCipher.prototype.decryptBlock = ARCFourCipher.prototype.encryptBlock;\n  return ARCFourCipher;\n}();\n\nexports.ARCFourCipher = ARCFourCipher;\n\nvar calculateMD5 = function calculateMD5Closure() {\n  var r = new Uint8Array([7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21]);\n  var k = new Int32Array([-680876936, -389564586, 606105819, -1044525330, -176418897, 1200080426, -1473231341, -45705983, 1770035416, -1958414417, -42063, -1990404162, 1804603682, -40341101, -1502002290, 1236535329, -165796510, -1069501632, 643717713, -373897302, -701558691, 38016083, -660478335, -405537848, 568446438, -1019803690, -187363961, 1163531501, -1444681467, -51403784, 1735328473, -1926607734, -378558, -2022574463, 1839030562, -35309556, -1530992060, 1272893353, -155497632, -1094730640, 681279174, -358537222, -722521979, 76029189, -640364487, -421815835, 530742520, -995338651, -198630844, 1126891415, -1416354905, -57434055, 1700485571, -1894986606, -1051523, -2054922799, 1873313359, -30611744, -1560198380, 1309151649, -145523070, -1120210379, 718787259, -343485551]);\n\n  function hash(data, offset, length) {\n    var h0 = 1732584193,\n        h1 = -271733879,\n        h2 = -1732584194,\n        h3 = 271733878;\n    var paddedLength = length + 72 & ~63;\n    var padded = new Uint8Array(paddedLength);\n    var i, j, n;\n\n    for (i = 0; i < length; ++i) {\n      padded[i] = data[offset++];\n    }\n\n    padded[i++] = 0x80;\n    n = paddedLength - 8;\n\n    while (i < n) {\n      padded[i++] = 0;\n    }\n\n    padded[i++] = length << 3 & 0xff;\n    padded[i++] = length >> 5 & 0xff;\n    padded[i++] = length >> 13 & 0xff;\n    padded[i++] = length >> 21 & 0xff;\n    padded[i++] = length >>> 29 & 0xff;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    var w = new Int32Array(16);\n\n    for (i = 0; i < paddedLength;) {\n      for (j = 0; j < 16; ++j, i += 4) {\n        w[j] = padded[i] | padded[i + 1] << 8 | padded[i + 2] << 16 | padded[i + 3] << 24;\n      }\n\n      var a = h0,\n          b = h1,\n          c = h2,\n          d = h3,\n          f,\n          g;\n\n      for (j = 0; j < 64; ++j) {\n        if (j < 16) {\n          f = b & c | ~b & d;\n          g = j;\n        } else if (j < 32) {\n          f = d & b | ~d & c;\n          g = 5 * j + 1 & 15;\n        } else if (j < 48) {\n          f = b ^ c ^ d;\n          g = 3 * j + 5 & 15;\n        } else {\n          f = c ^ (b | ~d);\n          g = 7 * j & 15;\n        }\n\n        var tmp = d,\n            rotateArg = a + f + k[j] + w[g] | 0,\n            rotate = r[j];\n        d = c;\n        c = b;\n        b = b + (rotateArg << rotate | rotateArg >>> 32 - rotate) | 0;\n        a = tmp;\n      }\n\n      h0 = h0 + a | 0;\n      h1 = h1 + b | 0;\n      h2 = h2 + c | 0;\n      h3 = h3 + d | 0;\n    }\n\n    return new Uint8Array([h0 & 0xFF, h0 >> 8 & 0xFF, h0 >> 16 & 0xFF, h0 >>> 24 & 0xFF, h1 & 0xFF, h1 >> 8 & 0xFF, h1 >> 16 & 0xFF, h1 >>> 24 & 0xFF, h2 & 0xFF, h2 >> 8 & 0xFF, h2 >> 16 & 0xFF, h2 >>> 24 & 0xFF, h3 & 0xFF, h3 >> 8 & 0xFF, h3 >> 16 & 0xFF, h3 >>> 24 & 0xFF]);\n  }\n\n  return hash;\n}();\n\nexports.calculateMD5 = calculateMD5;\n\nvar Word64 = function Word64Closure() {\n  function Word64(highInteger, lowInteger) {\n    this.high = highInteger | 0;\n    this.low = lowInteger | 0;\n  }\n\n  Word64.prototype = {\n    and: function Word64_and(word) {\n      this.high &= word.high;\n      this.low &= word.low;\n    },\n    xor: function Word64_xor(word) {\n      this.high ^= word.high;\n      this.low ^= word.low;\n    },\n    or: function Word64_or(word) {\n      this.high |= word.high;\n      this.low |= word.low;\n    },\n    shiftRight: function Word64_shiftRight(places) {\n      if (places >= 32) {\n        this.low = this.high >>> places - 32 | 0;\n        this.high = 0;\n      } else {\n        this.low = this.low >>> places | this.high << 32 - places;\n        this.high = this.high >>> places | 0;\n      }\n    },\n    shiftLeft: function Word64_shiftLeft(places) {\n      if (places >= 32) {\n        this.high = this.low << places - 32;\n        this.low = 0;\n      } else {\n        this.high = this.high << places | this.low >>> 32 - places;\n        this.low = this.low << places;\n      }\n    },\n    rotateRight: function Word64_rotateRight(places) {\n      var low, high;\n\n      if (places & 32) {\n        high = this.low;\n        low = this.high;\n      } else {\n        low = this.low;\n        high = this.high;\n      }\n\n      places &= 31;\n      this.low = low >>> places | high << 32 - places;\n      this.high = high >>> places | low << 32 - places;\n    },\n    not: function Word64_not() {\n      this.high = ~this.high;\n      this.low = ~this.low;\n    },\n    add: function Word64_add(word) {\n      var lowAdd = (this.low >>> 0) + (word.low >>> 0);\n      var highAdd = (this.high >>> 0) + (word.high >>> 0);\n\n      if (lowAdd > 0xffffffff) {\n        highAdd += 1;\n      }\n\n      this.low = lowAdd | 0;\n      this.high = highAdd | 0;\n    },\n    copyTo: function Word64_copyTo(bytes, offset) {\n      bytes[offset] = this.high >>> 24 & 0xff;\n      bytes[offset + 1] = this.high >> 16 & 0xff;\n      bytes[offset + 2] = this.high >> 8 & 0xff;\n      bytes[offset + 3] = this.high & 0xff;\n      bytes[offset + 4] = this.low >>> 24 & 0xff;\n      bytes[offset + 5] = this.low >> 16 & 0xff;\n      bytes[offset + 6] = this.low >> 8 & 0xff;\n      bytes[offset + 7] = this.low & 0xff;\n    },\n    assign: function Word64_assign(word) {\n      this.high = word.high;\n      this.low = word.low;\n    }\n  };\n  return Word64;\n}();\n\nvar calculateSHA256 = function calculateSHA256Closure() {\n  function rotr(x, n) {\n    return x >>> n | x << 32 - n;\n  }\n\n  function ch(x, y, z) {\n    return x & y ^ ~x & z;\n  }\n\n  function maj(x, y, z) {\n    return x & y ^ x & z ^ y & z;\n  }\n\n  function sigma(x) {\n    return rotr(x, 2) ^ rotr(x, 13) ^ rotr(x, 22);\n  }\n\n  function sigmaPrime(x) {\n    return rotr(x, 6) ^ rotr(x, 11) ^ rotr(x, 25);\n  }\n\n  function littleSigma(x) {\n    return rotr(x, 7) ^ rotr(x, 18) ^ x >>> 3;\n  }\n\n  function littleSigmaPrime(x) {\n    return rotr(x, 17) ^ rotr(x, 19) ^ x >>> 10;\n  }\n\n  var k = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n\n  function hash(data, offset, length) {\n    var h0 = 0x6a09e667,\n        h1 = 0xbb67ae85,\n        h2 = 0x3c6ef372,\n        h3 = 0xa54ff53a,\n        h4 = 0x510e527f,\n        h5 = 0x9b05688c,\n        h6 = 0x1f83d9ab,\n        h7 = 0x5be0cd19;\n    var paddedLength = Math.ceil((length + 9) / 64) * 64;\n    var padded = new Uint8Array(paddedLength);\n    var i, j, n;\n\n    for (i = 0; i < length; ++i) {\n      padded[i] = data[offset++];\n    }\n\n    padded[i++] = 0x80;\n    n = paddedLength - 8;\n\n    while (i < n) {\n      padded[i++] = 0;\n    }\n\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = length >>> 29 & 0xff;\n    padded[i++] = length >> 21 & 0xff;\n    padded[i++] = length >> 13 & 0xff;\n    padded[i++] = length >> 5 & 0xff;\n    padded[i++] = length << 3 & 0xff;\n    var w = new Uint32Array(64);\n\n    for (i = 0; i < paddedLength;) {\n      for (j = 0; j < 16; ++j) {\n        w[j] = padded[i] << 24 | padded[i + 1] << 16 | padded[i + 2] << 8 | padded[i + 3];\n        i += 4;\n      }\n\n      for (j = 16; j < 64; ++j) {\n        w[j] = littleSigmaPrime(w[j - 2]) + w[j - 7] + littleSigma(w[j - 15]) + w[j - 16] | 0;\n      }\n\n      var a = h0,\n          b = h1,\n          c = h2,\n          d = h3,\n          e = h4,\n          f = h5,\n          g = h6,\n          h = h7,\n          t1,\n          t2;\n\n      for (j = 0; j < 64; ++j) {\n        t1 = h + sigmaPrime(e) + ch(e, f, g) + k[j] + w[j];\n        t2 = sigma(a) + maj(a, b, c);\n        h = g;\n        g = f;\n        f = e;\n        e = d + t1 | 0;\n        d = c;\n        c = b;\n        b = a;\n        a = t1 + t2 | 0;\n      }\n\n      h0 = h0 + a | 0;\n      h1 = h1 + b | 0;\n      h2 = h2 + c | 0;\n      h3 = h3 + d | 0;\n      h4 = h4 + e | 0;\n      h5 = h5 + f | 0;\n      h6 = h6 + g | 0;\n      h7 = h7 + h | 0;\n    }\n\n    return new Uint8Array([h0 >> 24 & 0xFF, h0 >> 16 & 0xFF, h0 >> 8 & 0xFF, h0 & 0xFF, h1 >> 24 & 0xFF, h1 >> 16 & 0xFF, h1 >> 8 & 0xFF, h1 & 0xFF, h2 >> 24 & 0xFF, h2 >> 16 & 0xFF, h2 >> 8 & 0xFF, h2 & 0xFF, h3 >> 24 & 0xFF, h3 >> 16 & 0xFF, h3 >> 8 & 0xFF, h3 & 0xFF, h4 >> 24 & 0xFF, h4 >> 16 & 0xFF, h4 >> 8 & 0xFF, h4 & 0xFF, h5 >> 24 & 0xFF, h5 >> 16 & 0xFF, h5 >> 8 & 0xFF, h5 & 0xFF, h6 >> 24 & 0xFF, h6 >> 16 & 0xFF, h6 >> 8 & 0xFF, h6 & 0xFF, h7 >> 24 & 0xFF, h7 >> 16 & 0xFF, h7 >> 8 & 0xFF, h7 & 0xFF]);\n  }\n\n  return hash;\n}();\n\nexports.calculateSHA256 = calculateSHA256;\n\nvar calculateSHA512 = function calculateSHA512Closure() {\n  function ch(result, x, y, z, tmp) {\n    result.assign(x);\n    result.and(y);\n    tmp.assign(x);\n    tmp.not();\n    tmp.and(z);\n    result.xor(tmp);\n  }\n\n  function maj(result, x, y, z, tmp) {\n    result.assign(x);\n    result.and(y);\n    tmp.assign(x);\n    tmp.and(z);\n    result.xor(tmp);\n    tmp.assign(y);\n    tmp.and(z);\n    result.xor(tmp);\n  }\n\n  function sigma(result, x, tmp) {\n    result.assign(x);\n    result.rotateRight(28);\n    tmp.assign(x);\n    tmp.rotateRight(34);\n    result.xor(tmp);\n    tmp.assign(x);\n    tmp.rotateRight(39);\n    result.xor(tmp);\n  }\n\n  function sigmaPrime(result, x, tmp) {\n    result.assign(x);\n    result.rotateRight(14);\n    tmp.assign(x);\n    tmp.rotateRight(18);\n    result.xor(tmp);\n    tmp.assign(x);\n    tmp.rotateRight(41);\n    result.xor(tmp);\n  }\n\n  function littleSigma(result, x, tmp) {\n    result.assign(x);\n    result.rotateRight(1);\n    tmp.assign(x);\n    tmp.rotateRight(8);\n    result.xor(tmp);\n    tmp.assign(x);\n    tmp.shiftRight(7);\n    result.xor(tmp);\n  }\n\n  function littleSigmaPrime(result, x, tmp) {\n    result.assign(x);\n    result.rotateRight(19);\n    tmp.assign(x);\n    tmp.rotateRight(61);\n    result.xor(tmp);\n    tmp.assign(x);\n    tmp.shiftRight(6);\n    result.xor(tmp);\n  }\n\n  var k = [new Word64(0x428a2f98, 0xd728ae22), new Word64(0x71374491, 0x23ef65cd), new Word64(0xb5c0fbcf, 0xec4d3b2f), new Word64(0xe9b5dba5, 0x8189dbbc), new Word64(0x3956c25b, 0xf348b538), new Word64(0x59f111f1, 0xb605d019), new Word64(0x923f82a4, 0xaf194f9b), new Word64(0xab1c5ed5, 0xda6d8118), new Word64(0xd807aa98, 0xa3030242), new Word64(0x12835b01, 0x45706fbe), new Word64(0x243185be, 0x4ee4b28c), new Word64(0x550c7dc3, 0xd5ffb4e2), new Word64(0x72be5d74, 0xf27b896f), new Word64(0x80deb1fe, 0x3b1696b1), new Word64(0x9bdc06a7, 0x25c71235), new Word64(0xc19bf174, 0xcf692694), new Word64(0xe49b69c1, 0x9ef14ad2), new Word64(0xefbe4786, 0x384f25e3), new Word64(0x0fc19dc6, 0x8b8cd5b5), new Word64(0x240ca1cc, 0x77ac9c65), new Word64(0x2de92c6f, 0x592b0275), new Word64(0x4a7484aa, 0x6ea6e483), new Word64(0x5cb0a9dc, 0xbd41fbd4), new Word64(0x76f988da, 0x831153b5), new Word64(0x983e5152, 0xee66dfab), new Word64(0xa831c66d, 0x2db43210), new Word64(0xb00327c8, 0x98fb213f), new Word64(0xbf597fc7, 0xbeef0ee4), new Word64(0xc6e00bf3, 0x3da88fc2), new Word64(0xd5a79147, 0x930aa725), new Word64(0x06ca6351, 0xe003826f), new Word64(0x14292967, 0x0a0e6e70), new Word64(0x27b70a85, 0x46d22ffc), new Word64(0x2e1b2138, 0x5c26c926), new Word64(0x4d2c6dfc, 0x5ac42aed), new Word64(0x53380d13, 0x9d95b3df), new Word64(0x650a7354, 0x8baf63de), new Word64(0x766a0abb, 0x3c77b2a8), new Word64(0x81c2c92e, 0x47edaee6), new Word64(0x92722c85, 0x1482353b), new Word64(0xa2bfe8a1, 0x4cf10364), new Word64(0xa81a664b, 0xbc423001), new Word64(0xc24b8b70, 0xd0f89791), new Word64(0xc76c51a3, 0x0654be30), new Word64(0xd192e819, 0xd6ef5218), new Word64(0xd6990624, 0x5565a910), new Word64(0xf40e3585, 0x5771202a), new Word64(0x106aa070, 0x32bbd1b8), new Word64(0x19a4c116, 0xb8d2d0c8), new Word64(0x1e376c08, 0x5141ab53), new Word64(0x2748774c, 0xdf8eeb99), new Word64(0x34b0bcb5, 0xe19b48a8), new Word64(0x391c0cb3, 0xc5c95a63), new Word64(0x4ed8aa4a, 0xe3418acb), new Word64(0x5b9cca4f, 0x7763e373), new Word64(0x682e6ff3, 0xd6b2b8a3), new Word64(0x748f82ee, 0x5defb2fc), new Word64(0x78a5636f, 0x43172f60), new Word64(0x84c87814, 0xa1f0ab72), new Word64(0x8cc70208, 0x1a6439ec), new Word64(0x90befffa, 0x23631e28), new Word64(0xa4506ceb, 0xde82bde9), new Word64(0xbef9a3f7, 0xb2c67915), new Word64(0xc67178f2, 0xe372532b), new Word64(0xca273ece, 0xea26619c), new Word64(0xd186b8c7, 0x21c0c207), new Word64(0xeada7dd6, 0xcde0eb1e), new Word64(0xf57d4f7f, 0xee6ed178), new Word64(0x06f067aa, 0x72176fba), new Word64(0x0a637dc5, 0xa2c898a6), new Word64(0x113f9804, 0xbef90dae), new Word64(0x1b710b35, 0x131c471b), new Word64(0x28db77f5, 0x23047d84), new Word64(0x32caab7b, 0x40c72493), new Word64(0x3c9ebe0a, 0x15c9bebc), new Word64(0x431d67c4, 0x9c100d4c), new Word64(0x4cc5d4be, 0xcb3e42b6), new Word64(0x597f299c, 0xfc657e2a), new Word64(0x5fcb6fab, 0x3ad6faec), new Word64(0x6c44198c, 0x4a475817)];\n\n  function hash(data, offset, length, mode384) {\n    mode384 = !!mode384;\n    var h0, h1, h2, h3, h4, h5, h6, h7;\n\n    if (!mode384) {\n      h0 = new Word64(0x6a09e667, 0xf3bcc908);\n      h1 = new Word64(0xbb67ae85, 0x84caa73b);\n      h2 = new Word64(0x3c6ef372, 0xfe94f82b);\n      h3 = new Word64(0xa54ff53a, 0x5f1d36f1);\n      h4 = new Word64(0x510e527f, 0xade682d1);\n      h5 = new Word64(0x9b05688c, 0x2b3e6c1f);\n      h6 = new Word64(0x1f83d9ab, 0xfb41bd6b);\n      h7 = new Word64(0x5be0cd19, 0x137e2179);\n    } else {\n      h0 = new Word64(0xcbbb9d5d, 0xc1059ed8);\n      h1 = new Word64(0x629a292a, 0x367cd507);\n      h2 = new Word64(0x9159015a, 0x3070dd17);\n      h3 = new Word64(0x152fecd8, 0xf70e5939);\n      h4 = new Word64(0x67332667, 0xffc00b31);\n      h5 = new Word64(0x8eb44a87, 0x68581511);\n      h6 = new Word64(0xdb0c2e0d, 0x64f98fa7);\n      h7 = new Word64(0x47b5481d, 0xbefa4fa4);\n    }\n\n    var paddedLength = Math.ceil((length + 17) / 128) * 128;\n    var padded = new Uint8Array(paddedLength);\n    var i, j, n;\n\n    for (i = 0; i < length; ++i) {\n      padded[i] = data[offset++];\n    }\n\n    padded[i++] = 0x80;\n    n = paddedLength - 16;\n\n    while (i < n) {\n      padded[i++] = 0;\n    }\n\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = 0;\n    padded[i++] = length >>> 29 & 0xff;\n    padded[i++] = length >> 21 & 0xff;\n    padded[i++] = length >> 13 & 0xff;\n    padded[i++] = length >> 5 & 0xff;\n    padded[i++] = length << 3 & 0xff;\n    var w = new Array(80);\n\n    for (i = 0; i < 80; i++) {\n      w[i] = new Word64(0, 0);\n    }\n\n    var a = new Word64(0, 0),\n        b = new Word64(0, 0),\n        c = new Word64(0, 0);\n    var d = new Word64(0, 0),\n        e = new Word64(0, 0),\n        f = new Word64(0, 0);\n    var g = new Word64(0, 0),\n        h = new Word64(0, 0);\n    var t1 = new Word64(0, 0),\n        t2 = new Word64(0, 0);\n    var tmp1 = new Word64(0, 0),\n        tmp2 = new Word64(0, 0),\n        tmp3;\n\n    for (i = 0; i < paddedLength;) {\n      for (j = 0; j < 16; ++j) {\n        w[j].high = padded[i] << 24 | padded[i + 1] << 16 | padded[i + 2] << 8 | padded[i + 3];\n        w[j].low = padded[i + 4] << 24 | padded[i + 5] << 16 | padded[i + 6] << 8 | padded[i + 7];\n        i += 8;\n      }\n\n      for (j = 16; j < 80; ++j) {\n        tmp3 = w[j];\n        littleSigmaPrime(tmp3, w[j - 2], tmp2);\n        tmp3.add(w[j - 7]);\n        littleSigma(tmp1, w[j - 15], tmp2);\n        tmp3.add(tmp1);\n        tmp3.add(w[j - 16]);\n      }\n\n      a.assign(h0);\n      b.assign(h1);\n      c.assign(h2);\n      d.assign(h3);\n      e.assign(h4);\n      f.assign(h5);\n      g.assign(h6);\n      h.assign(h7);\n\n      for (j = 0; j < 80; ++j) {\n        t1.assign(h);\n        sigmaPrime(tmp1, e, tmp2);\n        t1.add(tmp1);\n        ch(tmp1, e, f, g, tmp2);\n        t1.add(tmp1);\n        t1.add(k[j]);\n        t1.add(w[j]);\n        sigma(t2, a, tmp2);\n        maj(tmp1, a, b, c, tmp2);\n        t2.add(tmp1);\n        tmp3 = h;\n        h = g;\n        g = f;\n        f = e;\n        d.add(t1);\n        e = d;\n        d = c;\n        c = b;\n        b = a;\n        tmp3.assign(t1);\n        tmp3.add(t2);\n        a = tmp3;\n      }\n\n      h0.add(a);\n      h1.add(b);\n      h2.add(c);\n      h3.add(d);\n      h4.add(e);\n      h5.add(f);\n      h6.add(g);\n      h7.add(h);\n    }\n\n    var result;\n\n    if (!mode384) {\n      result = new Uint8Array(64);\n      h0.copyTo(result, 0);\n      h1.copyTo(result, 8);\n      h2.copyTo(result, 16);\n      h3.copyTo(result, 24);\n      h4.copyTo(result, 32);\n      h5.copyTo(result, 40);\n      h6.copyTo(result, 48);\n      h7.copyTo(result, 56);\n    } else {\n      result = new Uint8Array(48);\n      h0.copyTo(result, 0);\n      h1.copyTo(result, 8);\n      h2.copyTo(result, 16);\n      h3.copyTo(result, 24);\n      h4.copyTo(result, 32);\n      h5.copyTo(result, 40);\n    }\n\n    return result;\n  }\n\n  return hash;\n}();\n\nexports.calculateSHA512 = calculateSHA512;\n\nvar calculateSHA384 = function calculateSHA384Closure() {\n  function hash(data, offset, length) {\n    return calculateSHA512(data, offset, length, true);\n  }\n\n  return hash;\n}();\n\nexports.calculateSHA384 = calculateSHA384;\n\nvar NullCipher = function NullCipherClosure() {\n  function NullCipher() {}\n\n  NullCipher.prototype = {\n    decryptBlock: function NullCipher_decryptBlock(data) {\n      return data;\n    }\n  };\n  return NullCipher;\n}();\n\nclass AESBaseCipher {\n  constructor() {\n    if (this.constructor === AESBaseCipher) {\n      (0, _util.unreachable)(\"Cannot initialize AESBaseCipher.\");\n    }\n\n    this._s = new Uint8Array([0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]);\n    this._inv_s = new Uint8Array([0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]);\n    this._mix = new Uint32Array([0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3]);\n    this._mixCol = new Uint8Array(256);\n\n    for (let i = 0; i < 256; i++) {\n      if (i < 128) {\n        this._mixCol[i] = i << 1;\n      } else {\n        this._mixCol[i] = i << 1 ^ 0x1b;\n      }\n    }\n\n    this.buffer = new Uint8Array(16);\n    this.bufferPosition = 0;\n  }\n\n  _expandKey(cipherKey) {\n    (0, _util.unreachable)(\"Cannot call `_expandKey` on the base class\");\n  }\n\n  _decrypt(input, key) {\n    let t, u, v;\n    const state = new Uint8Array(16);\n    state.set(input);\n\n    for (let j = 0, k = this._keySize; j < 16; ++j, ++k) {\n      state[j] ^= key[k];\n    }\n\n    for (let i = this._cyclesOfRepetition - 1; i >= 1; --i) {\n      t = state[13];\n      state[13] = state[9];\n      state[9] = state[5];\n      state[5] = state[1];\n      state[1] = t;\n      t = state[14];\n      u = state[10];\n      state[14] = state[6];\n      state[10] = state[2];\n      state[6] = t;\n      state[2] = u;\n      t = state[15];\n      u = state[11];\n      v = state[7];\n      state[15] = state[3];\n      state[11] = t;\n      state[7] = u;\n      state[3] = v;\n\n      for (let j = 0; j < 16; ++j) {\n        state[j] = this._inv_s[state[j]];\n      }\n\n      for (let j = 0, k = i * 16; j < 16; ++j, ++k) {\n        state[j] ^= key[k];\n      }\n\n      for (let j = 0; j < 16; j += 4) {\n        const s0 = this._mix[state[j]];\n        const s1 = this._mix[state[j + 1]];\n        const s2 = this._mix[state[j + 2]];\n        const s3 = this._mix[state[j + 3]];\n        t = s0 ^ s1 >>> 8 ^ s1 << 24 ^ s2 >>> 16 ^ s2 << 16 ^ s3 >>> 24 ^ s3 << 8;\n        state[j] = t >>> 24 & 0xff;\n        state[j + 1] = t >> 16 & 0xff;\n        state[j + 2] = t >> 8 & 0xff;\n        state[j + 3] = t & 0xff;\n      }\n    }\n\n    t = state[13];\n    state[13] = state[9];\n    state[9] = state[5];\n    state[5] = state[1];\n    state[1] = t;\n    t = state[14];\n    u = state[10];\n    state[14] = state[6];\n    state[10] = state[2];\n    state[6] = t;\n    state[2] = u;\n    t = state[15];\n    u = state[11];\n    v = state[7];\n    state[15] = state[3];\n    state[11] = t;\n    state[7] = u;\n    state[3] = v;\n\n    for (let j = 0; j < 16; ++j) {\n      state[j] = this._inv_s[state[j]];\n      state[j] ^= key[j];\n    }\n\n    return state;\n  }\n\n  _encrypt(input, key) {\n    const s = this._s;\n    let t, u, v;\n    const state = new Uint8Array(16);\n    state.set(input);\n\n    for (let j = 0; j < 16; ++j) {\n      state[j] ^= key[j];\n    }\n\n    for (let i = 1; i < this._cyclesOfRepetition; i++) {\n      for (let j = 0; j < 16; ++j) {\n        state[j] = s[state[j]];\n      }\n\n      v = state[1];\n      state[1] = state[5];\n      state[5] = state[9];\n      state[9] = state[13];\n      state[13] = v;\n      v = state[2];\n      u = state[6];\n      state[2] = state[10];\n      state[6] = state[14];\n      state[10] = v;\n      state[14] = u;\n      v = state[3];\n      u = state[7];\n      t = state[11];\n      state[3] = state[15];\n      state[7] = v;\n      state[11] = u;\n      state[15] = t;\n\n      for (let j = 0; j < 16; j += 4) {\n        const s0 = state[j + 0];\n        const s1 = state[j + 1];\n        const s2 = state[j + 2];\n        const s3 = state[j + 3];\n        t = s0 ^ s1 ^ s2 ^ s3;\n        state[j + 0] ^= t ^ this._mixCol[s0 ^ s1];\n        state[j + 1] ^= t ^ this._mixCol[s1 ^ s2];\n        state[j + 2] ^= t ^ this._mixCol[s2 ^ s3];\n        state[j + 3] ^= t ^ this._mixCol[s3 ^ s0];\n      }\n\n      for (let j = 0, k = i * 16; j < 16; ++j, ++k) {\n        state[j] ^= key[k];\n      }\n    }\n\n    for (let j = 0; j < 16; ++j) {\n      state[j] = s[state[j]];\n    }\n\n    v = state[1];\n    state[1] = state[5];\n    state[5] = state[9];\n    state[9] = state[13];\n    state[13] = v;\n    v = state[2];\n    u = state[6];\n    state[2] = state[10];\n    state[6] = state[14];\n    state[10] = v;\n    state[14] = u;\n    v = state[3];\n    u = state[7];\n    t = state[11];\n    state[3] = state[15];\n    state[7] = v;\n    state[11] = u;\n    state[15] = t;\n\n    for (let j = 0, k = this._keySize; j < 16; ++j, ++k) {\n      state[j] ^= key[k];\n    }\n\n    return state;\n  }\n\n  _decryptBlock2(data, finalize) {\n    const sourceLength = data.length;\n    let buffer = this.buffer,\n        bufferLength = this.bufferPosition;\n    const result = [];\n    let iv = this.iv;\n\n    for (let i = 0; i < sourceLength; ++i) {\n      buffer[bufferLength] = data[i];\n      ++bufferLength;\n\n      if (bufferLength < 16) {\n        continue;\n      }\n\n      const plain = this._decrypt(buffer, this._key);\n\n      for (let j = 0; j < 16; ++j) {\n        plain[j] ^= iv[j];\n      }\n\n      iv = buffer;\n      result.push(plain);\n      buffer = new Uint8Array(16);\n      bufferLength = 0;\n    }\n\n    this.buffer = buffer;\n    this.bufferLength = bufferLength;\n    this.iv = iv;\n\n    if (result.length === 0) {\n      return new Uint8Array(0);\n    }\n\n    let outputLength = 16 * result.length;\n\n    if (finalize) {\n      const lastBlock = result[result.length - 1];\n      let psLen = lastBlock[15];\n\n      if (psLen <= 16) {\n        for (let i = 15, ii = 16 - psLen; i >= ii; --i) {\n          if (lastBlock[i] !== psLen) {\n            psLen = 0;\n            break;\n          }\n        }\n\n        outputLength -= psLen;\n        result[result.length - 1] = lastBlock.subarray(0, 16 - psLen);\n      }\n    }\n\n    const output = new Uint8Array(outputLength);\n\n    for (let i = 0, j = 0, ii = result.length; i < ii; ++i, j += 16) {\n      output.set(result[i], j);\n    }\n\n    return output;\n  }\n\n  decryptBlock(data, finalize, iv = null) {\n    const sourceLength = data.length;\n    const buffer = this.buffer;\n    let bufferLength = this.bufferPosition;\n\n    if (iv) {\n      this.iv = iv;\n    } else {\n      for (let i = 0; bufferLength < 16 && i < sourceLength; ++i, ++bufferLength) {\n        buffer[bufferLength] = data[i];\n      }\n\n      if (bufferLength < 16) {\n        this.bufferLength = bufferLength;\n        return new Uint8Array(0);\n      }\n\n      this.iv = buffer;\n      data = data.subarray(16);\n    }\n\n    this.buffer = new Uint8Array(16);\n    this.bufferLength = 0;\n    this.decryptBlock = this._decryptBlock2;\n    return this.decryptBlock(data, finalize);\n  }\n\n  encrypt(data, iv) {\n    const sourceLength = data.length;\n    let buffer = this.buffer,\n        bufferLength = this.bufferPosition;\n    const result = [];\n\n    if (!iv) {\n      iv = new Uint8Array(16);\n    }\n\n    for (let i = 0; i < sourceLength; ++i) {\n      buffer[bufferLength] = data[i];\n      ++bufferLength;\n\n      if (bufferLength < 16) {\n        continue;\n      }\n\n      for (let j = 0; j < 16; ++j) {\n        buffer[j] ^= iv[j];\n      }\n\n      const cipher = this._encrypt(buffer, this._key);\n\n      iv = cipher;\n      result.push(cipher);\n      buffer = new Uint8Array(16);\n      bufferLength = 0;\n    }\n\n    this.buffer = buffer;\n    this.bufferLength = bufferLength;\n    this.iv = iv;\n\n    if (result.length === 0) {\n      return new Uint8Array(0);\n    }\n\n    const outputLength = 16 * result.length;\n    const output = new Uint8Array(outputLength);\n\n    for (let i = 0, j = 0, ii = result.length; i < ii; ++i, j += 16) {\n      output.set(result[i], j);\n    }\n\n    return output;\n  }\n\n}\n\nclass AES128Cipher extends AESBaseCipher {\n  constructor(key) {\n    super();\n    this._cyclesOfRepetition = 10;\n    this._keySize = 160;\n    this._rcon = new Uint8Array([0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d]);\n    this._key = this._expandKey(key);\n  }\n\n  _expandKey(cipherKey) {\n    const b = 176;\n    const s = this._s;\n    const rcon = this._rcon;\n    const result = new Uint8Array(b);\n    result.set(cipherKey);\n\n    for (let j = 16, i = 1; j < b; ++i) {\n      let t1 = result[j - 3];\n      let t2 = result[j - 2];\n      let t3 = result[j - 1];\n      let t4 = result[j - 4];\n      t1 = s[t1];\n      t2 = s[t2];\n      t3 = s[t3];\n      t4 = s[t4];\n      t1 = t1 ^ rcon[i];\n\n      for (let n = 0; n < 4; ++n) {\n        result[j] = t1 ^= result[j - 16];\n        j++;\n        result[j] = t2 ^= result[j - 16];\n        j++;\n        result[j] = t3 ^= result[j - 16];\n        j++;\n        result[j] = t4 ^= result[j - 16];\n        j++;\n      }\n    }\n\n    return result;\n  }\n\n}\n\nexports.AES128Cipher = AES128Cipher;\n\nclass AES256Cipher extends AESBaseCipher {\n  constructor(key) {\n    super();\n    this._cyclesOfRepetition = 14;\n    this._keySize = 224;\n    this._key = this._expandKey(key);\n  }\n\n  _expandKey(cipherKey) {\n    const b = 240;\n    const s = this._s;\n    const result = new Uint8Array(b);\n    result.set(cipherKey);\n    let r = 1;\n    let t1, t2, t3, t4;\n\n    for (let j = 32, i = 1; j < b; ++i) {\n      if (j % 32 === 16) {\n        t1 = s[t1];\n        t2 = s[t2];\n        t3 = s[t3];\n        t4 = s[t4];\n      } else if (j % 32 === 0) {\n        t1 = result[j - 3];\n        t2 = result[j - 2];\n        t3 = result[j - 1];\n        t4 = result[j - 4];\n        t1 = s[t1];\n        t2 = s[t2];\n        t3 = s[t3];\n        t4 = s[t4];\n        t1 = t1 ^ r;\n\n        if ((r <<= 1) >= 256) {\n          r = (r ^ 0x1b) & 0xff;\n        }\n      }\n\n      for (let n = 0; n < 4; ++n) {\n        result[j] = t1 ^= result[j - 32];\n        j++;\n        result[j] = t2 ^= result[j - 32];\n        j++;\n        result[j] = t3 ^= result[j - 32];\n        j++;\n        result[j] = t4 ^= result[j - 32];\n        j++;\n      }\n    }\n\n    return result;\n  }\n\n}\n\nexports.AES256Cipher = AES256Cipher;\n\nvar PDF17 = function PDF17Closure() {\n  function compareByteArrays(array1, array2) {\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    for (var i = 0; i < array1.length; i++) {\n      if (array1[i] !== array2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function PDF17() {}\n\n  PDF17.prototype = {\n    checkOwnerPassword: function PDF17_checkOwnerPassword(password, ownerValidationSalt, userBytes, ownerPassword) {\n      var hashData = new Uint8Array(password.length + 56);\n      hashData.set(password, 0);\n      hashData.set(ownerValidationSalt, password.length);\n      hashData.set(userBytes, password.length + ownerValidationSalt.length);\n      var result = calculateSHA256(hashData, 0, hashData.length);\n      return compareByteArrays(result, ownerPassword);\n    },\n    checkUserPassword: function PDF17_checkUserPassword(password, userValidationSalt, userPassword) {\n      var hashData = new Uint8Array(password.length + 8);\n      hashData.set(password, 0);\n      hashData.set(userValidationSalt, password.length);\n      var result = calculateSHA256(hashData, 0, hashData.length);\n      return compareByteArrays(result, userPassword);\n    },\n    getOwnerKey: function PDF17_getOwnerKey(password, ownerKeySalt, userBytes, ownerEncryption) {\n      var hashData = new Uint8Array(password.length + 56);\n      hashData.set(password, 0);\n      hashData.set(ownerKeySalt, password.length);\n      hashData.set(userBytes, password.length + ownerKeySalt.length);\n      var key = calculateSHA256(hashData, 0, hashData.length);\n      var cipher = new AES256Cipher(key);\n      return cipher.decryptBlock(ownerEncryption, false, new Uint8Array(16));\n    },\n    getUserKey: function PDF17_getUserKey(password, userKeySalt, userEncryption) {\n      var hashData = new Uint8Array(password.length + 8);\n      hashData.set(password, 0);\n      hashData.set(userKeySalt, password.length);\n      var key = calculateSHA256(hashData, 0, hashData.length);\n      var cipher = new AES256Cipher(key);\n      return cipher.decryptBlock(userEncryption, false, new Uint8Array(16));\n    }\n  };\n  return PDF17;\n}();\n\nexports.PDF17 = PDF17;\n\nvar PDF20 = function PDF20Closure() {\n  function concatArrays(array1, array2) {\n    var t = new Uint8Array(array1.length + array2.length);\n    t.set(array1, 0);\n    t.set(array2, array1.length);\n    return t;\n  }\n\n  function calculatePDF20Hash(password, input, userBytes) {\n    var k = calculateSHA256(input, 0, input.length).subarray(0, 32);\n    var e = [0];\n    var i = 0;\n\n    while (i < 64 || e[e.length - 1] > i - 32) {\n      var arrayLength = password.length + k.length + userBytes.length;\n      var k1 = new Uint8Array(arrayLength * 64);\n      var array = concatArrays(password, k);\n      array = concatArrays(array, userBytes);\n\n      for (var j = 0, pos = 0; j < 64; j++, pos += arrayLength) {\n        k1.set(array, pos);\n      }\n\n      var cipher = new AES128Cipher(k.subarray(0, 16));\n      e = cipher.encrypt(k1, k.subarray(16, 32));\n      var remainder = 0;\n\n      for (var z = 0; z < 16; z++) {\n        remainder *= 256 % 3;\n        remainder %= 3;\n        remainder += (e[z] >>> 0) % 3;\n        remainder %= 3;\n      }\n\n      if (remainder === 0) {\n        k = calculateSHA256(e, 0, e.length);\n      } else if (remainder === 1) {\n        k = calculateSHA384(e, 0, e.length);\n      } else if (remainder === 2) {\n        k = calculateSHA512(e, 0, e.length);\n      }\n\n      i++;\n    }\n\n    return k.subarray(0, 32);\n  }\n\n  function PDF20() {}\n\n  function compareByteArrays(array1, array2) {\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    for (var i = 0; i < array1.length; i++) {\n      if (array1[i] !== array2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  PDF20.prototype = {\n    hash: function PDF20_hash(password, concatBytes, userBytes) {\n      return calculatePDF20Hash(password, concatBytes, userBytes);\n    },\n    checkOwnerPassword: function PDF20_checkOwnerPassword(password, ownerValidationSalt, userBytes, ownerPassword) {\n      var hashData = new Uint8Array(password.length + 56);\n      hashData.set(password, 0);\n      hashData.set(ownerValidationSalt, password.length);\n      hashData.set(userBytes, password.length + ownerValidationSalt.length);\n      var result = calculatePDF20Hash(password, hashData, userBytes);\n      return compareByteArrays(result, ownerPassword);\n    },\n    checkUserPassword: function PDF20_checkUserPassword(password, userValidationSalt, userPassword) {\n      var hashData = new Uint8Array(password.length + 8);\n      hashData.set(password, 0);\n      hashData.set(userValidationSalt, password.length);\n      var result = calculatePDF20Hash(password, hashData, []);\n      return compareByteArrays(result, userPassword);\n    },\n    getOwnerKey: function PDF20_getOwnerKey(password, ownerKeySalt, userBytes, ownerEncryption) {\n      var hashData = new Uint8Array(password.length + 56);\n      hashData.set(password, 0);\n      hashData.set(ownerKeySalt, password.length);\n      hashData.set(userBytes, password.length + ownerKeySalt.length);\n      var key = calculatePDF20Hash(password, hashData, userBytes);\n      var cipher = new AES256Cipher(key);\n      return cipher.decryptBlock(ownerEncryption, false, new Uint8Array(16));\n    },\n    getUserKey: function PDF20_getUserKey(password, userKeySalt, userEncryption) {\n      var hashData = new Uint8Array(password.length + 8);\n      hashData.set(password, 0);\n      hashData.set(userKeySalt, password.length);\n      var key = calculatePDF20Hash(password, hashData, []);\n      var cipher = new AES256Cipher(key);\n      return cipher.decryptBlock(userEncryption, false, new Uint8Array(16));\n    }\n  };\n  return PDF20;\n}();\n\nexports.PDF20 = PDF20;\n\nvar CipherTransform = function CipherTransformClosure() {\n  function CipherTransform(stringCipherConstructor, streamCipherConstructor) {\n    this.StringCipherConstructor = stringCipherConstructor;\n    this.StreamCipherConstructor = streamCipherConstructor;\n  }\n\n  CipherTransform.prototype = {\n    createStream: function CipherTransform_createStream(stream, length) {\n      var cipher = new this.StreamCipherConstructor();\n      return new _stream.DecryptStream(stream, length, function cipherTransformDecryptStream(data, finalize) {\n        return cipher.decryptBlock(data, finalize);\n      });\n    },\n    decryptString: function CipherTransform_decryptString(s) {\n      var cipher = new this.StringCipherConstructor();\n      var data = (0, _util.stringToBytes)(s);\n      data = cipher.decryptBlock(data, true);\n      return (0, _util.bytesToString)(data);\n    }\n  };\n  return CipherTransform;\n}();\n\nvar CipherTransformFactory = function CipherTransformFactoryClosure() {\n  var defaultPasswordBytes = new Uint8Array([0x28, 0xBF, 0x4E, 0x5E, 0x4E, 0x75, 0x8A, 0x41, 0x64, 0x00, 0x4E, 0x56, 0xFF, 0xFA, 0x01, 0x08, 0x2E, 0x2E, 0x00, 0xB6, 0xD0, 0x68, 0x3E, 0x80, 0x2F, 0x0C, 0xA9, 0xFE, 0x64, 0x53, 0x69, 0x7A]);\n\n  function createEncryptionKey20(revision, password, ownerPassword, ownerValidationSalt, ownerKeySalt, uBytes, userPassword, userValidationSalt, userKeySalt, ownerEncryption, userEncryption, perms) {\n    if (password) {\n      var passwordLength = Math.min(127, password.length);\n      password = password.subarray(0, passwordLength);\n    } else {\n      password = [];\n    }\n\n    var pdfAlgorithm;\n\n    if (revision === 6) {\n      pdfAlgorithm = new PDF20();\n    } else {\n      pdfAlgorithm = new PDF17();\n    }\n\n    if (pdfAlgorithm.checkUserPassword(password, userValidationSalt, userPassword)) {\n      return pdfAlgorithm.getUserKey(password, userKeySalt, userEncryption);\n    } else if (password.length && pdfAlgorithm.checkOwnerPassword(password, ownerValidationSalt, uBytes, ownerPassword)) {\n      return pdfAlgorithm.getOwnerKey(password, ownerKeySalt, uBytes, ownerEncryption);\n    }\n\n    return null;\n  }\n\n  function prepareKeyData(fileId, password, ownerPassword, userPassword, flags, revision, keyLength, encryptMetadata) {\n    var hashDataSize = 40 + ownerPassword.length + fileId.length;\n    var hashData = new Uint8Array(hashDataSize),\n        i = 0,\n        j,\n        n;\n\n    if (password) {\n      n = Math.min(32, password.length);\n\n      for (; i < n; ++i) {\n        hashData[i] = password[i];\n      }\n    }\n\n    j = 0;\n\n    while (i < 32) {\n      hashData[i++] = defaultPasswordBytes[j++];\n    }\n\n    for (j = 0, n = ownerPassword.length; j < n; ++j) {\n      hashData[i++] = ownerPassword[j];\n    }\n\n    hashData[i++] = flags & 0xff;\n    hashData[i++] = flags >> 8 & 0xff;\n    hashData[i++] = flags >> 16 & 0xff;\n    hashData[i++] = flags >>> 24 & 0xff;\n\n    for (j = 0, n = fileId.length; j < n; ++j) {\n      hashData[i++] = fileId[j];\n    }\n\n    if (revision >= 4 && !encryptMetadata) {\n      hashData[i++] = 0xff;\n      hashData[i++] = 0xff;\n      hashData[i++] = 0xff;\n      hashData[i++] = 0xff;\n    }\n\n    var hash = calculateMD5(hashData, 0, i);\n    var keyLengthInBytes = keyLength >> 3;\n\n    if (revision >= 3) {\n      for (j = 0; j < 50; ++j) {\n        hash = calculateMD5(hash, 0, keyLengthInBytes);\n      }\n    }\n\n    var encryptionKey = hash.subarray(0, keyLengthInBytes);\n    var cipher, checkData;\n\n    if (revision >= 3) {\n      for (i = 0; i < 32; ++i) {\n        hashData[i] = defaultPasswordBytes[i];\n      }\n\n      for (j = 0, n = fileId.length; j < n; ++j) {\n        hashData[i++] = fileId[j];\n      }\n\n      cipher = new ARCFourCipher(encryptionKey);\n      checkData = cipher.encryptBlock(calculateMD5(hashData, 0, i));\n      n = encryptionKey.length;\n      var derivedKey = new Uint8Array(n),\n          k;\n\n      for (j = 1; j <= 19; ++j) {\n        for (k = 0; k < n; ++k) {\n          derivedKey[k] = encryptionKey[k] ^ j;\n        }\n\n        cipher = new ARCFourCipher(derivedKey);\n        checkData = cipher.encryptBlock(checkData);\n      }\n\n      for (j = 0, n = checkData.length; j < n; ++j) {\n        if (userPassword[j] !== checkData[j]) {\n          return null;\n        }\n      }\n    } else {\n      cipher = new ARCFourCipher(encryptionKey);\n      checkData = cipher.encryptBlock(defaultPasswordBytes);\n\n      for (j = 0, n = checkData.length; j < n; ++j) {\n        if (userPassword[j] !== checkData[j]) {\n          return null;\n        }\n      }\n    }\n\n    return encryptionKey;\n  }\n\n  function decodeUserPassword(password, ownerPassword, revision, keyLength) {\n    var hashData = new Uint8Array(32),\n        i = 0,\n        j,\n        n;\n    n = Math.min(32, password.length);\n\n    for (; i < n; ++i) {\n      hashData[i] = password[i];\n    }\n\n    j = 0;\n\n    while (i < 32) {\n      hashData[i++] = defaultPasswordBytes[j++];\n    }\n\n    var hash = calculateMD5(hashData, 0, i);\n    var keyLengthInBytes = keyLength >> 3;\n\n    if (revision >= 3) {\n      for (j = 0; j < 50; ++j) {\n        hash = calculateMD5(hash, 0, hash.length);\n      }\n    }\n\n    var cipher, userPassword;\n\n    if (revision >= 3) {\n      userPassword = ownerPassword;\n      var derivedKey = new Uint8Array(keyLengthInBytes),\n          k;\n\n      for (j = 19; j >= 0; j--) {\n        for (k = 0; k < keyLengthInBytes; ++k) {\n          derivedKey[k] = hash[k] ^ j;\n        }\n\n        cipher = new ARCFourCipher(derivedKey);\n        userPassword = cipher.encryptBlock(userPassword);\n      }\n    } else {\n      cipher = new ARCFourCipher(hash.subarray(0, keyLengthInBytes));\n      userPassword = cipher.encryptBlock(ownerPassword);\n    }\n\n    return userPassword;\n  }\n\n  var identityName = _primitives.Name.get(\"Identity\");\n\n  function CipherTransformFactory(dict, fileId, password) {\n    var filter = dict.get(\"Filter\");\n\n    if (!(0, _primitives.isName)(filter, \"Standard\")) {\n      throw new _util.FormatError(\"unknown encryption method\");\n    }\n\n    this.dict = dict;\n    var algorithm = dict.get(\"V\");\n\n    if (!Number.isInteger(algorithm) || algorithm !== 1 && algorithm !== 2 && algorithm !== 4 && algorithm !== 5) {\n      throw new _util.FormatError(\"unsupported encryption algorithm\");\n    }\n\n    this.algorithm = algorithm;\n    var keyLength = dict.get(\"Length\");\n\n    if (!keyLength) {\n      if (algorithm <= 3) {\n        keyLength = 40;\n      } else {\n        var cfDict = dict.get(\"CF\");\n        var streamCryptoName = dict.get(\"StmF\");\n\n        if ((0, _primitives.isDict)(cfDict) && (0, _primitives.isName)(streamCryptoName)) {\n          cfDict.suppressEncryption = true;\n          var handlerDict = cfDict.get(streamCryptoName.name);\n          keyLength = handlerDict && handlerDict.get(\"Length\") || 128;\n\n          if (keyLength < 40) {\n            keyLength <<= 3;\n          }\n        }\n      }\n    }\n\n    if (!Number.isInteger(keyLength) || keyLength < 40 || keyLength % 8 !== 0) {\n      throw new _util.FormatError(\"invalid key length\");\n    }\n\n    var ownerPassword = (0, _util.stringToBytes)(dict.get(\"O\")).subarray(0, 32);\n    var userPassword = (0, _util.stringToBytes)(dict.get(\"U\")).subarray(0, 32);\n    var flags = dict.get(\"P\");\n    var revision = dict.get(\"R\");\n    var encryptMetadata = (algorithm === 4 || algorithm === 5) && dict.get(\"EncryptMetadata\") !== false;\n    this.encryptMetadata = encryptMetadata;\n    var fileIdBytes = (0, _util.stringToBytes)(fileId);\n    var passwordBytes;\n\n    if (password) {\n      if (revision === 6) {\n        try {\n          password = (0, _util.utf8StringToString)(password);\n        } catch (ex) {\n          (0, _util.warn)(\"CipherTransformFactory: \" + \"Unable to convert UTF8 encoded password.\");\n        }\n      }\n\n      passwordBytes = (0, _util.stringToBytes)(password);\n    }\n\n    var encryptionKey;\n\n    if (algorithm !== 5) {\n      encryptionKey = prepareKeyData(fileIdBytes, passwordBytes, ownerPassword, userPassword, flags, revision, keyLength, encryptMetadata);\n    } else {\n      var ownerValidationSalt = (0, _util.stringToBytes)(dict.get(\"O\")).subarray(32, 40);\n      var ownerKeySalt = (0, _util.stringToBytes)(dict.get(\"O\")).subarray(40, 48);\n      var uBytes = (0, _util.stringToBytes)(dict.get(\"U\")).subarray(0, 48);\n      var userValidationSalt = (0, _util.stringToBytes)(dict.get(\"U\")).subarray(32, 40);\n      var userKeySalt = (0, _util.stringToBytes)(dict.get(\"U\")).subarray(40, 48);\n      var ownerEncryption = (0, _util.stringToBytes)(dict.get(\"OE\"));\n      var userEncryption = (0, _util.stringToBytes)(dict.get(\"UE\"));\n      var perms = (0, _util.stringToBytes)(dict.get(\"Perms\"));\n      encryptionKey = createEncryptionKey20(revision, passwordBytes, ownerPassword, ownerValidationSalt, ownerKeySalt, uBytes, userPassword, userValidationSalt, userKeySalt, ownerEncryption, userEncryption, perms);\n    }\n\n    if (!encryptionKey && !password) {\n      throw new _util.PasswordException(\"No password given\", _util.PasswordResponses.NEED_PASSWORD);\n    } else if (!encryptionKey && password) {\n      var decodedPassword = decodeUserPassword(passwordBytes, ownerPassword, revision, keyLength);\n      encryptionKey = prepareKeyData(fileIdBytes, decodedPassword, ownerPassword, userPassword, flags, revision, keyLength, encryptMetadata);\n    }\n\n    if (!encryptionKey) {\n      throw new _util.PasswordException(\"Incorrect Password\", _util.PasswordResponses.INCORRECT_PASSWORD);\n    }\n\n    this.encryptionKey = encryptionKey;\n\n    if (algorithm >= 4) {\n      var cf = dict.get(\"CF\");\n\n      if ((0, _primitives.isDict)(cf)) {\n        cf.suppressEncryption = true;\n      }\n\n      this.cf = cf;\n      this.stmf = dict.get(\"StmF\") || identityName;\n      this.strf = dict.get(\"StrF\") || identityName;\n      this.eff = dict.get(\"EFF\") || this.stmf;\n    }\n  }\n\n  function buildObjectKey(num, gen, encryptionKey, isAes) {\n    var key = new Uint8Array(encryptionKey.length + 9),\n        i,\n        n;\n\n    for (i = 0, n = encryptionKey.length; i < n; ++i) {\n      key[i] = encryptionKey[i];\n    }\n\n    key[i++] = num & 0xff;\n    key[i++] = num >> 8 & 0xff;\n    key[i++] = num >> 16 & 0xff;\n    key[i++] = gen & 0xff;\n    key[i++] = gen >> 8 & 0xff;\n\n    if (isAes) {\n      key[i++] = 0x73;\n      key[i++] = 0x41;\n      key[i++] = 0x6c;\n      key[i++] = 0x54;\n    }\n\n    var hash = calculateMD5(key, 0, i);\n    return hash.subarray(0, Math.min(encryptionKey.length + 5, 16));\n  }\n\n  function buildCipherConstructor(cf, name, num, gen, key) {\n    if (!(0, _primitives.isName)(name)) {\n      throw new _util.FormatError(\"Invalid crypt filter name.\");\n    }\n\n    var cryptFilter = cf.get(name.name);\n    var cfm;\n\n    if (cryptFilter !== null && cryptFilter !== undefined) {\n      cfm = cryptFilter.get(\"CFM\");\n    }\n\n    if (!cfm || cfm.name === \"None\") {\n      return function cipherTransformFactoryBuildCipherConstructorNone() {\n        return new NullCipher();\n      };\n    }\n\n    if (cfm.name === \"V2\") {\n      return function cipherTransformFactoryBuildCipherConstructorV2() {\n        return new ARCFourCipher(buildObjectKey(num, gen, key, false));\n      };\n    }\n\n    if (cfm.name === \"AESV2\") {\n      return function cipherTransformFactoryBuildCipherConstructorAESV2() {\n        return new AES128Cipher(buildObjectKey(num, gen, key, true));\n      };\n    }\n\n    if (cfm.name === \"AESV3\") {\n      return function cipherTransformFactoryBuildCipherConstructorAESV3() {\n        return new AES256Cipher(key);\n      };\n    }\n\n    throw new _util.FormatError(\"Unknown crypto method\");\n  }\n\n  CipherTransformFactory.prototype = {\n    createCipherTransform: function CipherTransformFactory_createCipherTransform(num, gen) {\n      if (this.algorithm === 4 || this.algorithm === 5) {\n        return new CipherTransform(buildCipherConstructor(this.cf, this.stmf, num, gen, this.encryptionKey), buildCipherConstructor(this.cf, this.strf, num, gen, this.encryptionKey));\n      }\n\n      var key = buildObjectKey(num, gen, this.encryptionKey, false);\n\n      var cipherConstructor = function buildCipherCipherConstructor() {\n        return new ARCFourCipher(key);\n      };\n\n      return new CipherTransform(cipherConstructor, cipherConstructor);\n    }\n  };\n  return CipherTransformFactory;\n}();\n\nexports.CipherTransformFactory = CipherTransformFactory;\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ColorSpace = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(4);\n\nfunction resizeRgbImage(src, dest, w1, h1, w2, h2, alpha01) {\n  const COMPONENTS = 3;\n  alpha01 = alpha01 !== 1 ? 0 : alpha01;\n  const xRatio = w1 / w2;\n  const yRatio = h1 / h2;\n  let newIndex = 0,\n      oldIndex;\n  const xScaled = new Uint16Array(w2);\n  const w1Scanline = w1 * COMPONENTS;\n\n  for (let i = 0; i < w2; i++) {\n    xScaled[i] = Math.floor(i * xRatio) * COMPONENTS;\n  }\n\n  for (let i = 0; i < h2; i++) {\n    const py = Math.floor(i * yRatio) * w1Scanline;\n\n    for (let j = 0; j < w2; j++) {\n      oldIndex = py + xScaled[j];\n      dest[newIndex++] = src[oldIndex++];\n      dest[newIndex++] = src[oldIndex++];\n      dest[newIndex++] = src[oldIndex++];\n      newIndex += alpha01;\n    }\n  }\n}\n\nclass ColorSpace {\n  constructor(name, numComps) {\n    if (this.constructor === ColorSpace) {\n      (0, _util.unreachable)(\"Cannot initialize ColorSpace.\");\n    }\n\n    this.name = name;\n    this.numComps = numComps;\n  }\n\n  getRgb(src, srcOffset) {\n    const rgb = new Uint8ClampedArray(3);\n    this.getRgbItem(src, srcOffset, rgb, 0);\n    return rgb;\n  }\n\n  getRgbItem(src, srcOffset, dest, destOffset) {\n    (0, _util.unreachable)(\"Should not call ColorSpace.getRgbItem\");\n  }\n\n  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n    (0, _util.unreachable)(\"Should not call ColorSpace.getRgbBuffer\");\n  }\n\n  getOutputLength(inputLength, alpha01) {\n    (0, _util.unreachable)(\"Should not call ColorSpace.getOutputLength\");\n  }\n\n  isPassthrough(bits) {\n    return false;\n  }\n\n  isDefaultDecode(decodeMap, bpc) {\n    return ColorSpace.isDefaultDecode(decodeMap, this.numComps);\n  }\n\n  fillRgb(dest, originalWidth, originalHeight, width, height, actualHeight, bpc, comps, alpha01) {\n    const count = originalWidth * originalHeight;\n    let rgbBuf = null;\n    const numComponentColors = 1 << bpc;\n    const needsResizing = originalHeight !== height || originalWidth !== width;\n\n    if (this.isPassthrough(bpc)) {\n      rgbBuf = comps;\n    } else if (this.numComps === 1 && count > numComponentColors && this.name !== \"DeviceGray\" && this.name !== \"DeviceRGB\") {\n      const allColors = bpc <= 8 ? new Uint8Array(numComponentColors) : new Uint16Array(numComponentColors);\n\n      for (let i = 0; i < numComponentColors; i++) {\n        allColors[i] = i;\n      }\n\n      const colorMap = new Uint8ClampedArray(numComponentColors * 3);\n      this.getRgbBuffer(allColors, 0, numComponentColors, colorMap, 0, bpc, 0);\n\n      if (!needsResizing) {\n        let destPos = 0;\n\n        for (let i = 0; i < count; ++i) {\n          const key = comps[i] * 3;\n          dest[destPos++] = colorMap[key];\n          dest[destPos++] = colorMap[key + 1];\n          dest[destPos++] = colorMap[key + 2];\n          destPos += alpha01;\n        }\n      } else {\n        rgbBuf = new Uint8Array(count * 3);\n        let rgbPos = 0;\n\n        for (let i = 0; i < count; ++i) {\n          const key = comps[i] * 3;\n          rgbBuf[rgbPos++] = colorMap[key];\n          rgbBuf[rgbPos++] = colorMap[key + 1];\n          rgbBuf[rgbPos++] = colorMap[key + 2];\n        }\n      }\n    } else {\n      if (!needsResizing) {\n        this.getRgbBuffer(comps, 0, width * actualHeight, dest, 0, bpc, alpha01);\n      } else {\n        rgbBuf = new Uint8ClampedArray(count * 3);\n        this.getRgbBuffer(comps, 0, count, rgbBuf, 0, bpc, 0);\n      }\n    }\n\n    if (rgbBuf) {\n      if (needsResizing) {\n        resizeRgbImage(rgbBuf, dest, originalWidth, originalHeight, width, height, alpha01);\n      } else {\n        let destPos = 0,\n            rgbPos = 0;\n\n        for (let i = 0, ii = width * actualHeight; i < ii; i++) {\n          dest[destPos++] = rgbBuf[rgbPos++];\n          dest[destPos++] = rgbBuf[rgbPos++];\n          dest[destPos++] = rgbBuf[rgbPos++];\n          destPos += alpha01;\n        }\n      }\n    }\n  }\n\n  get usesZeroToOneRange() {\n    return (0, _util.shadow)(this, \"usesZeroToOneRange\", true);\n  }\n\n  static parse(cs, xref, res, pdfFunctionFactory) {\n    const IR = this.parseToIR(cs, xref, res, pdfFunctionFactory);\n    return this.fromIR(IR);\n  }\n\n  static fromIR(IR) {\n    const name = Array.isArray(IR) ? IR[0] : IR;\n    let whitePoint, blackPoint, gamma;\n\n    switch (name) {\n      case \"DeviceGrayCS\":\n        return this.singletons.gray;\n\n      case \"DeviceRgbCS\":\n        return this.singletons.rgb;\n\n      case \"DeviceCmykCS\":\n        return this.singletons.cmyk;\n\n      case \"CalGrayCS\":\n        whitePoint = IR[1];\n        blackPoint = IR[2];\n        gamma = IR[3];\n        return new CalGrayCS(whitePoint, blackPoint, gamma);\n\n      case \"CalRGBCS\":\n        whitePoint = IR[1];\n        blackPoint = IR[2];\n        gamma = IR[3];\n        const matrix = IR[4];\n        return new CalRGBCS(whitePoint, blackPoint, gamma, matrix);\n\n      case \"PatternCS\":\n        let basePatternCS = IR[1];\n\n        if (basePatternCS) {\n          basePatternCS = this.fromIR(basePatternCS);\n        }\n\n        return new PatternCS(basePatternCS);\n\n      case \"IndexedCS\":\n        const baseIndexedCS = IR[1];\n        const hiVal = IR[2];\n        const lookup = IR[3];\n        return new IndexedCS(this.fromIR(baseIndexedCS), hiVal, lookup);\n\n      case \"AlternateCS\":\n        const numComps = IR[1];\n        const alt = IR[2];\n        const tintFn = IR[3];\n        return new AlternateCS(numComps, this.fromIR(alt), tintFn);\n\n      case \"LabCS\":\n        whitePoint = IR[1];\n        blackPoint = IR[2];\n        const range = IR[3];\n        return new LabCS(whitePoint, blackPoint, range);\n\n      default:\n        throw new _util.FormatError(`Unknown colorspace name: ${name}`);\n    }\n  }\n\n  static parseToIR(cs, xref, res = null, pdfFunctionFactory) {\n    cs = xref.fetchIfRef(cs);\n\n    if ((0, _primitives.isName)(cs)) {\n      switch (cs.name) {\n        case \"DeviceGray\":\n        case \"G\":\n          return \"DeviceGrayCS\";\n\n        case \"DeviceRGB\":\n        case \"RGB\":\n          return \"DeviceRgbCS\";\n\n        case \"DeviceCMYK\":\n        case \"CMYK\":\n          return \"DeviceCmykCS\";\n\n        case \"Pattern\":\n          return [\"PatternCS\", null];\n\n        default:\n          if ((0, _primitives.isDict)(res)) {\n            const colorSpaces = res.get(\"ColorSpace\");\n\n            if ((0, _primitives.isDict)(colorSpaces)) {\n              const resCS = colorSpaces.get(cs.name);\n\n              if (resCS) {\n                if ((0, _primitives.isName)(resCS)) {\n                  return this.parseToIR(resCS, xref, res, pdfFunctionFactory);\n                }\n\n                cs = resCS;\n                break;\n              }\n            }\n          }\n\n          throw new _util.FormatError(`unrecognized colorspace ${cs.name}`);\n      }\n    }\n\n    if (Array.isArray(cs)) {\n      const mode = xref.fetchIfRef(cs[0]).name;\n      let numComps, params, alt, whitePoint, blackPoint, gamma;\n\n      switch (mode) {\n        case \"DeviceGray\":\n        case \"G\":\n          return \"DeviceGrayCS\";\n\n        case \"DeviceRGB\":\n        case \"RGB\":\n          return \"DeviceRgbCS\";\n\n        case \"DeviceCMYK\":\n        case \"CMYK\":\n          return \"DeviceCmykCS\";\n\n        case \"CalGray\":\n          params = xref.fetchIfRef(cs[1]);\n          whitePoint = params.getArray(\"WhitePoint\");\n          blackPoint = params.getArray(\"BlackPoint\");\n          gamma = params.get(\"Gamma\");\n          return [\"CalGrayCS\", whitePoint, blackPoint, gamma];\n\n        case \"CalRGB\":\n          params = xref.fetchIfRef(cs[1]);\n          whitePoint = params.getArray(\"WhitePoint\");\n          blackPoint = params.getArray(\"BlackPoint\");\n          gamma = params.getArray(\"Gamma\");\n          const matrix = params.getArray(\"Matrix\");\n          return [\"CalRGBCS\", whitePoint, blackPoint, gamma, matrix];\n\n        case \"ICCBased\":\n          const stream = xref.fetchIfRef(cs[1]);\n          const dict = stream.dict;\n          numComps = dict.get(\"N\");\n          alt = dict.get(\"Alternate\");\n\n          if (alt) {\n            const altIR = this.parseToIR(alt, xref, res, pdfFunctionFactory);\n            const altCS = this.fromIR(altIR, pdfFunctionFactory);\n\n            if (altCS.numComps === numComps) {\n              return altIR;\n            }\n\n            (0, _util.warn)(\"ICCBased color space: Ignoring incorrect /Alternate entry.\");\n          }\n\n          if (numComps === 1) {\n            return \"DeviceGrayCS\";\n          } else if (numComps === 3) {\n            return \"DeviceRgbCS\";\n          } else if (numComps === 4) {\n            return \"DeviceCmykCS\";\n          }\n\n          break;\n\n        case \"Pattern\":\n          let basePatternCS = cs[1] || null;\n\n          if (basePatternCS) {\n            basePatternCS = this.parseToIR(basePatternCS, xref, res, pdfFunctionFactory);\n          }\n\n          return [\"PatternCS\", basePatternCS];\n\n        case \"Indexed\":\n        case \"I\":\n          const baseIndexedCS = this.parseToIR(cs[1], xref, res, pdfFunctionFactory);\n          const hiVal = xref.fetchIfRef(cs[2]) + 1;\n          let lookup = xref.fetchIfRef(cs[3]);\n\n          if ((0, _primitives.isStream)(lookup)) {\n            lookup = lookup.getBytes();\n          }\n\n          return [\"IndexedCS\", baseIndexedCS, hiVal, lookup];\n\n        case \"Separation\":\n        case \"DeviceN\":\n          const name = xref.fetchIfRef(cs[1]);\n          numComps = Array.isArray(name) ? name.length : 1;\n          alt = this.parseToIR(cs[2], xref, res, pdfFunctionFactory);\n          const tintFn = pdfFunctionFactory.create(xref.fetchIfRef(cs[3]));\n          return [\"AlternateCS\", numComps, alt, tintFn];\n\n        case \"Lab\":\n          params = xref.fetchIfRef(cs[1]);\n          whitePoint = params.getArray(\"WhitePoint\");\n          blackPoint = params.getArray(\"BlackPoint\");\n          const range = params.getArray(\"Range\");\n          return [\"LabCS\", whitePoint, blackPoint, range];\n\n        default:\n          throw new _util.FormatError(`unimplemented color space object \"${mode}\"`);\n      }\n    }\n\n    throw new _util.FormatError(`unrecognized color space object: \"${cs}\"`);\n  }\n\n  static isDefaultDecode(decode, numComps) {\n    if (!Array.isArray(decode)) {\n      return true;\n    }\n\n    if (numComps * 2 !== decode.length) {\n      (0, _util.warn)(\"The decode map is not the correct length\");\n      return true;\n    }\n\n    for (let i = 0, ii = decode.length; i < ii; i += 2) {\n      if (decode[i] !== 0 || decode[i + 1] !== 1) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  static get singletons() {\n    return (0, _util.shadow)(this, \"singletons\", {\n      get gray() {\n        return (0, _util.shadow)(this, \"gray\", new DeviceGrayCS());\n      },\n\n      get rgb() {\n        return (0, _util.shadow)(this, \"rgb\", new DeviceRgbCS());\n      },\n\n      get cmyk() {\n        return (0, _util.shadow)(this, \"cmyk\", new DeviceCmykCS());\n      }\n\n    });\n  }\n\n}\n\nexports.ColorSpace = ColorSpace;\n\nclass AlternateCS extends ColorSpace {\n  constructor(numComps, base, tintFn) {\n    super(\"Alternate\", numComps);\n    this.base = base;\n    this.tintFn = tintFn;\n    this.tmpBuf = new Float32Array(base.numComps);\n  }\n\n  getRgbItem(src, srcOffset, dest, destOffset) {\n    const tmpBuf = this.tmpBuf;\n    this.tintFn(src, srcOffset, tmpBuf, 0);\n    this.base.getRgbItem(tmpBuf, 0, dest, destOffset);\n  }\n\n  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n    const tintFn = this.tintFn;\n    const base = this.base;\n    const scale = 1 / ((1 << bits) - 1);\n    const baseNumComps = base.numComps;\n    const usesZeroToOneRange = base.usesZeroToOneRange;\n    const isPassthrough = (base.isPassthrough(8) || !usesZeroToOneRange) && alpha01 === 0;\n    let pos = isPassthrough ? destOffset : 0;\n    const baseBuf = isPassthrough ? dest : new Uint8ClampedArray(baseNumComps * count);\n    const numComps = this.numComps;\n    const scaled = new Float32Array(numComps);\n    const tinted = new Float32Array(baseNumComps);\n    let i, j;\n\n    for (i = 0; i < count; i++) {\n      for (j = 0; j < numComps; j++) {\n        scaled[j] = src[srcOffset++] * scale;\n      }\n\n      tintFn(scaled, 0, tinted, 0);\n\n      if (usesZeroToOneRange) {\n        for (j = 0; j < baseNumComps; j++) {\n          baseBuf[pos++] = tinted[j] * 255;\n        }\n      } else {\n        base.getRgbItem(tinted, 0, baseBuf, pos);\n        pos += baseNumComps;\n      }\n    }\n\n    if (!isPassthrough) {\n      base.getRgbBuffer(baseBuf, 0, count, dest, destOffset, 8, alpha01);\n    }\n  }\n\n  getOutputLength(inputLength, alpha01) {\n    return this.base.getOutputLength(inputLength * this.base.numComps / this.numComps, alpha01);\n  }\n\n}\n\nclass PatternCS extends ColorSpace {\n  constructor(baseCS) {\n    super(\"Pattern\", null);\n    this.base = baseCS;\n  }\n\n  isDefaultDecode(decodeMap, bpc) {\n    (0, _util.unreachable)(\"Should not call PatternCS.isDefaultDecode\");\n  }\n\n}\n\nclass IndexedCS extends ColorSpace {\n  constructor(base, highVal, lookup) {\n    super(\"Indexed\", 1);\n    this.base = base;\n    this.highVal = highVal;\n    const baseNumComps = base.numComps;\n    const length = baseNumComps * highVal;\n\n    if ((0, _primitives.isStream)(lookup)) {\n      this.lookup = new Uint8Array(length);\n      const bytes = lookup.getBytes(length);\n      this.lookup.set(bytes);\n    } else if ((0, _util.isString)(lookup)) {\n      this.lookup = new Uint8Array(length);\n\n      for (let i = 0; i < length; ++i) {\n        this.lookup[i] = lookup.charCodeAt(i);\n      }\n    } else if (lookup instanceof Uint8Array) {\n      this.lookup = lookup;\n    } else {\n      throw new _util.FormatError(`Unrecognized lookup table: ${lookup}`);\n    }\n  }\n\n  getRgbItem(src, srcOffset, dest, destOffset) {\n    const numComps = this.base.numComps;\n    const start = src[srcOffset] * numComps;\n    this.base.getRgbBuffer(this.lookup, start, 1, dest, destOffset, 8, 0);\n  }\n\n  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n    const base = this.base;\n    const numComps = base.numComps;\n    const outputDelta = base.getOutputLength(numComps, alpha01);\n    const lookup = this.lookup;\n\n    for (let i = 0; i < count; ++i) {\n      const lookupPos = src[srcOffset++] * numComps;\n      base.getRgbBuffer(lookup, lookupPos, 1, dest, destOffset, 8, alpha01);\n      destOffset += outputDelta;\n    }\n  }\n\n  getOutputLength(inputLength, alpha01) {\n    return this.base.getOutputLength(inputLength * this.base.numComps, alpha01);\n  }\n\n  isDefaultDecode(decodeMap, bpc) {\n    if (!Array.isArray(decodeMap)) {\n      return true;\n    }\n\n    if (decodeMap.length !== 2) {\n      (0, _util.warn)(\"Decode map length is not correct\");\n      return true;\n    }\n\n    if (!Number.isInteger(bpc) || bpc < 1) {\n      (0, _util.warn)(\"Bits per component is not correct\");\n      return true;\n    }\n\n    return decodeMap[0] === 0 && decodeMap[1] === (1 << bpc) - 1;\n  }\n\n}\n\nclass DeviceGrayCS extends ColorSpace {\n  constructor() {\n    super(\"DeviceGray\", 1);\n  }\n\n  getRgbItem(src, srcOffset, dest, destOffset) {\n    const c = src[srcOffset] * 255;\n    dest[destOffset] = dest[destOffset + 1] = dest[destOffset + 2] = c;\n  }\n\n  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n    const scale = 255 / ((1 << bits) - 1);\n    let j = srcOffset,\n        q = destOffset;\n\n    for (let i = 0; i < count; ++i) {\n      const c = scale * src[j++];\n      dest[q++] = c;\n      dest[q++] = c;\n      dest[q++] = c;\n      q += alpha01;\n    }\n  }\n\n  getOutputLength(inputLength, alpha01) {\n    return inputLength * (3 + alpha01);\n  }\n\n}\n\nclass DeviceRgbCS extends ColorSpace {\n  constructor() {\n    super(\"DeviceRGB\", 3);\n  }\n\n  getRgbItem(src, srcOffset, dest, destOffset) {\n    dest[destOffset] = src[srcOffset] * 255;\n    dest[destOffset + 1] = src[srcOffset + 1] * 255;\n    dest[destOffset + 2] = src[srcOffset + 2] * 255;\n  }\n\n  getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n    if (bits === 8 && alpha01 === 0) {\n      dest.set(src.subarray(srcOffset, srcOffset + count * 3), destOffset);\n      return;\n    }\n\n    const scale = 255 / ((1 << bits) - 1);\n    let j = srcOffset,\n        q = destOffset;\n\n    for (let i = 0; i < count; ++i) {\n      dest[q++] = scale * src[j++];\n      dest[q++] = scale * src[j++];\n      dest[q++] = scale * src[j++];\n      q += alpha01;\n    }\n  }\n\n  getOutputLength(inputLength, alpha01) {\n    return inputLength * (3 + alpha01) / 3 | 0;\n  }\n\n  isPassthrough(bits) {\n    return bits === 8;\n  }\n\n}\n\nconst DeviceCmykCS = function DeviceCmykCSClosure() {\n  function convertToRgb(src, srcOffset, srcScale, dest, destOffset) {\n    const c = src[srcOffset] * srcScale;\n    const m = src[srcOffset + 1] * srcScale;\n    const y = src[srcOffset + 2] * srcScale;\n    const k = src[srcOffset + 3] * srcScale;\n    dest[destOffset] = 255 + c * (-4.387332384609988 * c + 54.48615194189176 * m + 18.82290502165302 * y + 212.25662451639585 * k + -285.2331026137004) + m * (1.7149763477362134 * m - 5.6096736904047315 * y + -17.873870861415444 * k - 5.497006427196366) + y * (-2.5217340131683033 * y - 21.248923337353073 * k + 17.5119270841813) + k * (-21.86122147463605 * k - 189.48180835922747);\n    dest[destOffset + 1] = 255 + c * (8.841041422036149 * c + 60.118027045597366 * m + 6.871425592049007 * y + 31.159100130055922 * k + -79.2970844816548) + m * (-15.310361306967817 * m + 17.575251261109482 * y + 131.35250912493976 * k - 190.9453302588951) + y * (4.444339102852739 * y + 9.8632861493405 * k - 24.86741582555878) + k * (-20.737325471181034 * k - 187.80453709719578);\n    dest[destOffset + 2] = 255 + c * (0.8842522430003296 * c + 8.078677503112928 * m + 30.89978309703729 * y - 0.23883238689178934 * k + -14.183576799673286) + m * (10.49593273432072 * m + 63.02378494754052 * y + 50.606957656360734 * k - 112.23884253719248) + y * (0.03296041114873217 * y + 115.60384449646641 * k + -193.58209356861505) + k * (-22.33816807309886 * k - 180.12613974708367);\n  }\n\n  class DeviceCmykCS extends ColorSpace {\n    constructor() {\n      super(\"DeviceCMYK\", 4);\n    }\n\n    getRgbItem(src, srcOffset, dest, destOffset) {\n      convertToRgb(src, srcOffset, 1, dest, destOffset);\n    }\n\n    getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n      const scale = 1 / ((1 << bits) - 1);\n\n      for (let i = 0; i < count; i++) {\n        convertToRgb(src, srcOffset, scale, dest, destOffset);\n        srcOffset += 4;\n        destOffset += 3 + alpha01;\n      }\n    }\n\n    getOutputLength(inputLength, alpha01) {\n      return inputLength / 4 * (3 + alpha01) | 0;\n    }\n\n  }\n\n  return DeviceCmykCS;\n}();\n\nconst CalGrayCS = function CalGrayCSClosure() {\n  function convertToRgb(cs, src, srcOffset, dest, destOffset, scale) {\n    const A = src[srcOffset] * scale;\n    const AG = A ** cs.G;\n    const L = cs.YW * AG;\n    const val = Math.max(295.8 * L ** 0.333333333333333333 - 40.8, 0);\n    dest[destOffset] = val;\n    dest[destOffset + 1] = val;\n    dest[destOffset + 2] = val;\n  }\n\n  class CalGrayCS extends ColorSpace {\n    constructor(whitePoint, blackPoint, gamma) {\n      super(\"CalGray\", 1);\n\n      if (!whitePoint) {\n        throw new _util.FormatError(\"WhitePoint missing - required for color space CalGray\");\n      }\n\n      blackPoint = blackPoint || [0, 0, 0];\n      gamma = gamma || 1;\n      this.XW = whitePoint[0];\n      this.YW = whitePoint[1];\n      this.ZW = whitePoint[2];\n      this.XB = blackPoint[0];\n      this.YB = blackPoint[1];\n      this.ZB = blackPoint[2];\n      this.G = gamma;\n\n      if (this.XW < 0 || this.ZW < 0 || this.YW !== 1) {\n        throw new _util.FormatError(`Invalid WhitePoint components for ${this.name}` + \", no fallback available\");\n      }\n\n      if (this.XB < 0 || this.YB < 0 || this.ZB < 0) {\n        (0, _util.info)(`Invalid BlackPoint for ${this.name}, falling back to default.`);\n        this.XB = this.YB = this.ZB = 0;\n      }\n\n      if (this.XB !== 0 || this.YB !== 0 || this.ZB !== 0) {\n        (0, _util.warn)(`${this.name}, BlackPoint: XB: ${this.XB}, YB: ${this.YB}, ` + `ZB: ${this.ZB}, only default values are supported.`);\n      }\n\n      if (this.G < 1) {\n        (0, _util.info)(`Invalid Gamma: ${this.G} for ${this.name}, ` + \"falling back to default.\");\n        this.G = 1;\n      }\n    }\n\n    getRgbItem(src, srcOffset, dest, destOffset) {\n      convertToRgb(this, src, srcOffset, dest, destOffset, 1);\n    }\n\n    getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n      const scale = 1 / ((1 << bits) - 1);\n\n      for (let i = 0; i < count; ++i) {\n        convertToRgb(this, src, srcOffset, dest, destOffset, scale);\n        srcOffset += 1;\n        destOffset += 3 + alpha01;\n      }\n    }\n\n    getOutputLength(inputLength, alpha01) {\n      return inputLength * (3 + alpha01);\n    }\n\n  }\n\n  return CalGrayCS;\n}();\n\nconst CalRGBCS = function CalRGBCSClosure() {\n  const BRADFORD_SCALE_MATRIX = new Float32Array([0.8951, 0.2664, -0.1614, -0.7502, 1.7135, 0.0367, 0.0389, -0.0685, 1.0296]);\n  const BRADFORD_SCALE_INVERSE_MATRIX = new Float32Array([0.9869929, -0.1470543, 0.1599627, 0.4323053, 0.5183603, 0.0492912, -0.0085287, 0.0400428, 0.9684867]);\n  const SRGB_D65_XYZ_TO_RGB_MATRIX = new Float32Array([3.2404542, -1.5371385, -0.4985314, -0.9692660, 1.8760108, 0.0415560, 0.0556434, -0.2040259, 1.0572252]);\n  const FLAT_WHITEPOINT_MATRIX = new Float32Array([1, 1, 1]);\n  const tempNormalizeMatrix = new Float32Array(3);\n  const tempConvertMatrix1 = new Float32Array(3);\n  const tempConvertMatrix2 = new Float32Array(3);\n  const DECODE_L_CONSTANT = ((8 + 16) / 116) ** 3 / 8.0;\n\n  function matrixProduct(a, b, result) {\n    result[0] = a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n    result[1] = a[3] * b[0] + a[4] * b[1] + a[5] * b[2];\n    result[2] = a[6] * b[0] + a[7] * b[1] + a[8] * b[2];\n  }\n\n  function convertToFlat(sourceWhitePoint, LMS, result) {\n    result[0] = LMS[0] * 1 / sourceWhitePoint[0];\n    result[1] = LMS[1] * 1 / sourceWhitePoint[1];\n    result[2] = LMS[2] * 1 / sourceWhitePoint[2];\n  }\n\n  function convertToD65(sourceWhitePoint, LMS, result) {\n    const D65X = 0.95047;\n    const D65Y = 1;\n    const D65Z = 1.08883;\n    result[0] = LMS[0] * D65X / sourceWhitePoint[0];\n    result[1] = LMS[1] * D65Y / sourceWhitePoint[1];\n    result[2] = LMS[2] * D65Z / sourceWhitePoint[2];\n  }\n\n  function sRGBTransferFunction(color) {\n    if (color <= 0.0031308) {\n      return adjustToRange(0, 1, 12.92 * color);\n    }\n\n    return adjustToRange(0, 1, (1 + 0.055) * color ** (1 / 2.4) - 0.055);\n  }\n\n  function adjustToRange(min, max, value) {\n    return Math.max(min, Math.min(max, value));\n  }\n\n  function decodeL(L) {\n    if (L < 0) {\n      return -decodeL(-L);\n    }\n\n    if (L > 8.0) {\n      return ((L + 16) / 116) ** 3;\n    }\n\n    return L * DECODE_L_CONSTANT;\n  }\n\n  function compensateBlackPoint(sourceBlackPoint, XYZ_Flat, result) {\n    if (sourceBlackPoint[0] === 0 && sourceBlackPoint[1] === 0 && sourceBlackPoint[2] === 0) {\n      result[0] = XYZ_Flat[0];\n      result[1] = XYZ_Flat[1];\n      result[2] = XYZ_Flat[2];\n      return;\n    }\n\n    const zeroDecodeL = decodeL(0);\n    const X_DST = zeroDecodeL;\n    const X_SRC = decodeL(sourceBlackPoint[0]);\n    const Y_DST = zeroDecodeL;\n    const Y_SRC = decodeL(sourceBlackPoint[1]);\n    const Z_DST = zeroDecodeL;\n    const Z_SRC = decodeL(sourceBlackPoint[2]);\n    const X_Scale = (1 - X_DST) / (1 - X_SRC);\n    const X_Offset = 1 - X_Scale;\n    const Y_Scale = (1 - Y_DST) / (1 - Y_SRC);\n    const Y_Offset = 1 - Y_Scale;\n    const Z_Scale = (1 - Z_DST) / (1 - Z_SRC);\n    const Z_Offset = 1 - Z_Scale;\n    result[0] = XYZ_Flat[0] * X_Scale + X_Offset;\n    result[1] = XYZ_Flat[1] * Y_Scale + Y_Offset;\n    result[2] = XYZ_Flat[2] * Z_Scale + Z_Offset;\n  }\n\n  function normalizeWhitePointToFlat(sourceWhitePoint, XYZ_In, result) {\n    if (sourceWhitePoint[0] === 1 && sourceWhitePoint[2] === 1) {\n      result[0] = XYZ_In[0];\n      result[1] = XYZ_In[1];\n      result[2] = XYZ_In[2];\n      return;\n    }\n\n    const LMS = result;\n    matrixProduct(BRADFORD_SCALE_MATRIX, XYZ_In, LMS);\n    const LMS_Flat = tempNormalizeMatrix;\n    convertToFlat(sourceWhitePoint, LMS, LMS_Flat);\n    matrixProduct(BRADFORD_SCALE_INVERSE_MATRIX, LMS_Flat, result);\n  }\n\n  function normalizeWhitePointToD65(sourceWhitePoint, XYZ_In, result) {\n    const LMS = result;\n    matrixProduct(BRADFORD_SCALE_MATRIX, XYZ_In, LMS);\n    const LMS_D65 = tempNormalizeMatrix;\n    convertToD65(sourceWhitePoint, LMS, LMS_D65);\n    matrixProduct(BRADFORD_SCALE_INVERSE_MATRIX, LMS_D65, result);\n  }\n\n  function convertToRgb(cs, src, srcOffset, dest, destOffset, scale) {\n    const A = adjustToRange(0, 1, src[srcOffset] * scale);\n    const B = adjustToRange(0, 1, src[srcOffset + 1] * scale);\n    const C = adjustToRange(0, 1, src[srcOffset + 2] * scale);\n    const AGR = A ** cs.GR;\n    const BGG = B ** cs.GG;\n    const CGB = C ** cs.GB;\n    const X = cs.MXA * AGR + cs.MXB * BGG + cs.MXC * CGB;\n    const Y = cs.MYA * AGR + cs.MYB * BGG + cs.MYC * CGB;\n    const Z = cs.MZA * AGR + cs.MZB * BGG + cs.MZC * CGB;\n    const XYZ = tempConvertMatrix1;\n    XYZ[0] = X;\n    XYZ[1] = Y;\n    XYZ[2] = Z;\n    const XYZ_Flat = tempConvertMatrix2;\n    normalizeWhitePointToFlat(cs.whitePoint, XYZ, XYZ_Flat);\n    const XYZ_Black = tempConvertMatrix1;\n    compensateBlackPoint(cs.blackPoint, XYZ_Flat, XYZ_Black);\n    const XYZ_D65 = tempConvertMatrix2;\n    normalizeWhitePointToD65(FLAT_WHITEPOINT_MATRIX, XYZ_Black, XYZ_D65);\n    const SRGB = tempConvertMatrix1;\n    matrixProduct(SRGB_D65_XYZ_TO_RGB_MATRIX, XYZ_D65, SRGB);\n    dest[destOffset] = sRGBTransferFunction(SRGB[0]) * 255;\n    dest[destOffset + 1] = sRGBTransferFunction(SRGB[1]) * 255;\n    dest[destOffset + 2] = sRGBTransferFunction(SRGB[2]) * 255;\n  }\n\n  class CalRGBCS extends ColorSpace {\n    constructor(whitePoint, blackPoint, gamma, matrix) {\n      super(\"CalRGB\", 3);\n\n      if (!whitePoint) {\n        throw new _util.FormatError(\"WhitePoint missing - required for color space CalRGB\");\n      }\n\n      blackPoint = blackPoint || new Float32Array(3);\n      gamma = gamma || new Float32Array([1, 1, 1]);\n      matrix = matrix || new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);\n      const XW = whitePoint[0];\n      const YW = whitePoint[1];\n      const ZW = whitePoint[2];\n      this.whitePoint = whitePoint;\n      const XB = blackPoint[0];\n      const YB = blackPoint[1];\n      const ZB = blackPoint[2];\n      this.blackPoint = blackPoint;\n      this.GR = gamma[0];\n      this.GG = gamma[1];\n      this.GB = gamma[2];\n      this.MXA = matrix[0];\n      this.MYA = matrix[1];\n      this.MZA = matrix[2];\n      this.MXB = matrix[3];\n      this.MYB = matrix[4];\n      this.MZB = matrix[5];\n      this.MXC = matrix[6];\n      this.MYC = matrix[7];\n      this.MZC = matrix[8];\n\n      if (XW < 0 || ZW < 0 || YW !== 1) {\n        throw new _util.FormatError(`Invalid WhitePoint components for ${this.name}` + \", no fallback available\");\n      }\n\n      if (XB < 0 || YB < 0 || ZB < 0) {\n        (0, _util.info)(`Invalid BlackPoint for ${this.name} [${XB}, ${YB}, ${ZB}], ` + \"falling back to default.\");\n        this.blackPoint = new Float32Array(3);\n      }\n\n      if (this.GR < 0 || this.GG < 0 || this.GB < 0) {\n        (0, _util.info)(`Invalid Gamma [${this.GR}, ${this.GG}, ${this.GB}] for ` + `${this.name}, falling back to default.`);\n        this.GR = this.GG = this.GB = 1;\n      }\n    }\n\n    getRgbItem(src, srcOffset, dest, destOffset) {\n      convertToRgb(this, src, srcOffset, dest, destOffset, 1);\n    }\n\n    getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n      const scale = 1 / ((1 << bits) - 1);\n\n      for (let i = 0; i < count; ++i) {\n        convertToRgb(this, src, srcOffset, dest, destOffset, scale);\n        srcOffset += 3;\n        destOffset += 3 + alpha01;\n      }\n    }\n\n    getOutputLength(inputLength, alpha01) {\n      return inputLength * (3 + alpha01) / 3 | 0;\n    }\n\n  }\n\n  return CalRGBCS;\n}();\n\nconst LabCS = function LabCSClosure() {\n  function fn_g(x) {\n    let result;\n\n    if (x >= 6 / 29) {\n      result = x * x * x;\n    } else {\n      result = 108 / 841 * (x - 4 / 29);\n    }\n\n    return result;\n  }\n\n  function decode(value, high1, low2, high2) {\n    return low2 + value * (high2 - low2) / high1;\n  }\n\n  function convertToRgb(cs, src, srcOffset, maxVal, dest, destOffset) {\n    let Ls = src[srcOffset];\n    let as = src[srcOffset + 1];\n    let bs = src[srcOffset + 2];\n\n    if (maxVal !== false) {\n      Ls = decode(Ls, maxVal, 0, 100);\n      as = decode(as, maxVal, cs.amin, cs.amax);\n      bs = decode(bs, maxVal, cs.bmin, cs.bmax);\n    }\n\n    if (as > cs.amax) {\n      as = cs.amax;\n    } else if (as < cs.amin) {\n      as = cs.amin;\n    }\n\n    if (bs > cs.bmax) {\n      bs = cs.bmax;\n    } else if (bs < cs.bmin) {\n      bs = cs.bmin;\n    }\n\n    const M = (Ls + 16) / 116;\n    const L = M + as / 500;\n    const N = M - bs / 200;\n    const X = cs.XW * fn_g(L);\n    const Y = cs.YW * fn_g(M);\n    const Z = cs.ZW * fn_g(N);\n    let r, g, b;\n\n    if (cs.ZW < 1) {\n      r = X * 3.1339 + Y * -1.617 + Z * -0.4906;\n      g = X * -0.9785 + Y * 1.916 + Z * 0.0333;\n      b = X * 0.072 + Y * -0.229 + Z * 1.4057;\n    } else {\n      r = X * 3.2406 + Y * -1.5372 + Z * -0.4986;\n      g = X * -0.9689 + Y * 1.8758 + Z * 0.0415;\n      b = X * 0.0557 + Y * -0.204 + Z * 1.057;\n    }\n\n    dest[destOffset] = Math.sqrt(r) * 255;\n    dest[destOffset + 1] = Math.sqrt(g) * 255;\n    dest[destOffset + 2] = Math.sqrt(b) * 255;\n  }\n\n  class LabCS extends ColorSpace {\n    constructor(whitePoint, blackPoint, range) {\n      super(\"Lab\", 3);\n\n      if (!whitePoint) {\n        throw new _util.FormatError(\"WhitePoint missing - required for color space Lab\");\n      }\n\n      blackPoint = blackPoint || [0, 0, 0];\n      range = range || [-100, 100, -100, 100];\n      this.XW = whitePoint[0];\n      this.YW = whitePoint[1];\n      this.ZW = whitePoint[2];\n      this.amin = range[0];\n      this.amax = range[1];\n      this.bmin = range[2];\n      this.bmax = range[3];\n      this.XB = blackPoint[0];\n      this.YB = blackPoint[1];\n      this.ZB = blackPoint[2];\n\n      if (this.XW < 0 || this.ZW < 0 || this.YW !== 1) {\n        throw new _util.FormatError(\"Invalid WhitePoint components, no fallback available\");\n      }\n\n      if (this.XB < 0 || this.YB < 0 || this.ZB < 0) {\n        (0, _util.info)(\"Invalid BlackPoint, falling back to default\");\n        this.XB = this.YB = this.ZB = 0;\n      }\n\n      if (this.amin > this.amax || this.bmin > this.bmax) {\n        (0, _util.info)(\"Invalid Range, falling back to defaults\");\n        this.amin = -100;\n        this.amax = 100;\n        this.bmin = -100;\n        this.bmax = 100;\n      }\n    }\n\n    getRgbItem(src, srcOffset, dest, destOffset) {\n      convertToRgb(this, src, srcOffset, false, dest, destOffset);\n    }\n\n    getRgbBuffer(src, srcOffset, count, dest, destOffset, bits, alpha01) {\n      const maxVal = (1 << bits) - 1;\n\n      for (let i = 0; i < count; i++) {\n        convertToRgb(this, src, srcOffset, maxVal, dest, destOffset);\n        srcOffset += 3;\n        destOffset += 3 + alpha01;\n      }\n    }\n\n    getOutputLength(inputLength, alpha01) {\n      return inputLength * (3 + alpha01) / 3 | 0;\n    }\n\n    isDefaultDecode(decodeMap, bpc) {\n      return true;\n    }\n\n    get usesZeroToOneRange() {\n      return (0, _util.shadow)(this, \"usesZeroToOneRange\", false);\n    }\n\n  }\n\n  return LabCS;\n}();\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getQuadPoints = getQuadPoints;\nexports.MarkupAnnotation = exports.AnnotationFactory = exports.AnnotationBorderStyle = exports.Annotation = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _obj = __w_pdfjs_require__(9);\n\nvar _primitives = __w_pdfjs_require__(4);\n\nvar _colorspace = __w_pdfjs_require__(22);\n\nvar _core_utils = __w_pdfjs_require__(7);\n\nvar _operator_list = __w_pdfjs_require__(24);\n\nvar _stream = __w_pdfjs_require__(11);\n\nclass AnnotationFactory {\n  static create(xref, ref, pdfManager, idFactory) {\n    return pdfManager.ensure(this, \"_create\", [xref, ref, pdfManager, idFactory]);\n  }\n\n  static _create(xref, ref, pdfManager, idFactory) {\n    const dict = xref.fetchIfRef(ref);\n\n    if (!(0, _primitives.isDict)(dict)) {\n      return undefined;\n    }\n\n    const id = (0, _primitives.isRef)(ref) ? ref.toString() : `annot_${idFactory.createObjId()}`;\n    let subtype = dict.get(\"Subtype\");\n    subtype = (0, _primitives.isName)(subtype) ? subtype.name : null;\n    const parameters = {\n      xref,\n      dict,\n      subtype,\n      id,\n      pdfManager\n    };\n\n    switch (subtype) {\n      case \"Link\":\n        return new LinkAnnotation(parameters);\n\n      case \"Text\":\n        return new TextAnnotation(parameters);\n\n      case \"Widget\":\n        let fieldType = (0, _core_utils.getInheritableProperty)({\n          dict,\n          key: \"FT\"\n        });\n        fieldType = (0, _primitives.isName)(fieldType) ? fieldType.name : null;\n\n        switch (fieldType) {\n          case \"Tx\":\n            return new TextWidgetAnnotation(parameters);\n\n          case \"Btn\":\n            return new ButtonWidgetAnnotation(parameters);\n\n          case \"Ch\":\n            return new ChoiceWidgetAnnotation(parameters);\n        }\n\n        (0, _util.warn)('Unimplemented widget field type \"' + fieldType + '\", ' + \"falling back to base field type.\");\n        return new WidgetAnnotation(parameters);\n\n      case \"Popup\":\n        return new PopupAnnotation(parameters);\n\n      case \"FreeText\":\n        return new FreeTextAnnotation(parameters);\n\n      case \"Line\":\n        return new LineAnnotation(parameters);\n\n      case \"Square\":\n        return new SquareAnnotation(parameters);\n\n      case \"Circle\":\n        return new CircleAnnotation(parameters);\n\n      case \"PolyLine\":\n        return new PolylineAnnotation(parameters);\n\n      case \"Polygon\":\n        return new PolygonAnnotation(parameters);\n\n      case \"Caret\":\n        return new CaretAnnotation(parameters);\n\n      case \"Ink\":\n        return new InkAnnotation(parameters);\n\n      case \"Highlight\":\n        return new HighlightAnnotation(parameters);\n\n      case \"Underline\":\n        return new UnderlineAnnotation(parameters);\n\n      case \"Squiggly\":\n        return new SquigglyAnnotation(parameters);\n\n      case \"StrikeOut\":\n        return new StrikeOutAnnotation(parameters);\n\n      case \"Stamp\":\n        return new StampAnnotation(parameters);\n\n      case \"FileAttachment\":\n        return new FileAttachmentAnnotation(parameters);\n\n      default:\n        if (!subtype) {\n          (0, _util.warn)(\"Annotation is missing the required /Subtype.\");\n        } else {\n          (0, _util.warn)('Unimplemented annotation type \"' + subtype + '\", ' + \"falling back to base annotation.\");\n        }\n\n        return new Annotation(parameters);\n    }\n  }\n\n}\n\nexports.AnnotationFactory = AnnotationFactory;\n\nfunction getQuadPoints(dict, rect) {\n  if (!dict.has(\"QuadPoints\")) {\n    return null;\n  }\n\n  const quadPoints = dict.getArray(\"QuadPoints\");\n\n  if (!Array.isArray(quadPoints) || quadPoints.length % 8 > 0) {\n    return null;\n  }\n\n  const quadPointsLists = [];\n\n  for (let i = 0, ii = quadPoints.length / 8; i < ii; i++) {\n    quadPointsLists.push([]);\n\n    for (let j = i * 8, jj = i * 8 + 8; j < jj; j += 2) {\n      const x = quadPoints[j];\n      const y = quadPoints[j + 1];\n\n      if (x < rect[0] || x > rect[2] || y < rect[1] || y > rect[3]) {\n        return null;\n      }\n\n      quadPointsLists[i].push({\n        x,\n        y\n      });\n    }\n  }\n\n  return quadPointsLists;\n}\n\nfunction getTransformMatrix(rect, bbox, matrix) {\n  const [minX, minY, maxX, maxY] = _util.Util.getAxialAlignedBoundingBox(bbox, matrix);\n\n  if (minX === maxX || minY === maxY) {\n    return [1, 0, 0, 1, rect[0], rect[1]];\n  }\n\n  const xRatio = (rect[2] - rect[0]) / (maxX - minX);\n  const yRatio = (rect[3] - rect[1]) / (maxY - minY);\n  return [xRatio, 0, 0, yRatio, rect[0] - minX * xRatio, rect[1] - minY * yRatio];\n}\n\nclass Annotation {\n  constructor(params) {\n    const dict = params.dict;\n    this.setContents(dict.get(\"Contents\"));\n    this.setModificationDate(dict.get(\"M\"));\n    this.setFlags(dict.get(\"F\"));\n    this.setRectangle(dict.getArray(\"Rect\"));\n    this.setColor(dict.getArray(\"C\"));\n    this.setBorderStyle(dict);\n    this.setAppearance(dict);\n    this.data = {\n      annotationFlags: this.flags,\n      borderStyle: this.borderStyle,\n      color: this.color,\n      contents: this.contents,\n      hasAppearance: !!this.appearance,\n      id: params.id,\n      modificationDate: this.modificationDate,\n      rect: this.rectangle,\n      subtype: params.subtype\n    };\n  }\n\n  _hasFlag(flags, flag) {\n    return !!(flags & flag);\n  }\n\n  _isViewable(flags) {\n    return !this._hasFlag(flags, _util.AnnotationFlag.INVISIBLE) && !this._hasFlag(flags, _util.AnnotationFlag.HIDDEN) && !this._hasFlag(flags, _util.AnnotationFlag.NOVIEW);\n  }\n\n  _isPrintable(flags) {\n    return this._hasFlag(flags, _util.AnnotationFlag.PRINT) && !this._hasFlag(flags, _util.AnnotationFlag.INVISIBLE) && !this._hasFlag(flags, _util.AnnotationFlag.HIDDEN);\n  }\n\n  get viewable() {\n    if (this.flags === 0) {\n      return true;\n    }\n\n    return this._isViewable(this.flags);\n  }\n\n  get printable() {\n    if (this.flags === 0) {\n      return false;\n    }\n\n    return this._isPrintable(this.flags);\n  }\n\n  setContents(contents) {\n    this.contents = (0, _util.stringToPDFString)(contents || \"\");\n  }\n\n  setModificationDate(modificationDate) {\n    this.modificationDate = (0, _util.isString)(modificationDate) ? modificationDate : null;\n  }\n\n  setFlags(flags) {\n    this.flags = Number.isInteger(flags) && flags > 0 ? flags : 0;\n  }\n\n  hasFlag(flag) {\n    return this._hasFlag(this.flags, flag);\n  }\n\n  setRectangle(rectangle) {\n    if (Array.isArray(rectangle) && rectangle.length === 4) {\n      this.rectangle = _util.Util.normalizeRect(rectangle);\n    } else {\n      this.rectangle = [0, 0, 0, 0];\n    }\n  }\n\n  setColor(color) {\n    const rgbColor = new Uint8ClampedArray(3);\n\n    if (!Array.isArray(color)) {\n      this.color = rgbColor;\n      return;\n    }\n\n    switch (color.length) {\n      case 0:\n        this.color = null;\n        break;\n\n      case 1:\n        _colorspace.ColorSpace.singletons.gray.getRgbItem(color, 0, rgbColor, 0);\n\n        this.color = rgbColor;\n        break;\n\n      case 3:\n        _colorspace.ColorSpace.singletons.rgb.getRgbItem(color, 0, rgbColor, 0);\n\n        this.color = rgbColor;\n        break;\n\n      case 4:\n        _colorspace.ColorSpace.singletons.cmyk.getRgbItem(color, 0, rgbColor, 0);\n\n        this.color = rgbColor;\n        break;\n\n      default:\n        this.color = rgbColor;\n        break;\n    }\n  }\n\n  setBorderStyle(borderStyle) {\n    this.borderStyle = new AnnotationBorderStyle();\n\n    if (!(0, _primitives.isDict)(borderStyle)) {\n      return;\n    }\n\n    if (borderStyle.has(\"BS\")) {\n      const dict = borderStyle.get(\"BS\");\n      const dictType = dict.get(\"Type\");\n\n      if (!dictType || (0, _primitives.isName)(dictType, \"Border\")) {\n        this.borderStyle.setWidth(dict.get(\"W\"), this.rectangle);\n        this.borderStyle.setStyle(dict.get(\"S\"));\n        this.borderStyle.setDashArray(dict.getArray(\"D\"));\n      }\n    } else if (borderStyle.has(\"Border\")) {\n      const array = borderStyle.getArray(\"Border\");\n\n      if (Array.isArray(array) && array.length >= 3) {\n        this.borderStyle.setHorizontalCornerRadius(array[0]);\n        this.borderStyle.setVerticalCornerRadius(array[1]);\n        this.borderStyle.setWidth(array[2], this.rectangle);\n\n        if (array.length === 4) {\n          this.borderStyle.setDashArray(array[3]);\n        }\n      }\n    } else {\n      this.borderStyle.setWidth(0);\n    }\n  }\n\n  setAppearance(dict) {\n    this.appearance = null;\n    const appearanceStates = dict.get(\"AP\");\n\n    if (!(0, _primitives.isDict)(appearanceStates)) {\n      return;\n    }\n\n    const normalAppearanceState = appearanceStates.get(\"N\");\n\n    if ((0, _primitives.isStream)(normalAppearanceState)) {\n      this.appearance = normalAppearanceState;\n      return;\n    }\n\n    if (!(0, _primitives.isDict)(normalAppearanceState)) {\n      return;\n    }\n\n    const as = dict.get(\"AS\");\n\n    if (!(0, _primitives.isName)(as) || !normalAppearanceState.has(as.name)) {\n      return;\n    }\n\n    this.appearance = normalAppearanceState.get(as.name);\n  }\n\n  loadResources(keys) {\n    return this.appearance.dict.getAsync(\"Resources\").then(resources => {\n      if (!resources) {\n        return undefined;\n      }\n\n      const objectLoader = new _obj.ObjectLoader(resources, keys, resources.xref);\n      return objectLoader.load().then(function () {\n        return resources;\n      });\n    });\n  }\n\n  getOperatorList(evaluator, task, renderForms) {\n    if (!this.appearance) {\n      return Promise.resolve(new _operator_list.OperatorList());\n    }\n\n    const data = this.data;\n    const appearanceDict = this.appearance.dict;\n    const resourcesPromise = this.loadResources([\"ExtGState\", \"ColorSpace\", \"Pattern\", \"Shading\", \"XObject\", \"Font\"]);\n    const bbox = appearanceDict.getArray(\"BBox\") || [0, 0, 1, 1];\n    const matrix = appearanceDict.getArray(\"Matrix\") || [1, 0, 0, 1, 0, 0];\n    const transform = getTransformMatrix(data.rect, bbox, matrix);\n    return resourcesPromise.then(resources => {\n      const opList = new _operator_list.OperatorList();\n      opList.addOp(_util.OPS.beginAnnotation, [data.rect, transform, matrix]);\n      return evaluator.getOperatorList({\n        stream: this.appearance,\n        task,\n        resources,\n        operatorList: opList\n      }).then(() => {\n        opList.addOp(_util.OPS.endAnnotation, []);\n        this.appearance.reset();\n        return opList;\n      });\n    });\n  }\n\n}\n\nexports.Annotation = Annotation;\n\nclass AnnotationBorderStyle {\n  constructor() {\n    this.width = 1;\n    this.style = _util.AnnotationBorderStyleType.SOLID;\n    this.dashArray = [3];\n    this.horizontalCornerRadius = 0;\n    this.verticalCornerRadius = 0;\n  }\n\n  setWidth(width, rect = [0, 0, 0, 0]) {\n    if ((0, _primitives.isName)(width)) {\n      this.width = 0;\n      return;\n    }\n\n    if (Number.isInteger(width)) {\n      if (width > 0) {\n        const maxWidth = (rect[2] - rect[0]) / 2;\n        const maxHeight = (rect[3] - rect[1]) / 2;\n\n        if (maxWidth > 0 && maxHeight > 0 && (width > maxWidth || width > maxHeight)) {\n          (0, _util.warn)(`AnnotationBorderStyle.setWidth - ignoring width: ${width}`);\n          width = 1;\n        }\n      }\n\n      this.width = width;\n    }\n  }\n\n  setStyle(style) {\n    if (!(0, _primitives.isName)(style)) {\n      return;\n    }\n\n    switch (style.name) {\n      case \"S\":\n        this.style = _util.AnnotationBorderStyleType.SOLID;\n        break;\n\n      case \"D\":\n        this.style = _util.AnnotationBorderStyleType.DASHED;\n        break;\n\n      case \"B\":\n        this.style = _util.AnnotationBorderStyleType.BEVELED;\n        break;\n\n      case \"I\":\n        this.style = _util.AnnotationBorderStyleType.INSET;\n        break;\n\n      case \"U\":\n        this.style = _util.AnnotationBorderStyleType.UNDERLINE;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  setDashArray(dashArray) {\n    if (Array.isArray(dashArray) && dashArray.length > 0) {\n      let isValid = true;\n      let allZeros = true;\n\n      for (const element of dashArray) {\n        const validNumber = +element >= 0;\n\n        if (!validNumber) {\n          isValid = false;\n          break;\n        } else if (element > 0) {\n          allZeros = false;\n        }\n      }\n\n      if (isValid && !allZeros) {\n        this.dashArray = dashArray;\n      } else {\n        this.width = 0;\n      }\n    } else if (dashArray) {\n      this.width = 0;\n    }\n  }\n\n  setHorizontalCornerRadius(radius) {\n    if (Number.isInteger(radius)) {\n      this.horizontalCornerRadius = radius;\n    }\n  }\n\n  setVerticalCornerRadius(radius) {\n    if (Number.isInteger(radius)) {\n      this.verticalCornerRadius = radius;\n    }\n  }\n\n}\n\nexports.AnnotationBorderStyle = AnnotationBorderStyle;\n\nclass MarkupAnnotation extends Annotation {\n  constructor(parameters) {\n    super(parameters);\n    const dict = parameters.dict;\n\n    if (dict.has(\"IRT\")) {\n      const rawIRT = dict.getRaw(\"IRT\");\n      this.data.inReplyTo = (0, _primitives.isRef)(rawIRT) ? rawIRT.toString() : null;\n      const rt = dict.get(\"RT\");\n      this.data.replyType = (0, _primitives.isName)(rt) ? rt.name : _util.AnnotationReplyType.REPLY;\n    }\n\n    if (this.data.replyType === _util.AnnotationReplyType.GROUP) {\n      const parent = dict.get(\"IRT\");\n      this.data.title = (0, _util.stringToPDFString)(parent.get(\"T\") || \"\");\n      this.setContents(parent.get(\"Contents\"));\n      this.data.contents = this.contents;\n\n      if (!parent.has(\"CreationDate\")) {\n        this.data.creationDate = null;\n      } else {\n        this.setCreationDate(parent.get(\"CreationDate\"));\n        this.data.creationDate = this.creationDate;\n      }\n\n      if (!parent.has(\"M\")) {\n        this.data.modificationDate = null;\n      } else {\n        this.setModificationDate(parent.get(\"M\"));\n        this.data.modificationDate = this.modificationDate;\n      }\n\n      this.data.hasPopup = parent.has(\"Popup\");\n\n      if (!parent.has(\"C\")) {\n        this.data.color = null;\n      } else {\n        this.setColor(parent.getArray(\"C\"));\n        this.data.color = this.color;\n      }\n    } else {\n      this.data.title = (0, _util.stringToPDFString)(dict.get(\"T\") || \"\");\n      this.setCreationDate(dict.get(\"CreationDate\"));\n      this.data.creationDate = this.creationDate;\n      this.data.hasPopup = dict.has(\"Popup\");\n\n      if (!dict.has(\"C\")) {\n        this.data.color = null;\n      }\n    }\n  }\n\n  setCreationDate(creationDate) {\n    this.creationDate = (0, _util.isString)(creationDate) ? creationDate : null;\n  }\n\n}\n\nexports.MarkupAnnotation = MarkupAnnotation;\n\nclass WidgetAnnotation extends Annotation {\n  constructor(params) {\n    super(params);\n    const dict = params.dict;\n    const data = this.data;\n    data.annotationType = _util.AnnotationType.WIDGET;\n    data.fieldName = this._constructFieldName(dict);\n    data.fieldValue = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: \"V\",\n      getArray: true\n    });\n    data.alternativeText = (0, _util.stringToPDFString)(dict.get(\"TU\") || \"\");\n    data.defaultAppearance = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: \"DA\"\n    }) || \"\";\n    const fieldType = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: \"FT\"\n    });\n    data.fieldType = (0, _primitives.isName)(fieldType) ? fieldType.name : null;\n    this.fieldResources = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: \"DR\"\n    }) || _primitives.Dict.empty;\n    data.fieldFlags = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: \"Ff\"\n    });\n\n    if (!Number.isInteger(data.fieldFlags) || data.fieldFlags < 0) {\n      data.fieldFlags = 0;\n    }\n\n    data.readOnly = this.hasFieldFlag(_util.AnnotationFieldFlag.READONLY);\n\n    if (data.fieldType === \"Sig\") {\n      data.fieldValue = null;\n      this.setFlags(_util.AnnotationFlag.HIDDEN);\n    }\n  }\n\n  _constructFieldName(dict) {\n    if (!dict.has(\"T\") && !dict.has(\"Parent\")) {\n      (0, _util.warn)(\"Unknown field name, falling back to empty field name.\");\n      return \"\";\n    }\n\n    if (!dict.has(\"Parent\")) {\n      return (0, _util.stringToPDFString)(dict.get(\"T\"));\n    }\n\n    const fieldName = [];\n\n    if (dict.has(\"T\")) {\n      fieldName.unshift((0, _util.stringToPDFString)(dict.get(\"T\")));\n    }\n\n    let loopDict = dict;\n\n    while (loopDict.has(\"Parent\")) {\n      loopDict = loopDict.get(\"Parent\");\n\n      if (!(0, _primitives.isDict)(loopDict)) {\n        break;\n      }\n\n      if (loopDict.has(\"T\")) {\n        fieldName.unshift((0, _util.stringToPDFString)(loopDict.get(\"T\")));\n      }\n    }\n\n    return fieldName.join(\".\");\n  }\n\n  hasFieldFlag(flag) {\n    return !!(this.data.fieldFlags & flag);\n  }\n\n  getOperatorList(evaluator, task, renderForms) {\n    if (renderForms) {\n      return Promise.resolve(new _operator_list.OperatorList());\n    }\n\n    return super.getOperatorList(evaluator, task, renderForms);\n  }\n\n}\n\nclass TextWidgetAnnotation extends WidgetAnnotation {\n  constructor(params) {\n    super(params);\n    const dict = params.dict;\n    this.data.fieldValue = (0, _util.stringToPDFString)(this.data.fieldValue || \"\");\n    let alignment = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: \"Q\"\n    });\n\n    if (!Number.isInteger(alignment) || alignment < 0 || alignment > 2) {\n      alignment = null;\n    }\n\n    this.data.textAlignment = alignment;\n    let maximumLength = (0, _core_utils.getInheritableProperty)({\n      dict,\n      key: \"MaxLen\"\n    });\n\n    if (!Number.isInteger(maximumLength) || maximumLength < 0) {\n      maximumLength = null;\n    }\n\n    this.data.maxLen = maximumLength;\n    this.data.multiLine = this.hasFieldFlag(_util.AnnotationFieldFlag.MULTILINE);\n    this.data.comb = this.hasFieldFlag(_util.AnnotationFieldFlag.COMB) && !this.hasFieldFlag(_util.AnnotationFieldFlag.MULTILINE) && !this.hasFieldFlag(_util.AnnotationFieldFlag.PASSWORD) && !this.hasFieldFlag(_util.AnnotationFieldFlag.FILESELECT) && this.data.maxLen !== null;\n  }\n\n  getOperatorList(evaluator, task, renderForms) {\n    if (renderForms || this.appearance) {\n      return super.getOperatorList(evaluator, task, renderForms);\n    }\n\n    const operatorList = new _operator_list.OperatorList();\n\n    if (!this.data.defaultAppearance) {\n      return Promise.resolve(operatorList);\n    }\n\n    const stream = new _stream.Stream((0, _util.stringToBytes)(this.data.defaultAppearance));\n    return evaluator.getOperatorList({\n      stream,\n      task,\n      resources: this.fieldResources,\n      operatorList\n    }).then(function () {\n      return operatorList;\n    });\n  }\n\n}\n\nclass ButtonWidgetAnnotation extends WidgetAnnotation {\n  constructor(params) {\n    super(params);\n    this.data.checkBox = !this.hasFieldFlag(_util.AnnotationFieldFlag.RADIO) && !this.hasFieldFlag(_util.AnnotationFieldFlag.PUSHBUTTON);\n    this.data.radioButton = this.hasFieldFlag(_util.AnnotationFieldFlag.RADIO) && !this.hasFieldFlag(_util.AnnotationFieldFlag.PUSHBUTTON);\n    this.data.pushButton = this.hasFieldFlag(_util.AnnotationFieldFlag.PUSHBUTTON);\n\n    if (this.data.checkBox) {\n      this._processCheckBox(params);\n    } else if (this.data.radioButton) {\n      this._processRadioButton(params);\n    } else if (this.data.pushButton) {\n      this._processPushButton(params);\n    } else {\n      (0, _util.warn)(\"Invalid field flags for button widget annotation\");\n    }\n  }\n\n  _processCheckBox(params) {\n    if ((0, _primitives.isName)(this.data.fieldValue)) {\n      this.data.fieldValue = this.data.fieldValue.name;\n    }\n\n    const customAppearance = params.dict.get(\"AP\");\n\n    if (!(0, _primitives.isDict)(customAppearance)) {\n      return;\n    }\n\n    const exportValueOptionsDict = customAppearance.get(\"D\");\n\n    if (!(0, _primitives.isDict)(exportValueOptionsDict)) {\n      return;\n    }\n\n    const exportValues = exportValueOptionsDict.getKeys();\n    const hasCorrectOptionCount = exportValues.length === 2;\n\n    if (!hasCorrectOptionCount) {\n      return;\n    }\n\n    this.data.exportValue = exportValues[0] === \"Off\" ? exportValues[1] : exportValues[0];\n  }\n\n  _processRadioButton(params) {\n    this.data.fieldValue = this.data.buttonValue = null;\n    const fieldParent = params.dict.get(\"Parent\");\n\n    if ((0, _primitives.isDict)(fieldParent) && fieldParent.has(\"V\")) {\n      const fieldParentValue = fieldParent.get(\"V\");\n\n      if ((0, _primitives.isName)(fieldParentValue)) {\n        this.data.fieldValue = fieldParentValue.name;\n      }\n    }\n\n    const appearanceStates = params.dict.get(\"AP\");\n\n    if (!(0, _primitives.isDict)(appearanceStates)) {\n      return;\n    }\n\n    const normalAppearanceState = appearanceStates.get(\"N\");\n\n    if (!(0, _primitives.isDict)(normalAppearanceState)) {\n      return;\n    }\n\n    for (const key of normalAppearanceState.getKeys()) {\n      if (key !== \"Off\") {\n        this.data.buttonValue = key;\n        break;\n      }\n    }\n  }\n\n  _processPushButton(params) {\n    if (!params.dict.has(\"A\")) {\n      (0, _util.warn)(\"Push buttons without action dictionaries are not supported\");\n      return;\n    }\n\n    _obj.Catalog.parseDestDictionary({\n      destDict: params.dict,\n      resultObj: this.data,\n      docBaseUrl: params.pdfManager.docBaseUrl\n    });\n  }\n\n}\n\nclass ChoiceWidgetAnnotation extends WidgetAnnotation {\n  constructor(params) {\n    super(params);\n    this.data.options = [];\n    const options = (0, _core_utils.getInheritableProperty)({\n      dict: params.dict,\n      key: \"Opt\"\n    });\n\n    if (Array.isArray(options)) {\n      const xref = params.xref;\n\n      for (let i = 0, ii = options.length; i < ii; i++) {\n        const option = xref.fetchIfRef(options[i]);\n        const isOptionArray = Array.isArray(option);\n        this.data.options[i] = {\n          exportValue: isOptionArray ? xref.fetchIfRef(option[0]) : option,\n          displayValue: (0, _util.stringToPDFString)(isOptionArray ? xref.fetchIfRef(option[1]) : option)\n        };\n      }\n    }\n\n    if (!Array.isArray(this.data.fieldValue)) {\n      this.data.fieldValue = [this.data.fieldValue];\n    }\n\n    this.data.combo = this.hasFieldFlag(_util.AnnotationFieldFlag.COMBO);\n    this.data.multiSelect = this.hasFieldFlag(_util.AnnotationFieldFlag.MULTISELECT);\n  }\n\n}\n\nclass TextAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    const DEFAULT_ICON_SIZE = 22;\n    super(parameters);\n    const dict = parameters.dict;\n    this.data.annotationType = _util.AnnotationType.TEXT;\n\n    if (this.data.hasAppearance) {\n      this.data.name = \"NoIcon\";\n    } else {\n      this.data.rect[1] = this.data.rect[3] - DEFAULT_ICON_SIZE;\n      this.data.rect[2] = this.data.rect[0] + DEFAULT_ICON_SIZE;\n      this.data.name = dict.has(\"Name\") ? dict.get(\"Name\").name : \"Note\";\n    }\n\n    if (dict.has(\"State\")) {\n      this.data.state = dict.get(\"State\") || null;\n      this.data.stateModel = dict.get(\"StateModel\") || null;\n    } else {\n      this.data.state = null;\n      this.data.stateModel = null;\n    }\n  }\n\n}\n\nclass LinkAnnotation extends Annotation {\n  constructor(params) {\n    super(params);\n    this.data.annotationType = _util.AnnotationType.LINK;\n    const quadPoints = getQuadPoints(params.dict, this.rectangle);\n\n    if (quadPoints) {\n      this.data.quadPoints = quadPoints;\n    }\n\n    _obj.Catalog.parseDestDictionary({\n      destDict: params.dict,\n      resultObj: this.data,\n      docBaseUrl: params.pdfManager.docBaseUrl\n    });\n  }\n\n}\n\nclass PopupAnnotation extends Annotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.POPUP;\n    let parentItem = parameters.dict.get(\"Parent\");\n\n    if (!parentItem) {\n      (0, _util.warn)(\"Popup annotation has a missing or invalid parent annotation.\");\n      return;\n    }\n\n    const parentSubtype = parentItem.get(\"Subtype\");\n    this.data.parentType = (0, _primitives.isName)(parentSubtype) ? parentSubtype.name : null;\n    const rawParent = parameters.dict.getRaw(\"Parent\");\n    this.data.parentId = (0, _primitives.isRef)(rawParent) ? rawParent.toString() : null;\n    const rt = parentItem.get(\"RT\");\n\n    if ((0, _primitives.isName)(rt, _util.AnnotationReplyType.GROUP)) {\n      parentItem = parentItem.get(\"IRT\");\n    }\n\n    if (!parentItem.has(\"M\")) {\n      this.data.modificationDate = null;\n    } else {\n      this.setModificationDate(parentItem.get(\"M\"));\n      this.data.modificationDate = this.modificationDate;\n    }\n\n    if (!parentItem.has(\"C\")) {\n      this.data.color = null;\n    } else {\n      this.setColor(parentItem.getArray(\"C\"));\n      this.data.color = this.color;\n    }\n\n    if (!this.viewable) {\n      const parentFlags = parentItem.get(\"F\");\n\n      if (this._isViewable(parentFlags)) {\n        this.setFlags(parentFlags);\n      }\n    }\n\n    this.data.title = (0, _util.stringToPDFString)(parentItem.get(\"T\") || \"\");\n    this.data.contents = (0, _util.stringToPDFString)(parentItem.get(\"Contents\") || \"\");\n  }\n\n}\n\nclass FreeTextAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.FREETEXT;\n  }\n\n}\n\nclass LineAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.LINE;\n    this.data.lineCoordinates = _util.Util.normalizeRect(parameters.dict.getArray(\"L\"));\n  }\n\n}\n\nclass SquareAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.SQUARE;\n  }\n\n}\n\nclass CircleAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.CIRCLE;\n  }\n\n}\n\nclass PolylineAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.POLYLINE;\n    const rawVertices = parameters.dict.getArray(\"Vertices\");\n    this.data.vertices = [];\n\n    for (let i = 0, ii = rawVertices.length; i < ii; i += 2) {\n      this.data.vertices.push({\n        x: rawVertices[i],\n        y: rawVertices[i + 1]\n      });\n    }\n  }\n\n}\n\nclass PolygonAnnotation extends PolylineAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.POLYGON;\n  }\n\n}\n\nclass CaretAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.CARET;\n  }\n\n}\n\nclass InkAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.INK;\n    const xref = parameters.xref;\n    const originalInkLists = parameters.dict.getArray(\"InkList\");\n    this.data.inkLists = [];\n\n    for (let i = 0, ii = originalInkLists.length; i < ii; ++i) {\n      this.data.inkLists.push([]);\n\n      for (let j = 0, jj = originalInkLists[i].length; j < jj; j += 2) {\n        this.data.inkLists[i].push({\n          x: xref.fetchIfRef(originalInkLists[i][j]),\n          y: xref.fetchIfRef(originalInkLists[i][j + 1])\n        });\n      }\n    }\n  }\n\n}\n\nclass HighlightAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.HIGHLIGHT;\n    const quadPoints = getQuadPoints(parameters.dict, this.rectangle);\n\n    if (quadPoints) {\n      this.data.quadPoints = quadPoints;\n    }\n  }\n\n}\n\nclass UnderlineAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.UNDERLINE;\n    const quadPoints = getQuadPoints(parameters.dict, this.rectangle);\n\n    if (quadPoints) {\n      this.data.quadPoints = quadPoints;\n    }\n  }\n\n}\n\nclass SquigglyAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.SQUIGGLY;\n    const quadPoints = getQuadPoints(parameters.dict, this.rectangle);\n\n    if (quadPoints) {\n      this.data.quadPoints = quadPoints;\n    }\n  }\n\n}\n\nclass StrikeOutAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.STRIKEOUT;\n    const quadPoints = getQuadPoints(parameters.dict, this.rectangle);\n\n    if (quadPoints) {\n      this.data.quadPoints = quadPoints;\n    }\n  }\n\n}\n\nclass StampAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    this.data.annotationType = _util.AnnotationType.STAMP;\n  }\n\n}\n\nclass FileAttachmentAnnotation extends MarkupAnnotation {\n  constructor(parameters) {\n    super(parameters);\n    const file = new _obj.FileSpec(parameters.dict.get(\"FS\"), parameters.xref);\n    this.data.annotationType = _util.AnnotationType.FILEATTACHMENT;\n    this.data.file = file.serializable;\n  }\n\n}\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OperatorList = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar QueueOptimizer = function QueueOptimizerClosure() {\n  function addState(parentState, pattern, checkFn, iterateFn, processFn) {\n    var state = parentState;\n\n    for (var i = 0, ii = pattern.length - 1; i < ii; i++) {\n      var item = pattern[i];\n      state = state[item] || (state[item] = []);\n    }\n\n    state[pattern[pattern.length - 1]] = {\n      checkFn,\n      iterateFn,\n      processFn\n    };\n  }\n\n  function handlePaintSolidColorImageMask(iFirstSave, count, fnArray, argsArray) {\n    var iFirstPIMXO = iFirstSave + 2;\n\n    for (var i = 0; i < count; i++) {\n      var arg = argsArray[iFirstPIMXO + 4 * i];\n      var imageMask = arg.length === 1 && arg[0];\n\n      if (imageMask && imageMask.width === 1 && imageMask.height === 1 && (!imageMask.data.length || imageMask.data.length === 1 && imageMask.data[0] === 0)) {\n        fnArray[iFirstPIMXO + 4 * i] = _util.OPS.paintSolidColorImageMask;\n        continue;\n      }\n\n      break;\n    }\n\n    return count - i;\n  }\n\n  var InitialState = [];\n  addState(InitialState, [_util.OPS.save, _util.OPS.transform, _util.OPS.paintInlineImageXObject, _util.OPS.restore], null, function iterateInlineImageGroup(context, i) {\n    var fnArray = context.fnArray;\n    var iFirstSave = context.iCurr - 3;\n    var pos = (i - iFirstSave) % 4;\n\n    switch (pos) {\n      case 0:\n        return fnArray[i] === _util.OPS.save;\n\n      case 1:\n        return fnArray[i] === _util.OPS.transform;\n\n      case 2:\n        return fnArray[i] === _util.OPS.paintInlineImageXObject;\n\n      case 3:\n        return fnArray[i] === _util.OPS.restore;\n    }\n\n    throw new Error(`iterateInlineImageGroup - invalid pos: ${pos}`);\n  }, function foundInlineImageGroup(context, i) {\n    var MIN_IMAGES_IN_INLINE_IMAGES_BLOCK = 10;\n    var MAX_IMAGES_IN_INLINE_IMAGES_BLOCK = 200;\n    var MAX_WIDTH = 1000;\n    var IMAGE_PADDING = 1;\n    var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n    var curr = context.iCurr;\n    var iFirstSave = curr - 3;\n    var iFirstTransform = curr - 2;\n    var iFirstPIIXO = curr - 1;\n    var count = Math.min(Math.floor((i - iFirstSave) / 4), MAX_IMAGES_IN_INLINE_IMAGES_BLOCK);\n\n    if (count < MIN_IMAGES_IN_INLINE_IMAGES_BLOCK) {\n      return i - (i - iFirstSave) % 4;\n    }\n\n    var maxX = 0;\n    var map = [],\n        maxLineHeight = 0;\n    var currentX = IMAGE_PADDING,\n        currentY = IMAGE_PADDING;\n    var q;\n\n    for (q = 0; q < count; q++) {\n      var transform = argsArray[iFirstTransform + (q << 2)];\n      var img = argsArray[iFirstPIIXO + (q << 2)][0];\n\n      if (currentX + img.width > MAX_WIDTH) {\n        maxX = Math.max(maxX, currentX);\n        currentY += maxLineHeight + 2 * IMAGE_PADDING;\n        currentX = 0;\n        maxLineHeight = 0;\n      }\n\n      map.push({\n        transform,\n        x: currentX,\n        y: currentY,\n        w: img.width,\n        h: img.height\n      });\n      currentX += img.width + 2 * IMAGE_PADDING;\n      maxLineHeight = Math.max(maxLineHeight, img.height);\n    }\n\n    var imgWidth = Math.max(maxX, currentX) + IMAGE_PADDING;\n    var imgHeight = currentY + maxLineHeight + IMAGE_PADDING;\n    var imgData = new Uint8ClampedArray(imgWidth * imgHeight * 4);\n    var imgRowSize = imgWidth << 2;\n\n    for (q = 0; q < count; q++) {\n      var data = argsArray[iFirstPIIXO + (q << 2)][0].data;\n      var rowSize = map[q].w << 2;\n      var dataOffset = 0;\n      var offset = map[q].x + map[q].y * imgWidth << 2;\n      imgData.set(data.subarray(0, rowSize), offset - imgRowSize);\n\n      for (var k = 0, kk = map[q].h; k < kk; k++) {\n        imgData.set(data.subarray(dataOffset, dataOffset + rowSize), offset);\n        dataOffset += rowSize;\n        offset += imgRowSize;\n      }\n\n      imgData.set(data.subarray(dataOffset - rowSize, dataOffset), offset);\n\n      while (offset >= 0) {\n        data[offset - 4] = data[offset];\n        data[offset - 3] = data[offset + 1];\n        data[offset - 2] = data[offset + 2];\n        data[offset - 1] = data[offset + 3];\n        data[offset + rowSize] = data[offset + rowSize - 4];\n        data[offset + rowSize + 1] = data[offset + rowSize - 3];\n        data[offset + rowSize + 2] = data[offset + rowSize - 2];\n        data[offset + rowSize + 3] = data[offset + rowSize - 1];\n        offset -= imgRowSize;\n      }\n    }\n\n    fnArray.splice(iFirstSave, count * 4, _util.OPS.paintInlineImageXObjectGroup);\n    argsArray.splice(iFirstSave, count * 4, [{\n      width: imgWidth,\n      height: imgHeight,\n      kind: _util.ImageKind.RGBA_32BPP,\n      data: imgData\n    }, map]);\n    return iFirstSave + 1;\n  });\n  addState(InitialState, [_util.OPS.save, _util.OPS.transform, _util.OPS.paintImageMaskXObject, _util.OPS.restore], null, function iterateImageMaskGroup(context, i) {\n    var fnArray = context.fnArray;\n    var iFirstSave = context.iCurr - 3;\n    var pos = (i - iFirstSave) % 4;\n\n    switch (pos) {\n      case 0:\n        return fnArray[i] === _util.OPS.save;\n\n      case 1:\n        return fnArray[i] === _util.OPS.transform;\n\n      case 2:\n        return fnArray[i] === _util.OPS.paintImageMaskXObject;\n\n      case 3:\n        return fnArray[i] === _util.OPS.restore;\n    }\n\n    throw new Error(`iterateImageMaskGroup - invalid pos: ${pos}`);\n  }, function foundImageMaskGroup(context, i) {\n    var MIN_IMAGES_IN_MASKS_BLOCK = 10;\n    var MAX_IMAGES_IN_MASKS_BLOCK = 100;\n    var MAX_SAME_IMAGES_IN_MASKS_BLOCK = 1000;\n    var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n    var curr = context.iCurr;\n    var iFirstSave = curr - 3;\n    var iFirstTransform = curr - 2;\n    var iFirstPIMXO = curr - 1;\n    var count = Math.floor((i - iFirstSave) / 4);\n    count = handlePaintSolidColorImageMask(iFirstSave, count, fnArray, argsArray);\n\n    if (count < MIN_IMAGES_IN_MASKS_BLOCK) {\n      return i - (i - iFirstSave) % 4;\n    }\n\n    var q;\n    var isSameImage = false;\n    var iTransform, transformArgs;\n    var firstPIMXOArg0 = argsArray[iFirstPIMXO][0];\n\n    if (argsArray[iFirstTransform][1] === 0 && argsArray[iFirstTransform][2] === 0) {\n      isSameImage = true;\n      var firstTransformArg0 = argsArray[iFirstTransform][0];\n      var firstTransformArg3 = argsArray[iFirstTransform][3];\n      iTransform = iFirstTransform + 4;\n      var iPIMXO = iFirstPIMXO + 4;\n\n      for (q = 1; q < count; q++, iTransform += 4, iPIMXO += 4) {\n        transformArgs = argsArray[iTransform];\n\n        if (argsArray[iPIMXO][0] !== firstPIMXOArg0 || transformArgs[0] !== firstTransformArg0 || transformArgs[1] !== 0 || transformArgs[2] !== 0 || transformArgs[3] !== firstTransformArg3) {\n          if (q < MIN_IMAGES_IN_MASKS_BLOCK) {\n            isSameImage = false;\n          } else {\n            count = q;\n          }\n\n          break;\n        }\n      }\n    }\n\n    if (isSameImage) {\n      count = Math.min(count, MAX_SAME_IMAGES_IN_MASKS_BLOCK);\n      var positions = new Float32Array(count * 2);\n      iTransform = iFirstTransform;\n\n      for (q = 0; q < count; q++, iTransform += 4) {\n        transformArgs = argsArray[iTransform];\n        positions[q << 1] = transformArgs[4];\n        positions[(q << 1) + 1] = transformArgs[5];\n      }\n\n      fnArray.splice(iFirstSave, count * 4, _util.OPS.paintImageMaskXObjectRepeat);\n      argsArray.splice(iFirstSave, count * 4, [firstPIMXOArg0, firstTransformArg0, firstTransformArg3, positions]);\n    } else {\n      count = Math.min(count, MAX_IMAGES_IN_MASKS_BLOCK);\n      var images = [];\n\n      for (q = 0; q < count; q++) {\n        transformArgs = argsArray[iFirstTransform + (q << 2)];\n        var maskParams = argsArray[iFirstPIMXO + (q << 2)][0];\n        images.push({\n          data: maskParams.data,\n          width: maskParams.width,\n          height: maskParams.height,\n          transform: transformArgs\n        });\n      }\n\n      fnArray.splice(iFirstSave, count * 4, _util.OPS.paintImageMaskXObjectGroup);\n      argsArray.splice(iFirstSave, count * 4, [images]);\n    }\n\n    return iFirstSave + 1;\n  });\n  addState(InitialState, [_util.OPS.save, _util.OPS.transform, _util.OPS.paintImageXObject, _util.OPS.restore], function (context) {\n    var argsArray = context.argsArray;\n    var iFirstTransform = context.iCurr - 2;\n    return argsArray[iFirstTransform][1] === 0 && argsArray[iFirstTransform][2] === 0;\n  }, function iterateImageGroup(context, i) {\n    var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n    var iFirstSave = context.iCurr - 3;\n    var pos = (i - iFirstSave) % 4;\n\n    switch (pos) {\n      case 0:\n        return fnArray[i] === _util.OPS.save;\n\n      case 1:\n        if (fnArray[i] !== _util.OPS.transform) {\n          return false;\n        }\n\n        var iFirstTransform = context.iCurr - 2;\n        var firstTransformArg0 = argsArray[iFirstTransform][0];\n        var firstTransformArg3 = argsArray[iFirstTransform][3];\n\n        if (argsArray[i][0] !== firstTransformArg0 || argsArray[i][1] !== 0 || argsArray[i][2] !== 0 || argsArray[i][3] !== firstTransformArg3) {\n          return false;\n        }\n\n        return true;\n\n      case 2:\n        if (fnArray[i] !== _util.OPS.paintImageXObject) {\n          return false;\n        }\n\n        var iFirstPIXO = context.iCurr - 1;\n        var firstPIXOArg0 = argsArray[iFirstPIXO][0];\n\n        if (argsArray[i][0] !== firstPIXOArg0) {\n          return false;\n        }\n\n        return true;\n\n      case 3:\n        return fnArray[i] === _util.OPS.restore;\n    }\n\n    throw new Error(`iterateImageGroup - invalid pos: ${pos}`);\n  }, function (context, i) {\n    var MIN_IMAGES_IN_BLOCK = 3;\n    var MAX_IMAGES_IN_BLOCK = 1000;\n    var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n    var curr = context.iCurr;\n    var iFirstSave = curr - 3;\n    var iFirstTransform = curr - 2;\n    var iFirstPIXO = curr - 1;\n    var firstPIXOArg0 = argsArray[iFirstPIXO][0];\n    var firstTransformArg0 = argsArray[iFirstTransform][0];\n    var firstTransformArg3 = argsArray[iFirstTransform][3];\n    var count = Math.min(Math.floor((i - iFirstSave) / 4), MAX_IMAGES_IN_BLOCK);\n\n    if (count < MIN_IMAGES_IN_BLOCK) {\n      return i - (i - iFirstSave) % 4;\n    }\n\n    var positions = new Float32Array(count * 2);\n    var iTransform = iFirstTransform;\n\n    for (var q = 0; q < count; q++, iTransform += 4) {\n      var transformArgs = argsArray[iTransform];\n      positions[q << 1] = transformArgs[4];\n      positions[(q << 1) + 1] = transformArgs[5];\n    }\n\n    var args = [firstPIXOArg0, firstTransformArg0, firstTransformArg3, positions];\n    fnArray.splice(iFirstSave, count * 4, _util.OPS.paintImageXObjectRepeat);\n    argsArray.splice(iFirstSave, count * 4, args);\n    return iFirstSave + 1;\n  });\n  addState(InitialState, [_util.OPS.beginText, _util.OPS.setFont, _util.OPS.setTextMatrix, _util.OPS.showText, _util.OPS.endText], null, function iterateShowTextGroup(context, i) {\n    var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n    var iFirstSave = context.iCurr - 4;\n    var pos = (i - iFirstSave) % 5;\n\n    switch (pos) {\n      case 0:\n        return fnArray[i] === _util.OPS.beginText;\n\n      case 1:\n        return fnArray[i] === _util.OPS.setFont;\n\n      case 2:\n        return fnArray[i] === _util.OPS.setTextMatrix;\n\n      case 3:\n        if (fnArray[i] !== _util.OPS.showText) {\n          return false;\n        }\n\n        var iFirstSetFont = context.iCurr - 3;\n        var firstSetFontArg0 = argsArray[iFirstSetFont][0];\n        var firstSetFontArg1 = argsArray[iFirstSetFont][1];\n\n        if (argsArray[i][0] !== firstSetFontArg0 || argsArray[i][1] !== firstSetFontArg1) {\n          return false;\n        }\n\n        return true;\n\n      case 4:\n        return fnArray[i] === _util.OPS.endText;\n    }\n\n    throw new Error(`iterateShowTextGroup - invalid pos: ${pos}`);\n  }, function (context, i) {\n    var MIN_CHARS_IN_BLOCK = 3;\n    var MAX_CHARS_IN_BLOCK = 1000;\n    var fnArray = context.fnArray,\n        argsArray = context.argsArray;\n    var curr = context.iCurr;\n    var iFirstBeginText = curr - 4;\n    var iFirstSetFont = curr - 3;\n    var iFirstSetTextMatrix = curr - 2;\n    var iFirstShowText = curr - 1;\n    var iFirstEndText = curr;\n    var firstSetFontArg0 = argsArray[iFirstSetFont][0];\n    var firstSetFontArg1 = argsArray[iFirstSetFont][1];\n    var count = Math.min(Math.floor((i - iFirstBeginText) / 5), MAX_CHARS_IN_BLOCK);\n\n    if (count < MIN_CHARS_IN_BLOCK) {\n      return i - (i - iFirstBeginText) % 5;\n    }\n\n    var iFirst = iFirstBeginText;\n\n    if (iFirstBeginText >= 4 && fnArray[iFirstBeginText - 4] === fnArray[iFirstSetFont] && fnArray[iFirstBeginText - 3] === fnArray[iFirstSetTextMatrix] && fnArray[iFirstBeginText - 2] === fnArray[iFirstShowText] && fnArray[iFirstBeginText - 1] === fnArray[iFirstEndText] && argsArray[iFirstBeginText - 4][0] === firstSetFontArg0 && argsArray[iFirstBeginText - 4][1] === firstSetFontArg1) {\n      count++;\n      iFirst -= 5;\n    }\n\n    var iEndText = iFirst + 4;\n\n    for (var q = 1; q < count; q++) {\n      fnArray.splice(iEndText, 3);\n      argsArray.splice(iEndText, 3);\n      iEndText += 2;\n    }\n\n    return iEndText + 1;\n  });\n\n  function QueueOptimizer(queue) {\n    this.queue = queue;\n    this.state = null;\n    this.context = {\n      iCurr: 0,\n      fnArray: queue.fnArray,\n      argsArray: queue.argsArray\n    };\n    this.match = null;\n    this.lastProcessed = 0;\n  }\n\n  QueueOptimizer.prototype = {\n    _optimize() {\n      const fnArray = this.queue.fnArray;\n      let i = this.lastProcessed,\n          ii = fnArray.length;\n      let state = this.state;\n      let match = this.match;\n\n      if (!state && !match && i + 1 === ii && !InitialState[fnArray[i]]) {\n        this.lastProcessed = ii;\n        return;\n      }\n\n      const context = this.context;\n\n      while (i < ii) {\n        if (match) {\n          const iterate = (0, match.iterateFn)(context, i);\n\n          if (iterate) {\n            i++;\n            continue;\n          }\n\n          i = (0, match.processFn)(context, i + 1);\n          ii = fnArray.length;\n          match = null;\n          state = null;\n\n          if (i >= ii) {\n            break;\n          }\n        }\n\n        state = (state || InitialState)[fnArray[i]];\n\n        if (!state || Array.isArray(state)) {\n          i++;\n          continue;\n        }\n\n        context.iCurr = i;\n        i++;\n\n        if (state.checkFn && !(0, state.checkFn)(context)) {\n          state = null;\n          continue;\n        }\n\n        match = state;\n        state = null;\n      }\n\n      this.state = state;\n      this.match = match;\n      this.lastProcessed = i;\n    },\n\n    push(fn, args) {\n      this.queue.fnArray.push(fn);\n      this.queue.argsArray.push(args);\n\n      this._optimize();\n    },\n\n    flush() {\n      while (this.match) {\n        const length = this.queue.fnArray.length;\n        this.lastProcessed = (0, this.match.processFn)(this.context, length);\n        this.match = null;\n        this.state = null;\n\n        this._optimize();\n      }\n    },\n\n    reset() {\n      this.state = null;\n      this.match = null;\n      this.lastProcessed = 0;\n    }\n\n  };\n  return QueueOptimizer;\n}();\n\nvar NullOptimizer = function NullOptimizerClosure() {\n  function NullOptimizer(queue) {\n    this.queue = queue;\n  }\n\n  NullOptimizer.prototype = {\n    push(fn, args) {\n      this.queue.fnArray.push(fn);\n      this.queue.argsArray.push(args);\n    },\n\n    flush() {},\n\n    reset() {}\n\n  };\n  return NullOptimizer;\n}();\n\nvar OperatorList = function OperatorListClosure() {\n  var CHUNK_SIZE = 1000;\n  var CHUNK_SIZE_ABOUT = CHUNK_SIZE - 5;\n\n  function OperatorList(intent, streamSink, pageIndex) {\n    this._streamSink = streamSink;\n    this.fnArray = [];\n    this.argsArray = [];\n\n    if (streamSink && intent !== \"oplist\") {\n      this.optimizer = new QueueOptimizer(this);\n    } else {\n      this.optimizer = new NullOptimizer(this);\n    }\n\n    this.dependencies = Object.create(null);\n    this._totalLength = 0;\n    this.pageIndex = pageIndex;\n    this.intent = intent;\n    this.weight = 0;\n    this._resolved = streamSink ? null : Promise.resolve();\n  }\n\n  OperatorList.prototype = {\n    get length() {\n      return this.argsArray.length;\n    },\n\n    get ready() {\n      return this._resolved || this._streamSink.ready;\n    },\n\n    get totalLength() {\n      return this._totalLength + this.length;\n    },\n\n    addOp(fn, args) {\n      this.optimizer.push(fn, args);\n      this.weight++;\n\n      if (this._streamSink) {\n        if (this.weight >= CHUNK_SIZE) {\n          this.flush();\n        } else if (this.weight >= CHUNK_SIZE_ABOUT && (fn === _util.OPS.restore || fn === _util.OPS.endText)) {\n          this.flush();\n        }\n      }\n    },\n\n    addDependency(dependency) {\n      if (dependency in this.dependencies) {\n        return;\n      }\n\n      this.dependencies[dependency] = true;\n      this.addOp(_util.OPS.dependency, [dependency]);\n    },\n\n    addDependencies(dependencies) {\n      for (var key in dependencies) {\n        this.addDependency(key);\n      }\n    },\n\n    addOpList(opList) {\n      Object.assign(this.dependencies, opList.dependencies);\n\n      for (var i = 0, ii = opList.length; i < ii; i++) {\n        this.addOp(opList.fnArray[i], opList.argsArray[i]);\n      }\n    },\n\n    getIR() {\n      return {\n        fnArray: this.fnArray,\n        argsArray: this.argsArray,\n        length: this.length\n      };\n    },\n\n    get _transfers() {\n      const transfers = [];\n      const {\n        fnArray,\n        argsArray,\n        length\n      } = this;\n\n      for (let i = 0; i < length; i++) {\n        switch (fnArray[i]) {\n          case _util.OPS.paintInlineImageXObject:\n          case _util.OPS.paintInlineImageXObjectGroup:\n          case _util.OPS.paintImageMaskXObject:\n            const arg = argsArray[i][0];\n            ;\n\n            if (!arg.cached) {\n              transfers.push(arg.data.buffer);\n            }\n\n            break;\n        }\n      }\n\n      return transfers;\n    },\n\n    flush(lastChunk = false) {\n      this.optimizer.flush();\n      const length = this.length;\n      this._totalLength += length;\n\n      this._streamSink.enqueue({\n        fnArray: this.fnArray,\n        argsArray: this.argsArray,\n        lastChunk,\n        length\n      }, 1, this._transfers);\n\n      this.dependencies = Object.create(null);\n      this.fnArray.length = 0;\n      this.argsArray.length = 0;\n      this.weight = 0;\n      this.optimizer.reset();\n    }\n\n  };\n  return OperatorList;\n}();\n\nexports.OperatorList = OperatorList;\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PartialEvaluator = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _cmap = __w_pdfjs_require__(26);\n\nvar _primitives = __w_pdfjs_require__(4);\n\nvar _fonts = __w_pdfjs_require__(27);\n\nvar _encodings = __w_pdfjs_require__(30);\n\nvar _core_utils = __w_pdfjs_require__(7);\n\nvar _unicode = __w_pdfjs_require__(33);\n\nvar _standard_fonts = __w_pdfjs_require__(32);\n\nvar _pattern = __w_pdfjs_require__(36);\n\nvar _parser = __w_pdfjs_require__(10);\n\nvar _bidi = __w_pdfjs_require__(37);\n\nvar _colorspace = __w_pdfjs_require__(22);\n\nvar _stream = __w_pdfjs_require__(11);\n\nvar _glyphlist = __w_pdfjs_require__(31);\n\nvar _metrics = __w_pdfjs_require__(38);\n\nvar _function = __w_pdfjs_require__(39);\n\nvar _jpeg_stream = __w_pdfjs_require__(17);\n\nvar _murmurhash = __w_pdfjs_require__(41);\n\nvar _image_utils = __w_pdfjs_require__(42);\n\nvar _operator_list = __w_pdfjs_require__(24);\n\nvar _image = __w_pdfjs_require__(43);\n\nvar PartialEvaluator = function PartialEvaluatorClosure() {\n  const DefaultPartialEvaluatorOptions = {\n    forceDataSchema: false,\n    maxImageSize: -1,\n    disableFontFace: false,\n    nativeImageDecoderSupport: _util.NativeImageDecoding.DECODE,\n    ignoreErrors: false,\n    isEvalSupported: true\n  };\n\n  function PartialEvaluator({\n    xref,\n    handler,\n    pageIndex,\n    idFactory,\n    fontCache,\n    builtInCMapCache,\n    options = null,\n    pdfFunctionFactory\n  }) {\n    this.xref = xref;\n    this.handler = handler;\n    this.pageIndex = pageIndex;\n    this.idFactory = idFactory;\n    this.fontCache = fontCache;\n    this.builtInCMapCache = builtInCMapCache;\n    this.options = options || DefaultPartialEvaluatorOptions;\n    this.pdfFunctionFactory = pdfFunctionFactory;\n    this.parsingType3Font = false;\n\n    this.fetchBuiltInCMap = async name => {\n      if (this.builtInCMapCache.has(name)) {\n        return this.builtInCMapCache.get(name);\n      }\n\n      const readableStream = this.handler.sendWithStream(\"FetchBuiltInCMap\", {\n        name\n      });\n      const reader = readableStream.getReader();\n      const data = await new Promise(function (resolve, reject) {\n        function pump() {\n          reader.read().then(function ({\n            value,\n            done\n          }) {\n            if (done) {\n              return;\n            }\n\n            resolve(value);\n            pump();\n          }, reject);\n        }\n\n        pump();\n      });\n\n      if (data.compressionType !== _util.CMapCompressionType.NONE) {\n        this.builtInCMapCache.set(name, data);\n      }\n\n      return data;\n    };\n  }\n\n  var TIME_SLOT_DURATION_MS = 20;\n  var CHECK_TIME_EVERY = 100;\n\n  function TimeSlotManager() {\n    this.reset();\n  }\n\n  TimeSlotManager.prototype = {\n    check: function TimeSlotManager_check() {\n      if (++this.checked < CHECK_TIME_EVERY) {\n        return false;\n      }\n\n      this.checked = 0;\n      return this.endTime <= Date.now();\n    },\n    reset: function TimeSlotManager_reset() {\n      this.endTime = Date.now() + TIME_SLOT_DURATION_MS;\n      this.checked = 0;\n    }\n  };\n\n  function normalizeBlendMode(value, parsingArray = false) {\n    if (Array.isArray(value)) {\n      for (let i = 0, ii = value.length; i < ii; i++) {\n        const maybeBM = normalizeBlendMode(value[i], true);\n\n        if (maybeBM) {\n          return maybeBM;\n        }\n      }\n\n      (0, _util.warn)(`Unsupported blend mode Array: ${value}`);\n      return \"source-over\";\n    }\n\n    if (!(0, _primitives.isName)(value)) {\n      if (parsingArray) {\n        return null;\n      }\n\n      return \"source-over\";\n    }\n\n    switch (value.name) {\n      case \"Normal\":\n      case \"Compatible\":\n        return \"source-over\";\n\n      case \"Multiply\":\n        return \"multiply\";\n\n      case \"Screen\":\n        return \"screen\";\n\n      case \"Overlay\":\n        return \"overlay\";\n\n      case \"Darken\":\n        return \"darken\";\n\n      case \"Lighten\":\n        return \"lighten\";\n\n      case \"ColorDodge\":\n        return \"color-dodge\";\n\n      case \"ColorBurn\":\n        return \"color-burn\";\n\n      case \"HardLight\":\n        return \"hard-light\";\n\n      case \"SoftLight\":\n        return \"soft-light\";\n\n      case \"Difference\":\n        return \"difference\";\n\n      case \"Exclusion\":\n        return \"exclusion\";\n\n      case \"Hue\":\n        return \"hue\";\n\n      case \"Saturation\":\n        return \"saturation\";\n\n      case \"Color\":\n        return \"color\";\n\n      case \"Luminosity\":\n        return \"luminosity\";\n    }\n\n    if (parsingArray) {\n      return null;\n    }\n\n    (0, _util.warn)(`Unsupported blend mode: ${value.name}`);\n    return \"source-over\";\n  }\n\n  var deferred = Promise.resolve();\n  var TILING_PATTERN = 1,\n      SHADING_PATTERN = 2;\n  PartialEvaluator.prototype = {\n    clone(newOptions = DefaultPartialEvaluatorOptions) {\n      var newEvaluator = Object.create(this);\n      newEvaluator.options = newOptions;\n      return newEvaluator;\n    },\n\n    hasBlendModes: function PartialEvaluator_hasBlendModes(resources) {\n      if (!(resources instanceof _primitives.Dict)) {\n        return false;\n      }\n\n      var processed = Object.create(null);\n\n      if (resources.objId) {\n        processed[resources.objId] = true;\n      }\n\n      var nodes = [resources],\n          xref = this.xref;\n\n      while (nodes.length) {\n        var node = nodes.shift();\n        var graphicStates = node.get(\"ExtGState\");\n\n        if (graphicStates instanceof _primitives.Dict) {\n          var graphicStatesKeys = graphicStates.getKeys();\n\n          for (let i = 0, ii = graphicStatesKeys.length; i < ii; i++) {\n            const key = graphicStatesKeys[i];\n            let graphicState = graphicStates.getRaw(key);\n\n            if (graphicState instanceof _primitives.Ref) {\n              if (processed[graphicState.toString()]) {\n                continue;\n              }\n\n              try {\n                graphicState = xref.fetch(graphicState);\n              } catch (ex) {\n                if (ex instanceof _core_utils.MissingDataException) {\n                  throw ex;\n                }\n\n                if (this.options.ignoreErrors) {\n                  if (graphicState instanceof _primitives.Ref) {\n                    processed[graphicState.toString()] = true;\n                  }\n\n                  this.handler.send(\"UnsupportedFeature\", {\n                    featureId: _util.UNSUPPORTED_FEATURES.unknown\n                  });\n                  (0, _util.warn)(`hasBlendModes - ignoring ExtGState: \"${ex}\".`);\n                  continue;\n                }\n\n                throw ex;\n              }\n            }\n\n            if (!(graphicState instanceof _primitives.Dict)) {\n              continue;\n            }\n\n            if (graphicState.objId) {\n              processed[graphicState.objId] = true;\n            }\n\n            const bm = graphicState.get(\"BM\");\n\n            if (bm instanceof _primitives.Name) {\n              if (bm.name !== \"Normal\") {\n                return true;\n              }\n\n              continue;\n            }\n\n            if (bm !== undefined && Array.isArray(bm)) {\n              for (let j = 0, jj = bm.length; j < jj; j++) {\n                if (bm[j] instanceof _primitives.Name && bm[j].name !== \"Normal\") {\n                  return true;\n                }\n              }\n            }\n          }\n        }\n\n        var xObjects = node.get(\"XObject\");\n\n        if (!(xObjects instanceof _primitives.Dict)) {\n          continue;\n        }\n\n        var xObjectsKeys = xObjects.getKeys();\n\n        for (let i = 0, ii = xObjectsKeys.length; i < ii; i++) {\n          const key = xObjectsKeys[i];\n          var xObject = xObjects.getRaw(key);\n\n          if (xObject instanceof _primitives.Ref) {\n            if (processed[xObject.toString()]) {\n              continue;\n            }\n\n            try {\n              xObject = xref.fetch(xObject);\n            } catch (ex) {\n              if (ex instanceof _core_utils.MissingDataException) {\n                throw ex;\n              }\n\n              if (this.options.ignoreErrors) {\n                if (xObject instanceof _primitives.Ref) {\n                  processed[xObject.toString()] = true;\n                }\n\n                this.handler.send(\"UnsupportedFeature\", {\n                  featureId: _util.UNSUPPORTED_FEATURES.unknown\n                });\n                (0, _util.warn)(`hasBlendModes - ignoring XObject: \"${ex}\".`);\n                continue;\n              }\n\n              throw ex;\n            }\n          }\n\n          if (!(0, _primitives.isStream)(xObject)) {\n            continue;\n          }\n\n          if (xObject.dict.objId) {\n            if (processed[xObject.dict.objId]) {\n              continue;\n            }\n\n            processed[xObject.dict.objId] = true;\n          }\n\n          var xResources = xObject.dict.get(\"Resources\");\n\n          if (xResources instanceof _primitives.Dict && (!xResources.objId || !processed[xResources.objId])) {\n            nodes.push(xResources);\n\n            if (xResources.objId) {\n              processed[xResources.objId] = true;\n            }\n          }\n        }\n      }\n\n      return false;\n    },\n\n    async buildFormXObject(resources, xobj, smask, operatorList, task, initialState) {\n      var dict = xobj.dict;\n      var matrix = dict.getArray(\"Matrix\");\n      var bbox = dict.getArray(\"BBox\");\n\n      if (Array.isArray(bbox) && bbox.length === 4) {\n        bbox = _util.Util.normalizeRect(bbox);\n      } else {\n        bbox = null;\n      }\n\n      var group = dict.get(\"Group\");\n\n      if (group) {\n        var groupOptions = {\n          matrix,\n          bbox,\n          smask,\n          isolated: false,\n          knockout: false\n        };\n        var groupSubtype = group.get(\"S\");\n        var colorSpace = null;\n\n        if ((0, _primitives.isName)(groupSubtype, \"Transparency\")) {\n          groupOptions.isolated = group.get(\"I\") || false;\n          groupOptions.knockout = group.get(\"K\") || false;\n\n          if (group.has(\"CS\")) {\n            colorSpace = await this.parseColorSpace({\n              cs: group.get(\"CS\"),\n              resources\n            });\n          }\n        }\n\n        if (smask && smask.backdrop) {\n          colorSpace = colorSpace || _colorspace.ColorSpace.singletons.rgb;\n          smask.backdrop = colorSpace.getRgb(smask.backdrop, 0);\n        }\n\n        operatorList.addOp(_util.OPS.beginGroup, [groupOptions]);\n      }\n\n      operatorList.addOp(_util.OPS.paintFormXObjectBegin, [matrix, bbox]);\n      return this.getOperatorList({\n        stream: xobj,\n        task,\n        resources: dict.get(\"Resources\") || resources,\n        operatorList,\n        initialState\n      }).then(function () {\n        operatorList.addOp(_util.OPS.paintFormXObjectEnd, []);\n\n        if (group) {\n          operatorList.addOp(_util.OPS.endGroup, [groupOptions]);\n        }\n      });\n    },\n\n    async buildPaintImageXObject({\n      resources,\n      image,\n      isInline = false,\n      operatorList,\n      cacheKey,\n      imageCache,\n      forceDisableNativeImageDecoder = false\n    }) {\n      var dict = image.dict;\n      var w = dict.get(\"Width\", \"W\");\n      var h = dict.get(\"Height\", \"H\");\n\n      if (!(w && (0, _util.isNum)(w)) || !(h && (0, _util.isNum)(h))) {\n        (0, _util.warn)(\"Image dimensions are missing, or not numbers.\");\n        return undefined;\n      }\n\n      var maxImageSize = this.options.maxImageSize;\n\n      if (maxImageSize !== -1 && w * h > maxImageSize) {\n        (0, _util.warn)(\"Image exceeded maximum allowed size and was removed.\");\n        return undefined;\n      }\n\n      var imageMask = dict.get(\"ImageMask\", \"IM\") || false;\n      var imgData, args;\n\n      if (imageMask) {\n        var width = dict.get(\"Width\", \"W\");\n        var height = dict.get(\"Height\", \"H\");\n        var bitStrideLength = width + 7 >> 3;\n        var imgArray = image.getBytes(bitStrideLength * height, true);\n        var decode = dict.getArray(\"Decode\", \"D\");\n        imgData = _image.PDFImage.createMask({\n          imgArray,\n          width,\n          height,\n          imageIsFromDecodeStream: image instanceof _stream.DecodeStream,\n          inverseDecode: !!decode && decode[0] > 0\n        });\n        imgData.cached = !!cacheKey;\n        args = [imgData];\n        operatorList.addOp(_util.OPS.paintImageMaskXObject, args);\n\n        if (cacheKey) {\n          imageCache[cacheKey] = {\n            fn: _util.OPS.paintImageMaskXObject,\n            args\n          };\n        }\n\n        return undefined;\n      }\n\n      var softMask = dict.get(\"SMask\", \"SM\") || false;\n      var mask = dict.get(\"Mask\") || false;\n      var SMALL_IMAGE_DIMENSIONS = 200;\n\n      if (isInline && !softMask && !mask && !(image instanceof _jpeg_stream.JpegStream) && w + h < SMALL_IMAGE_DIMENSIONS) {\n        const imageObj = new _image.PDFImage({\n          xref: this.xref,\n          res: resources,\n          image,\n          isInline,\n          pdfFunctionFactory: this.pdfFunctionFactory\n        });\n        imgData = imageObj.createImageData(true);\n        operatorList.addOp(_util.OPS.paintInlineImageXObject, [imgData]);\n        return undefined;\n      }\n\n      const nativeImageDecoderSupport = forceDisableNativeImageDecoder ? _util.NativeImageDecoding.NONE : this.options.nativeImageDecoderSupport;\n      let objId = `img_${this.idFactory.createObjId()}`;\n\n      if (this.parsingType3Font) {\n        (0, _util.assert)(nativeImageDecoderSupport === _util.NativeImageDecoding.NONE, \"Type3 image resources should be completely decoded in the worker.\");\n        objId = `${this.idFactory.getDocId()}_type3res_${objId}`;\n      }\n\n      if (nativeImageDecoderSupport !== _util.NativeImageDecoding.NONE && !softMask && !mask && image instanceof _jpeg_stream.JpegStream && _image_utils.NativeImageDecoder.isSupported(image, this.xref, resources, this.pdfFunctionFactory) && image.maybeValidDimensions) {\n        return this.handler.sendWithPromise(\"obj\", [objId, this.pageIndex, \"JpegStream\", image.getIR(this.options.forceDataSchema)]).then(function () {\n          operatorList.addDependency(objId);\n          args = [objId, w, h];\n          operatorList.addOp(_util.OPS.paintJpegXObject, args);\n\n          if (cacheKey) {\n            imageCache[cacheKey] = {\n              fn: _util.OPS.paintJpegXObject,\n              args\n            };\n          }\n        }, reason => {\n          (0, _util.warn)(\"Native JPEG decoding failed -- trying to recover: \" + (reason && reason.message));\n          return this.buildPaintImageXObject({\n            resources,\n            image,\n            isInline,\n            operatorList,\n            cacheKey,\n            imageCache,\n            forceDisableNativeImageDecoder: true\n          });\n        });\n      }\n\n      var nativeImageDecoder = null;\n\n      if (nativeImageDecoderSupport === _util.NativeImageDecoding.DECODE && (image instanceof _jpeg_stream.JpegStream || mask instanceof _jpeg_stream.JpegStream || softMask instanceof _jpeg_stream.JpegStream)) {\n        nativeImageDecoder = new _image_utils.NativeImageDecoder({\n          xref: this.xref,\n          resources,\n          handler: this.handler,\n          forceDataSchema: this.options.forceDataSchema,\n          pdfFunctionFactory: this.pdfFunctionFactory\n        });\n      }\n\n      operatorList.addDependency(objId);\n      args = [objId, w, h];\n\n      const imgPromise = _image.PDFImage.buildImage({\n        handler: this.handler,\n        xref: this.xref,\n        res: resources,\n        image,\n        isInline,\n        nativeDecoder: nativeImageDecoder,\n        pdfFunctionFactory: this.pdfFunctionFactory\n      }).then(imageObj => {\n        var imgData = imageObj.createImageData(false);\n\n        if (this.parsingType3Font) {\n          return this.handler.sendWithPromise(\"commonobj\", [objId, \"FontType3Res\", imgData], [imgData.data.buffer]);\n        }\n\n        this.handler.send(\"obj\", [objId, this.pageIndex, \"Image\", imgData], [imgData.data.buffer]);\n        return undefined;\n      }).catch(reason => {\n        (0, _util.warn)(\"Unable to decode image: \" + reason);\n\n        if (this.parsingType3Font) {\n          return this.handler.sendWithPromise(\"commonobj\", [objId, \"FontType3Res\", null]);\n        }\n\n        this.handler.send(\"obj\", [objId, this.pageIndex, \"Image\", null]);\n        return undefined;\n      });\n\n      if (this.parsingType3Font) {\n        await imgPromise;\n      }\n\n      operatorList.addOp(_util.OPS.paintImageXObject, args);\n\n      if (cacheKey) {\n        imageCache[cacheKey] = {\n          fn: _util.OPS.paintImageXObject,\n          args\n        };\n      }\n\n      return undefined;\n    },\n\n    handleSMask: function PartialEvaluator_handleSmask(smask, resources, operatorList, task, stateManager) {\n      var smaskContent = smask.get(\"G\");\n      var smaskOptions = {\n        subtype: smask.get(\"S\").name,\n        backdrop: smask.get(\"BC\")\n      };\n      var transferObj = smask.get(\"TR\");\n\n      if ((0, _function.isPDFFunction)(transferObj)) {\n        const transferFn = this.pdfFunctionFactory.create(transferObj);\n        var transferMap = new Uint8Array(256);\n        var tmp = new Float32Array(1);\n\n        for (var i = 0; i < 256; i++) {\n          tmp[0] = i / 255;\n          transferFn(tmp, 0, tmp, 0);\n          transferMap[i] = tmp[0] * 255 | 0;\n        }\n\n        smaskOptions.transferMap = transferMap;\n      }\n\n      return this.buildFormXObject(resources, smaskContent, smaskOptions, operatorList, task, stateManager.state.clone());\n    },\n\n    handleTilingType(fn, args, resources, pattern, patternDict, operatorList, task) {\n      const tilingOpList = new _operator_list.OperatorList();\n      const resourcesArray = [patternDict.get(\"Resources\"), resources];\n\n      const patternResources = _primitives.Dict.merge(this.xref, resourcesArray);\n\n      return this.getOperatorList({\n        stream: pattern,\n        task,\n        resources: patternResources,\n        operatorList: tilingOpList\n      }).then(function () {\n        return (0, _pattern.getTilingPatternIR)({\n          fnArray: tilingOpList.fnArray,\n          argsArray: tilingOpList.argsArray\n        }, patternDict, args);\n      }).then(function (tilingPatternIR) {\n        operatorList.addDependencies(tilingOpList.dependencies);\n        operatorList.addOp(fn, tilingPatternIR);\n      }, reason => {\n        if (reason instanceof _util.AbortException) {\n          return;\n        }\n\n        if (this.options.ignoreErrors) {\n          this.handler.send(\"UnsupportedFeature\", {\n            featureId: _util.UNSUPPORTED_FEATURES.unknown\n          });\n          (0, _util.warn)(`handleTilingType - ignoring pattern: \"${reason}\".`);\n          return;\n        }\n\n        throw reason;\n      });\n    },\n\n    handleSetFont: function PartialEvaluator_handleSetFont(resources, fontArgs, fontRef, operatorList, task, state) {\n      var fontName;\n\n      if (fontArgs) {\n        fontArgs = fontArgs.slice();\n        fontName = fontArgs[0].name;\n      }\n\n      return this.loadFont(fontName, fontRef, resources).then(translated => {\n        if (!translated.font.isType3Font) {\n          return translated;\n        }\n\n        return translated.loadType3Data(this, resources, operatorList, task).then(function () {\n          return translated;\n        }).catch(reason => {\n          this.handler.send(\"UnsupportedFeature\", {\n            featureId: _util.UNSUPPORTED_FEATURES.font\n          });\n          return new TranslatedFont(\"g_font_error\", new _fonts.ErrorFont(\"Type3 font load error: \" + reason), translated.font);\n        });\n      }).then(translated => {\n        state.font = translated.font;\n        translated.send(this.handler);\n        return translated.loadedName;\n      });\n    },\n\n    handleText(chars, state) {\n      const font = state.font;\n      const glyphs = font.charsToGlyphs(chars);\n\n      if (font.data) {\n        const isAddToPathSet = !!(state.textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG);\n\n        if (isAddToPathSet || state.fillColorSpace.name === \"Pattern\" || font.disableFontFace || this.options.disableFontFace) {\n          PartialEvaluator.buildFontPaths(font, glyphs, this.handler);\n        }\n      }\n\n      return glyphs;\n    },\n\n    ensureStateFont(state) {\n      if (state.font) {\n        return;\n      }\n\n      const reason = new _util.FormatError(\"Missing setFont (Tf) operator before text rendering operator.\");\n\n      if (this.options.ignoreErrors) {\n        this.handler.send(\"UnsupportedFeature\", {\n          featureId: _util.UNSUPPORTED_FEATURES.font\n        });\n        (0, _util.warn)(`ensureStateFont: \"${reason}\".`);\n        return;\n      }\n\n      throw reason;\n    },\n\n    setGState: function PartialEvaluator_setGState(resources, gState, operatorList, task, stateManager) {\n      var gStateObj = [];\n      var gStateKeys = gState.getKeys();\n      var promise = Promise.resolve();\n\n      for (var i = 0, ii = gStateKeys.length; i < ii; i++) {\n        const key = gStateKeys[i];\n        const value = gState.get(key);\n\n        switch (key) {\n          case \"Type\":\n            break;\n\n          case \"LW\":\n          case \"LC\":\n          case \"LJ\":\n          case \"ML\":\n          case \"D\":\n          case \"RI\":\n          case \"FL\":\n          case \"CA\":\n          case \"ca\":\n            gStateObj.push([key, value]);\n            break;\n\n          case \"Font\":\n            promise = promise.then(() => {\n              return this.handleSetFont(resources, null, value[0], operatorList, task, stateManager.state).then(function (loadedName) {\n                operatorList.addDependency(loadedName);\n                gStateObj.push([key, [loadedName, value[1]]]);\n              });\n            });\n            break;\n\n          case \"BM\":\n            gStateObj.push([key, normalizeBlendMode(value)]);\n            break;\n\n          case \"SMask\":\n            if ((0, _primitives.isName)(value, \"None\")) {\n              gStateObj.push([key, false]);\n              break;\n            }\n\n            if ((0, _primitives.isDict)(value)) {\n              promise = promise.then(() => {\n                return this.handleSMask(value, resources, operatorList, task, stateManager);\n              });\n              gStateObj.push([key, true]);\n            } else {\n              (0, _util.warn)(\"Unsupported SMask type\");\n            }\n\n            break;\n\n          case \"OP\":\n          case \"op\":\n          case \"OPM\":\n          case \"BG\":\n          case \"BG2\":\n          case \"UCR\":\n          case \"UCR2\":\n          case \"TR\":\n          case \"TR2\":\n          case \"HT\":\n          case \"SM\":\n          case \"SA\":\n          case \"AIS\":\n          case \"TK\":\n            (0, _util.info)(\"graphic state operator \" + key);\n            break;\n\n          default:\n            (0, _util.info)(\"Unknown graphic state operator \" + key);\n            break;\n        }\n      }\n\n      return promise.then(function () {\n        if (gStateObj.length > 0) {\n          operatorList.addOp(_util.OPS.setGState, [gStateObj]);\n        }\n      });\n    },\n    loadFont: function PartialEvaluator_loadFont(fontName, font, resources) {\n      function errorFont() {\n        return Promise.resolve(new TranslatedFont(\"g_font_error\", new _fonts.ErrorFont(\"Font \" + fontName + \" is not available\"), font));\n      }\n\n      var fontRef,\n          xref = this.xref;\n\n      if (font) {\n        if (!(0, _primitives.isRef)(font)) {\n          throw new _util.FormatError('The \"font\" object should be a reference.');\n        }\n\n        fontRef = font;\n      } else {\n        var fontRes = resources.get(\"Font\");\n\n        if (fontRes) {\n          fontRef = fontRes.getRaw(fontName);\n        }\n      }\n\n      if (!fontRef) {\n        const partialMsg = `Font \"${fontName || font && font.toString()}\" is not available`;\n\n        if (!this.options.ignoreErrors && !this.parsingType3Font) {\n          (0, _util.warn)(`${partialMsg}.`);\n          return errorFont();\n        }\n\n        this.handler.send(\"UnsupportedFeature\", {\n          featureId: _util.UNSUPPORTED_FEATURES.font\n        });\n        (0, _util.warn)(`${partialMsg} -- attempting to fallback to a default font.`);\n        fontRef = PartialEvaluator.getFallbackFontDict();\n      }\n\n      if (this.fontCache.has(fontRef)) {\n        return this.fontCache.get(fontRef);\n      }\n\n      font = xref.fetchIfRef(fontRef);\n\n      if (!(0, _primitives.isDict)(font)) {\n        return errorFont();\n      }\n\n      if (font.translated) {\n        return font.translated;\n      }\n\n      var fontCapability = (0, _util.createPromiseCapability)();\n      var preEvaluatedFont = this.preEvaluateFont(font);\n      const {\n        descriptor,\n        hash\n      } = preEvaluatedFont;\n      var fontRefIsRef = (0, _primitives.isRef)(fontRef),\n          fontID;\n\n      if (fontRefIsRef) {\n        fontID = fontRef.toString();\n      }\n\n      if (hash && (0, _primitives.isDict)(descriptor)) {\n        if (!descriptor.fontAliases) {\n          descriptor.fontAliases = Object.create(null);\n        }\n\n        var fontAliases = descriptor.fontAliases;\n\n        if (fontAliases[hash]) {\n          var aliasFontRef = fontAliases[hash].aliasRef;\n\n          if (fontRefIsRef && aliasFontRef && this.fontCache.has(aliasFontRef)) {\n            this.fontCache.putAlias(fontRef, aliasFontRef);\n            return this.fontCache.get(fontRef);\n          }\n        } else {\n          fontAliases[hash] = {\n            fontID: _fonts.Font.getFontID()\n          };\n        }\n\n        if (fontRefIsRef) {\n          fontAliases[hash].aliasRef = fontRef;\n        }\n\n        fontID = fontAliases[hash].fontID;\n      }\n\n      if (fontRefIsRef) {\n        this.fontCache.put(fontRef, fontCapability.promise);\n      } else {\n        if (!fontID) {\n          fontID = this.idFactory.createObjId();\n        }\n\n        this.fontCache.put(`id_${fontID}`, fontCapability.promise);\n      }\n\n      (0, _util.assert)(fontID, 'The \"fontID\" must be defined.');\n      font.loadedName = `${this.idFactory.getDocId()}_f${fontID}`;\n      font.translated = fontCapability.promise;\n      var translatedPromise;\n\n      try {\n        translatedPromise = this.translateFont(preEvaluatedFont);\n      } catch (e) {\n        translatedPromise = Promise.reject(e);\n      }\n\n      translatedPromise.then(function (translatedFont) {\n        if (translatedFont.fontType !== undefined) {\n          var xrefFontStats = xref.stats.fontTypes;\n          xrefFontStats[translatedFont.fontType] = true;\n        }\n\n        fontCapability.resolve(new TranslatedFont(font.loadedName, translatedFont, font));\n      }).catch(reason => {\n        this.handler.send(\"UnsupportedFeature\", {\n          featureId: _util.UNSUPPORTED_FEATURES.font\n        });\n\n        try {\n          var fontFile3 = descriptor && descriptor.get(\"FontFile3\");\n          var subtype = fontFile3 && fontFile3.get(\"Subtype\");\n          var fontType = (0, _fonts.getFontType)(preEvaluatedFont.type, subtype && subtype.name);\n          var xrefFontStats = xref.stats.fontTypes;\n          xrefFontStats[fontType] = true;\n        } catch (ex) {}\n\n        fontCapability.resolve(new TranslatedFont(font.loadedName, new _fonts.ErrorFont(reason instanceof Error ? reason.message : reason), font));\n      });\n      return fontCapability.promise;\n    },\n\n    buildPath(operatorList, fn, args, parsingText = false) {\n      var lastIndex = operatorList.length - 1;\n\n      if (!args) {\n        args = [];\n      }\n\n      if (lastIndex < 0 || operatorList.fnArray[lastIndex] !== _util.OPS.constructPath) {\n        if (parsingText) {\n          (0, _util.warn)(`Encountered path operator \"${fn}\" inside of a text object.`);\n          operatorList.addOp(_util.OPS.save, null);\n        }\n\n        operatorList.addOp(_util.OPS.constructPath, [[fn], args]);\n\n        if (parsingText) {\n          operatorList.addOp(_util.OPS.restore, null);\n        }\n      } else {\n        var opArgs = operatorList.argsArray[lastIndex];\n        opArgs[0].push(fn);\n        Array.prototype.push.apply(opArgs[1], args);\n      }\n    },\n\n    parseColorSpace({\n      cs,\n      resources\n    }) {\n      return new Promise(resolve => {\n        resolve(_colorspace.ColorSpace.parse(cs, this.xref, resources, this.pdfFunctionFactory));\n      }).catch(reason => {\n        if (reason instanceof _util.AbortException) {\n          return null;\n        }\n\n        if (this.options.ignoreErrors) {\n          this.handler.send(\"UnsupportedFeature\", {\n            featureId: _util.UNSUPPORTED_FEATURES.unknown\n          });\n          (0, _util.warn)(`parseColorSpace - ignoring ColorSpace: \"${reason}\".`);\n          return null;\n        }\n\n        throw reason;\n      });\n    },\n\n    async handleColorN(operatorList, fn, args, cs, patterns, resources, task) {\n      var patternName = args[args.length - 1];\n      var pattern;\n\n      if ((0, _primitives.isName)(patternName) && (pattern = patterns.get(patternName.name))) {\n        var dict = (0, _primitives.isStream)(pattern) ? pattern.dict : pattern;\n        var typeNum = dict.get(\"PatternType\");\n\n        if (typeNum === TILING_PATTERN) {\n          var color = cs.base ? cs.base.getRgb(args, 0) : null;\n          return this.handleTilingType(fn, color, resources, pattern, dict, operatorList, task);\n        } else if (typeNum === SHADING_PATTERN) {\n          var shading = dict.get(\"Shading\");\n          var matrix = dict.getArray(\"Matrix\");\n          pattern = _pattern.Pattern.parseShading(shading, matrix, this.xref, resources, this.handler, this.pdfFunctionFactory);\n          operatorList.addOp(fn, pattern.getIR());\n          return undefined;\n        }\n\n        throw new _util.FormatError(`Unknown PatternType: ${typeNum}`);\n      }\n\n      throw new _util.FormatError(`Unknown PatternName: ${patternName}`);\n    },\n\n    getOperatorList({\n      stream,\n      task,\n      resources,\n      operatorList,\n      initialState = null\n    }) {\n      resources = resources || _primitives.Dict.empty;\n      initialState = initialState || new EvalState();\n\n      if (!operatorList) {\n        throw new Error('getOperatorList: missing \"operatorList\" parameter');\n      }\n\n      var self = this;\n      var xref = this.xref;\n      let parsingText = false;\n      var imageCache = Object.create(null);\n\n      var xobjs = resources.get(\"XObject\") || _primitives.Dict.empty;\n\n      var patterns = resources.get(\"Pattern\") || _primitives.Dict.empty;\n\n      var stateManager = new StateManager(initialState);\n      var preprocessor = new EvaluatorPreprocessor(stream, xref, stateManager);\n      var timeSlotManager = new TimeSlotManager();\n\n      function closePendingRestoreOPS(argument) {\n        for (var i = 0, ii = preprocessor.savedStatesDepth; i < ii; i++) {\n          operatorList.addOp(_util.OPS.restore, []);\n        }\n      }\n\n      return new Promise(function promiseBody(resolve, reject) {\n        const next = function (promise) {\n          Promise.all([promise, operatorList.ready]).then(function () {\n            try {\n              promiseBody(resolve, reject);\n            } catch (ex) {\n              reject(ex);\n            }\n          }, reject);\n        };\n\n        task.ensureNotTerminated();\n        timeSlotManager.reset();\n        var stop,\n            operation = {},\n            i,\n            ii,\n            cs;\n\n        while (!(stop = timeSlotManager.check())) {\n          operation.args = null;\n\n          if (!preprocessor.read(operation)) {\n            break;\n          }\n\n          var args = operation.args;\n          var fn = operation.fn;\n\n          switch (fn | 0) {\n            case _util.OPS.paintXObject:\n              var name = args[0].name;\n\n              if (name && imageCache[name] !== undefined) {\n                operatorList.addOp(imageCache[name].fn, imageCache[name].args);\n                args = null;\n                continue;\n              }\n\n              next(new Promise(function (resolveXObject, rejectXObject) {\n                if (!name) {\n                  throw new _util.FormatError(\"XObject must be referred to by name.\");\n                }\n\n                const xobj = xobjs.get(name);\n\n                if (!xobj) {\n                  operatorList.addOp(fn, args);\n                  resolveXObject();\n                  return;\n                }\n\n                if (!(0, _primitives.isStream)(xobj)) {\n                  throw new _util.FormatError(\"XObject should be a stream\");\n                }\n\n                const type = xobj.dict.get(\"Subtype\");\n\n                if (!(0, _primitives.isName)(type)) {\n                  throw new _util.FormatError(\"XObject should have a Name subtype\");\n                }\n\n                if (type.name === \"Form\") {\n                  stateManager.save();\n                  self.buildFormXObject(resources, xobj, null, operatorList, task, stateManager.state.clone()).then(function () {\n                    stateManager.restore();\n                    resolveXObject();\n                  }, rejectXObject);\n                  return;\n                } else if (type.name === \"Image\") {\n                  self.buildPaintImageXObject({\n                    resources,\n                    image: xobj,\n                    operatorList,\n                    cacheKey: name,\n                    imageCache\n                  }).then(resolveXObject, rejectXObject);\n                  return;\n                } else if (type.name === \"PS\") {\n                  (0, _util.info)(\"Ignored XObject subtype PS\");\n                } else {\n                  throw new _util.FormatError(`Unhandled XObject subtype ${type.name}`);\n                }\n\n                resolveXObject();\n              }).catch(function (reason) {\n                if (reason instanceof _util.AbortException) {\n                  return;\n                }\n\n                if (self.options.ignoreErrors) {\n                  self.handler.send(\"UnsupportedFeature\", {\n                    featureId: _util.UNSUPPORTED_FEATURES.unknown\n                  });\n                  (0, _util.warn)(`getOperatorList - ignoring XObject: \"${reason}\".`);\n                  return;\n                }\n\n                throw reason;\n              }));\n              return;\n\n            case _util.OPS.setFont:\n              var fontSize = args[1];\n              next(self.handleSetFont(resources, args, null, operatorList, task, stateManager.state).then(function (loadedName) {\n                operatorList.addDependency(loadedName);\n                operatorList.addOp(_util.OPS.setFont, [loadedName, fontSize]);\n              }));\n              return;\n\n            case _util.OPS.beginText:\n              parsingText = true;\n              break;\n\n            case _util.OPS.endText:\n              parsingText = false;\n              break;\n\n            case _util.OPS.endInlineImage:\n              var cacheKey = args[0].cacheKey;\n\n              if (cacheKey) {\n                var cacheEntry = imageCache[cacheKey];\n\n                if (cacheEntry !== undefined) {\n                  operatorList.addOp(cacheEntry.fn, cacheEntry.args);\n                  args = null;\n                  continue;\n                }\n              }\n\n              next(self.buildPaintImageXObject({\n                resources,\n                image: args[0],\n                isInline: true,\n                operatorList,\n                cacheKey,\n                imageCache\n              }));\n              return;\n\n            case _util.OPS.showText:\n              if (!stateManager.state.font) {\n                self.ensureStateFont(stateManager.state);\n                continue;\n              }\n\n              args[0] = self.handleText(args[0], stateManager.state);\n              break;\n\n            case _util.OPS.showSpacedText:\n              if (!stateManager.state.font) {\n                self.ensureStateFont(stateManager.state);\n                continue;\n              }\n\n              var arr = args[0];\n              var combinedGlyphs = [];\n              var arrLength = arr.length;\n              var state = stateManager.state;\n\n              for (i = 0; i < arrLength; ++i) {\n                var arrItem = arr[i];\n\n                if ((0, _util.isString)(arrItem)) {\n                  Array.prototype.push.apply(combinedGlyphs, self.handleText(arrItem, state));\n                } else if ((0, _util.isNum)(arrItem)) {\n                  combinedGlyphs.push(arrItem);\n                }\n              }\n\n              args[0] = combinedGlyphs;\n              fn = _util.OPS.showText;\n              break;\n\n            case _util.OPS.nextLineShowText:\n              if (!stateManager.state.font) {\n                self.ensureStateFont(stateManager.state);\n                continue;\n              }\n\n              operatorList.addOp(_util.OPS.nextLine);\n              args[0] = self.handleText(args[0], stateManager.state);\n              fn = _util.OPS.showText;\n              break;\n\n            case _util.OPS.nextLineSetSpacingShowText:\n              if (!stateManager.state.font) {\n                self.ensureStateFont(stateManager.state);\n                continue;\n              }\n\n              operatorList.addOp(_util.OPS.nextLine);\n              operatorList.addOp(_util.OPS.setWordSpacing, [args.shift()]);\n              operatorList.addOp(_util.OPS.setCharSpacing, [args.shift()]);\n              args[0] = self.handleText(args[0], stateManager.state);\n              fn = _util.OPS.showText;\n              break;\n\n            case _util.OPS.setTextRenderingMode:\n              stateManager.state.textRenderingMode = args[0];\n              break;\n\n            case _util.OPS.setFillColorSpace:\n              next(self.parseColorSpace({\n                cs: args[0],\n                resources\n              }).then(function (colorSpace) {\n                if (colorSpace) {\n                  stateManager.state.fillColorSpace = colorSpace;\n                }\n              }));\n              return;\n\n            case _util.OPS.setStrokeColorSpace:\n              next(self.parseColorSpace({\n                cs: args[0],\n                resources\n              }).then(function (colorSpace) {\n                if (colorSpace) {\n                  stateManager.state.strokeColorSpace = colorSpace;\n                }\n              }));\n              return;\n\n            case _util.OPS.setFillColor:\n              cs = stateManager.state.fillColorSpace;\n              args = cs.getRgb(args, 0);\n              fn = _util.OPS.setFillRGBColor;\n              break;\n\n            case _util.OPS.setStrokeColor:\n              cs = stateManager.state.strokeColorSpace;\n              args = cs.getRgb(args, 0);\n              fn = _util.OPS.setStrokeRGBColor;\n              break;\n\n            case _util.OPS.setFillGray:\n              stateManager.state.fillColorSpace = _colorspace.ColorSpace.singletons.gray;\n              args = _colorspace.ColorSpace.singletons.gray.getRgb(args, 0);\n              fn = _util.OPS.setFillRGBColor;\n              break;\n\n            case _util.OPS.setStrokeGray:\n              stateManager.state.strokeColorSpace = _colorspace.ColorSpace.singletons.gray;\n              args = _colorspace.ColorSpace.singletons.gray.getRgb(args, 0);\n              fn = _util.OPS.setStrokeRGBColor;\n              break;\n\n            case _util.OPS.setFillCMYKColor:\n              stateManager.state.fillColorSpace = _colorspace.ColorSpace.singletons.cmyk;\n              args = _colorspace.ColorSpace.singletons.cmyk.getRgb(args, 0);\n              fn = _util.OPS.setFillRGBColor;\n              break;\n\n            case _util.OPS.setStrokeCMYKColor:\n              stateManager.state.strokeColorSpace = _colorspace.ColorSpace.singletons.cmyk;\n              args = _colorspace.ColorSpace.singletons.cmyk.getRgb(args, 0);\n              fn = _util.OPS.setStrokeRGBColor;\n              break;\n\n            case _util.OPS.setFillRGBColor:\n              stateManager.state.fillColorSpace = _colorspace.ColorSpace.singletons.rgb;\n              args = _colorspace.ColorSpace.singletons.rgb.getRgb(args, 0);\n              break;\n\n            case _util.OPS.setStrokeRGBColor:\n              stateManager.state.strokeColorSpace = _colorspace.ColorSpace.singletons.rgb;\n              args = _colorspace.ColorSpace.singletons.rgb.getRgb(args, 0);\n              break;\n\n            case _util.OPS.setFillColorN:\n              cs = stateManager.state.fillColorSpace;\n\n              if (cs.name === \"Pattern\") {\n                next(self.handleColorN(operatorList, _util.OPS.setFillColorN, args, cs, patterns, resources, task));\n                return;\n              }\n\n              args = cs.getRgb(args, 0);\n              fn = _util.OPS.setFillRGBColor;\n              break;\n\n            case _util.OPS.setStrokeColorN:\n              cs = stateManager.state.strokeColorSpace;\n\n              if (cs.name === \"Pattern\") {\n                next(self.handleColorN(operatorList, _util.OPS.setStrokeColorN, args, cs, patterns, resources, task));\n                return;\n              }\n\n              args = cs.getRgb(args, 0);\n              fn = _util.OPS.setStrokeRGBColor;\n              break;\n\n            case _util.OPS.shadingFill:\n              var shadingRes = resources.get(\"Shading\");\n\n              if (!shadingRes) {\n                throw new _util.FormatError(\"No shading resource found\");\n              }\n\n              var shading = shadingRes.get(args[0].name);\n\n              if (!shading) {\n                throw new _util.FormatError(\"No shading object found\");\n              }\n\n              var shadingFill = _pattern.Pattern.parseShading(shading, null, xref, resources, self.handler, self.pdfFunctionFactory);\n\n              var patternIR = shadingFill.getIR();\n              args = [patternIR];\n              fn = _util.OPS.shadingFill;\n              break;\n\n            case _util.OPS.setGState:\n              var dictName = args[0];\n              var extGState = resources.get(\"ExtGState\");\n\n              if (!(0, _primitives.isDict)(extGState) || !extGState.has(dictName.name)) {\n                break;\n              }\n\n              var gState = extGState.get(dictName.name);\n              next(self.setGState(resources, gState, operatorList, task, stateManager));\n              return;\n\n            case _util.OPS.moveTo:\n            case _util.OPS.lineTo:\n            case _util.OPS.curveTo:\n            case _util.OPS.curveTo2:\n            case _util.OPS.curveTo3:\n            case _util.OPS.closePath:\n            case _util.OPS.rectangle:\n              self.buildPath(operatorList, fn, args, parsingText);\n              continue;\n\n            case _util.OPS.markPoint:\n            case _util.OPS.markPointProps:\n            case _util.OPS.beginMarkedContent:\n            case _util.OPS.beginMarkedContentProps:\n            case _util.OPS.endMarkedContent:\n            case _util.OPS.beginCompat:\n            case _util.OPS.endCompat:\n              continue;\n\n            default:\n              if (args !== null) {\n                for (i = 0, ii = args.length; i < ii; i++) {\n                  if (args[i] instanceof _primitives.Dict) {\n                    break;\n                  }\n                }\n\n                if (i < ii) {\n                  (0, _util.warn)(\"getOperatorList - ignoring operator: \" + fn);\n                  continue;\n                }\n              }\n\n          }\n\n          operatorList.addOp(fn, args);\n        }\n\n        if (stop) {\n          next(deferred);\n          return;\n        }\n\n        closePendingRestoreOPS();\n        resolve();\n      }).catch(reason => {\n        if (reason instanceof _util.AbortException) {\n          return;\n        }\n\n        if (this.options.ignoreErrors) {\n          this.handler.send(\"UnsupportedFeature\", {\n            featureId: _util.UNSUPPORTED_FEATURES.unknown\n          });\n          (0, _util.warn)(`getOperatorList - ignoring errors during \"${task.name}\" ` + `task: \"${reason}\".`);\n          closePendingRestoreOPS();\n          return;\n        }\n\n        throw reason;\n      });\n    },\n\n    getTextContent({\n      stream,\n      task,\n      resources,\n      stateManager = null,\n      normalizeWhitespace = false,\n      combineTextItems = false,\n      sink,\n      seenStyles = Object.create(null)\n    }) {\n      resources = resources || _primitives.Dict.empty;\n      stateManager = stateManager || new StateManager(new TextState());\n      var WhitespaceRegexp = /\\s/g;\n      var textContent = {\n        items: [],\n        styles: Object.create(null)\n      };\n      var textContentItem = {\n        initialized: false,\n        str: [],\n        width: 0,\n        height: 0,\n        vertical: false,\n        lastAdvanceWidth: 0,\n        lastAdvanceHeight: 0,\n        textAdvanceScale: 0,\n        spaceWidth: 0,\n        fakeSpaceMin: Infinity,\n        fakeMultiSpaceMin: Infinity,\n        fakeMultiSpaceMax: -0,\n        textRunBreakAllowed: false,\n        transform: null,\n        fontName: null\n      };\n      var SPACE_FACTOR = 0.3;\n      var MULTI_SPACE_FACTOR = 1.5;\n      var MULTI_SPACE_FACTOR_MAX = 4;\n      var self = this;\n      var xref = this.xref;\n      var xobjs = null;\n      var skipEmptyXObjs = Object.create(null);\n      var preprocessor = new EvaluatorPreprocessor(stream, xref, stateManager);\n      var textState;\n\n      function ensureTextContentItem() {\n        if (textContentItem.initialized) {\n          return textContentItem;\n        }\n\n        var font = textState.font;\n\n        if (!(font.loadedName in seenStyles)) {\n          seenStyles[font.loadedName] = true;\n          textContent.styles[font.loadedName] = {\n            fontFamily: font.fallbackName,\n            ascent: font.ascent,\n            descent: font.descent,\n            vertical: !!font.vertical\n          };\n        }\n\n        textContentItem.fontName = font.loadedName;\n        var tsm = [textState.fontSize * textState.textHScale, 0, 0, textState.fontSize, 0, textState.textRise];\n\n        if (font.isType3Font && textState.fontSize <= 1 && !(0, _util.isArrayEqual)(textState.fontMatrix, _util.FONT_IDENTITY_MATRIX)) {\n          const glyphHeight = font.bbox[3] - font.bbox[1];\n\n          if (glyphHeight > 0) {\n            tsm[3] *= glyphHeight * textState.fontMatrix[3];\n          }\n        }\n\n        var trm = _util.Util.transform(textState.ctm, _util.Util.transform(textState.textMatrix, tsm));\n\n        textContentItem.transform = trm;\n\n        if (!font.vertical) {\n          textContentItem.width = 0;\n          textContentItem.height = Math.sqrt(trm[2] * trm[2] + trm[3] * trm[3]);\n          textContentItem.vertical = false;\n        } else {\n          textContentItem.width = Math.sqrt(trm[0] * trm[0] + trm[1] * trm[1]);\n          textContentItem.height = 0;\n          textContentItem.vertical = true;\n        }\n\n        var a = textState.textLineMatrix[0];\n        var b = textState.textLineMatrix[1];\n        var scaleLineX = Math.sqrt(a * a + b * b);\n        a = textState.ctm[0];\n        b = textState.ctm[1];\n        var scaleCtmX = Math.sqrt(a * a + b * b);\n        textContentItem.textAdvanceScale = scaleCtmX * scaleLineX;\n        textContentItem.lastAdvanceWidth = 0;\n        textContentItem.lastAdvanceHeight = 0;\n        var spaceWidth = font.spaceWidth / 1000 * textState.fontSize;\n\n        if (spaceWidth) {\n          textContentItem.spaceWidth = spaceWidth;\n          textContentItem.fakeSpaceMin = spaceWidth * SPACE_FACTOR;\n          textContentItem.fakeMultiSpaceMin = spaceWidth * MULTI_SPACE_FACTOR;\n          textContentItem.fakeMultiSpaceMax = spaceWidth * MULTI_SPACE_FACTOR_MAX;\n          textContentItem.textRunBreakAllowed = !font.isMonospace;\n        } else {\n          textContentItem.spaceWidth = 0;\n          textContentItem.fakeSpaceMin = Infinity;\n          textContentItem.fakeMultiSpaceMin = Infinity;\n          textContentItem.fakeMultiSpaceMax = 0;\n          textContentItem.textRunBreakAllowed = false;\n        }\n\n        textContentItem.initialized = true;\n        return textContentItem;\n      }\n\n      function replaceWhitespace(str) {\n        var i = 0,\n            ii = str.length,\n            code;\n\n        while (i < ii && (code = str.charCodeAt(i)) >= 0x20 && code <= 0x7f) {\n          i++;\n        }\n\n        return i < ii ? str.replace(WhitespaceRegexp, \" \") : str;\n      }\n\n      function runBidiTransform(textChunk) {\n        var str = textChunk.str.join(\"\");\n        var bidiResult = (0, _bidi.bidi)(str, -1, textChunk.vertical);\n        return {\n          str: normalizeWhitespace ? replaceWhitespace(bidiResult.str) : bidiResult.str,\n          dir: bidiResult.dir,\n          width: textChunk.width,\n          height: textChunk.height,\n          transform: textChunk.transform,\n          fontName: textChunk.fontName\n        };\n      }\n\n      function handleSetFont(fontName, fontRef) {\n        return self.loadFont(fontName, fontRef, resources).then(function (translated) {\n          textState.font = translated.font;\n          textState.fontMatrix = translated.font.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n        });\n      }\n\n      function buildTextContentItem(chars) {\n        var font = textState.font;\n        var textChunk = ensureTextContentItem();\n        var width = 0;\n        var height = 0;\n        var glyphs = font.charsToGlyphs(chars);\n\n        for (var i = 0; i < glyphs.length; i++) {\n          var glyph = glyphs[i];\n          var glyphWidth = null;\n\n          if (font.vertical && glyph.vmetric) {\n            glyphWidth = glyph.vmetric[0];\n          } else {\n            glyphWidth = glyph.width;\n          }\n\n          var glyphUnicode = glyph.unicode;\n          var NormalizedUnicodes = (0, _unicode.getNormalizedUnicodes)();\n\n          if (NormalizedUnicodes[glyphUnicode] !== undefined) {\n            glyphUnicode = NormalizedUnicodes[glyphUnicode];\n          }\n\n          glyphUnicode = (0, _unicode.reverseIfRtl)(glyphUnicode);\n          var charSpacing = textState.charSpacing;\n\n          if (glyph.isSpace) {\n            var wordSpacing = textState.wordSpacing;\n            charSpacing += wordSpacing;\n\n            if (wordSpacing > 0) {\n              addFakeSpaces(wordSpacing, textChunk.str);\n            }\n          }\n\n          var tx = 0;\n          var ty = 0;\n\n          if (!font.vertical) {\n            var w0 = glyphWidth * textState.fontMatrix[0];\n            tx = (w0 * textState.fontSize + charSpacing) * textState.textHScale;\n            width += tx;\n          } else {\n            var w1 = glyphWidth * textState.fontMatrix[0];\n            ty = w1 * textState.fontSize + charSpacing;\n            height += ty;\n          }\n\n          textState.translateTextMatrix(tx, ty);\n          textChunk.str.push(glyphUnicode);\n        }\n\n        if (!font.vertical) {\n          textChunk.lastAdvanceWidth = width;\n          textChunk.width += width;\n        } else {\n          textChunk.lastAdvanceHeight = height;\n          textChunk.height += Math.abs(height);\n        }\n\n        return textChunk;\n      }\n\n      function addFakeSpaces(width, strBuf) {\n        if (width < textContentItem.fakeSpaceMin) {\n          return;\n        }\n\n        if (width < textContentItem.fakeMultiSpaceMin) {\n          strBuf.push(\" \");\n          return;\n        }\n\n        var fakeSpaces = Math.round(width / textContentItem.spaceWidth);\n\n        while (fakeSpaces-- > 0) {\n          strBuf.push(\" \");\n        }\n      }\n\n      function flushTextContentItem() {\n        if (!textContentItem.initialized) {\n          return;\n        }\n\n        if (!textContentItem.vertical) {\n          textContentItem.width *= textContentItem.textAdvanceScale;\n        } else {\n          textContentItem.height *= textContentItem.textAdvanceScale;\n        }\n\n        textContent.items.push(runBidiTransform(textContentItem));\n        textContentItem.initialized = false;\n        textContentItem.str.length = 0;\n      }\n\n      function enqueueChunk() {\n        const length = textContent.items.length;\n\n        if (length > 0) {\n          sink.enqueue(textContent, length);\n          textContent.items = [];\n          textContent.styles = Object.create(null);\n        }\n      }\n\n      var timeSlotManager = new TimeSlotManager();\n      return new Promise(function promiseBody(resolve, reject) {\n        const next = function (promise) {\n          enqueueChunk();\n          Promise.all([promise, sink.ready]).then(function () {\n            try {\n              promiseBody(resolve, reject);\n            } catch (ex) {\n              reject(ex);\n            }\n          }, reject);\n        };\n\n        task.ensureNotTerminated();\n        timeSlotManager.reset();\n        var stop,\n            operation = {},\n            args = [];\n\n        while (!(stop = timeSlotManager.check())) {\n          args.length = 0;\n          operation.args = args;\n\n          if (!preprocessor.read(operation)) {\n            break;\n          }\n\n          textState = stateManager.state;\n          var fn = operation.fn;\n          args = operation.args;\n          var advance, diff;\n\n          switch (fn | 0) {\n            case _util.OPS.setFont:\n              var fontNameArg = args[0].name,\n                  fontSizeArg = args[1];\n\n              if (textState.font && fontNameArg === textState.fontName && fontSizeArg === textState.fontSize) {\n                break;\n              }\n\n              flushTextContentItem();\n              textState.fontName = fontNameArg;\n              textState.fontSize = fontSizeArg;\n              next(handleSetFont(fontNameArg, null));\n              return;\n\n            case _util.OPS.setTextRise:\n              flushTextContentItem();\n              textState.textRise = args[0];\n              break;\n\n            case _util.OPS.setHScale:\n              flushTextContentItem();\n              textState.textHScale = args[0] / 100;\n              break;\n\n            case _util.OPS.setLeading:\n              flushTextContentItem();\n              textState.leading = args[0];\n              break;\n\n            case _util.OPS.moveText:\n              var isSameTextLine = !textState.font ? false : (textState.font.vertical ? args[0] : args[1]) === 0;\n              advance = args[0] - args[1];\n\n              if (combineTextItems && isSameTextLine && textContentItem.initialized && advance > 0 && advance <= textContentItem.fakeMultiSpaceMax) {\n                textState.translateTextLineMatrix(args[0], args[1]);\n                textContentItem.width += args[0] - textContentItem.lastAdvanceWidth;\n                textContentItem.height += args[1] - textContentItem.lastAdvanceHeight;\n                diff = args[0] - textContentItem.lastAdvanceWidth - (args[1] - textContentItem.lastAdvanceHeight);\n                addFakeSpaces(diff, textContentItem.str);\n                break;\n              }\n\n              flushTextContentItem();\n              textState.translateTextLineMatrix(args[0], args[1]);\n              textState.textMatrix = textState.textLineMatrix.slice();\n              break;\n\n            case _util.OPS.setLeadingMoveText:\n              flushTextContentItem();\n              textState.leading = -args[1];\n              textState.translateTextLineMatrix(args[0], args[1]);\n              textState.textMatrix = textState.textLineMatrix.slice();\n              break;\n\n            case _util.OPS.nextLine:\n              flushTextContentItem();\n              textState.carriageReturn();\n              break;\n\n            case _util.OPS.setTextMatrix:\n              advance = textState.calcTextLineMatrixAdvance(args[0], args[1], args[2], args[3], args[4], args[5]);\n\n              if (combineTextItems && advance !== null && textContentItem.initialized && advance.value > 0 && advance.value <= textContentItem.fakeMultiSpaceMax) {\n                textState.translateTextLineMatrix(advance.width, advance.height);\n                textContentItem.width += advance.width - textContentItem.lastAdvanceWidth;\n                textContentItem.height += advance.height - textContentItem.lastAdvanceHeight;\n                diff = advance.width - textContentItem.lastAdvanceWidth - (advance.height - textContentItem.lastAdvanceHeight);\n                addFakeSpaces(diff, textContentItem.str);\n                break;\n              }\n\n              flushTextContentItem();\n              textState.setTextMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);\n              textState.setTextLineMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);\n              break;\n\n            case _util.OPS.setCharSpacing:\n              textState.charSpacing = args[0];\n              break;\n\n            case _util.OPS.setWordSpacing:\n              textState.wordSpacing = args[0];\n              break;\n\n            case _util.OPS.beginText:\n              flushTextContentItem();\n              textState.textMatrix = _util.IDENTITY_MATRIX.slice();\n              textState.textLineMatrix = _util.IDENTITY_MATRIX.slice();\n              break;\n\n            case _util.OPS.showSpacedText:\n              if (!stateManager.state.font) {\n                self.ensureStateFont(stateManager.state);\n                continue;\n              }\n\n              var items = args[0];\n              var offset;\n\n              for (var j = 0, jj = items.length; j < jj; j++) {\n                if (typeof items[j] === \"string\") {\n                  buildTextContentItem(items[j]);\n                } else if ((0, _util.isNum)(items[j])) {\n                  ensureTextContentItem();\n                  advance = items[j] * textState.fontSize / 1000;\n                  var breakTextRun = false;\n\n                  if (textState.font.vertical) {\n                    offset = advance;\n                    textState.translateTextMatrix(0, offset);\n                    breakTextRun = textContentItem.textRunBreakAllowed && advance > textContentItem.fakeMultiSpaceMax;\n\n                    if (!breakTextRun) {\n                      textContentItem.height += offset;\n                    }\n                  } else {\n                    advance = -advance;\n                    offset = advance * textState.textHScale;\n                    textState.translateTextMatrix(offset, 0);\n                    breakTextRun = textContentItem.textRunBreakAllowed && advance > textContentItem.fakeMultiSpaceMax;\n\n                    if (!breakTextRun) {\n                      textContentItem.width += offset;\n                    }\n                  }\n\n                  if (breakTextRun) {\n                    flushTextContentItem();\n                  } else if (advance > 0) {\n                    addFakeSpaces(advance, textContentItem.str);\n                  }\n                }\n              }\n\n              break;\n\n            case _util.OPS.showText:\n              if (!stateManager.state.font) {\n                self.ensureStateFont(stateManager.state);\n                continue;\n              }\n\n              buildTextContentItem(args[0]);\n              break;\n\n            case _util.OPS.nextLineShowText:\n              if (!stateManager.state.font) {\n                self.ensureStateFont(stateManager.state);\n                continue;\n              }\n\n              flushTextContentItem();\n              textState.carriageReturn();\n              buildTextContentItem(args[0]);\n              break;\n\n            case _util.OPS.nextLineSetSpacingShowText:\n              if (!stateManager.state.font) {\n                self.ensureStateFont(stateManager.state);\n                continue;\n              }\n\n              flushTextContentItem();\n              textState.wordSpacing = args[0];\n              textState.charSpacing = args[1];\n              textState.carriageReturn();\n              buildTextContentItem(args[2]);\n              break;\n\n            case _util.OPS.paintXObject:\n              flushTextContentItem();\n\n              if (!xobjs) {\n                xobjs = resources.get(\"XObject\") || _primitives.Dict.empty;\n              }\n\n              var name = args[0].name;\n\n              if (name && skipEmptyXObjs[name] !== undefined) {\n                break;\n              }\n\n              next(new Promise(function (resolveXObject, rejectXObject) {\n                if (!name) {\n                  throw new _util.FormatError(\"XObject must be referred to by name.\");\n                }\n\n                const xobj = xobjs.get(name);\n\n                if (!xobj) {\n                  resolveXObject();\n                  return;\n                }\n\n                if (!(0, _primitives.isStream)(xobj)) {\n                  throw new _util.FormatError(\"XObject should be a stream\");\n                }\n\n                const type = xobj.dict.get(\"Subtype\");\n\n                if (!(0, _primitives.isName)(type)) {\n                  throw new _util.FormatError(\"XObject should have a Name subtype\");\n                }\n\n                if (type.name !== \"Form\") {\n                  skipEmptyXObjs[name] = true;\n                  resolveXObject();\n                  return;\n                }\n\n                const currentState = stateManager.state.clone();\n                const xObjStateManager = new StateManager(currentState);\n                const matrix = xobj.dict.getArray(\"Matrix\");\n\n                if (Array.isArray(matrix) && matrix.length === 6) {\n                  xObjStateManager.transform(matrix);\n                }\n\n                enqueueChunk();\n                const sinkWrapper = {\n                  enqueueInvoked: false,\n\n                  enqueue(chunk, size) {\n                    this.enqueueInvoked = true;\n                    sink.enqueue(chunk, size);\n                  },\n\n                  get desiredSize() {\n                    return sink.desiredSize;\n                  },\n\n                  get ready() {\n                    return sink.ready;\n                  }\n\n                };\n                self.getTextContent({\n                  stream: xobj,\n                  task,\n                  resources: xobj.dict.get(\"Resources\") || resources,\n                  stateManager: xObjStateManager,\n                  normalizeWhitespace,\n                  combineTextItems,\n                  sink: sinkWrapper,\n                  seenStyles\n                }).then(function () {\n                  if (!sinkWrapper.enqueueInvoked) {\n                    skipEmptyXObjs[name] = true;\n                  }\n\n                  resolveXObject();\n                }, rejectXObject);\n              }).catch(function (reason) {\n                if (reason instanceof _util.AbortException) {\n                  return;\n                }\n\n                if (self.options.ignoreErrors) {\n                  (0, _util.warn)(`getTextContent - ignoring XObject: \"${reason}\".`);\n                  return;\n                }\n\n                throw reason;\n              }));\n              return;\n\n            case _util.OPS.setGState:\n              flushTextContentItem();\n              var dictName = args[0];\n              var extGState = resources.get(\"ExtGState\");\n\n              if (!(0, _primitives.isDict)(extGState) || !(0, _primitives.isName)(dictName)) {\n                break;\n              }\n\n              var gState = extGState.get(dictName.name);\n\n              if (!(0, _primitives.isDict)(gState)) {\n                break;\n              }\n\n              var gStateFont = gState.get(\"Font\");\n\n              if (gStateFont) {\n                textState.fontName = null;\n                textState.fontSize = gStateFont[1];\n                next(handleSetFont(null, gStateFont[0]));\n                return;\n              }\n\n              break;\n          }\n\n          if (textContent.items.length >= sink.desiredSize) {\n            stop = true;\n            break;\n          }\n        }\n\n        if (stop) {\n          next(deferred);\n          return;\n        }\n\n        flushTextContentItem();\n        enqueueChunk();\n        resolve();\n      }).catch(reason => {\n        if (reason instanceof _util.AbortException) {\n          return;\n        }\n\n        if (this.options.ignoreErrors) {\n          (0, _util.warn)(`getTextContent - ignoring errors during \"${task.name}\" ` + `task: \"${reason}\".`);\n          flushTextContentItem();\n          enqueueChunk();\n          return;\n        }\n\n        throw reason;\n      });\n    },\n\n    extractDataStructures: function PartialEvaluator_extractDataStructures(dict, baseDict, properties) {\n      const xref = this.xref;\n      let cidToGidBytes;\n      var toUnicode = dict.get(\"ToUnicode\") || baseDict.get(\"ToUnicode\");\n      var toUnicodePromise = toUnicode ? this.readToUnicode(toUnicode) : Promise.resolve(undefined);\n\n      if (properties.composite) {\n        var cidSystemInfo = dict.get(\"CIDSystemInfo\");\n\n        if ((0, _primitives.isDict)(cidSystemInfo)) {\n          properties.cidSystemInfo = {\n            registry: (0, _util.stringToPDFString)(cidSystemInfo.get(\"Registry\")),\n            ordering: (0, _util.stringToPDFString)(cidSystemInfo.get(\"Ordering\")),\n            supplement: cidSystemInfo.get(\"Supplement\")\n          };\n        }\n\n        var cidToGidMap = dict.get(\"CIDToGIDMap\");\n\n        if ((0, _primitives.isStream)(cidToGidMap)) {\n          cidToGidBytes = cidToGidMap.getBytes();\n        }\n      }\n\n      var differences = [];\n      var baseEncodingName = null;\n      var encoding;\n\n      if (dict.has(\"Encoding\")) {\n        encoding = dict.get(\"Encoding\");\n\n        if ((0, _primitives.isDict)(encoding)) {\n          baseEncodingName = encoding.get(\"BaseEncoding\");\n          baseEncodingName = (0, _primitives.isName)(baseEncodingName) ? baseEncodingName.name : null;\n\n          if (encoding.has(\"Differences\")) {\n            var diffEncoding = encoding.get(\"Differences\");\n            var index = 0;\n\n            for (var j = 0, jj = diffEncoding.length; j < jj; j++) {\n              var data = xref.fetchIfRef(diffEncoding[j]);\n\n              if ((0, _util.isNum)(data)) {\n                index = data;\n              } else if ((0, _primitives.isName)(data)) {\n                differences[index++] = data.name;\n              } else {\n                throw new _util.FormatError(`Invalid entry in 'Differences' array: ${data}`);\n              }\n            }\n          }\n        } else if ((0, _primitives.isName)(encoding)) {\n          baseEncodingName = encoding.name;\n        } else {\n          throw new _util.FormatError(\"Encoding is not a Name nor a Dict\");\n        }\n\n        if (baseEncodingName !== \"MacRomanEncoding\" && baseEncodingName !== \"MacExpertEncoding\" && baseEncodingName !== \"WinAnsiEncoding\") {\n          baseEncodingName = null;\n        }\n      }\n\n      if (baseEncodingName) {\n        properties.defaultEncoding = (0, _encodings.getEncoding)(baseEncodingName).slice();\n      } else {\n        var isSymbolicFont = !!(properties.flags & _fonts.FontFlags.Symbolic);\n        var isNonsymbolicFont = !!(properties.flags & _fonts.FontFlags.Nonsymbolic);\n        encoding = _encodings.StandardEncoding;\n\n        if (properties.type === \"TrueType\" && !isNonsymbolicFont) {\n          encoding = _encodings.WinAnsiEncoding;\n        }\n\n        if (isSymbolicFont) {\n          encoding = _encodings.MacRomanEncoding;\n\n          if (!properties.file) {\n            if (/Symbol/i.test(properties.name)) {\n              encoding = _encodings.SymbolSetEncoding;\n            } else if (/Dingbats|Wingdings/i.test(properties.name)) {\n              encoding = _encodings.ZapfDingbatsEncoding;\n            }\n          }\n        }\n\n        properties.defaultEncoding = encoding;\n      }\n\n      properties.differences = differences;\n      properties.baseEncodingName = baseEncodingName;\n      properties.hasEncoding = !!baseEncodingName || differences.length > 0;\n      properties.dict = dict;\n      return toUnicodePromise.then(toUnicode => {\n        properties.toUnicode = toUnicode;\n        return this.buildToUnicode(properties);\n      }).then(toUnicode => {\n        properties.toUnicode = toUnicode;\n\n        if (cidToGidBytes) {\n          properties.cidToGidMap = this.readCidToGidMap(cidToGidBytes, toUnicode);\n        }\n\n        return properties;\n      });\n    },\n\n    _buildSimpleFontToUnicode(properties, forceGlyphs = false) {\n      (0, _util.assert)(!properties.composite, \"Must be a simple font.\");\n      const toUnicode = [];\n      const encoding = properties.defaultEncoding.slice();\n      const baseEncodingName = properties.baseEncodingName;\n      const differences = properties.differences;\n\n      for (const charcode in differences) {\n        const glyphName = differences[charcode];\n\n        if (glyphName === \".notdef\") {\n          continue;\n        }\n\n        encoding[charcode] = glyphName;\n      }\n\n      const glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n\n      for (const charcode in encoding) {\n        let glyphName = encoding[charcode];\n\n        if (glyphName === \"\") {\n          continue;\n        } else if (glyphsUnicodeMap[glyphName] === undefined) {\n          let code = 0;\n\n          switch (glyphName[0]) {\n            case \"G\":\n              if (glyphName.length === 3) {\n                code = parseInt(glyphName.substring(1), 16);\n              }\n\n              break;\n\n            case \"g\":\n              if (glyphName.length === 5) {\n                code = parseInt(glyphName.substring(1), 16);\n              }\n\n              break;\n\n            case \"C\":\n            case \"c\":\n              if (glyphName.length >= 3 && glyphName.length <= 4) {\n                const codeStr = glyphName.substring(1);\n\n                if (forceGlyphs) {\n                  code = parseInt(codeStr, 16);\n                  break;\n                }\n\n                code = +codeStr;\n\n                if (Number.isNaN(code) && Number.isInteger(parseInt(codeStr, 16))) {\n                  return this._buildSimpleFontToUnicode(properties, true);\n                }\n              }\n\n              break;\n\n            default:\n              const unicode = (0, _unicode.getUnicodeForGlyph)(glyphName, glyphsUnicodeMap);\n\n              if (unicode !== -1) {\n                code = unicode;\n              }\n\n          }\n\n          if (code > 0 && Number.isInteger(code)) {\n            if (baseEncodingName && code === +charcode) {\n              const baseEncoding = (0, _encodings.getEncoding)(baseEncodingName);\n\n              if (baseEncoding && (glyphName = baseEncoding[charcode])) {\n                toUnicode[charcode] = String.fromCharCode(glyphsUnicodeMap[glyphName]);\n                continue;\n              }\n            }\n\n            toUnicode[charcode] = String.fromCodePoint(code);\n          }\n\n          continue;\n        }\n\n        toUnicode[charcode] = String.fromCharCode(glyphsUnicodeMap[glyphName]);\n      }\n\n      return new _fonts.ToUnicodeMap(toUnicode);\n    },\n\n    buildToUnicode(properties) {\n      properties.hasIncludedToUnicodeMap = !!properties.toUnicode && properties.toUnicode.length > 0;\n\n      if (properties.hasIncludedToUnicodeMap) {\n        if (!properties.composite && properties.hasEncoding) {\n          properties.fallbackToUnicode = this._buildSimpleFontToUnicode(properties);\n        }\n\n        return Promise.resolve(properties.toUnicode);\n      }\n\n      if (!properties.composite) {\n        return Promise.resolve(this._buildSimpleFontToUnicode(properties));\n      }\n\n      if (properties.composite && (properties.cMap.builtInCMap && !(properties.cMap instanceof _cmap.IdentityCMap) || properties.cidSystemInfo.registry === \"Adobe\" && (properties.cidSystemInfo.ordering === \"GB1\" || properties.cidSystemInfo.ordering === \"CNS1\" || properties.cidSystemInfo.ordering === \"Japan1\" || properties.cidSystemInfo.ordering === \"Korea1\"))) {\n        const registry = properties.cidSystemInfo.registry;\n        const ordering = properties.cidSystemInfo.ordering;\n\n        const ucs2CMapName = _primitives.Name.get(registry + \"-\" + ordering + \"-UCS2\");\n\n        return _cmap.CMapFactory.create({\n          encoding: ucs2CMapName,\n          fetchBuiltInCMap: this.fetchBuiltInCMap,\n          useCMap: null\n        }).then(function (ucs2CMap) {\n          const cMap = properties.cMap;\n          const toUnicode = [];\n          cMap.forEach(function (charcode, cid) {\n            if (cid > 0xffff) {\n              throw new _util.FormatError(\"Max size of CID is 65,535\");\n            }\n\n            const ucs2 = ucs2CMap.lookup(cid);\n\n            if (ucs2) {\n              toUnicode[charcode] = String.fromCharCode((ucs2.charCodeAt(0) << 8) + ucs2.charCodeAt(1));\n            }\n          });\n          return new _fonts.ToUnicodeMap(toUnicode);\n        });\n      }\n\n      return Promise.resolve(new _fonts.IdentityToUnicodeMap(properties.firstChar, properties.lastChar));\n    },\n\n    readToUnicode: function PartialEvaluator_readToUnicode(toUnicode) {\n      var cmapObj = toUnicode;\n\n      if ((0, _primitives.isName)(cmapObj)) {\n        return _cmap.CMapFactory.create({\n          encoding: cmapObj,\n          fetchBuiltInCMap: this.fetchBuiltInCMap,\n          useCMap: null\n        }).then(function (cmap) {\n          if (cmap instanceof _cmap.IdentityCMap) {\n            return new _fonts.IdentityToUnicodeMap(0, 0xffff);\n          }\n\n          return new _fonts.ToUnicodeMap(cmap.getMap());\n        });\n      } else if ((0, _primitives.isStream)(cmapObj)) {\n        return _cmap.CMapFactory.create({\n          encoding: cmapObj,\n          fetchBuiltInCMap: this.fetchBuiltInCMap,\n          useCMap: null\n        }).then(function (cmap) {\n          if (cmap instanceof _cmap.IdentityCMap) {\n            return new _fonts.IdentityToUnicodeMap(0, 0xffff);\n          }\n\n          var map = new Array(cmap.length);\n          cmap.forEach(function (charCode, token) {\n            var str = [];\n\n            for (var k = 0; k < token.length; k += 2) {\n              var w1 = token.charCodeAt(k) << 8 | token.charCodeAt(k + 1);\n\n              if ((w1 & 0xf800) !== 0xd800) {\n                str.push(w1);\n                continue;\n              }\n\n              k += 2;\n              var w2 = token.charCodeAt(k) << 8 | token.charCodeAt(k + 1);\n              str.push(((w1 & 0x3ff) << 10) + (w2 & 0x3ff) + 0x10000);\n            }\n\n            map[charCode] = String.fromCodePoint.apply(String, str);\n          });\n          return new _fonts.ToUnicodeMap(map);\n        }, reason => {\n          if (reason instanceof _util.AbortException) {\n            return null;\n          }\n\n          if (this.options.ignoreErrors) {\n            this.handler.send(\"UnsupportedFeature\", {\n              featureId: _util.UNSUPPORTED_FEATURES.font\n            });\n            (0, _util.warn)(`readToUnicode - ignoring ToUnicode data: \"${reason}\".`);\n            return null;\n          }\n\n          throw reason;\n        });\n      }\n\n      return Promise.resolve(null);\n    },\n\n    readCidToGidMap(glyphsData, toUnicode) {\n      var result = [];\n\n      for (var j = 0, jj = glyphsData.length; j < jj; j++) {\n        var glyphID = glyphsData[j++] << 8 | glyphsData[j];\n        const code = j >> 1;\n\n        if (glyphID === 0 && !toUnicode.has(code)) {\n          continue;\n        }\n\n        result[code] = glyphID;\n      }\n\n      return result;\n    },\n\n    extractWidths: function PartialEvaluator_extractWidths(dict, descriptor, properties) {\n      var xref = this.xref;\n      var glyphsWidths = [];\n      var defaultWidth = 0;\n      var glyphsVMetrics = [];\n      var defaultVMetrics;\n      var i, ii, j, jj, start, code, widths;\n\n      if (properties.composite) {\n        defaultWidth = dict.has(\"DW\") ? dict.get(\"DW\") : 1000;\n        widths = dict.get(\"W\");\n\n        if (widths) {\n          for (i = 0, ii = widths.length; i < ii; i++) {\n            start = xref.fetchIfRef(widths[i++]);\n            code = xref.fetchIfRef(widths[i]);\n\n            if (Array.isArray(code)) {\n              for (j = 0, jj = code.length; j < jj; j++) {\n                glyphsWidths[start++] = xref.fetchIfRef(code[j]);\n              }\n            } else {\n              var width = xref.fetchIfRef(widths[++i]);\n\n              for (j = start; j <= code; j++) {\n                glyphsWidths[j] = width;\n              }\n            }\n          }\n        }\n\n        if (properties.vertical) {\n          var vmetrics = dict.getArray(\"DW2\") || [880, -1000];\n          defaultVMetrics = [vmetrics[1], defaultWidth * 0.5, vmetrics[0]];\n          vmetrics = dict.get(\"W2\");\n\n          if (vmetrics) {\n            for (i = 0, ii = vmetrics.length; i < ii; i++) {\n              start = xref.fetchIfRef(vmetrics[i++]);\n              code = xref.fetchIfRef(vmetrics[i]);\n\n              if (Array.isArray(code)) {\n                for (j = 0, jj = code.length; j < jj; j++) {\n                  glyphsVMetrics[start++] = [xref.fetchIfRef(code[j++]), xref.fetchIfRef(code[j++]), xref.fetchIfRef(code[j])];\n                }\n              } else {\n                var vmetric = [xref.fetchIfRef(vmetrics[++i]), xref.fetchIfRef(vmetrics[++i]), xref.fetchIfRef(vmetrics[++i])];\n\n                for (j = start; j <= code; j++) {\n                  glyphsVMetrics[j] = vmetric;\n                }\n              }\n            }\n          }\n        }\n      } else {\n        var firstChar = properties.firstChar;\n        widths = dict.get(\"Widths\");\n\n        if (widths) {\n          j = firstChar;\n\n          for (i = 0, ii = widths.length; i < ii; i++) {\n            glyphsWidths[j++] = xref.fetchIfRef(widths[i]);\n          }\n\n          defaultWidth = parseFloat(descriptor.get(\"MissingWidth\")) || 0;\n        } else {\n          var baseFontName = dict.get(\"BaseFont\");\n\n          if ((0, _primitives.isName)(baseFontName)) {\n            var metrics = this.getBaseFontMetrics(baseFontName.name);\n            glyphsWidths = this.buildCharCodeToWidth(metrics.widths, properties);\n            defaultWidth = metrics.defaultWidth;\n          }\n        }\n      }\n\n      var isMonospace = true;\n      var firstWidth = defaultWidth;\n\n      for (var glyph in glyphsWidths) {\n        var glyphWidth = glyphsWidths[glyph];\n\n        if (!glyphWidth) {\n          continue;\n        }\n\n        if (!firstWidth) {\n          firstWidth = glyphWidth;\n          continue;\n        }\n\n        if (firstWidth !== glyphWidth) {\n          isMonospace = false;\n          break;\n        }\n      }\n\n      if (isMonospace) {\n        properties.flags |= _fonts.FontFlags.FixedPitch;\n      }\n\n      properties.defaultWidth = defaultWidth;\n      properties.widths = glyphsWidths;\n      properties.defaultVMetrics = defaultVMetrics;\n      properties.vmetrics = glyphsVMetrics;\n    },\n    isSerifFont: function PartialEvaluator_isSerifFont(baseFontName) {\n      var fontNameWoStyle = baseFontName.split(\"-\")[0];\n      return fontNameWoStyle in (0, _standard_fonts.getSerifFonts)() || fontNameWoStyle.search(/serif/gi) !== -1;\n    },\n    getBaseFontMetrics: function PartialEvaluator_getBaseFontMetrics(name) {\n      var defaultWidth = 0;\n      var widths = [];\n      var monospace = false;\n      var stdFontMap = (0, _standard_fonts.getStdFontMap)();\n      var lookupName = stdFontMap[name] || name;\n      var Metrics = (0, _metrics.getMetrics)();\n\n      if (!(lookupName in Metrics)) {\n        if (this.isSerifFont(name)) {\n          lookupName = \"Times-Roman\";\n        } else {\n          lookupName = \"Helvetica\";\n        }\n      }\n\n      var glyphWidths = Metrics[lookupName];\n\n      if ((0, _util.isNum)(glyphWidths)) {\n        defaultWidth = glyphWidths;\n        monospace = true;\n      } else {\n        widths = glyphWidths();\n      }\n\n      return {\n        defaultWidth,\n        monospace,\n        widths\n      };\n    },\n    buildCharCodeToWidth: function PartialEvaluator_bulildCharCodeToWidth(widthsByGlyphName, properties) {\n      var widths = Object.create(null);\n      var differences = properties.differences;\n      var encoding = properties.defaultEncoding;\n\n      for (var charCode = 0; charCode < 256; charCode++) {\n        if (charCode in differences && widthsByGlyphName[differences[charCode]]) {\n          widths[charCode] = widthsByGlyphName[differences[charCode]];\n          continue;\n        }\n\n        if (charCode in encoding && widthsByGlyphName[encoding[charCode]]) {\n          widths[charCode] = widthsByGlyphName[encoding[charCode]];\n          continue;\n        }\n      }\n\n      return widths;\n    },\n    preEvaluateFont: function PartialEvaluator_preEvaluateFont(dict) {\n      var baseDict = dict;\n      var type = dict.get(\"Subtype\");\n\n      if (!(0, _primitives.isName)(type)) {\n        throw new _util.FormatError(\"invalid font Subtype\");\n      }\n\n      var composite = false;\n      var uint8array;\n\n      if (type.name === \"Type0\") {\n        var df = dict.get(\"DescendantFonts\");\n\n        if (!df) {\n          throw new _util.FormatError(\"Descendant fonts are not specified\");\n        }\n\n        dict = Array.isArray(df) ? this.xref.fetchIfRef(df[0]) : df;\n        type = dict.get(\"Subtype\");\n\n        if (!(0, _primitives.isName)(type)) {\n          throw new _util.FormatError(\"invalid font Subtype\");\n        }\n\n        composite = true;\n      }\n\n      var descriptor = dict.get(\"FontDescriptor\");\n\n      if (descriptor) {\n        var hash = new _murmurhash.MurmurHash3_64();\n        var encoding = baseDict.getRaw(\"Encoding\");\n\n        if ((0, _primitives.isName)(encoding)) {\n          hash.update(encoding.name);\n        } else if ((0, _primitives.isRef)(encoding)) {\n          hash.update(encoding.toString());\n        } else if ((0, _primitives.isDict)(encoding)) {\n          var keys = encoding.getKeys();\n\n          for (var i = 0, ii = keys.length; i < ii; i++) {\n            var entry = encoding.getRaw(keys[i]);\n\n            if ((0, _primitives.isName)(entry)) {\n              hash.update(entry.name);\n            } else if ((0, _primitives.isRef)(entry)) {\n              hash.update(entry.toString());\n            } else if (Array.isArray(entry)) {\n              var diffLength = entry.length,\n                  diffBuf = new Array(diffLength);\n\n              for (var j = 0; j < diffLength; j++) {\n                var diffEntry = entry[j];\n\n                if ((0, _primitives.isName)(diffEntry)) {\n                  diffBuf[j] = diffEntry.name;\n                } else if ((0, _util.isNum)(diffEntry) || (0, _primitives.isRef)(diffEntry)) {\n                  diffBuf[j] = diffEntry.toString();\n                }\n              }\n\n              hash.update(diffBuf.join());\n            }\n          }\n        }\n\n        const firstChar = dict.get(\"FirstChar\") || 0;\n        const lastChar = dict.get(\"LastChar\") || (composite ? 0xffff : 0xff);\n        hash.update(`${firstChar}-${lastChar}`);\n        var toUnicode = dict.get(\"ToUnicode\") || baseDict.get(\"ToUnicode\");\n\n        if ((0, _primitives.isStream)(toUnicode)) {\n          var stream = toUnicode.str || toUnicode;\n          uint8array = stream.buffer ? new Uint8Array(stream.buffer.buffer, 0, stream.bufferLength) : new Uint8Array(stream.bytes.buffer, stream.start, stream.end - stream.start);\n          hash.update(uint8array);\n        } else if ((0, _primitives.isName)(toUnicode)) {\n          hash.update(toUnicode.name);\n        }\n\n        var widths = dict.get(\"Widths\") || baseDict.get(\"Widths\");\n\n        if (widths) {\n          uint8array = new Uint8Array(new Uint32Array(widths).buffer);\n          hash.update(uint8array);\n        }\n      }\n\n      return {\n        descriptor,\n        dict,\n        baseDict,\n        composite,\n        type: type.name,\n        hash: hash ? hash.hexdigest() : \"\"\n      };\n    },\n    translateFont: function PartialEvaluator_translateFont(preEvaluatedFont) {\n      var baseDict = preEvaluatedFont.baseDict;\n      var dict = preEvaluatedFont.dict;\n      var composite = preEvaluatedFont.composite;\n      var descriptor = preEvaluatedFont.descriptor;\n      var type = preEvaluatedFont.type;\n      var maxCharIndex = composite ? 0xffff : 0xff;\n      var properties;\n      const firstChar = dict.get(\"FirstChar\") || 0;\n      const lastChar = dict.get(\"LastChar\") || maxCharIndex;\n\n      if (!descriptor) {\n        if (type === \"Type3\") {\n          descriptor = new _primitives.Dict(null);\n          descriptor.set(\"FontName\", _primitives.Name.get(type));\n          descriptor.set(\"FontBBox\", dict.getArray(\"FontBBox\") || [0, 0, 0, 0]);\n        } else {\n          var baseFontName = dict.get(\"BaseFont\");\n\n          if (!(0, _primitives.isName)(baseFontName)) {\n            throw new _util.FormatError(\"Base font is not specified\");\n          }\n\n          baseFontName = baseFontName.name.replace(/[,_]/g, \"-\");\n          var metrics = this.getBaseFontMetrics(baseFontName);\n          var fontNameWoStyle = baseFontName.split(\"-\")[0];\n          var flags = (this.isSerifFont(fontNameWoStyle) ? _fonts.FontFlags.Serif : 0) | (metrics.monospace ? _fonts.FontFlags.FixedPitch : 0) | ((0, _standard_fonts.getSymbolsFonts)()[fontNameWoStyle] ? _fonts.FontFlags.Symbolic : _fonts.FontFlags.Nonsymbolic);\n          properties = {\n            type,\n            name: baseFontName,\n            widths: metrics.widths,\n            defaultWidth: metrics.defaultWidth,\n            flags,\n            firstChar,\n            lastChar\n          };\n          const widths = dict.get(\"Widths\");\n          return this.extractDataStructures(dict, dict, properties).then(properties => {\n            if (widths) {\n              const glyphWidths = [];\n              let j = firstChar;\n\n              for (let i = 0, ii = widths.length; i < ii; i++) {\n                glyphWidths[j++] = this.xref.fetchIfRef(widths[i]);\n              }\n\n              properties.widths = glyphWidths;\n            } else {\n              properties.widths = this.buildCharCodeToWidth(metrics.widths, properties);\n            }\n\n            return new _fonts.Font(baseFontName, null, properties);\n          });\n        }\n      }\n\n      var fontName = descriptor.get(\"FontName\");\n      var baseFont = dict.get(\"BaseFont\");\n\n      if ((0, _util.isString)(fontName)) {\n        fontName = _primitives.Name.get(fontName);\n      }\n\n      if ((0, _util.isString)(baseFont)) {\n        baseFont = _primitives.Name.get(baseFont);\n      }\n\n      if (type !== \"Type3\") {\n        var fontNameStr = fontName && fontName.name;\n        var baseFontStr = baseFont && baseFont.name;\n\n        if (fontNameStr !== baseFontStr) {\n          (0, _util.info)(`The FontDescriptor\\'s FontName is \"${fontNameStr}\" but ` + `should be the same as the Font\\'s BaseFont \"${baseFontStr}\".`);\n\n          if (fontNameStr && baseFontStr && baseFontStr.startsWith(fontNameStr)) {\n            fontName = baseFont;\n          }\n        }\n      }\n\n      fontName = fontName || baseFont;\n\n      if (!(0, _primitives.isName)(fontName)) {\n        throw new _util.FormatError(\"invalid font name\");\n      }\n\n      var fontFile = descriptor.get(\"FontFile\", \"FontFile2\", \"FontFile3\");\n\n      if (fontFile) {\n        if (fontFile.dict) {\n          var subtype = fontFile.dict.get(\"Subtype\");\n\n          if (subtype) {\n            subtype = subtype.name;\n          }\n\n          var length1 = fontFile.dict.get(\"Length1\");\n          var length2 = fontFile.dict.get(\"Length2\");\n          var length3 = fontFile.dict.get(\"Length3\");\n        }\n      }\n\n      properties = {\n        type,\n        name: fontName.name,\n        subtype,\n        file: fontFile,\n        length1,\n        length2,\n        length3,\n        loadedName: baseDict.loadedName,\n        composite,\n        wideChars: composite,\n        fixedPitch: false,\n        fontMatrix: dict.getArray(\"FontMatrix\") || _util.FONT_IDENTITY_MATRIX,\n        firstChar: firstChar || 0,\n        lastChar: lastChar || maxCharIndex,\n        bbox: descriptor.getArray(\"FontBBox\"),\n        ascent: descriptor.get(\"Ascent\"),\n        descent: descriptor.get(\"Descent\"),\n        xHeight: descriptor.get(\"XHeight\"),\n        capHeight: descriptor.get(\"CapHeight\"),\n        flags: descriptor.get(\"Flags\"),\n        italicAngle: descriptor.get(\"ItalicAngle\"),\n        isType3Font: false\n      };\n      var cMapPromise;\n\n      if (composite) {\n        var cidEncoding = baseDict.get(\"Encoding\");\n\n        if ((0, _primitives.isName)(cidEncoding)) {\n          properties.cidEncoding = cidEncoding.name;\n        }\n\n        cMapPromise = _cmap.CMapFactory.create({\n          encoding: cidEncoding,\n          fetchBuiltInCMap: this.fetchBuiltInCMap,\n          useCMap: null\n        }).then(function (cMap) {\n          properties.cMap = cMap;\n          properties.vertical = properties.cMap.vertical;\n        });\n      } else {\n        cMapPromise = Promise.resolve(undefined);\n      }\n\n      return cMapPromise.then(() => {\n        return this.extractDataStructures(dict, baseDict, properties);\n      }).then(properties => {\n        this.extractWidths(dict, descriptor, properties);\n\n        if (type === \"Type3\") {\n          properties.isType3Font = true;\n        }\n\n        return new _fonts.Font(fontName.name, fontFile, properties);\n      });\n    }\n  };\n\n  PartialEvaluator.buildFontPaths = function (font, glyphs, handler) {\n    function buildPath(fontChar) {\n      if (font.renderer.hasBuiltPath(fontChar)) {\n        return;\n      }\n\n      handler.send(\"commonobj\", [`${font.loadedName}_path_${fontChar}`, \"FontPath\", font.renderer.getPathJs(fontChar)]);\n    }\n\n    for (const glyph of glyphs) {\n      buildPath(glyph.fontChar);\n      const accent = glyph.accent;\n\n      if (accent && accent.fontChar) {\n        buildPath(accent.fontChar);\n      }\n    }\n  };\n\n  PartialEvaluator.getFallbackFontDict = function () {\n    if (this._fallbackFontDict) {\n      return this._fallbackFontDict;\n    }\n\n    const dict = new _primitives.Dict();\n    dict.set(\"BaseFont\", _primitives.Name.get(\"PDFJS-FallbackFont\"));\n    dict.set(\"Type\", _primitives.Name.get(\"FallbackType\"));\n    dict.set(\"Subtype\", _primitives.Name.get(\"FallbackType\"));\n    dict.set(\"Encoding\", _primitives.Name.get(\"WinAnsiEncoding\"));\n    return this._fallbackFontDict = dict;\n  };\n\n  return PartialEvaluator;\n}();\n\nexports.PartialEvaluator = PartialEvaluator;\n\nvar TranslatedFont = function TranslatedFontClosure() {\n  function TranslatedFont(loadedName, font, dict) {\n    this.loadedName = loadedName;\n    this.font = font;\n    this.dict = dict;\n    this.type3Loaded = null;\n    this.sent = false;\n  }\n\n  TranslatedFont.prototype = {\n    send(handler) {\n      if (this.sent) {\n        return;\n      }\n\n      this.sent = true;\n      handler.send(\"commonobj\", [this.loadedName, \"Font\", this.font.exportData()]);\n    },\n\n    fallback(handler) {\n      if (!this.font.data) {\n        return;\n      }\n\n      this.font.disableFontFace = true;\n      const glyphs = this.font.glyphCacheValues;\n      PartialEvaluator.buildFontPaths(this.font, glyphs, handler);\n    },\n\n    loadType3Data(evaluator, resources, parentOperatorList, task) {\n      if (!this.font.isType3Font) {\n        throw new Error(\"Must be a Type3 font.\");\n      }\n\n      if (this.type3Loaded) {\n        return this.type3Loaded;\n      }\n\n      var type3Options = Object.create(evaluator.options);\n      type3Options.ignoreErrors = false;\n      type3Options.nativeImageDecoderSupport = _util.NativeImageDecoding.NONE;\n      var type3Evaluator = evaluator.clone(type3Options);\n      type3Evaluator.parsingType3Font = true;\n      var translatedFont = this.font;\n      var loadCharProcsPromise = Promise.resolve();\n      var charProcs = this.dict.get(\"CharProcs\");\n      var fontResources = this.dict.get(\"Resources\") || resources;\n      var charProcKeys = charProcs.getKeys();\n      var charProcOperatorList = Object.create(null);\n\n      for (var i = 0, n = charProcKeys.length; i < n; ++i) {\n        const key = charProcKeys[i];\n        loadCharProcsPromise = loadCharProcsPromise.then(function () {\n          var glyphStream = charProcs.get(key);\n          var operatorList = new _operator_list.OperatorList();\n          return type3Evaluator.getOperatorList({\n            stream: glyphStream,\n            task,\n            resources: fontResources,\n            operatorList\n          }).then(function () {\n            charProcOperatorList[key] = operatorList.getIR();\n            parentOperatorList.addDependencies(operatorList.dependencies);\n          }).catch(function (reason) {\n            (0, _util.warn)(`Type3 font resource \"${key}\" is not available.`);\n            var operatorList = new _operator_list.OperatorList();\n            charProcOperatorList[key] = operatorList.getIR();\n          });\n        });\n      }\n\n      this.type3Loaded = loadCharProcsPromise.then(function () {\n        translatedFont.charProcOperatorList = charProcOperatorList;\n      });\n      return this.type3Loaded;\n    }\n\n  };\n  return TranslatedFont;\n}();\n\nvar StateManager = function StateManagerClosure() {\n  function StateManager(initialState) {\n    this.state = initialState;\n    this.stateStack = [];\n  }\n\n  StateManager.prototype = {\n    save() {\n      var old = this.state;\n      this.stateStack.push(this.state);\n      this.state = old.clone();\n    },\n\n    restore() {\n      var prev = this.stateStack.pop();\n\n      if (prev) {\n        this.state = prev;\n      }\n    },\n\n    transform(args) {\n      this.state.ctm = _util.Util.transform(this.state.ctm, args);\n    }\n\n  };\n  return StateManager;\n}();\n\nvar TextState = function TextStateClosure() {\n  function TextState() {\n    this.ctm = new Float32Array(_util.IDENTITY_MATRIX);\n    this.fontName = null;\n    this.fontSize = 0;\n    this.font = null;\n    this.fontMatrix = _util.FONT_IDENTITY_MATRIX;\n    this.textMatrix = _util.IDENTITY_MATRIX.slice();\n    this.textLineMatrix = _util.IDENTITY_MATRIX.slice();\n    this.charSpacing = 0;\n    this.wordSpacing = 0;\n    this.leading = 0;\n    this.textHScale = 1;\n    this.textRise = 0;\n  }\n\n  TextState.prototype = {\n    setTextMatrix: function TextState_setTextMatrix(a, b, c, d, e, f) {\n      var m = this.textMatrix;\n      m[0] = a;\n      m[1] = b;\n      m[2] = c;\n      m[3] = d;\n      m[4] = e;\n      m[5] = f;\n    },\n    setTextLineMatrix: function TextState_setTextMatrix(a, b, c, d, e, f) {\n      var m = this.textLineMatrix;\n      m[0] = a;\n      m[1] = b;\n      m[2] = c;\n      m[3] = d;\n      m[4] = e;\n      m[5] = f;\n    },\n    translateTextMatrix: function TextState_translateTextMatrix(x, y) {\n      var m = this.textMatrix;\n      m[4] = m[0] * x + m[2] * y + m[4];\n      m[5] = m[1] * x + m[3] * y + m[5];\n    },\n    translateTextLineMatrix: function TextState_translateTextMatrix(x, y) {\n      var m = this.textLineMatrix;\n      m[4] = m[0] * x + m[2] * y + m[4];\n      m[5] = m[1] * x + m[3] * y + m[5];\n    },\n    calcTextLineMatrixAdvance: function TextState_calcTextLineMatrixAdvance(a, b, c, d, e, f) {\n      var font = this.font;\n\n      if (!font) {\n        return null;\n      }\n\n      var m = this.textLineMatrix;\n\n      if (!(a === m[0] && b === m[1] && c === m[2] && d === m[3])) {\n        return null;\n      }\n\n      var txDiff = e - m[4],\n          tyDiff = f - m[5];\n\n      if (font.vertical && txDiff !== 0 || !font.vertical && tyDiff !== 0) {\n        return null;\n      }\n\n      var tx,\n          ty,\n          denominator = a * d - b * c;\n\n      if (font.vertical) {\n        tx = -tyDiff * c / denominator;\n        ty = tyDiff * a / denominator;\n      } else {\n        tx = txDiff * d / denominator;\n        ty = -txDiff * b / denominator;\n      }\n\n      return {\n        width: tx,\n        height: ty,\n        value: font.vertical ? ty : tx\n      };\n    },\n    calcRenderMatrix: function TextState_calcRendeMatrix(ctm) {\n      var tsm = [this.fontSize * this.textHScale, 0, 0, this.fontSize, 0, this.textRise];\n      return _util.Util.transform(ctm, _util.Util.transform(this.textMatrix, tsm));\n    },\n    carriageReturn: function TextState_carriageReturn() {\n      this.translateTextLineMatrix(0, -this.leading);\n      this.textMatrix = this.textLineMatrix.slice();\n    },\n    clone: function TextState_clone() {\n      var clone = Object.create(this);\n      clone.textMatrix = this.textMatrix.slice();\n      clone.textLineMatrix = this.textLineMatrix.slice();\n      clone.fontMatrix = this.fontMatrix.slice();\n      return clone;\n    }\n  };\n  return TextState;\n}();\n\nvar EvalState = function EvalStateClosure() {\n  function EvalState() {\n    this.ctm = new Float32Array(_util.IDENTITY_MATRIX);\n    this.font = null;\n    this.textRenderingMode = _util.TextRenderingMode.FILL;\n    this.fillColorSpace = _colorspace.ColorSpace.singletons.gray;\n    this.strokeColorSpace = _colorspace.ColorSpace.singletons.gray;\n  }\n\n  EvalState.prototype = {\n    clone: function CanvasExtraState_clone() {\n      return Object.create(this);\n    }\n  };\n  return EvalState;\n}();\n\nvar EvaluatorPreprocessor = function EvaluatorPreprocessorClosure() {\n  var getOPMap = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t[\"w\"] = {\n      id: _util.OPS.setLineWidth,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t[\"J\"] = {\n      id: _util.OPS.setLineCap,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t[\"j\"] = {\n      id: _util.OPS.setLineJoin,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t[\"M\"] = {\n      id: _util.OPS.setMiterLimit,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t[\"d\"] = {\n      id: _util.OPS.setDash,\n      numArgs: 2,\n      variableArgs: false\n    };\n    t[\"ri\"] = {\n      id: _util.OPS.setRenderingIntent,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t[\"i\"] = {\n      id: _util.OPS.setFlatness,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t[\"gs\"] = {\n      id: _util.OPS.setGState,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t[\"q\"] = {\n      id: _util.OPS.save,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t[\"Q\"] = {\n      id: _util.OPS.restore,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t[\"cm\"] = {\n      id: _util.OPS.transform,\n      numArgs: 6,\n      variableArgs: false\n    };\n    t[\"m\"] = {\n      id: _util.OPS.moveTo,\n      numArgs: 2,\n      variableArgs: false\n    };\n    t[\"l\"] = {\n      id: _util.OPS.lineTo,\n      numArgs: 2,\n      variableArgs: false\n    };\n    t[\"c\"] = {\n      id: _util.OPS.curveTo,\n      numArgs: 6,\n      variableArgs: false\n    };\n    t[\"v\"] = {\n      id: _util.OPS.curveTo2,\n      numArgs: 4,\n      variableArgs: false\n    };\n    t[\"y\"] = {\n      id: _util.OPS.curveTo3,\n      numArgs: 4,\n      variableArgs: false\n    };\n    t[\"h\"] = {\n      id: _util.OPS.closePath,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t[\"re\"] = {\n      id: _util.OPS.rectangle,\n      numArgs: 4,\n      variableArgs: false\n    };\n    t[\"S\"] = {\n      id: _util.OPS.stroke,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t[\"s\"] = {\n      id: _util.OPS.closeStroke,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t[\"f\"] = {\n      id: _util.OPS.fill,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t[\"F\"] = {\n      id: _util.OPS.fill,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t[\"f*\"] = {\n      id: _util.OPS.eoFill,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t[\"B\"] = {\n      id: _util.OPS.fillStroke,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t[\"B*\"] = {\n      id: _util.OPS.eoFillStroke,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t[\"b\"] = {\n      id: _util.OPS.closeFillStroke,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t[\"b*\"] = {\n      id: _util.OPS.closeEOFillStroke,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t[\"n\"] = {\n      id: _util.OPS.endPath,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t[\"W\"] = {\n      id: _util.OPS.clip,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t[\"W*\"] = {\n      id: _util.OPS.eoClip,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t[\"BT\"] = {\n      id: _util.OPS.beginText,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t[\"ET\"] = {\n      id: _util.OPS.endText,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t[\"Tc\"] = {\n      id: _util.OPS.setCharSpacing,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t[\"Tw\"] = {\n      id: _util.OPS.setWordSpacing,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t[\"Tz\"] = {\n      id: _util.OPS.setHScale,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t[\"TL\"] = {\n      id: _util.OPS.setLeading,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t[\"Tf\"] = {\n      id: _util.OPS.setFont,\n      numArgs: 2,\n      variableArgs: false\n    };\n    t[\"Tr\"] = {\n      id: _util.OPS.setTextRenderingMode,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t[\"Ts\"] = {\n      id: _util.OPS.setTextRise,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t[\"Td\"] = {\n      id: _util.OPS.moveText,\n      numArgs: 2,\n      variableArgs: false\n    };\n    t[\"TD\"] = {\n      id: _util.OPS.setLeadingMoveText,\n      numArgs: 2,\n      variableArgs: false\n    };\n    t[\"Tm\"] = {\n      id: _util.OPS.setTextMatrix,\n      numArgs: 6,\n      variableArgs: false\n    };\n    t[\"T*\"] = {\n      id: _util.OPS.nextLine,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t[\"Tj\"] = {\n      id: _util.OPS.showText,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t[\"TJ\"] = {\n      id: _util.OPS.showSpacedText,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t[\"'\"] = {\n      id: _util.OPS.nextLineShowText,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t['\"'] = {\n      id: _util.OPS.nextLineSetSpacingShowText,\n      numArgs: 3,\n      variableArgs: false\n    };\n    t[\"d0\"] = {\n      id: _util.OPS.setCharWidth,\n      numArgs: 2,\n      variableArgs: false\n    };\n    t[\"d1\"] = {\n      id: _util.OPS.setCharWidthAndBounds,\n      numArgs: 6,\n      variableArgs: false\n    };\n    t[\"CS\"] = {\n      id: _util.OPS.setStrokeColorSpace,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t[\"cs\"] = {\n      id: _util.OPS.setFillColorSpace,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t[\"SC\"] = {\n      id: _util.OPS.setStrokeColor,\n      numArgs: 4,\n      variableArgs: true\n    };\n    t[\"SCN\"] = {\n      id: _util.OPS.setStrokeColorN,\n      numArgs: 33,\n      variableArgs: true\n    };\n    t[\"sc\"] = {\n      id: _util.OPS.setFillColor,\n      numArgs: 4,\n      variableArgs: true\n    };\n    t[\"scn\"] = {\n      id: _util.OPS.setFillColorN,\n      numArgs: 33,\n      variableArgs: true\n    };\n    t[\"G\"] = {\n      id: _util.OPS.setStrokeGray,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t[\"g\"] = {\n      id: _util.OPS.setFillGray,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t[\"RG\"] = {\n      id: _util.OPS.setStrokeRGBColor,\n      numArgs: 3,\n      variableArgs: false\n    };\n    t[\"rg\"] = {\n      id: _util.OPS.setFillRGBColor,\n      numArgs: 3,\n      variableArgs: false\n    };\n    t[\"K\"] = {\n      id: _util.OPS.setStrokeCMYKColor,\n      numArgs: 4,\n      variableArgs: false\n    };\n    t[\"k\"] = {\n      id: _util.OPS.setFillCMYKColor,\n      numArgs: 4,\n      variableArgs: false\n    };\n    t[\"sh\"] = {\n      id: _util.OPS.shadingFill,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t[\"BI\"] = {\n      id: _util.OPS.beginInlineImage,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t[\"ID\"] = {\n      id: _util.OPS.beginImageData,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t[\"EI\"] = {\n      id: _util.OPS.endInlineImage,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t[\"Do\"] = {\n      id: _util.OPS.paintXObject,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t[\"MP\"] = {\n      id: _util.OPS.markPoint,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t[\"DP\"] = {\n      id: _util.OPS.markPointProps,\n      numArgs: 2,\n      variableArgs: false\n    };\n    t[\"BMC\"] = {\n      id: _util.OPS.beginMarkedContent,\n      numArgs: 1,\n      variableArgs: false\n    };\n    t[\"BDC\"] = {\n      id: _util.OPS.beginMarkedContentProps,\n      numArgs: 2,\n      variableArgs: false\n    };\n    t[\"EMC\"] = {\n      id: _util.OPS.endMarkedContent,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t[\"BX\"] = {\n      id: _util.OPS.beginCompat,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t[\"EX\"] = {\n      id: _util.OPS.endCompat,\n      numArgs: 0,\n      variableArgs: false\n    };\n    t[\"BM\"] = null;\n    t[\"BD\"] = null;\n    t[\"true\"] = null;\n    t[\"fa\"] = null;\n    t[\"fal\"] = null;\n    t[\"fals\"] = null;\n    t[\"false\"] = null;\n    t[\"nu\"] = null;\n    t[\"nul\"] = null;\n    t[\"null\"] = null;\n  });\n  const MAX_INVALID_PATH_OPS = 20;\n\n  function EvaluatorPreprocessor(stream, xref, stateManager) {\n    this.opMap = getOPMap();\n    this.parser = new _parser.Parser({\n      lexer: new _parser.Lexer(stream, this.opMap),\n      xref\n    });\n    this.stateManager = stateManager;\n    this.nonProcessedArgs = [];\n    this._numInvalidPathOPS = 0;\n  }\n\n  EvaluatorPreprocessor.prototype = {\n    get savedStatesDepth() {\n      return this.stateManager.stateStack.length;\n    },\n\n    read: function EvaluatorPreprocessor_read(operation) {\n      var args = operation.args;\n\n      while (true) {\n        var obj = this.parser.getObj();\n\n        if (obj instanceof _primitives.Cmd) {\n          var cmd = obj.cmd;\n          var opSpec = this.opMap[cmd];\n\n          if (!opSpec) {\n            (0, _util.warn)(`Unknown command \"${cmd}\".`);\n            continue;\n          }\n\n          var fn = opSpec.id;\n          var numArgs = opSpec.numArgs;\n          var argsLength = args !== null ? args.length : 0;\n\n          if (!opSpec.variableArgs) {\n            if (argsLength !== numArgs) {\n              var nonProcessedArgs = this.nonProcessedArgs;\n\n              while (argsLength > numArgs) {\n                nonProcessedArgs.push(args.shift());\n                argsLength--;\n              }\n\n              while (argsLength < numArgs && nonProcessedArgs.length !== 0) {\n                if (args === null) {\n                  args = [];\n                }\n\n                args.unshift(nonProcessedArgs.pop());\n                argsLength++;\n              }\n            }\n\n            if (argsLength < numArgs) {\n              const partialMsg = `command ${cmd}: expected ${numArgs} args, ` + `but received ${argsLength} args.`;\n\n              if (fn >= _util.OPS.moveTo && fn <= _util.OPS.endPath && ++this._numInvalidPathOPS > MAX_INVALID_PATH_OPS) {\n                throw new _util.FormatError(`Invalid ${partialMsg}`);\n              }\n\n              (0, _util.warn)(`Skipping ${partialMsg}`);\n\n              if (args !== null) {\n                args.length = 0;\n              }\n\n              continue;\n            }\n          } else if (argsLength > numArgs) {\n            (0, _util.info)(`Command ${cmd}: expected [0, ${numArgs}] args, ` + `but received ${argsLength} args.`);\n          }\n\n          this.preprocessCommand(fn, args);\n          operation.fn = fn;\n          operation.args = args;\n          return true;\n        }\n\n        if (obj === _primitives.EOF) {\n          return false;\n        }\n\n        if (obj !== null) {\n          if (args === null) {\n            args = [];\n          }\n\n          args.push(obj);\n\n          if (args.length > 33) {\n            throw new _util.FormatError(\"Too many arguments\");\n          }\n        }\n      }\n    },\n    preprocessCommand: function EvaluatorPreprocessor_preprocessCommand(fn, args) {\n      switch (fn | 0) {\n        case _util.OPS.save:\n          this.stateManager.save();\n          break;\n\n        case _util.OPS.restore:\n          this.stateManager.restore();\n          break;\n\n        case _util.OPS.transform:\n          this.stateManager.transform(args);\n          break;\n      }\n    }\n  };\n  return EvaluatorPreprocessor;\n}();\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CMapFactory = exports.IdentityCMap = exports.CMap = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(4);\n\nvar _parser = __w_pdfjs_require__(10);\n\nvar _core_utils = __w_pdfjs_require__(7);\n\nvar _stream = __w_pdfjs_require__(11);\n\nvar BUILT_IN_CMAPS = [\"Adobe-GB1-UCS2\", \"Adobe-CNS1-UCS2\", \"Adobe-Japan1-UCS2\", \"Adobe-Korea1-UCS2\", \"78-EUC-H\", \"78-EUC-V\", \"78-H\", \"78-RKSJ-H\", \"78-RKSJ-V\", \"78-V\", \"78ms-RKSJ-H\", \"78ms-RKSJ-V\", \"83pv-RKSJ-H\", \"90ms-RKSJ-H\", \"90ms-RKSJ-V\", \"90msp-RKSJ-H\", \"90msp-RKSJ-V\", \"90pv-RKSJ-H\", \"90pv-RKSJ-V\", \"Add-H\", \"Add-RKSJ-H\", \"Add-RKSJ-V\", \"Add-V\", \"Adobe-CNS1-0\", \"Adobe-CNS1-1\", \"Adobe-CNS1-2\", \"Adobe-CNS1-3\", \"Adobe-CNS1-4\", \"Adobe-CNS1-5\", \"Adobe-CNS1-6\", \"Adobe-GB1-0\", \"Adobe-GB1-1\", \"Adobe-GB1-2\", \"Adobe-GB1-3\", \"Adobe-GB1-4\", \"Adobe-GB1-5\", \"Adobe-Japan1-0\", \"Adobe-Japan1-1\", \"Adobe-Japan1-2\", \"Adobe-Japan1-3\", \"Adobe-Japan1-4\", \"Adobe-Japan1-5\", \"Adobe-Japan1-6\", \"Adobe-Korea1-0\", \"Adobe-Korea1-1\", \"Adobe-Korea1-2\", \"B5-H\", \"B5-V\", \"B5pc-H\", \"B5pc-V\", \"CNS-EUC-H\", \"CNS-EUC-V\", \"CNS1-H\", \"CNS1-V\", \"CNS2-H\", \"CNS2-V\", \"ETHK-B5-H\", \"ETHK-B5-V\", \"ETen-B5-H\", \"ETen-B5-V\", \"ETenms-B5-H\", \"ETenms-B5-V\", \"EUC-H\", \"EUC-V\", \"Ext-H\", \"Ext-RKSJ-H\", \"Ext-RKSJ-V\", \"Ext-V\", \"GB-EUC-H\", \"GB-EUC-V\", \"GB-H\", \"GB-V\", \"GBK-EUC-H\", \"GBK-EUC-V\", \"GBK2K-H\", \"GBK2K-V\", \"GBKp-EUC-H\", \"GBKp-EUC-V\", \"GBT-EUC-H\", \"GBT-EUC-V\", \"GBT-H\", \"GBT-V\", \"GBTpc-EUC-H\", \"GBTpc-EUC-V\", \"GBpc-EUC-H\", \"GBpc-EUC-V\", \"H\", \"HKdla-B5-H\", \"HKdla-B5-V\", \"HKdlb-B5-H\", \"HKdlb-B5-V\", \"HKgccs-B5-H\", \"HKgccs-B5-V\", \"HKm314-B5-H\", \"HKm314-B5-V\", \"HKm471-B5-H\", \"HKm471-B5-V\", \"HKscs-B5-H\", \"HKscs-B5-V\", \"Hankaku\", \"Hiragana\", \"KSC-EUC-H\", \"KSC-EUC-V\", \"KSC-H\", \"KSC-Johab-H\", \"KSC-Johab-V\", \"KSC-V\", \"KSCms-UHC-H\", \"KSCms-UHC-HW-H\", \"KSCms-UHC-HW-V\", \"KSCms-UHC-V\", \"KSCpc-EUC-H\", \"KSCpc-EUC-V\", \"Katakana\", \"NWP-H\", \"NWP-V\", \"RKSJ-H\", \"RKSJ-V\", \"Roman\", \"UniCNS-UCS2-H\", \"UniCNS-UCS2-V\", \"UniCNS-UTF16-H\", \"UniCNS-UTF16-V\", \"UniCNS-UTF32-H\", \"UniCNS-UTF32-V\", \"UniCNS-UTF8-H\", \"UniCNS-UTF8-V\", \"UniGB-UCS2-H\", \"UniGB-UCS2-V\", \"UniGB-UTF16-H\", \"UniGB-UTF16-V\", \"UniGB-UTF32-H\", \"UniGB-UTF32-V\", \"UniGB-UTF8-H\", \"UniGB-UTF8-V\", \"UniJIS-UCS2-H\", \"UniJIS-UCS2-HW-H\", \"UniJIS-UCS2-HW-V\", \"UniJIS-UCS2-V\", \"UniJIS-UTF16-H\", \"UniJIS-UTF16-V\", \"UniJIS-UTF32-H\", \"UniJIS-UTF32-V\", \"UniJIS-UTF8-H\", \"UniJIS-UTF8-V\", \"UniJIS2004-UTF16-H\", \"UniJIS2004-UTF16-V\", \"UniJIS2004-UTF32-H\", \"UniJIS2004-UTF32-V\", \"UniJIS2004-UTF8-H\", \"UniJIS2004-UTF8-V\", \"UniJISPro-UCS2-HW-V\", \"UniJISPro-UCS2-V\", \"UniJISPro-UTF8-V\", \"UniJISX0213-UTF32-H\", \"UniJISX0213-UTF32-V\", \"UniJISX02132004-UTF32-H\", \"UniJISX02132004-UTF32-V\", \"UniKS-UCS2-H\", \"UniKS-UCS2-V\", \"UniKS-UTF16-H\", \"UniKS-UTF16-V\", \"UniKS-UTF32-H\", \"UniKS-UTF32-V\", \"UniKS-UTF8-H\", \"UniKS-UTF8-V\", \"V\", \"WP-Symbol\"];\n\nclass CMap {\n  constructor(builtInCMap = false) {\n    this.codespaceRanges = [[], [], [], []];\n    this.numCodespaceRanges = 0;\n    this._map = [];\n    this.name = \"\";\n    this.vertical = false;\n    this.useCMap = null;\n    this.builtInCMap = builtInCMap;\n  }\n\n  addCodespaceRange(n, low, high) {\n    this.codespaceRanges[n - 1].push(low, high);\n    this.numCodespaceRanges++;\n  }\n\n  mapCidRange(low, high, dstLow) {\n    while (low <= high) {\n      this._map[low++] = dstLow++;\n    }\n  }\n\n  mapBfRange(low, high, dstLow) {\n    var lastByte = dstLow.length - 1;\n\n    while (low <= high) {\n      this._map[low++] = dstLow;\n      dstLow = dstLow.substring(0, lastByte) + String.fromCharCode(dstLow.charCodeAt(lastByte) + 1);\n    }\n  }\n\n  mapBfRangeToArray(low, high, array) {\n    const ii = array.length;\n    let i = 0;\n\n    while (low <= high && i < ii) {\n      this._map[low] = array[i++];\n      ++low;\n    }\n  }\n\n  mapOne(src, dst) {\n    this._map[src] = dst;\n  }\n\n  lookup(code) {\n    return this._map[code];\n  }\n\n  contains(code) {\n    return this._map[code] !== undefined;\n  }\n\n  forEach(callback) {\n    const map = this._map;\n    const length = map.length;\n\n    if (length <= 0x10000) {\n      for (let i = 0; i < length; i++) {\n        if (map[i] !== undefined) {\n          callback(i, map[i]);\n        }\n      }\n    } else {\n      for (const i in map) {\n        callback(i, map[i]);\n      }\n    }\n  }\n\n  charCodeOf(value) {\n    const map = this._map;\n\n    if (map.length <= 0x10000) {\n      return map.indexOf(value);\n    }\n\n    for (const charCode in map) {\n      if (map[charCode] === value) {\n        return charCode | 0;\n      }\n    }\n\n    return -1;\n  }\n\n  getMap() {\n    return this._map;\n  }\n\n  readCharCode(str, offset, out) {\n    let c = 0;\n    const codespaceRanges = this.codespaceRanges;\n\n    for (let n = 0, nn = codespaceRanges.length; n < nn; n++) {\n      c = (c << 8 | str.charCodeAt(offset + n)) >>> 0;\n      const codespaceRange = codespaceRanges[n];\n\n      for (let k = 0, kk = codespaceRange.length; k < kk;) {\n        const low = codespaceRange[k++];\n        const high = codespaceRange[k++];\n\n        if (c >= low && c <= high) {\n          out.charcode = c;\n          out.length = n + 1;\n          return;\n        }\n      }\n    }\n\n    out.charcode = 0;\n    out.length = 1;\n  }\n\n  get length() {\n    return this._map.length;\n  }\n\n  get isIdentityCMap() {\n    if (!(this.name === \"Identity-H\" || this.name === \"Identity-V\")) {\n      return false;\n    }\n\n    if (this._map.length !== 0x10000) {\n      return false;\n    }\n\n    for (let i = 0; i < 0x10000; i++) {\n      if (this._map[i] !== i) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n}\n\nexports.CMap = CMap;\n\nclass IdentityCMap extends CMap {\n  constructor(vertical, n) {\n    super();\n    this.vertical = vertical;\n    this.addCodespaceRange(n, 0, 0xffff);\n  }\n\n  mapCidRange(low, high, dstLow) {\n    (0, _util.unreachable)(\"should not call mapCidRange\");\n  }\n\n  mapBfRange(low, high, dstLow) {\n    (0, _util.unreachable)(\"should not call mapBfRange\");\n  }\n\n  mapBfRangeToArray(low, high, array) {\n    (0, _util.unreachable)(\"should not call mapBfRangeToArray\");\n  }\n\n  mapOne(src, dst) {\n    (0, _util.unreachable)(\"should not call mapCidOne\");\n  }\n\n  lookup(code) {\n    return Number.isInteger(code) && code <= 0xffff ? code : undefined;\n  }\n\n  contains(code) {\n    return Number.isInteger(code) && code <= 0xffff;\n  }\n\n  forEach(callback) {\n    for (let i = 0; i <= 0xffff; i++) {\n      callback(i, i);\n    }\n  }\n\n  charCodeOf(value) {\n    return Number.isInteger(value) && value <= 0xffff ? value : -1;\n  }\n\n  getMap() {\n    const map = new Array(0x10000);\n\n    for (let i = 0; i <= 0xffff; i++) {\n      map[i] = i;\n    }\n\n    return map;\n  }\n\n  get length() {\n    return 0x10000;\n  }\n\n  get isIdentityCMap() {\n    (0, _util.unreachable)(\"should not access .isIdentityCMap\");\n  }\n\n}\n\nexports.IdentityCMap = IdentityCMap;\n\nvar BinaryCMapReader = function BinaryCMapReaderClosure() {\n  function hexToInt(a, size) {\n    var n = 0;\n\n    for (var i = 0; i <= size; i++) {\n      n = n << 8 | a[i];\n    }\n\n    return n >>> 0;\n  }\n\n  function hexToStr(a, size) {\n    if (size === 1) {\n      return String.fromCharCode(a[0], a[1]);\n    }\n\n    if (size === 3) {\n      return String.fromCharCode(a[0], a[1], a[2], a[3]);\n    }\n\n    return String.fromCharCode.apply(null, a.subarray(0, size + 1));\n  }\n\n  function addHex(a, b, size) {\n    var c = 0;\n\n    for (var i = size; i >= 0; i--) {\n      c += a[i] + b[i];\n      a[i] = c & 255;\n      c >>= 8;\n    }\n  }\n\n  function incHex(a, size) {\n    var c = 1;\n\n    for (var i = size; i >= 0 && c > 0; i--) {\n      c += a[i];\n      a[i] = c & 255;\n      c >>= 8;\n    }\n  }\n\n  var MAX_NUM_SIZE = 16;\n  var MAX_ENCODED_NUM_SIZE = 19;\n\n  function BinaryCMapStream(data) {\n    this.buffer = data;\n    this.pos = 0;\n    this.end = data.length;\n    this.tmpBuf = new Uint8Array(MAX_ENCODED_NUM_SIZE);\n  }\n\n  BinaryCMapStream.prototype = {\n    readByte() {\n      if (this.pos >= this.end) {\n        return -1;\n      }\n\n      return this.buffer[this.pos++];\n    },\n\n    readNumber() {\n      var n = 0;\n      var last;\n\n      do {\n        var b = this.readByte();\n\n        if (b < 0) {\n          throw new _util.FormatError(\"unexpected EOF in bcmap\");\n        }\n\n        last = !(b & 0x80);\n        n = n << 7 | b & 0x7f;\n      } while (!last);\n\n      return n;\n    },\n\n    readSigned() {\n      var n = this.readNumber();\n      return n & 1 ? ~(n >>> 1) : n >>> 1;\n    },\n\n    readHex(num, size) {\n      num.set(this.buffer.subarray(this.pos, this.pos + size + 1));\n      this.pos += size + 1;\n    },\n\n    readHexNumber(num, size) {\n      var last;\n      var stack = this.tmpBuf,\n          sp = 0;\n\n      do {\n        var b = this.readByte();\n\n        if (b < 0) {\n          throw new _util.FormatError(\"unexpected EOF in bcmap\");\n        }\n\n        last = !(b & 0x80);\n        stack[sp++] = b & 0x7f;\n      } while (!last);\n\n      var i = size,\n          buffer = 0,\n          bufferSize = 0;\n\n      while (i >= 0) {\n        while (bufferSize < 8 && stack.length > 0) {\n          buffer = stack[--sp] << bufferSize | buffer;\n          bufferSize += 7;\n        }\n\n        num[i] = buffer & 255;\n        i--;\n        buffer >>= 8;\n        bufferSize -= 8;\n      }\n    },\n\n    readHexSigned(num, size) {\n      this.readHexNumber(num, size);\n      var sign = num[size] & 1 ? 255 : 0;\n      var c = 0;\n\n      for (var i = 0; i <= size; i++) {\n        c = (c & 1) << 8 | num[i];\n        num[i] = c >> 1 ^ sign;\n      }\n    },\n\n    readString() {\n      var len = this.readNumber();\n      var s = \"\";\n\n      for (var i = 0; i < len; i++) {\n        s += String.fromCharCode(this.readNumber());\n      }\n\n      return s;\n    }\n\n  };\n\n  function processBinaryCMap(data, cMap, extend) {\n    return new Promise(function (resolve, reject) {\n      var stream = new BinaryCMapStream(data);\n      var header = stream.readByte();\n      cMap.vertical = !!(header & 1);\n      var useCMap = null;\n      var start = new Uint8Array(MAX_NUM_SIZE);\n      var end = new Uint8Array(MAX_NUM_SIZE);\n      var char = new Uint8Array(MAX_NUM_SIZE);\n      var charCode = new Uint8Array(MAX_NUM_SIZE);\n      var tmp = new Uint8Array(MAX_NUM_SIZE);\n      var code;\n      var b;\n\n      while ((b = stream.readByte()) >= 0) {\n        var type = b >> 5;\n\n        if (type === 7) {\n          switch (b & 0x1f) {\n            case 0:\n              stream.readString();\n              break;\n\n            case 1:\n              useCMap = stream.readString();\n              break;\n          }\n\n          continue;\n        }\n\n        var sequence = !!(b & 0x10);\n        var dataSize = b & 15;\n\n        if (dataSize + 1 > MAX_NUM_SIZE) {\n          throw new Error(\"processBinaryCMap: Invalid dataSize.\");\n        }\n\n        var ucs2DataSize = 1;\n        var subitemsCount = stream.readNumber();\n        var i;\n\n        switch (type) {\n          case 0:\n            stream.readHex(start, dataSize);\n            stream.readHexNumber(end, dataSize);\n            addHex(end, start, dataSize);\n            cMap.addCodespaceRange(dataSize + 1, hexToInt(start, dataSize), hexToInt(end, dataSize));\n\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(end, dataSize);\n              stream.readHexNumber(start, dataSize);\n              addHex(start, end, dataSize);\n              stream.readHexNumber(end, dataSize);\n              addHex(end, start, dataSize);\n              cMap.addCodespaceRange(dataSize + 1, hexToInt(start, dataSize), hexToInt(end, dataSize));\n            }\n\n            break;\n\n          case 1:\n            stream.readHex(start, dataSize);\n            stream.readHexNumber(end, dataSize);\n            addHex(end, start, dataSize);\n            stream.readNumber();\n\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(end, dataSize);\n              stream.readHexNumber(start, dataSize);\n              addHex(start, end, dataSize);\n              stream.readHexNumber(end, dataSize);\n              addHex(end, start, dataSize);\n              stream.readNumber();\n            }\n\n            break;\n\n          case 2:\n            stream.readHex(char, dataSize);\n            code = stream.readNumber();\n            cMap.mapOne(hexToInt(char, dataSize), code);\n\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(char, dataSize);\n\n              if (!sequence) {\n                stream.readHexNumber(tmp, dataSize);\n                addHex(char, tmp, dataSize);\n              }\n\n              code = stream.readSigned() + (code + 1);\n              cMap.mapOne(hexToInt(char, dataSize), code);\n            }\n\n            break;\n\n          case 3:\n            stream.readHex(start, dataSize);\n            stream.readHexNumber(end, dataSize);\n            addHex(end, start, dataSize);\n            code = stream.readNumber();\n            cMap.mapCidRange(hexToInt(start, dataSize), hexToInt(end, dataSize), code);\n\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(end, dataSize);\n\n              if (!sequence) {\n                stream.readHexNumber(start, dataSize);\n                addHex(start, end, dataSize);\n              } else {\n                start.set(end);\n              }\n\n              stream.readHexNumber(end, dataSize);\n              addHex(end, start, dataSize);\n              code = stream.readNumber();\n              cMap.mapCidRange(hexToInt(start, dataSize), hexToInt(end, dataSize), code);\n            }\n\n            break;\n\n          case 4:\n            stream.readHex(char, ucs2DataSize);\n            stream.readHex(charCode, dataSize);\n            cMap.mapOne(hexToInt(char, ucs2DataSize), hexToStr(charCode, dataSize));\n\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(char, ucs2DataSize);\n\n              if (!sequence) {\n                stream.readHexNumber(tmp, ucs2DataSize);\n                addHex(char, tmp, ucs2DataSize);\n              }\n\n              incHex(charCode, dataSize);\n              stream.readHexSigned(tmp, dataSize);\n              addHex(charCode, tmp, dataSize);\n              cMap.mapOne(hexToInt(char, ucs2DataSize), hexToStr(charCode, dataSize));\n            }\n\n            break;\n\n          case 5:\n            stream.readHex(start, ucs2DataSize);\n            stream.readHexNumber(end, ucs2DataSize);\n            addHex(end, start, ucs2DataSize);\n            stream.readHex(charCode, dataSize);\n            cMap.mapBfRange(hexToInt(start, ucs2DataSize), hexToInt(end, ucs2DataSize), hexToStr(charCode, dataSize));\n\n            for (i = 1; i < subitemsCount; i++) {\n              incHex(end, ucs2DataSize);\n\n              if (!sequence) {\n                stream.readHexNumber(start, ucs2DataSize);\n                addHex(start, end, ucs2DataSize);\n              } else {\n                start.set(end);\n              }\n\n              stream.readHexNumber(end, ucs2DataSize);\n              addHex(end, start, ucs2DataSize);\n              stream.readHex(charCode, dataSize);\n              cMap.mapBfRange(hexToInt(start, ucs2DataSize), hexToInt(end, ucs2DataSize), hexToStr(charCode, dataSize));\n            }\n\n            break;\n\n          default:\n            reject(new Error(\"processBinaryCMap: Unknown type: \" + type));\n            return;\n        }\n      }\n\n      if (useCMap) {\n        resolve(extend(useCMap));\n        return;\n      }\n\n      resolve(cMap);\n    });\n  }\n\n  function BinaryCMapReader() {}\n\n  BinaryCMapReader.prototype = {\n    process: processBinaryCMap\n  };\n  return BinaryCMapReader;\n}();\n\nvar CMapFactory = function CMapFactoryClosure() {\n  function strToInt(str) {\n    var a = 0;\n\n    for (var i = 0; i < str.length; i++) {\n      a = a << 8 | str.charCodeAt(i);\n    }\n\n    return a >>> 0;\n  }\n\n  function expectString(obj) {\n    if (!(0, _util.isString)(obj)) {\n      throw new _util.FormatError(\"Malformed CMap: expected string.\");\n    }\n  }\n\n  function expectInt(obj) {\n    if (!Number.isInteger(obj)) {\n      throw new _util.FormatError(\"Malformed CMap: expected int.\");\n    }\n  }\n\n  function parseBfChar(cMap, lexer) {\n    while (true) {\n      var obj = lexer.getObj();\n\n      if ((0, _primitives.isEOF)(obj)) {\n        break;\n      }\n\n      if ((0, _primitives.isCmd)(obj, \"endbfchar\")) {\n        return;\n      }\n\n      expectString(obj);\n      var src = strToInt(obj);\n      obj = lexer.getObj();\n      expectString(obj);\n      var dst = obj;\n      cMap.mapOne(src, dst);\n    }\n  }\n\n  function parseBfRange(cMap, lexer) {\n    while (true) {\n      var obj = lexer.getObj();\n\n      if ((0, _primitives.isEOF)(obj)) {\n        break;\n      }\n\n      if ((0, _primitives.isCmd)(obj, \"endbfrange\")) {\n        return;\n      }\n\n      expectString(obj);\n      var low = strToInt(obj);\n      obj = lexer.getObj();\n      expectString(obj);\n      var high = strToInt(obj);\n      obj = lexer.getObj();\n\n      if (Number.isInteger(obj) || (0, _util.isString)(obj)) {\n        var dstLow = Number.isInteger(obj) ? String.fromCharCode(obj) : obj;\n        cMap.mapBfRange(low, high, dstLow);\n      } else if ((0, _primitives.isCmd)(obj, \"[\")) {\n        obj = lexer.getObj();\n        var array = [];\n\n        while (!(0, _primitives.isCmd)(obj, \"]\") && !(0, _primitives.isEOF)(obj)) {\n          array.push(obj);\n          obj = lexer.getObj();\n        }\n\n        cMap.mapBfRangeToArray(low, high, array);\n      } else {\n        break;\n      }\n    }\n\n    throw new _util.FormatError(\"Invalid bf range.\");\n  }\n\n  function parseCidChar(cMap, lexer) {\n    while (true) {\n      var obj = lexer.getObj();\n\n      if ((0, _primitives.isEOF)(obj)) {\n        break;\n      }\n\n      if ((0, _primitives.isCmd)(obj, \"endcidchar\")) {\n        return;\n      }\n\n      expectString(obj);\n      var src = strToInt(obj);\n      obj = lexer.getObj();\n      expectInt(obj);\n      var dst = obj;\n      cMap.mapOne(src, dst);\n    }\n  }\n\n  function parseCidRange(cMap, lexer) {\n    while (true) {\n      var obj = lexer.getObj();\n\n      if ((0, _primitives.isEOF)(obj)) {\n        break;\n      }\n\n      if ((0, _primitives.isCmd)(obj, \"endcidrange\")) {\n        return;\n      }\n\n      expectString(obj);\n      var low = strToInt(obj);\n      obj = lexer.getObj();\n      expectString(obj);\n      var high = strToInt(obj);\n      obj = lexer.getObj();\n      expectInt(obj);\n      var dstLow = obj;\n      cMap.mapCidRange(low, high, dstLow);\n    }\n  }\n\n  function parseCodespaceRange(cMap, lexer) {\n    while (true) {\n      var obj = lexer.getObj();\n\n      if ((0, _primitives.isEOF)(obj)) {\n        break;\n      }\n\n      if ((0, _primitives.isCmd)(obj, \"endcodespacerange\")) {\n        return;\n      }\n\n      if (!(0, _util.isString)(obj)) {\n        break;\n      }\n\n      var low = strToInt(obj);\n      obj = lexer.getObj();\n\n      if (!(0, _util.isString)(obj)) {\n        break;\n      }\n\n      var high = strToInt(obj);\n      cMap.addCodespaceRange(obj.length, low, high);\n    }\n\n    throw new _util.FormatError(\"Invalid codespace range.\");\n  }\n\n  function parseWMode(cMap, lexer) {\n    var obj = lexer.getObj();\n\n    if (Number.isInteger(obj)) {\n      cMap.vertical = !!obj;\n    }\n  }\n\n  function parseCMapName(cMap, lexer) {\n    var obj = lexer.getObj();\n\n    if ((0, _primitives.isName)(obj) && (0, _util.isString)(obj.name)) {\n      cMap.name = obj.name;\n    }\n  }\n\n  function parseCMap(cMap, lexer, fetchBuiltInCMap, useCMap) {\n    var previous;\n    var embeddedUseCMap;\n\n    objLoop: while (true) {\n      try {\n        var obj = lexer.getObj();\n\n        if ((0, _primitives.isEOF)(obj)) {\n          break;\n        } else if ((0, _primitives.isName)(obj)) {\n          if (obj.name === \"WMode\") {\n            parseWMode(cMap, lexer);\n          } else if (obj.name === \"CMapName\") {\n            parseCMapName(cMap, lexer);\n          }\n\n          previous = obj;\n        } else if ((0, _primitives.isCmd)(obj)) {\n          switch (obj.cmd) {\n            case \"endcmap\":\n              break objLoop;\n\n            case \"usecmap\":\n              if ((0, _primitives.isName)(previous)) {\n                embeddedUseCMap = previous.name;\n              }\n\n              break;\n\n            case \"begincodespacerange\":\n              parseCodespaceRange(cMap, lexer);\n              break;\n\n            case \"beginbfchar\":\n              parseBfChar(cMap, lexer);\n              break;\n\n            case \"begincidchar\":\n              parseCidChar(cMap, lexer);\n              break;\n\n            case \"beginbfrange\":\n              parseBfRange(cMap, lexer);\n              break;\n\n            case \"begincidrange\":\n              parseCidRange(cMap, lexer);\n              break;\n          }\n        }\n      } catch (ex) {\n        if (ex instanceof _core_utils.MissingDataException) {\n          throw ex;\n        }\n\n        (0, _util.warn)(\"Invalid cMap data: \" + ex);\n        continue;\n      }\n    }\n\n    if (!useCMap && embeddedUseCMap) {\n      useCMap = embeddedUseCMap;\n    }\n\n    if (useCMap) {\n      return extendCMap(cMap, fetchBuiltInCMap, useCMap);\n    }\n\n    return Promise.resolve(cMap);\n  }\n\n  function extendCMap(cMap, fetchBuiltInCMap, useCMap) {\n    return createBuiltInCMap(useCMap, fetchBuiltInCMap).then(function (newCMap) {\n      cMap.useCMap = newCMap;\n\n      if (cMap.numCodespaceRanges === 0) {\n        var useCodespaceRanges = cMap.useCMap.codespaceRanges;\n\n        for (var i = 0; i < useCodespaceRanges.length; i++) {\n          cMap.codespaceRanges[i] = useCodespaceRanges[i].slice();\n        }\n\n        cMap.numCodespaceRanges = cMap.useCMap.numCodespaceRanges;\n      }\n\n      cMap.useCMap.forEach(function (key, value) {\n        if (!cMap.contains(key)) {\n          cMap.mapOne(key, cMap.useCMap.lookup(key));\n        }\n      });\n      return cMap;\n    });\n  }\n\n  function createBuiltInCMap(name, fetchBuiltInCMap) {\n    if (name === \"Identity-H\") {\n      return Promise.resolve(new IdentityCMap(false, 2));\n    } else if (name === \"Identity-V\") {\n      return Promise.resolve(new IdentityCMap(true, 2));\n    }\n\n    if (!BUILT_IN_CMAPS.includes(name)) {\n      return Promise.reject(new Error(\"Unknown CMap name: \" + name));\n    }\n\n    if (!fetchBuiltInCMap) {\n      return Promise.reject(new Error(\"Built-in CMap parameters are not provided.\"));\n    }\n\n    return fetchBuiltInCMap(name).then(function (data) {\n      var cMapData = data.cMapData,\n          compressionType = data.compressionType;\n      var cMap = new CMap(true);\n\n      if (compressionType === _util.CMapCompressionType.BINARY) {\n        return new BinaryCMapReader().process(cMapData, cMap, function (useCMap) {\n          return extendCMap(cMap, fetchBuiltInCMap, useCMap);\n        });\n      }\n\n      if (compressionType === _util.CMapCompressionType.NONE) {\n        var lexer = new _parser.Lexer(new _stream.Stream(cMapData));\n        return parseCMap(cMap, lexer, fetchBuiltInCMap, null);\n      }\n\n      return Promise.reject(new Error(\"TODO: Only BINARY/NONE CMap compression is currently supported.\"));\n    });\n  }\n\n  return {\n    async create(params) {\n      var encoding = params.encoding;\n      var fetchBuiltInCMap = params.fetchBuiltInCMap;\n      var useCMap = params.useCMap;\n\n      if ((0, _primitives.isName)(encoding)) {\n        return createBuiltInCMap(encoding.name, fetchBuiltInCMap);\n      } else if ((0, _primitives.isStream)(encoding)) {\n        var cMap = new CMap();\n        var lexer = new _parser.Lexer(encoding);\n        return parseCMap(cMap, lexer, fetchBuiltInCMap, useCMap).then(function (parsedCMap) {\n          if (parsedCMap.isIdentityCMap) {\n            return createBuiltInCMap(parsedCMap.name, fetchBuiltInCMap);\n          }\n\n          return parsedCMap;\n        });\n      }\n\n      throw new Error(\"Encoding required.\");\n    }\n\n  };\n}();\n\nexports.CMapFactory = CMapFactory;\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFontType = getFontType;\nexports.IdentityToUnicodeMap = exports.ToUnicodeMap = exports.FontFlags = exports.Font = exports.ErrorFont = exports.SEAC_ANALYSIS_ENABLED = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _cff_parser = __w_pdfjs_require__(28);\n\nvar _glyphlist = __w_pdfjs_require__(31);\n\nvar _encodings = __w_pdfjs_require__(30);\n\nvar _standard_fonts = __w_pdfjs_require__(32);\n\nvar _unicode = __w_pdfjs_require__(33);\n\nvar _core_utils = __w_pdfjs_require__(7);\n\nvar _font_renderer = __w_pdfjs_require__(34);\n\nvar _cmap = __w_pdfjs_require__(26);\n\nvar _stream = __w_pdfjs_require__(11);\n\nvar _type1_parser = __w_pdfjs_require__(35);\n\nconst PRIVATE_USE_AREAS = [[0xe000, 0xf8ff], [0x100000, 0x10fffd]];\nvar PDF_GLYPH_SPACE_UNITS = 1000;\nvar SEAC_ANALYSIS_ENABLED = true;\nexports.SEAC_ANALYSIS_ENABLED = SEAC_ANALYSIS_ENABLED;\nvar FontFlags = {\n  FixedPitch: 1,\n  Serif: 2,\n  Symbolic: 4,\n  Script: 8,\n  Nonsymbolic: 32,\n  Italic: 64,\n  AllCap: 65536,\n  SmallCap: 131072,\n  ForceBold: 262144\n};\nexports.FontFlags = FontFlags;\nvar MacStandardGlyphOrdering = [\".notdef\", \".null\", \"nonmarkingreturn\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quotesingle\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"grave\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"Adieresis\", \"Aring\", \"Ccedilla\", \"Eacute\", \"Ntilde\", \"Odieresis\", \"Udieresis\", \"aacute\", \"agrave\", \"acircumflex\", \"adieresis\", \"atilde\", \"aring\", \"ccedilla\", \"eacute\", \"egrave\", \"ecircumflex\", \"edieresis\", \"iacute\", \"igrave\", \"icircumflex\", \"idieresis\", \"ntilde\", \"oacute\", \"ograve\", \"ocircumflex\", \"odieresis\", \"otilde\", \"uacute\", \"ugrave\", \"ucircumflex\", \"udieresis\", \"dagger\", \"degree\", \"cent\", \"sterling\", \"section\", \"bullet\", \"paragraph\", \"germandbls\", \"registered\", \"copyright\", \"trademark\", \"acute\", \"dieresis\", \"notequal\", \"AE\", \"Oslash\", \"infinity\", \"plusminus\", \"lessequal\", \"greaterequal\", \"yen\", \"mu\", \"partialdiff\", \"summation\", \"product\", \"pi\", \"integral\", \"ordfeminine\", \"ordmasculine\", \"Omega\", \"ae\", \"oslash\", \"questiondown\", \"exclamdown\", \"logicalnot\", \"radical\", \"florin\", \"approxequal\", \"Delta\", \"guillemotleft\", \"guillemotright\", \"ellipsis\", \"nonbreakingspace\", \"Agrave\", \"Atilde\", \"Otilde\", \"OE\", \"oe\", \"endash\", \"emdash\", \"quotedblleft\", \"quotedblright\", \"quoteleft\", \"quoteright\", \"divide\", \"lozenge\", \"ydieresis\", \"Ydieresis\", \"fraction\", \"currency\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"daggerdbl\", \"periodcentered\", \"quotesinglbase\", \"quotedblbase\", \"perthousand\", \"Acircumflex\", \"Ecircumflex\", \"Aacute\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Oacute\", \"Ocircumflex\", \"apple\", \"Ograve\", \"Uacute\", \"Ucircumflex\", \"Ugrave\", \"dotlessi\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"ring\", \"cedilla\", \"hungarumlaut\", \"ogonek\", \"caron\", \"Lslash\", \"lslash\", \"Scaron\", \"scaron\", \"Zcaron\", \"zcaron\", \"brokenbar\", \"Eth\", \"eth\", \"Yacute\", \"yacute\", \"Thorn\", \"thorn\", \"minus\", \"multiply\", \"onesuperior\", \"twosuperior\", \"threesuperior\", \"onehalf\", \"onequarter\", \"threequarters\", \"franc\", \"Gbreve\", \"gbreve\", \"Idotaccent\", \"Scedilla\", \"scedilla\", \"Cacute\", \"cacute\", \"Ccaron\", \"ccaron\", \"dcroat\"];\n\nfunction adjustWidths(properties) {\n  if (!properties.fontMatrix) {\n    return;\n  }\n\n  if (properties.fontMatrix[0] === _util.FONT_IDENTITY_MATRIX[0]) {\n    return;\n  }\n\n  var scale = 0.001 / properties.fontMatrix[0];\n  var glyphsWidths = properties.widths;\n\n  for (var glyph in glyphsWidths) {\n    glyphsWidths[glyph] *= scale;\n  }\n\n  properties.defaultWidth *= scale;\n}\n\nfunction adjustToUnicode(properties, builtInEncoding) {\n  if (properties.hasIncludedToUnicodeMap) {\n    return;\n  }\n\n  if (properties.hasEncoding) {\n    return;\n  }\n\n  if (builtInEncoding === properties.defaultEncoding) {\n    return;\n  }\n\n  if (properties.toUnicode instanceof IdentityToUnicodeMap) {\n    return;\n  }\n\n  var toUnicode = [],\n      glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n\n  for (var charCode in builtInEncoding) {\n    var glyphName = builtInEncoding[charCode];\n    var unicode = (0, _unicode.getUnicodeForGlyph)(glyphName, glyphsUnicodeMap);\n\n    if (unicode !== -1) {\n      toUnicode[charCode] = String.fromCharCode(unicode);\n    }\n  }\n\n  properties.toUnicode.amend(toUnicode);\n}\n\nfunction getFontType(type, subtype) {\n  switch (type) {\n    case \"Type1\":\n      return subtype === \"Type1C\" ? _util.FontType.TYPE1C : _util.FontType.TYPE1;\n\n    case \"CIDFontType0\":\n      return subtype === \"CIDFontType0C\" ? _util.FontType.CIDFONTTYPE0C : _util.FontType.CIDFONTTYPE0;\n\n    case \"OpenType\":\n      return _util.FontType.OPENTYPE;\n\n    case \"TrueType\":\n      return _util.FontType.TRUETYPE;\n\n    case \"CIDFontType2\":\n      return _util.FontType.CIDFONTTYPE2;\n\n    case \"MMType1\":\n      return _util.FontType.MMTYPE1;\n\n    case \"Type0\":\n      return _util.FontType.TYPE0;\n\n    default:\n      return _util.FontType.UNKNOWN;\n  }\n}\n\nfunction recoverGlyphName(name, glyphsUnicodeMap) {\n  if (glyphsUnicodeMap[name] !== undefined) {\n    return name;\n  }\n\n  var unicode = (0, _unicode.getUnicodeForGlyph)(name, glyphsUnicodeMap);\n\n  if (unicode !== -1) {\n    for (var key in glyphsUnicodeMap) {\n      if (glyphsUnicodeMap[key] === unicode) {\n        return key;\n      }\n    }\n  }\n\n  (0, _util.info)(\"Unable to recover a standard glyph name for: \" + name);\n  return name;\n}\n\nvar Glyph = function GlyphClosure() {\n  function Glyph(fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont) {\n    this.fontChar = fontChar;\n    this.unicode = unicode;\n    this.accent = accent;\n    this.width = width;\n    this.vmetric = vmetric;\n    this.operatorListId = operatorListId;\n    this.isSpace = isSpace;\n    this.isInFont = isInFont;\n  }\n\n  Glyph.prototype.matchesForCache = function (fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont) {\n    return this.fontChar === fontChar && this.unicode === unicode && this.accent === accent && this.width === width && this.vmetric === vmetric && this.operatorListId === operatorListId && this.isSpace === isSpace && this.isInFont === isInFont;\n  };\n\n  return Glyph;\n}();\n\nvar ToUnicodeMap = function ToUnicodeMapClosure() {\n  function ToUnicodeMap(cmap = []) {\n    this._map = cmap;\n  }\n\n  ToUnicodeMap.prototype = {\n    get length() {\n      return this._map.length;\n    },\n\n    forEach(callback) {\n      for (var charCode in this._map) {\n        callback(charCode, this._map[charCode].charCodeAt(0));\n      }\n    },\n\n    has(i) {\n      return this._map[i] !== undefined;\n    },\n\n    get(i) {\n      return this._map[i];\n    },\n\n    charCodeOf(value) {\n      const map = this._map;\n\n      if (map.length <= 0x10000) {\n        return map.indexOf(value);\n      }\n\n      for (const charCode in map) {\n        if (map[charCode] === value) {\n          return charCode | 0;\n        }\n      }\n\n      return -1;\n    },\n\n    amend(map) {\n      for (var charCode in map) {\n        this._map[charCode] = map[charCode];\n      }\n    }\n\n  };\n  return ToUnicodeMap;\n}();\n\nexports.ToUnicodeMap = ToUnicodeMap;\n\nvar IdentityToUnicodeMap = function IdentityToUnicodeMapClosure() {\n  function IdentityToUnicodeMap(firstChar, lastChar) {\n    this.firstChar = firstChar;\n    this.lastChar = lastChar;\n  }\n\n  IdentityToUnicodeMap.prototype = {\n    get length() {\n      return this.lastChar + 1 - this.firstChar;\n    },\n\n    forEach(callback) {\n      for (var i = this.firstChar, ii = this.lastChar; i <= ii; i++) {\n        callback(i, i);\n      }\n    },\n\n    has(i) {\n      return this.firstChar <= i && i <= this.lastChar;\n    },\n\n    get(i) {\n      if (this.firstChar <= i && i <= this.lastChar) {\n        return String.fromCharCode(i);\n      }\n\n      return undefined;\n    },\n\n    charCodeOf(v) {\n      return Number.isInteger(v) && v >= this.firstChar && v <= this.lastChar ? v : -1;\n    },\n\n    amend(map) {\n      (0, _util.unreachable)(\"Should not call amend()\");\n    }\n\n  };\n  return IdentityToUnicodeMap;\n}();\n\nexports.IdentityToUnicodeMap = IdentityToUnicodeMap;\n\nvar OpenTypeFileBuilder = function OpenTypeFileBuilderClosure() {\n  function writeInt16(dest, offset, num) {\n    dest[offset] = num >> 8 & 0xff;\n    dest[offset + 1] = num & 0xff;\n  }\n\n  function writeInt32(dest, offset, num) {\n    dest[offset] = num >> 24 & 0xff;\n    dest[offset + 1] = num >> 16 & 0xff;\n    dest[offset + 2] = num >> 8 & 0xff;\n    dest[offset + 3] = num & 0xff;\n  }\n\n  function writeData(dest, offset, data) {\n    var i, ii;\n\n    if (data instanceof Uint8Array) {\n      dest.set(data, offset);\n    } else if (typeof data === \"string\") {\n      for (i = 0, ii = data.length; i < ii; i++) {\n        dest[offset++] = data.charCodeAt(i) & 0xff;\n      }\n    } else {\n      for (i = 0, ii = data.length; i < ii; i++) {\n        dest[offset++] = data[i] & 0xff;\n      }\n    }\n  }\n\n  function OpenTypeFileBuilder(sfnt) {\n    this.sfnt = sfnt;\n    this.tables = Object.create(null);\n  }\n\n  OpenTypeFileBuilder.getSearchParams = function OpenTypeFileBuilder_getSearchParams(entriesCount, entrySize) {\n    var maxPower2 = 1,\n        log2 = 0;\n\n    while ((maxPower2 ^ entriesCount) > maxPower2) {\n      maxPower2 <<= 1;\n      log2++;\n    }\n\n    var searchRange = maxPower2 * entrySize;\n    return {\n      range: searchRange,\n      entry: log2,\n      rangeShift: entrySize * entriesCount - searchRange\n    };\n  };\n\n  var OTF_HEADER_SIZE = 12;\n  var OTF_TABLE_ENTRY_SIZE = 16;\n  OpenTypeFileBuilder.prototype = {\n    toArray: function OpenTypeFileBuilder_toArray() {\n      var sfnt = this.sfnt;\n      var tables = this.tables;\n      var tablesNames = Object.keys(tables);\n      tablesNames.sort();\n      var numTables = tablesNames.length;\n      var i, j, jj, table, tableName;\n      var offset = OTF_HEADER_SIZE + numTables * OTF_TABLE_ENTRY_SIZE;\n      var tableOffsets = [offset];\n\n      for (i = 0; i < numTables; i++) {\n        table = tables[tablesNames[i]];\n        var paddedLength = (table.length + 3 & ~3) >>> 0;\n        offset += paddedLength;\n        tableOffsets.push(offset);\n      }\n\n      var file = new Uint8Array(offset);\n\n      for (i = 0; i < numTables; i++) {\n        table = tables[tablesNames[i]];\n        writeData(file, tableOffsets[i], table);\n      }\n\n      if (sfnt === \"true\") {\n        sfnt = (0, _util.string32)(0x00010000);\n      }\n\n      file[0] = sfnt.charCodeAt(0) & 0xff;\n      file[1] = sfnt.charCodeAt(1) & 0xff;\n      file[2] = sfnt.charCodeAt(2) & 0xff;\n      file[3] = sfnt.charCodeAt(3) & 0xff;\n      writeInt16(file, 4, numTables);\n      var searchParams = OpenTypeFileBuilder.getSearchParams(numTables, 16);\n      writeInt16(file, 6, searchParams.range);\n      writeInt16(file, 8, searchParams.entry);\n      writeInt16(file, 10, searchParams.rangeShift);\n      offset = OTF_HEADER_SIZE;\n\n      for (i = 0; i < numTables; i++) {\n        tableName = tablesNames[i];\n        file[offset] = tableName.charCodeAt(0) & 0xff;\n        file[offset + 1] = tableName.charCodeAt(1) & 0xff;\n        file[offset + 2] = tableName.charCodeAt(2) & 0xff;\n        file[offset + 3] = tableName.charCodeAt(3) & 0xff;\n        var checksum = 0;\n\n        for (j = tableOffsets[i], jj = tableOffsets[i + 1]; j < jj; j += 4) {\n          var quad = (0, _core_utils.readUint32)(file, j);\n          checksum = checksum + quad >>> 0;\n        }\n\n        writeInt32(file, offset + 4, checksum);\n        writeInt32(file, offset + 8, tableOffsets[i]);\n        writeInt32(file, offset + 12, tables[tableName].length);\n        offset += OTF_TABLE_ENTRY_SIZE;\n      }\n\n      return file;\n    },\n    addTable: function OpenTypeFileBuilder_addTable(tag, data) {\n      if (tag in this.tables) {\n        throw new Error(\"Table \" + tag + \" already exists\");\n      }\n\n      this.tables[tag] = data;\n    }\n  };\n  return OpenTypeFileBuilder;\n}();\n\nvar Font = function FontClosure() {\n  function Font(name, file, properties) {\n    var charCode;\n    this.name = name;\n    this.loadedName = properties.loadedName;\n    this.isType3Font = properties.isType3Font;\n    this.sizes = [];\n    this.missingFile = false;\n    this.glyphCache = Object.create(null);\n    this.isSerifFont = !!(properties.flags & FontFlags.Serif);\n    this.isSymbolicFont = !!(properties.flags & FontFlags.Symbolic);\n    this.isMonospace = !!(properties.flags & FontFlags.FixedPitch);\n    var type = properties.type;\n    var subtype = properties.subtype;\n    this.type = type;\n    this.subtype = subtype;\n    let fallbackName = \"sans-serif\";\n\n    if (this.isMonospace) {\n      fallbackName = \"monospace\";\n    } else if (this.isSerifFont) {\n      fallbackName = \"serif\";\n    }\n\n    this.fallbackName = fallbackName;\n    this.differences = properties.differences;\n    this.widths = properties.widths;\n    this.defaultWidth = properties.defaultWidth;\n    this.composite = properties.composite;\n    this.wideChars = properties.wideChars;\n    this.cMap = properties.cMap;\n    this.ascent = properties.ascent / PDF_GLYPH_SPACE_UNITS;\n    this.descent = properties.descent / PDF_GLYPH_SPACE_UNITS;\n    this.fontMatrix = properties.fontMatrix;\n    this.bbox = properties.bbox;\n    this.defaultEncoding = properties.defaultEncoding;\n    this.toUnicode = properties.toUnicode;\n    this.fallbackToUnicode = properties.fallbackToUnicode || new ToUnicodeMap();\n    this.toFontChar = [];\n\n    if (properties.type === \"Type3\") {\n      for (charCode = 0; charCode < 256; charCode++) {\n        this.toFontChar[charCode] = this.differences[charCode] || properties.defaultEncoding[charCode];\n      }\n\n      this.fontType = _util.FontType.TYPE3;\n      return;\n    }\n\n    this.cidEncoding = properties.cidEncoding;\n    this.vertical = properties.vertical;\n\n    if (this.vertical) {\n      this.vmetrics = properties.vmetrics;\n      this.defaultVMetrics = properties.defaultVMetrics;\n    }\n\n    if (!file || file.isEmpty) {\n      if (file) {\n        (0, _util.warn)('Font file is empty in \"' + name + '\" (' + this.loadedName + \")\");\n      }\n\n      this.fallbackToSystemFont();\n      return;\n    }\n\n    [type, subtype] = getFontFileType(file, properties);\n\n    if (type !== this.type || subtype !== this.subtype) {\n      (0, _util.info)(\"Inconsistent font file Type/SubType, expected: \" + `${this.type}/${this.subtype} but found: ${type}/${subtype}.`);\n    }\n\n    try {\n      var data;\n\n      switch (type) {\n        case \"MMType1\":\n          (0, _util.info)(\"MMType1 font (\" + name + \"), falling back to Type1.\");\n\n        case \"Type1\":\n        case \"CIDFontType0\":\n          this.mimetype = \"font/opentype\";\n          var cff = subtype === \"Type1C\" || subtype === \"CIDFontType0C\" ? new CFFFont(file, properties) : new Type1Font(name, file, properties);\n          adjustWidths(properties);\n          data = this.convert(name, cff, properties);\n          break;\n\n        case \"OpenType\":\n        case \"TrueType\":\n        case \"CIDFontType2\":\n          this.mimetype = \"font/opentype\";\n          data = this.checkAndRepair(name, file, properties);\n\n          if (this.isOpenType) {\n            adjustWidths(properties);\n            type = \"OpenType\";\n          }\n\n          break;\n\n        default:\n          throw new _util.FormatError(`Font ${type} is not supported`);\n      }\n    } catch (e) {\n      (0, _util.warn)(e);\n      this.fallbackToSystemFont();\n      return;\n    }\n\n    this.data = data;\n    this.fontType = getFontType(type, subtype);\n    this.fontMatrix = properties.fontMatrix;\n    this.widths = properties.widths;\n    this.defaultWidth = properties.defaultWidth;\n    this.toUnicode = properties.toUnicode;\n    this.encoding = properties.baseEncoding;\n    this.seacMap = properties.seacMap;\n  }\n\n  Font.getFontID = function () {\n    var ID = 1;\n    return function Font_getFontID() {\n      return String(ID++);\n    };\n  }();\n\n  function int16(b0, b1) {\n    return (b0 << 8) + b1;\n  }\n\n  function writeSignedInt16(bytes, index, value) {\n    bytes[index + 1] = value;\n    bytes[index] = value >>> 8;\n  }\n\n  function signedInt16(b0, b1) {\n    var value = (b0 << 8) + b1;\n    return value & 1 << 15 ? value - 0x10000 : value;\n  }\n\n  function int32(b0, b1, b2, b3) {\n    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n  }\n\n  function string16(value) {\n    return String.fromCharCode(value >> 8 & 0xff, value & 0xff);\n  }\n\n  function safeString16(value) {\n    if (value > 0x7fff) {\n      value = 0x7fff;\n    } else if (value < -0x8000) {\n      value = -0x8000;\n    }\n\n    return String.fromCharCode(value >> 8 & 0xff, value & 0xff);\n  }\n\n  function isTrueTypeFile(file) {\n    var header = file.peekBytes(4);\n    return (0, _core_utils.readUint32)(header, 0) === 0x00010000 || (0, _util.bytesToString)(header) === \"true\";\n  }\n\n  function isTrueTypeCollectionFile(file) {\n    const header = file.peekBytes(4);\n    return (0, _util.bytesToString)(header) === \"ttcf\";\n  }\n\n  function isOpenTypeFile(file) {\n    var header = file.peekBytes(4);\n    return (0, _util.bytesToString)(header) === \"OTTO\";\n  }\n\n  function isType1File(file) {\n    var header = file.peekBytes(2);\n\n    if (header[0] === 0x25 && header[1] === 0x21) {\n      return true;\n    }\n\n    if (header[0] === 0x80 && header[1] === 0x01) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function isCFFFile(file) {\n    const header = file.peekBytes(4);\n\n    if (header[0] >= 1 && header[3] >= 1 && header[3] <= 4) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function getFontFileType(file, {\n    type,\n    subtype,\n    composite\n  }) {\n    let fileType, fileSubtype;\n\n    if (isTrueTypeFile(file) || isTrueTypeCollectionFile(file)) {\n      if (composite) {\n        fileType = \"CIDFontType2\";\n      } else {\n        fileType = \"TrueType\";\n      }\n    } else if (isOpenTypeFile(file)) {\n      if (composite) {\n        fileType = \"CIDFontType2\";\n      } else {\n        fileType = \"OpenType\";\n      }\n    } else if (isType1File(file)) {\n      if (composite) {\n        fileType = \"CIDFontType0\";\n      } else {\n        fileType = type === \"MMType1\" ? \"MMType1\" : \"Type1\";\n      }\n    } else if (isCFFFile(file)) {\n      if (composite) {\n        fileType = \"CIDFontType0\";\n        fileSubtype = \"CIDFontType0C\";\n      } else {\n        fileType = type === \"MMType1\" ? \"MMType1\" : \"Type1\";\n        fileSubtype = \"Type1C\";\n      }\n    } else {\n      (0, _util.warn)(\"getFontFileType: Unable to detect correct font file Type/Subtype.\");\n      fileType = type;\n      fileSubtype = subtype;\n    }\n\n    return [fileType, fileSubtype];\n  }\n\n  function buildToFontChar(encoding, glyphsUnicodeMap, differences) {\n    var toFontChar = [],\n        unicode;\n\n    for (var i = 0, ii = encoding.length; i < ii; i++) {\n      unicode = (0, _unicode.getUnicodeForGlyph)(encoding[i], glyphsUnicodeMap);\n\n      if (unicode !== -1) {\n        toFontChar[i] = unicode;\n      }\n    }\n\n    for (var charCode in differences) {\n      unicode = (0, _unicode.getUnicodeForGlyph)(differences[charCode], glyphsUnicodeMap);\n\n      if (unicode !== -1) {\n        toFontChar[+charCode] = unicode;\n      }\n    }\n\n    return toFontChar;\n  }\n\n  function adjustMapping(charCodeToGlyphId, hasGlyph, newGlyphZeroId) {\n    var newMap = Object.create(null);\n    var toFontChar = [];\n    var privateUseAreaIndex = 0;\n    var nextAvailableFontCharCode = PRIVATE_USE_AREAS[privateUseAreaIndex][0];\n    var privateUseOffetEnd = PRIVATE_USE_AREAS[privateUseAreaIndex][1];\n\n    for (var originalCharCode in charCodeToGlyphId) {\n      originalCharCode |= 0;\n      var glyphId = charCodeToGlyphId[originalCharCode];\n\n      if (!hasGlyph(glyphId)) {\n        continue;\n      }\n\n      if (nextAvailableFontCharCode > privateUseOffetEnd) {\n        privateUseAreaIndex++;\n\n        if (privateUseAreaIndex >= PRIVATE_USE_AREAS.length) {\n          (0, _util.warn)(\"Ran out of space in font private use area.\");\n          break;\n        }\n\n        nextAvailableFontCharCode = PRIVATE_USE_AREAS[privateUseAreaIndex][0];\n        privateUseOffetEnd = PRIVATE_USE_AREAS[privateUseAreaIndex][1];\n      }\n\n      var fontCharCode = nextAvailableFontCharCode++;\n\n      if (glyphId === 0) {\n        glyphId = newGlyphZeroId;\n      }\n\n      newMap[fontCharCode] = glyphId;\n      toFontChar[originalCharCode] = fontCharCode;\n    }\n\n    return {\n      toFontChar,\n      charCodeToGlyphId: newMap,\n      nextAvailableFontCharCode\n    };\n  }\n\n  function getRanges(glyphs, numGlyphs) {\n    var codes = [];\n\n    for (var charCode in glyphs) {\n      if (glyphs[charCode] >= numGlyphs) {\n        continue;\n      }\n\n      codes.push({\n        fontCharCode: charCode | 0,\n        glyphId: glyphs[charCode]\n      });\n    }\n\n    if (codes.length === 0) {\n      codes.push({\n        fontCharCode: 0,\n        glyphId: 0\n      });\n    }\n\n    codes.sort(function fontGetRangesSort(a, b) {\n      return a.fontCharCode - b.fontCharCode;\n    });\n    var ranges = [];\n    var length = codes.length;\n\n    for (var n = 0; n < length;) {\n      var start = codes[n].fontCharCode;\n      var codeIndices = [codes[n].glyphId];\n      ++n;\n      var end = start;\n\n      while (n < length && end + 1 === codes[n].fontCharCode) {\n        codeIndices.push(codes[n].glyphId);\n        ++end;\n        ++n;\n\n        if (end === 0xffff) {\n          break;\n        }\n      }\n\n      ranges.push([start, end, codeIndices]);\n    }\n\n    return ranges;\n  }\n\n  function createCmapTable(glyphs, numGlyphs) {\n    var ranges = getRanges(glyphs, numGlyphs);\n    var numTables = ranges[ranges.length - 1][1] > 0xffff ? 2 : 1;\n    var cmap = \"\\x00\\x00\" + string16(numTables) + \"\\x00\\x03\" + \"\\x00\\x01\" + (0, _util.string32)(4 + numTables * 8);\n    var i, ii, j, jj;\n\n    for (i = ranges.length - 1; i >= 0; --i) {\n      if (ranges[i][0] <= 0xffff) {\n        break;\n      }\n    }\n\n    var bmpLength = i + 1;\n\n    if (ranges[i][0] < 0xffff && ranges[i][1] === 0xffff) {\n      ranges[i][1] = 0xfffe;\n    }\n\n    var trailingRangesCount = ranges[i][1] < 0xffff ? 1 : 0;\n    var segCount = bmpLength + trailingRangesCount;\n    var searchParams = OpenTypeFileBuilder.getSearchParams(segCount, 2);\n    var startCount = \"\";\n    var endCount = \"\";\n    var idDeltas = \"\";\n    var idRangeOffsets = \"\";\n    var glyphsIds = \"\";\n    var bias = 0;\n    var range, start, end, codes;\n\n    for (i = 0, ii = bmpLength; i < ii; i++) {\n      range = ranges[i];\n      start = range[0];\n      end = range[1];\n      startCount += string16(start);\n      endCount += string16(end);\n      codes = range[2];\n      var contiguous = true;\n\n      for (j = 1, jj = codes.length; j < jj; ++j) {\n        if (codes[j] !== codes[j - 1] + 1) {\n          contiguous = false;\n          break;\n        }\n      }\n\n      if (!contiguous) {\n        var offset = (segCount - i) * 2 + bias * 2;\n        bias += end - start + 1;\n        idDeltas += string16(0);\n        idRangeOffsets += string16(offset);\n\n        for (j = 0, jj = codes.length; j < jj; ++j) {\n          glyphsIds += string16(codes[j]);\n        }\n      } else {\n        var startCode = codes[0];\n        idDeltas += string16(startCode - start & 0xffff);\n        idRangeOffsets += string16(0);\n      }\n    }\n\n    if (trailingRangesCount > 0) {\n      endCount += \"\\xFF\\xFF\";\n      startCount += \"\\xFF\\xFF\";\n      idDeltas += \"\\x00\\x01\";\n      idRangeOffsets += \"\\x00\\x00\";\n    }\n\n    var format314 = \"\\x00\\x00\" + string16(2 * segCount) + string16(searchParams.range) + string16(searchParams.entry) + string16(searchParams.rangeShift) + endCount + \"\\x00\\x00\" + startCount + idDeltas + idRangeOffsets + glyphsIds;\n    var format31012 = \"\";\n    var header31012 = \"\";\n\n    if (numTables > 1) {\n      cmap += \"\\x00\\x03\" + \"\\x00\\x0A\" + (0, _util.string32)(4 + numTables * 8 + 4 + format314.length);\n      format31012 = \"\";\n\n      for (i = 0, ii = ranges.length; i < ii; i++) {\n        range = ranges[i];\n        start = range[0];\n        codes = range[2];\n        var code = codes[0];\n\n        for (j = 1, jj = codes.length; j < jj; ++j) {\n          if (codes[j] !== codes[j - 1] + 1) {\n            end = range[0] + j - 1;\n            format31012 += (0, _util.string32)(start) + (0, _util.string32)(end) + (0, _util.string32)(code);\n            start = end + 1;\n            code = codes[j];\n          }\n        }\n\n        format31012 += (0, _util.string32)(start) + (0, _util.string32)(range[1]) + (0, _util.string32)(code);\n      }\n\n      header31012 = \"\\x00\\x0C\" + \"\\x00\\x00\" + (0, _util.string32)(format31012.length + 16) + \"\\x00\\x00\\x00\\x00\" + (0, _util.string32)(format31012.length / 12);\n    }\n\n    return cmap + \"\\x00\\x04\" + string16(format314.length + 4) + format314 + header31012 + format31012;\n  }\n\n  function validateOS2Table(os2) {\n    var stream = new _stream.Stream(os2.data);\n    var version = stream.getUint16();\n    stream.getBytes(60);\n    var selection = stream.getUint16();\n\n    if (version < 4 && selection & 0x0300) {\n      return false;\n    }\n\n    var firstChar = stream.getUint16();\n    var lastChar = stream.getUint16();\n\n    if (firstChar > lastChar) {\n      return false;\n    }\n\n    stream.getBytes(6);\n    var usWinAscent = stream.getUint16();\n\n    if (usWinAscent === 0) {\n      return false;\n    }\n\n    os2.data[8] = os2.data[9] = 0;\n    return true;\n  }\n\n  function createOS2Table(properties, charstrings, override) {\n    override = override || {\n      unitsPerEm: 0,\n      yMax: 0,\n      yMin: 0,\n      ascent: 0,\n      descent: 0\n    };\n    var ulUnicodeRange1 = 0;\n    var ulUnicodeRange2 = 0;\n    var ulUnicodeRange3 = 0;\n    var ulUnicodeRange4 = 0;\n    var firstCharIndex = null;\n    var lastCharIndex = 0;\n\n    if (charstrings) {\n      for (var code in charstrings) {\n        code |= 0;\n\n        if (firstCharIndex > code || !firstCharIndex) {\n          firstCharIndex = code;\n        }\n\n        if (lastCharIndex < code) {\n          lastCharIndex = code;\n        }\n\n        var position = (0, _unicode.getUnicodeRangeFor)(code);\n\n        if (position < 32) {\n          ulUnicodeRange1 |= 1 << position;\n        } else if (position < 64) {\n          ulUnicodeRange2 |= 1 << position - 32;\n        } else if (position < 96) {\n          ulUnicodeRange3 |= 1 << position - 64;\n        } else if (position < 123) {\n          ulUnicodeRange4 |= 1 << position - 96;\n        } else {\n          throw new _util.FormatError(\"Unicode ranges Bits > 123 are reserved for internal usage\");\n        }\n      }\n\n      if (lastCharIndex > 0xffff) {\n        lastCharIndex = 0xffff;\n      }\n    } else {\n      firstCharIndex = 0;\n      lastCharIndex = 255;\n    }\n\n    var bbox = properties.bbox || [0, 0, 0, 0];\n    var unitsPerEm = override.unitsPerEm || 1 / (properties.fontMatrix || _util.FONT_IDENTITY_MATRIX)[0];\n    var scale = properties.ascentScaled ? 1.0 : unitsPerEm / PDF_GLYPH_SPACE_UNITS;\n    var typoAscent = override.ascent || Math.round(scale * (properties.ascent || bbox[3]));\n    var typoDescent = override.descent || Math.round(scale * (properties.descent || bbox[1]));\n\n    if (typoDescent > 0 && properties.descent > 0 && bbox[1] < 0) {\n      typoDescent = -typoDescent;\n    }\n\n    var winAscent = override.yMax || typoAscent;\n    var winDescent = -override.yMin || -typoDescent;\n    return \"\\x00\\x03\" + \"\\x02\\x24\" + \"\\x01\\xF4\" + \"\\x00\\x05\" + \"\\x00\\x00\" + \"\\x02\\x8A\" + \"\\x02\\xBB\" + \"\\x00\\x00\" + \"\\x00\\x8C\" + \"\\x02\\x8A\" + \"\\x02\\xBB\" + \"\\x00\\x00\" + \"\\x01\\xDF\" + \"\\x00\\x31\" + \"\\x01\\x02\" + \"\\x00\\x00\" + \"\\x00\\x00\\x06\" + String.fromCharCode(properties.fixedPitch ? 0x09 : 0x00) + \"\\x00\\x00\\x00\\x00\\x00\\x00\" + (0, _util.string32)(ulUnicodeRange1) + (0, _util.string32)(ulUnicodeRange2) + (0, _util.string32)(ulUnicodeRange3) + (0, _util.string32)(ulUnicodeRange4) + \"\\x2A\\x32\\x31\\x2A\" + string16(properties.italicAngle ? 1 : 0) + string16(firstCharIndex || properties.firstChar) + string16(lastCharIndex || properties.lastChar) + string16(typoAscent) + string16(typoDescent) + \"\\x00\\x64\" + string16(winAscent) + string16(winDescent) + \"\\x00\\x00\\x00\\x00\" + \"\\x00\\x00\\x00\\x00\" + string16(properties.xHeight) + string16(properties.capHeight) + string16(0) + string16(firstCharIndex || properties.firstChar) + \"\\x00\\x03\";\n  }\n\n  function createPostTable(properties) {\n    var angle = Math.floor(properties.italicAngle * 2 ** 16);\n    return \"\\x00\\x03\\x00\\x00\" + (0, _util.string32)(angle) + \"\\x00\\x00\" + \"\\x00\\x00\" + (0, _util.string32)(properties.fixedPitch) + \"\\x00\\x00\\x00\\x00\" + \"\\x00\\x00\\x00\\x00\" + \"\\x00\\x00\\x00\\x00\" + \"\\x00\\x00\\x00\\x00\";\n  }\n\n  function createNameTable(name, proto) {\n    if (!proto) {\n      proto = [[], []];\n    }\n\n    var strings = [proto[0][0] || \"Original licence\", proto[0][1] || name, proto[0][2] || \"Unknown\", proto[0][3] || \"uniqueID\", proto[0][4] || name, proto[0][5] || \"Version 0.11\", proto[0][6] || \"\", proto[0][7] || \"Unknown\", proto[0][8] || \"Unknown\", proto[0][9] || \"Unknown\"];\n    var stringsUnicode = [];\n    var i, ii, j, jj, str;\n\n    for (i = 0, ii = strings.length; i < ii; i++) {\n      str = proto[1][i] || strings[i];\n      var strBufUnicode = [];\n\n      for (j = 0, jj = str.length; j < jj; j++) {\n        strBufUnicode.push(string16(str.charCodeAt(j)));\n      }\n\n      stringsUnicode.push(strBufUnicode.join(\"\"));\n    }\n\n    var names = [strings, stringsUnicode];\n    var platforms = [\"\\x00\\x01\", \"\\x00\\x03\"];\n    var encodings = [\"\\x00\\x00\", \"\\x00\\x01\"];\n    var languages = [\"\\x00\\x00\", \"\\x04\\x09\"];\n    var namesRecordCount = strings.length * platforms.length;\n    var nameTable = \"\\x00\\x00\" + string16(namesRecordCount) + string16(namesRecordCount * 12 + 6);\n    var strOffset = 0;\n\n    for (i = 0, ii = platforms.length; i < ii; i++) {\n      var strs = names[i];\n\n      for (j = 0, jj = strs.length; j < jj; j++) {\n        str = strs[j];\n        var nameRecord = platforms[i] + encodings[i] + languages[i] + string16(j) + string16(str.length) + string16(strOffset);\n        nameTable += nameRecord;\n        strOffset += str.length;\n      }\n    }\n\n    nameTable += strings.join(\"\") + stringsUnicode.join(\"\");\n    return nameTable;\n  }\n\n  Font.prototype = {\n    name: null,\n    font: null,\n    mimetype: null,\n    encoding: null,\n    disableFontFace: false,\n\n    get renderer() {\n      var renderer = _font_renderer.FontRendererFactory.create(this, SEAC_ANALYSIS_ENABLED);\n\n      return (0, _util.shadow)(this, \"renderer\", renderer);\n    },\n\n    exportData: function Font_exportData() {\n      var data = {};\n\n      for (var i in this) {\n        if (this.hasOwnProperty(i)) {\n          data[i] = this[i];\n        }\n      }\n\n      return data;\n    },\n    fallbackToSystemFont: function Font_fallbackToSystemFont() {\n      this.missingFile = true;\n      var charCode, unicode;\n      var name = this.name;\n      var type = this.type;\n      var subtype = this.subtype;\n      let fontName = name.replace(/[,_]/g, \"-\").replace(/\\s/g, \"\");\n      var stdFontMap = (0, _standard_fonts.getStdFontMap)(),\n          nonStdFontMap = (0, _standard_fonts.getNonStdFontMap)();\n      var isStandardFont = !!stdFontMap[fontName] || !!(nonStdFontMap[fontName] && stdFontMap[nonStdFontMap[fontName]]);\n      fontName = stdFontMap[fontName] || nonStdFontMap[fontName] || fontName;\n      this.bold = fontName.search(/bold/gi) !== -1;\n      this.italic = fontName.search(/oblique/gi) !== -1 || fontName.search(/italic/gi) !== -1;\n      this.black = name.search(/Black/g) !== -1;\n      this.remeasure = Object.keys(this.widths).length > 0;\n\n      if (isStandardFont && type === \"CIDFontType2\" && this.cidEncoding.startsWith(\"Identity-\")) {\n        const GlyphMapForStandardFonts = (0, _standard_fonts.getGlyphMapForStandardFonts)();\n        const map = [];\n\n        for (charCode in GlyphMapForStandardFonts) {\n          map[+charCode] = GlyphMapForStandardFonts[charCode];\n        }\n\n        if (/Arial-?Black/i.test(name)) {\n          var SupplementalGlyphMapForArialBlack = (0, _standard_fonts.getSupplementalGlyphMapForArialBlack)();\n\n          for (charCode in SupplementalGlyphMapForArialBlack) {\n            map[+charCode] = SupplementalGlyphMapForArialBlack[charCode];\n          }\n        } else if (/Calibri/i.test(name)) {\n          const SupplementalGlyphMapForCalibri = (0, _standard_fonts.getSupplementalGlyphMapForCalibri)();\n\n          for (charCode in SupplementalGlyphMapForCalibri) {\n            map[+charCode] = SupplementalGlyphMapForCalibri[charCode];\n          }\n        }\n\n        var isIdentityUnicode = this.toUnicode instanceof IdentityToUnicodeMap;\n\n        if (!isIdentityUnicode) {\n          this.toUnicode.forEach(function (charCode, unicodeCharCode) {\n            map[+charCode] = unicodeCharCode;\n          });\n        }\n\n        this.toFontChar = map;\n        this.toUnicode = new ToUnicodeMap(map);\n      } else if (/Symbol/i.test(fontName)) {\n        this.toFontChar = buildToFontChar(_encodings.SymbolSetEncoding, (0, _glyphlist.getGlyphsUnicode)(), this.differences);\n      } else if (/Dingbats/i.test(fontName)) {\n        if (/Wingdings/i.test(name)) {\n          (0, _util.warn)(\"Non-embedded Wingdings font, falling back to ZapfDingbats.\");\n        }\n\n        this.toFontChar = buildToFontChar(_encodings.ZapfDingbatsEncoding, (0, _glyphlist.getDingbatsGlyphsUnicode)(), this.differences);\n      } else if (isStandardFont) {\n        this.toFontChar = buildToFontChar(this.defaultEncoding, (0, _glyphlist.getGlyphsUnicode)(), this.differences);\n      } else {\n        const glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n        const map = [];\n        this.toUnicode.forEach((charCode, unicodeCharCode) => {\n          if (!this.composite) {\n            var glyphName = this.differences[charCode] || this.defaultEncoding[charCode];\n            unicode = (0, _unicode.getUnicodeForGlyph)(glyphName, glyphsUnicodeMap);\n\n            if (unicode !== -1) {\n              unicodeCharCode = unicode;\n            }\n          }\n\n          map[+charCode] = unicodeCharCode;\n        });\n\n        if (this.composite && this.toUnicode instanceof IdentityToUnicodeMap) {\n          if (/Verdana/i.test(name)) {\n            const GlyphMapForStandardFonts = (0, _standard_fonts.getGlyphMapForStandardFonts)();\n\n            for (charCode in GlyphMapForStandardFonts) {\n              map[+charCode] = GlyphMapForStandardFonts[charCode];\n            }\n          }\n        }\n\n        this.toFontChar = map;\n      }\n\n      this.loadedName = fontName.split(\"-\")[0];\n      this.fontType = getFontType(type, subtype);\n    },\n    checkAndRepair: function Font_checkAndRepair(name, font, properties) {\n      const VALID_TABLES = [\"OS/2\", \"cmap\", \"head\", \"hhea\", \"hmtx\", \"maxp\", \"name\", \"post\", \"loca\", \"glyf\", \"fpgm\", \"prep\", \"cvt \", \"CFF \"];\n\n      function readTables(file, numTables) {\n        const tables = Object.create(null);\n        tables[\"OS/2\"] = null;\n        tables[\"cmap\"] = null;\n        tables[\"head\"] = null;\n        tables[\"hhea\"] = null;\n        tables[\"hmtx\"] = null;\n        tables[\"maxp\"] = null;\n        tables[\"name\"] = null;\n        tables[\"post\"] = null;\n\n        for (let i = 0; i < numTables; i++) {\n          const table = readTableEntry(font);\n\n          if (!VALID_TABLES.includes(table.tag)) {\n            continue;\n          }\n\n          if (table.length === 0) {\n            continue;\n          }\n\n          tables[table.tag] = table;\n        }\n\n        return tables;\n      }\n\n      function readTableEntry(file) {\n        var tag = (0, _util.bytesToString)(file.getBytes(4));\n        var checksum = file.getInt32() >>> 0;\n        var offset = file.getInt32() >>> 0;\n        var length = file.getInt32() >>> 0;\n        var previousPosition = file.pos;\n        file.pos = file.start ? file.start : 0;\n        file.skip(offset);\n        var data = file.getBytes(length);\n        file.pos = previousPosition;\n\n        if (tag === \"head\") {\n          data[8] = data[9] = data[10] = data[11] = 0;\n          data[17] |= 0x20;\n        }\n\n        return {\n          tag,\n          checksum,\n          length,\n          offset,\n          data\n        };\n      }\n\n      function readOpenTypeHeader(ttf) {\n        return {\n          version: (0, _util.bytesToString)(ttf.getBytes(4)),\n          numTables: ttf.getUint16(),\n          searchRange: ttf.getUint16(),\n          entrySelector: ttf.getUint16(),\n          rangeShift: ttf.getUint16()\n        };\n      }\n\n      function readTrueTypeCollectionHeader(ttc) {\n        const ttcTag = (0, _util.bytesToString)(ttc.getBytes(4));\n        (0, _util.assert)(ttcTag === \"ttcf\", \"Must be a TrueType Collection font.\");\n        const majorVersion = ttc.getUint16();\n        const minorVersion = ttc.getUint16();\n        const numFonts = ttc.getInt32() >>> 0;\n        const offsetTable = [];\n\n        for (let i = 0; i < numFonts; i++) {\n          offsetTable.push(ttc.getInt32() >>> 0);\n        }\n\n        const header = {\n          ttcTag,\n          majorVersion,\n          minorVersion,\n          numFonts,\n          offsetTable\n        };\n\n        switch (majorVersion) {\n          case 1:\n            return header;\n\n          case 2:\n            header.dsigTag = ttc.getInt32() >>> 0;\n            header.dsigLength = ttc.getInt32() >>> 0;\n            header.dsigOffset = ttc.getInt32() >>> 0;\n            return header;\n        }\n\n        throw new _util.FormatError(`Invalid TrueType Collection majorVersion: ${majorVersion}.`);\n      }\n\n      function readTrueTypeCollectionData(ttc, fontName) {\n        const {\n          numFonts,\n          offsetTable\n        } = readTrueTypeCollectionHeader(ttc);\n\n        for (let i = 0; i < numFonts; i++) {\n          ttc.pos = (ttc.start || 0) + offsetTable[i];\n          const potentialHeader = readOpenTypeHeader(ttc);\n          const potentialTables = readTables(ttc, potentialHeader.numTables);\n\n          if (!potentialTables[\"name\"]) {\n            throw new _util.FormatError('TrueType Collection font must contain a \"name\" table.');\n          }\n\n          const nameTable = readNameTable(potentialTables[\"name\"]);\n\n          for (let j = 0, jj = nameTable.length; j < jj; j++) {\n            for (let k = 0, kk = nameTable[j].length; k < kk; k++) {\n              const nameEntry = nameTable[j][k];\n\n              if (nameEntry && nameEntry.replace(/\\s/g, \"\") === fontName) {\n                return {\n                  header: potentialHeader,\n                  tables: potentialTables\n                };\n              }\n            }\n          }\n        }\n\n        throw new _util.FormatError(`TrueType Collection does not contain \"${fontName}\" font.`);\n      }\n\n      function readCmapTable(cmap, font, isSymbolicFont, hasEncoding) {\n        if (!cmap) {\n          (0, _util.warn)(\"No cmap table available.\");\n          return {\n            platformId: -1,\n            encodingId: -1,\n            mappings: [],\n            hasShortCmap: false\n          };\n        }\n\n        var segment;\n        var start = (font.start ? font.start : 0) + cmap.offset;\n        font.pos = start;\n        font.getUint16();\n        var numTables = font.getUint16();\n        var potentialTable;\n        var canBreak = false;\n\n        for (var i = 0; i < numTables; i++) {\n          var platformId = font.getUint16();\n          var encodingId = font.getUint16();\n          var offset = font.getInt32() >>> 0;\n          var useTable = false;\n\n          if (potentialTable && potentialTable.platformId === platformId && potentialTable.encodingId === encodingId) {\n            continue;\n          }\n\n          if (platformId === 0 && encodingId === 0) {\n            useTable = true;\n          } else if (platformId === 1 && encodingId === 0) {\n            useTable = true;\n          } else if (platformId === 3 && encodingId === 1 && (hasEncoding || !potentialTable)) {\n            useTable = true;\n\n            if (!isSymbolicFont) {\n              canBreak = true;\n            }\n          } else if (isSymbolicFont && platformId === 3 && encodingId === 0) {\n            useTable = true;\n            canBreak = true;\n          }\n\n          if (useTable) {\n            potentialTable = {\n              platformId,\n              encodingId,\n              offset\n            };\n          }\n\n          if (canBreak) {\n            break;\n          }\n        }\n\n        if (potentialTable) {\n          font.pos = start + potentialTable.offset;\n        }\n\n        if (!potentialTable || font.peekByte() === -1) {\n          (0, _util.warn)(\"Could not find a preferred cmap table.\");\n          return {\n            platformId: -1,\n            encodingId: -1,\n            mappings: [],\n            hasShortCmap: false\n          };\n        }\n\n        var format = font.getUint16();\n        font.getUint16();\n        font.getUint16();\n        var hasShortCmap = false;\n        var mappings = [];\n        var j, glyphId;\n\n        if (format === 0) {\n          for (j = 0; j < 256; j++) {\n            var index = font.getByte();\n\n            if (!index) {\n              continue;\n            }\n\n            mappings.push({\n              charCode: j,\n              glyphId: index\n            });\n          }\n\n          hasShortCmap = true;\n        } else if (format === 4) {\n          var segCount = font.getUint16() >> 1;\n          font.getBytes(6);\n          var segIndex,\n              segments = [];\n\n          for (segIndex = 0; segIndex < segCount; segIndex++) {\n            segments.push({\n              end: font.getUint16()\n            });\n          }\n\n          font.getUint16();\n\n          for (segIndex = 0; segIndex < segCount; segIndex++) {\n            segments[segIndex].start = font.getUint16();\n          }\n\n          for (segIndex = 0; segIndex < segCount; segIndex++) {\n            segments[segIndex].delta = font.getUint16();\n          }\n\n          var offsetsCount = 0;\n\n          for (segIndex = 0; segIndex < segCount; segIndex++) {\n            segment = segments[segIndex];\n            var rangeOffset = font.getUint16();\n\n            if (!rangeOffset) {\n              segment.offsetIndex = -1;\n              continue;\n            }\n\n            var offsetIndex = (rangeOffset >> 1) - (segCount - segIndex);\n            segment.offsetIndex = offsetIndex;\n            offsetsCount = Math.max(offsetsCount, offsetIndex + segment.end - segment.start + 1);\n          }\n\n          var offsets = [];\n\n          for (j = 0; j < offsetsCount; j++) {\n            offsets.push(font.getUint16());\n          }\n\n          for (segIndex = 0; segIndex < segCount; segIndex++) {\n            segment = segments[segIndex];\n            start = segment.start;\n            var end = segment.end;\n            var delta = segment.delta;\n            offsetIndex = segment.offsetIndex;\n\n            for (j = start; j <= end; j++) {\n              if (j === 0xffff) {\n                continue;\n              }\n\n              glyphId = offsetIndex < 0 ? j : offsets[offsetIndex + j - start];\n              glyphId = glyphId + delta & 0xffff;\n              mappings.push({\n                charCode: j,\n                glyphId\n              });\n            }\n          }\n        } else if (format === 6) {\n          var firstCode = font.getUint16();\n          var entryCount = font.getUint16();\n\n          for (j = 0; j < entryCount; j++) {\n            glyphId = font.getUint16();\n            var charCode = firstCode + j;\n            mappings.push({\n              charCode,\n              glyphId\n            });\n          }\n        } else {\n          (0, _util.warn)(\"cmap table has unsupported format: \" + format);\n          return {\n            platformId: -1,\n            encodingId: -1,\n            mappings: [],\n            hasShortCmap: false\n          };\n        }\n\n        mappings.sort(function (a, b) {\n          return a.charCode - b.charCode;\n        });\n\n        for (i = 1; i < mappings.length; i++) {\n          if (mappings[i - 1].charCode === mappings[i].charCode) {\n            mappings.splice(i, 1);\n            i--;\n          }\n        }\n\n        return {\n          platformId: potentialTable.platformId,\n          encodingId: potentialTable.encodingId,\n          mappings,\n          hasShortCmap\n        };\n      }\n\n      function sanitizeMetrics(font, header, metrics, numGlyphs, dupFirstEntry) {\n        if (!header) {\n          if (metrics) {\n            metrics.data = null;\n          }\n\n          return;\n        }\n\n        font.pos = (font.start ? font.start : 0) + header.offset;\n        font.pos += 4;\n        font.pos += 2;\n        font.pos += 2;\n        font.pos += 2;\n        font.pos += 2;\n        font.pos += 2;\n        font.pos += 2;\n        font.pos += 2;\n        font.pos += 2;\n        font.pos += 2;\n        font.pos += 2;\n        font.pos += 8;\n        font.pos += 2;\n        var numOfMetrics = font.getUint16();\n\n        if (numOfMetrics > numGlyphs) {\n          (0, _util.info)(\"The numOfMetrics (\" + numOfMetrics + \") should not be \" + \"greater than the numGlyphs (\" + numGlyphs + \")\");\n          numOfMetrics = numGlyphs;\n          header.data[34] = (numOfMetrics & 0xff00) >> 8;\n          header.data[35] = numOfMetrics & 0x00ff;\n        }\n\n        var numOfSidebearings = numGlyphs - numOfMetrics;\n        var numMissing = numOfSidebearings - (metrics.length - numOfMetrics * 4 >> 1);\n\n        if (numMissing > 0) {\n          var entries = new Uint8Array(metrics.length + numMissing * 2);\n          entries.set(metrics.data);\n\n          if (dupFirstEntry) {\n            entries[metrics.length] = metrics.data[2];\n            entries[metrics.length + 1] = metrics.data[3];\n          }\n\n          metrics.data = entries;\n        }\n      }\n\n      function sanitizeGlyph(source, sourceStart, sourceEnd, dest, destStart, hintsValid) {\n        var glyphProfile = {\n          length: 0,\n          sizeOfInstructions: 0\n        };\n\n        if (sourceEnd - sourceStart <= 12) {\n          return glyphProfile;\n        }\n\n        var glyf = source.subarray(sourceStart, sourceEnd);\n        var contoursCount = signedInt16(glyf[0], glyf[1]);\n\n        if (contoursCount < 0) {\n          contoursCount = -1;\n          writeSignedInt16(glyf, 0, contoursCount);\n          dest.set(glyf, destStart);\n          glyphProfile.length = glyf.length;\n          return glyphProfile;\n        }\n\n        var i,\n            j = 10,\n            flagsCount = 0;\n\n        for (i = 0; i < contoursCount; i++) {\n          var endPoint = glyf[j] << 8 | glyf[j + 1];\n          flagsCount = endPoint + 1;\n          j += 2;\n        }\n\n        var instructionsStart = j;\n        var instructionsLength = glyf[j] << 8 | glyf[j + 1];\n        glyphProfile.sizeOfInstructions = instructionsLength;\n        j += 2 + instructionsLength;\n        var instructionsEnd = j;\n        var coordinatesLength = 0;\n\n        for (i = 0; i < flagsCount; i++) {\n          var flag = glyf[j++];\n\n          if (flag & 0xc0) {\n            glyf[j - 1] = flag & 0x3f;\n          }\n\n          let xLength = 2;\n\n          if (flag & 2) {\n            xLength = 1;\n          } else if (flag & 16) {\n            xLength = 0;\n          }\n\n          let yLength = 2;\n\n          if (flag & 4) {\n            yLength = 1;\n          } else if (flag & 32) {\n            yLength = 0;\n          }\n\n          const xyLength = xLength + yLength;\n          coordinatesLength += xyLength;\n\n          if (flag & 8) {\n            var repeat = glyf[j++];\n            i += repeat;\n            coordinatesLength += repeat * xyLength;\n          }\n        }\n\n        if (coordinatesLength === 0) {\n          return glyphProfile;\n        }\n\n        var glyphDataLength = j + coordinatesLength;\n\n        if (glyphDataLength > glyf.length) {\n          return glyphProfile;\n        }\n\n        if (!hintsValid && instructionsLength > 0) {\n          dest.set(glyf.subarray(0, instructionsStart), destStart);\n          dest.set([0, 0], destStart + instructionsStart);\n          dest.set(glyf.subarray(instructionsEnd, glyphDataLength), destStart + instructionsStart + 2);\n          glyphDataLength -= instructionsLength;\n\n          if (glyf.length - glyphDataLength > 3) {\n            glyphDataLength = glyphDataLength + 3 & ~3;\n          }\n\n          glyphProfile.length = glyphDataLength;\n          return glyphProfile;\n        }\n\n        if (glyf.length - glyphDataLength > 3) {\n          glyphDataLength = glyphDataLength + 3 & ~3;\n          dest.set(glyf.subarray(0, glyphDataLength), destStart);\n          glyphProfile.length = glyphDataLength;\n          return glyphProfile;\n        }\n\n        dest.set(glyf, destStart);\n        glyphProfile.length = glyf.length;\n        return glyphProfile;\n      }\n\n      function sanitizeHead(head, numGlyphs, locaLength) {\n        var data = head.data;\n        var version = int32(data[0], data[1], data[2], data[3]);\n\n        if (version >> 16 !== 1) {\n          (0, _util.info)(\"Attempting to fix invalid version in head table: \" + version);\n          data[0] = 0;\n          data[1] = 1;\n          data[2] = 0;\n          data[3] = 0;\n        }\n\n        var indexToLocFormat = int16(data[50], data[51]);\n\n        if (indexToLocFormat < 0 || indexToLocFormat > 1) {\n          (0, _util.info)(\"Attempting to fix invalid indexToLocFormat in head table: \" + indexToLocFormat);\n          var numGlyphsPlusOne = numGlyphs + 1;\n\n          if (locaLength === numGlyphsPlusOne << 1) {\n            data[50] = 0;\n            data[51] = 0;\n          } else if (locaLength === numGlyphsPlusOne << 2) {\n            data[50] = 0;\n            data[51] = 1;\n          } else {\n            throw new _util.FormatError(\"Could not fix indexToLocFormat: \" + indexToLocFormat);\n          }\n        }\n      }\n\n      function sanitizeGlyphLocations(loca, glyf, numGlyphs, isGlyphLocationsLong, hintsValid, dupFirstEntry, maxSizeOfInstructions) {\n        var itemSize, itemDecode, itemEncode;\n\n        if (isGlyphLocationsLong) {\n          itemSize = 4;\n\n          itemDecode = function fontItemDecodeLong(data, offset) {\n            return data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3];\n          };\n\n          itemEncode = function fontItemEncodeLong(data, offset, value) {\n            data[offset] = value >>> 24 & 0xff;\n            data[offset + 1] = value >> 16 & 0xff;\n            data[offset + 2] = value >> 8 & 0xff;\n            data[offset + 3] = value & 0xff;\n          };\n        } else {\n          itemSize = 2;\n\n          itemDecode = function fontItemDecode(data, offset) {\n            return data[offset] << 9 | data[offset + 1] << 1;\n          };\n\n          itemEncode = function fontItemEncode(data, offset, value) {\n            data[offset] = value >> 9 & 0xff;\n            data[offset + 1] = value >> 1 & 0xff;\n          };\n        }\n\n        var numGlyphsOut = dupFirstEntry ? numGlyphs + 1 : numGlyphs;\n        var locaDataSize = itemSize * (1 + numGlyphsOut);\n        var locaData = new Uint8Array(locaDataSize);\n        locaData.set(loca.data.subarray(0, locaDataSize));\n        loca.data = locaData;\n        var oldGlyfData = glyf.data;\n        var oldGlyfDataLength = oldGlyfData.length;\n        var newGlyfData = new Uint8Array(oldGlyfDataLength);\n        var startOffset = itemDecode(locaData, 0);\n        var writeOffset = 0;\n        var missingGlyphs = Object.create(null);\n        itemEncode(locaData, 0, writeOffset);\n        var i, j;\n\n        for (i = 0, j = itemSize; i < numGlyphs; i++, j += itemSize) {\n          var endOffset = itemDecode(locaData, j);\n\n          if (endOffset === 0) {\n            endOffset = startOffset;\n          }\n\n          if (endOffset > oldGlyfDataLength && (oldGlyfDataLength + 3 & ~3) === endOffset) {\n            endOffset = oldGlyfDataLength;\n          }\n\n          if (endOffset > oldGlyfDataLength) {\n            startOffset = endOffset;\n          }\n\n          var glyphProfile = sanitizeGlyph(oldGlyfData, startOffset, endOffset, newGlyfData, writeOffset, hintsValid);\n          var newLength = glyphProfile.length;\n\n          if (newLength === 0) {\n            missingGlyphs[i] = true;\n          }\n\n          if (glyphProfile.sizeOfInstructions > maxSizeOfInstructions) {\n            maxSizeOfInstructions = glyphProfile.sizeOfInstructions;\n          }\n\n          writeOffset += newLength;\n          itemEncode(locaData, j, writeOffset);\n          startOffset = endOffset;\n        }\n\n        if (writeOffset === 0) {\n          var simpleGlyph = new Uint8Array([0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0]);\n\n          for (i = 0, j = itemSize; i < numGlyphsOut; i++, j += itemSize) {\n            itemEncode(locaData, j, simpleGlyph.length);\n          }\n\n          glyf.data = simpleGlyph;\n        } else if (dupFirstEntry) {\n          var firstEntryLength = itemDecode(locaData, itemSize);\n\n          if (newGlyfData.length > firstEntryLength + writeOffset) {\n            glyf.data = newGlyfData.subarray(0, firstEntryLength + writeOffset);\n          } else {\n            glyf.data = new Uint8Array(firstEntryLength + writeOffset);\n            glyf.data.set(newGlyfData.subarray(0, writeOffset));\n          }\n\n          glyf.data.set(newGlyfData.subarray(0, firstEntryLength), writeOffset);\n          itemEncode(loca.data, locaData.length - itemSize, writeOffset + firstEntryLength);\n        } else {\n          glyf.data = newGlyfData.subarray(0, writeOffset);\n        }\n\n        return {\n          missingGlyphs,\n          maxSizeOfInstructions\n        };\n      }\n\n      function readPostScriptTable(post, properties, maxpNumGlyphs) {\n        var start = (font.start ? font.start : 0) + post.offset;\n        font.pos = start;\n        var length = post.length,\n            end = start + length;\n        var version = font.getInt32();\n        font.getBytes(28);\n        var glyphNames;\n        var valid = true;\n        var i;\n\n        switch (version) {\n          case 0x00010000:\n            glyphNames = MacStandardGlyphOrdering;\n            break;\n\n          case 0x00020000:\n            var numGlyphs = font.getUint16();\n\n            if (numGlyphs !== maxpNumGlyphs) {\n              valid = false;\n              break;\n            }\n\n            var glyphNameIndexes = [];\n\n            for (i = 0; i < numGlyphs; ++i) {\n              var index = font.getUint16();\n\n              if (index >= 32768) {\n                valid = false;\n                break;\n              }\n\n              glyphNameIndexes.push(index);\n            }\n\n            if (!valid) {\n              break;\n            }\n\n            var customNames = [];\n            var strBuf = [];\n\n            while (font.pos < end) {\n              var stringLength = font.getByte();\n              strBuf.length = stringLength;\n\n              for (i = 0; i < stringLength; ++i) {\n                strBuf[i] = String.fromCharCode(font.getByte());\n              }\n\n              customNames.push(strBuf.join(\"\"));\n            }\n\n            glyphNames = [];\n\n            for (i = 0; i < numGlyphs; ++i) {\n              var j = glyphNameIndexes[i];\n\n              if (j < 258) {\n                glyphNames.push(MacStandardGlyphOrdering[j]);\n                continue;\n              }\n\n              glyphNames.push(customNames[j - 258]);\n            }\n\n            break;\n\n          case 0x00030000:\n            break;\n\n          default:\n            (0, _util.warn)(\"Unknown/unsupported post table version \" + version);\n            valid = false;\n\n            if (properties.defaultEncoding) {\n              glyphNames = properties.defaultEncoding;\n            }\n\n            break;\n        }\n\n        properties.glyphNames = glyphNames;\n        return valid;\n      }\n\n      function readNameTable(nameTable) {\n        var start = (font.start ? font.start : 0) + nameTable.offset;\n        font.pos = start;\n        var names = [[], []];\n        var length = nameTable.length,\n            end = start + length;\n        var format = font.getUint16();\n        var FORMAT_0_HEADER_LENGTH = 6;\n\n        if (format !== 0 || length < FORMAT_0_HEADER_LENGTH) {\n          return names;\n        }\n\n        var numRecords = font.getUint16();\n        var stringsStart = font.getUint16();\n        var records = [];\n        var NAME_RECORD_LENGTH = 12;\n        var i, ii;\n\n        for (i = 0; i < numRecords && font.pos + NAME_RECORD_LENGTH <= end; i++) {\n          var r = {\n            platform: font.getUint16(),\n            encoding: font.getUint16(),\n            language: font.getUint16(),\n            name: font.getUint16(),\n            length: font.getUint16(),\n            offset: font.getUint16()\n          };\n\n          if (r.platform === 1 && r.encoding === 0 && r.language === 0 || r.platform === 3 && r.encoding === 1 && r.language === 0x409) {\n            records.push(r);\n          }\n        }\n\n        for (i = 0, ii = records.length; i < ii; i++) {\n          var record = records[i];\n\n          if (record.length <= 0) {\n            continue;\n          }\n\n          var pos = start + stringsStart + record.offset;\n\n          if (pos + record.length > end) {\n            continue;\n          }\n\n          font.pos = pos;\n          var nameIndex = record.name;\n\n          if (record.encoding) {\n            var str = \"\";\n\n            for (var j = 0, jj = record.length; j < jj; j += 2) {\n              str += String.fromCharCode(font.getUint16());\n            }\n\n            names[1][nameIndex] = str;\n          } else {\n            names[0][nameIndex] = (0, _util.bytesToString)(font.getBytes(record.length));\n          }\n        }\n\n        return names;\n      }\n\n      var TTOpsStackDeltas = [0, 0, 0, 0, 0, 0, 0, 0, -2, -2, -2, -2, 0, 0, -2, -5, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, -1, -1, 1, -1, -999, 0, 1, 0, -1, -2, 0, -1, -2, -1, -1, 0, -1, -1, 0, 0, -999, -999, -1, -1, -1, -1, -2, -999, -2, -2, -999, 0, -2, -2, 0, 0, -2, 0, -2, 0, 0, 0, -2, -1, -1, 1, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, 0, -999, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, -999, -999, -999, -999, -999, -1, -1, -2, -2, 0, 0, 0, 0, -1, -1, -999, -2, -2, 0, 0, -1, -2, -2, 0, 0, 0, -1, -1, -1, -2];\n\n      function sanitizeTTProgram(table, ttContext) {\n        var data = table.data;\n        var i = 0,\n            j,\n            n,\n            b,\n            funcId,\n            pc,\n            lastEndf = 0,\n            lastDeff = 0;\n        var stack = [];\n        var callstack = [];\n        var functionsCalled = [];\n        var tooComplexToFollowFunctions = ttContext.tooComplexToFollowFunctions;\n        var inFDEF = false,\n            ifLevel = 0,\n            inELSE = 0;\n\n        for (var ii = data.length; i < ii;) {\n          var op = data[i++];\n\n          if (op === 0x40) {\n            n = data[i++];\n\n            if (inFDEF || inELSE) {\n              i += n;\n            } else {\n              for (j = 0; j < n; j++) {\n                stack.push(data[i++]);\n              }\n            }\n          } else if (op === 0x41) {\n            n = data[i++];\n\n            if (inFDEF || inELSE) {\n              i += n * 2;\n            } else {\n              for (j = 0; j < n; j++) {\n                b = data[i++];\n                stack.push(b << 8 | data[i++]);\n              }\n            }\n          } else if ((op & 0xf8) === 0xb0) {\n            n = op - 0xb0 + 1;\n\n            if (inFDEF || inELSE) {\n              i += n;\n            } else {\n              for (j = 0; j < n; j++) {\n                stack.push(data[i++]);\n              }\n            }\n          } else if ((op & 0xf8) === 0xb8) {\n            n = op - 0xb8 + 1;\n\n            if (inFDEF || inELSE) {\n              i += n * 2;\n            } else {\n              for (j = 0; j < n; j++) {\n                b = data[i++];\n                stack.push(b << 8 | data[i++]);\n              }\n            }\n          } else if (op === 0x2b && !tooComplexToFollowFunctions) {\n            if (!inFDEF && !inELSE) {\n              funcId = stack[stack.length - 1];\n\n              if (isNaN(funcId)) {\n                (0, _util.info)(\"TT: CALL empty stack (or invalid entry).\");\n              } else {\n                ttContext.functionsUsed[funcId] = true;\n\n                if (funcId in ttContext.functionsStackDeltas) {\n                  const newStackLength = stack.length + ttContext.functionsStackDeltas[funcId];\n\n                  if (newStackLength < 0) {\n                    (0, _util.warn)(\"TT: CALL invalid functions stack delta.\");\n                    ttContext.hintsValid = false;\n                    return;\n                  }\n\n                  stack.length = newStackLength;\n                } else if (funcId in ttContext.functionsDefined && !functionsCalled.includes(funcId)) {\n                  callstack.push({\n                    data,\n                    i,\n                    stackTop: stack.length - 1\n                  });\n                  functionsCalled.push(funcId);\n                  pc = ttContext.functionsDefined[funcId];\n\n                  if (!pc) {\n                    (0, _util.warn)(\"TT: CALL non-existent function\");\n                    ttContext.hintsValid = false;\n                    return;\n                  }\n\n                  data = pc.data;\n                  i = pc.i;\n                }\n              }\n            }\n          } else if (op === 0x2c && !tooComplexToFollowFunctions) {\n            if (inFDEF || inELSE) {\n              (0, _util.warn)(\"TT: nested FDEFs not allowed\");\n              tooComplexToFollowFunctions = true;\n            }\n\n            inFDEF = true;\n            lastDeff = i;\n            funcId = stack.pop();\n            ttContext.functionsDefined[funcId] = {\n              data,\n              i\n            };\n          } else if (op === 0x2d) {\n            if (inFDEF) {\n              inFDEF = false;\n              lastEndf = i;\n            } else {\n              pc = callstack.pop();\n\n              if (!pc) {\n                (0, _util.warn)(\"TT: ENDF bad stack\");\n                ttContext.hintsValid = false;\n                return;\n              }\n\n              funcId = functionsCalled.pop();\n              data = pc.data;\n              i = pc.i;\n              ttContext.functionsStackDeltas[funcId] = stack.length - pc.stackTop;\n            }\n          } else if (op === 0x89) {\n            if (inFDEF || inELSE) {\n              (0, _util.warn)(\"TT: nested IDEFs not allowed\");\n              tooComplexToFollowFunctions = true;\n            }\n\n            inFDEF = true;\n            lastDeff = i;\n          } else if (op === 0x58) {\n            ++ifLevel;\n          } else if (op === 0x1b) {\n            inELSE = ifLevel;\n          } else if (op === 0x59) {\n            if (inELSE === ifLevel) {\n              inELSE = 0;\n            }\n\n            --ifLevel;\n          } else if (op === 0x1c) {\n            if (!inFDEF && !inELSE) {\n              var offset = stack[stack.length - 1];\n\n              if (offset > 0) {\n                i += offset - 1;\n              }\n            }\n          }\n\n          if (!inFDEF && !inELSE) {\n            let stackDelta = 0;\n\n            if (op <= 0x8e) {\n              stackDelta = TTOpsStackDeltas[op];\n            } else if (op >= 0xc0 && op <= 0xdf) {\n              stackDelta = -1;\n            } else if (op >= 0xe0) {\n              stackDelta = -2;\n            }\n\n            if (op >= 0x71 && op <= 0x75) {\n              n = stack.pop();\n\n              if (!isNaN(n)) {\n                stackDelta = -n * 2;\n              }\n            }\n\n            while (stackDelta < 0 && stack.length > 0) {\n              stack.pop();\n              stackDelta++;\n            }\n\n            while (stackDelta > 0) {\n              stack.push(NaN);\n              stackDelta--;\n            }\n          }\n        }\n\n        ttContext.tooComplexToFollowFunctions = tooComplexToFollowFunctions;\n        var content = [data];\n\n        if (i > data.length) {\n          content.push(new Uint8Array(i - data.length));\n        }\n\n        if (lastDeff > lastEndf) {\n          (0, _util.warn)(\"TT: complementing a missing function tail\");\n          content.push(new Uint8Array([0x22, 0x2d]));\n        }\n\n        foldTTTable(table, content);\n      }\n\n      function checkInvalidFunctions(ttContext, maxFunctionDefs) {\n        if (ttContext.tooComplexToFollowFunctions) {\n          return;\n        }\n\n        if (ttContext.functionsDefined.length > maxFunctionDefs) {\n          (0, _util.warn)(\"TT: more functions defined than expected\");\n          ttContext.hintsValid = false;\n          return;\n        }\n\n        for (var j = 0, jj = ttContext.functionsUsed.length; j < jj; j++) {\n          if (j > maxFunctionDefs) {\n            (0, _util.warn)(\"TT: invalid function id: \" + j);\n            ttContext.hintsValid = false;\n            return;\n          }\n\n          if (ttContext.functionsUsed[j] && !ttContext.functionsDefined[j]) {\n            (0, _util.warn)(\"TT: undefined function: \" + j);\n            ttContext.hintsValid = false;\n            return;\n          }\n        }\n      }\n\n      function foldTTTable(table, content) {\n        if (content.length > 1) {\n          var newLength = 0;\n          var j, jj;\n\n          for (j = 0, jj = content.length; j < jj; j++) {\n            newLength += content[j].length;\n          }\n\n          newLength = newLength + 3 & ~3;\n          var result = new Uint8Array(newLength);\n          var pos = 0;\n\n          for (j = 0, jj = content.length; j < jj; j++) {\n            result.set(content[j], pos);\n            pos += content[j].length;\n          }\n\n          table.data = result;\n          table.length = newLength;\n        }\n      }\n\n      function sanitizeTTPrograms(fpgm, prep, cvt, maxFunctionDefs) {\n        var ttContext = {\n          functionsDefined: [],\n          functionsUsed: [],\n          functionsStackDeltas: [],\n          tooComplexToFollowFunctions: false,\n          hintsValid: true\n        };\n\n        if (fpgm) {\n          sanitizeTTProgram(fpgm, ttContext);\n        }\n\n        if (prep) {\n          sanitizeTTProgram(prep, ttContext);\n        }\n\n        if (fpgm) {\n          checkInvalidFunctions(ttContext, maxFunctionDefs);\n        }\n\n        if (cvt && cvt.length & 1) {\n          var cvtData = new Uint8Array(cvt.length + 1);\n          cvtData.set(cvt.data);\n          cvt.data = cvtData;\n        }\n\n        return ttContext.hintsValid;\n      }\n\n      font = new _stream.Stream(new Uint8Array(font.getBytes()));\n      let header, tables;\n\n      if (isTrueTypeCollectionFile(font)) {\n        const ttcData = readTrueTypeCollectionData(font, this.name);\n        header = ttcData.header;\n        tables = ttcData.tables;\n      } else {\n        header = readOpenTypeHeader(font);\n        tables = readTables(font, header.numTables);\n      }\n\n      let cff, cffFile;\n      var isTrueType = !tables[\"CFF \"];\n\n      if (!isTrueType) {\n        const isComposite = properties.composite && ((properties.cidToGidMap || []).length > 0 || !(properties.cMap instanceof _cmap.IdentityCMap));\n\n        if (header.version === \"OTTO\" && !isComposite || !tables[\"head\"] || !tables[\"hhea\"] || !tables[\"maxp\"] || !tables[\"post\"]) {\n          cffFile = new _stream.Stream(tables[\"CFF \"].data);\n          cff = new CFFFont(cffFile, properties);\n          adjustWidths(properties);\n          return this.convert(name, cff, properties);\n        }\n\n        delete tables[\"glyf\"];\n        delete tables[\"loca\"];\n        delete tables[\"fpgm\"];\n        delete tables[\"prep\"];\n        delete tables[\"cvt \"];\n        this.isOpenType = true;\n      } else {\n        if (!tables[\"loca\"]) {\n          throw new _util.FormatError('Required \"loca\" table is not found');\n        }\n\n        if (!tables[\"glyf\"]) {\n          (0, _util.warn)('Required \"glyf\" table is not found -- trying to recover.');\n          tables[\"glyf\"] = {\n            tag: \"glyf\",\n            data: new Uint8Array(0)\n          };\n        }\n\n        this.isOpenType = false;\n      }\n\n      if (!tables[\"maxp\"]) {\n        throw new _util.FormatError('Required \"maxp\" table is not found');\n      }\n\n      font.pos = (font.start || 0) + tables[\"maxp\"].offset;\n      var version = font.getInt32();\n      const numGlyphs = font.getUint16();\n      let numGlyphsOut = numGlyphs + 1;\n      let dupFirstEntry = true;\n\n      if (numGlyphsOut > 0xffff) {\n        dupFirstEntry = false;\n        numGlyphsOut = numGlyphs;\n        (0, _util.warn)(\"Not enough space in glyfs to duplicate first glyph.\");\n      }\n\n      var maxFunctionDefs = 0;\n      var maxSizeOfInstructions = 0;\n\n      if (version >= 0x00010000 && tables[\"maxp\"].length >= 22) {\n        font.pos += 8;\n        var maxZones = font.getUint16();\n\n        if (maxZones > 2) {\n          tables[\"maxp\"].data[14] = 0;\n          tables[\"maxp\"].data[15] = 2;\n        }\n\n        font.pos += 4;\n        maxFunctionDefs = font.getUint16();\n        font.pos += 4;\n        maxSizeOfInstructions = font.getUint16();\n      }\n\n      tables[\"maxp\"].data[4] = numGlyphsOut >> 8;\n      tables[\"maxp\"].data[5] = numGlyphsOut & 255;\n      var hintsValid = sanitizeTTPrograms(tables[\"fpgm\"], tables[\"prep\"], tables[\"cvt \"], maxFunctionDefs);\n\n      if (!hintsValid) {\n        delete tables[\"fpgm\"];\n        delete tables[\"prep\"];\n        delete tables[\"cvt \"];\n      }\n\n      sanitizeMetrics(font, tables[\"hhea\"], tables[\"hmtx\"], numGlyphsOut, dupFirstEntry);\n\n      if (!tables[\"head\"]) {\n        throw new _util.FormatError('Required \"head\" table is not found');\n      }\n\n      sanitizeHead(tables[\"head\"], numGlyphs, isTrueType ? tables[\"loca\"].length : 0);\n      var missingGlyphs = Object.create(null);\n\n      if (isTrueType) {\n        var isGlyphLocationsLong = int16(tables[\"head\"].data[50], tables[\"head\"].data[51]);\n        var glyphsInfo = sanitizeGlyphLocations(tables[\"loca\"], tables[\"glyf\"], numGlyphs, isGlyphLocationsLong, hintsValid, dupFirstEntry, maxSizeOfInstructions);\n        missingGlyphs = glyphsInfo.missingGlyphs;\n\n        if (version >= 0x00010000 && tables[\"maxp\"].length >= 22) {\n          tables[\"maxp\"].data[26] = glyphsInfo.maxSizeOfInstructions >> 8;\n          tables[\"maxp\"].data[27] = glyphsInfo.maxSizeOfInstructions & 255;\n        }\n      }\n\n      if (!tables[\"hhea\"]) {\n        throw new _util.FormatError('Required \"hhea\" table is not found');\n      }\n\n      if (tables[\"hhea\"].data[10] === 0 && tables[\"hhea\"].data[11] === 0) {\n        tables[\"hhea\"].data[10] = 0xff;\n        tables[\"hhea\"].data[11] = 0xff;\n      }\n\n      var metricsOverride = {\n        unitsPerEm: int16(tables[\"head\"].data[18], tables[\"head\"].data[19]),\n        yMax: int16(tables[\"head\"].data[42], tables[\"head\"].data[43]),\n        yMin: signedInt16(tables[\"head\"].data[38], tables[\"head\"].data[39]),\n        ascent: int16(tables[\"hhea\"].data[4], tables[\"hhea\"].data[5]),\n        descent: signedInt16(tables[\"hhea\"].data[6], tables[\"hhea\"].data[7])\n      };\n      this.ascent = metricsOverride.ascent / metricsOverride.unitsPerEm;\n      this.descent = metricsOverride.descent / metricsOverride.unitsPerEm;\n\n      if (tables[\"post\"]) {\n        readPostScriptTable(tables[\"post\"], properties, numGlyphs);\n      }\n\n      tables[\"post\"] = {\n        tag: \"post\",\n        data: createPostTable(properties)\n      };\n      var charCodeToGlyphId = [],\n          charCode;\n\n      function hasGlyph(glyphId) {\n        return !missingGlyphs[glyphId];\n      }\n\n      if (properties.composite) {\n        var cidToGidMap = properties.cidToGidMap || [];\n        var isCidToGidMapEmpty = cidToGidMap.length === 0;\n        properties.cMap.forEach(function (charCode, cid) {\n          if (cid > 0xffff) {\n            throw new _util.FormatError(\"Max size of CID is 65,535\");\n          }\n\n          var glyphId = -1;\n\n          if (isCidToGidMapEmpty) {\n            glyphId = cid;\n          } else if (cidToGidMap[cid] !== undefined) {\n            glyphId = cidToGidMap[cid];\n          }\n\n          if (glyphId >= 0 && glyphId < numGlyphs && hasGlyph(glyphId)) {\n            charCodeToGlyphId[charCode] = glyphId;\n          }\n        });\n      } else {\n        var cmapTable = readCmapTable(tables[\"cmap\"], font, this.isSymbolicFont, properties.hasEncoding);\n        var cmapPlatformId = cmapTable.platformId;\n        var cmapEncodingId = cmapTable.encodingId;\n        var cmapMappings = cmapTable.mappings;\n        var cmapMappingsLength = cmapMappings.length;\n\n        if (properties.hasEncoding && (cmapPlatformId === 3 && cmapEncodingId === 1 || cmapPlatformId === 1 && cmapEncodingId === 0) || cmapPlatformId === -1 && cmapEncodingId === -1 && !!(0, _encodings.getEncoding)(properties.baseEncodingName)) {\n          var baseEncoding = [];\n\n          if (properties.baseEncodingName === \"MacRomanEncoding\" || properties.baseEncodingName === \"WinAnsiEncoding\") {\n            baseEncoding = (0, _encodings.getEncoding)(properties.baseEncodingName);\n          }\n\n          var glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n\n          for (charCode = 0; charCode < 256; charCode++) {\n            var glyphName, standardGlyphName;\n\n            if (this.differences && charCode in this.differences) {\n              glyphName = this.differences[charCode];\n            } else if (charCode in baseEncoding && baseEncoding[charCode] !== \"\") {\n              glyphName = baseEncoding[charCode];\n            } else {\n              glyphName = _encodings.StandardEncoding[charCode];\n            }\n\n            if (!glyphName) {\n              continue;\n            }\n\n            standardGlyphName = recoverGlyphName(glyphName, glyphsUnicodeMap);\n            var unicodeOrCharCode;\n\n            if (cmapPlatformId === 3 && cmapEncodingId === 1) {\n              unicodeOrCharCode = glyphsUnicodeMap[standardGlyphName];\n            } else if (cmapPlatformId === 1 && cmapEncodingId === 0) {\n              unicodeOrCharCode = _encodings.MacRomanEncoding.indexOf(standardGlyphName);\n            }\n\n            var found = false;\n\n            for (let i = 0; i < cmapMappingsLength; ++i) {\n              if (cmapMappings[i].charCode !== unicodeOrCharCode) {\n                continue;\n              }\n\n              charCodeToGlyphId[charCode] = cmapMappings[i].glyphId;\n              found = true;\n              break;\n            }\n\n            if (!found && properties.glyphNames) {\n              var glyphId = properties.glyphNames.indexOf(glyphName);\n\n              if (glyphId === -1 && standardGlyphName !== glyphName) {\n                glyphId = properties.glyphNames.indexOf(standardGlyphName);\n              }\n\n              if (glyphId > 0 && hasGlyph(glyphId)) {\n                charCodeToGlyphId[charCode] = glyphId;\n              }\n            }\n          }\n        } else if (cmapPlatformId === 0 && cmapEncodingId === 0) {\n          for (let i = 0; i < cmapMappingsLength; ++i) {\n            charCodeToGlyphId[cmapMappings[i].charCode] = cmapMappings[i].glyphId;\n          }\n        } else {\n          for (let i = 0; i < cmapMappingsLength; ++i) {\n            charCode = cmapMappings[i].charCode;\n\n            if (cmapPlatformId === 3 && charCode >= 0xf000 && charCode <= 0xf0ff) {\n              charCode &= 0xff;\n            }\n\n            charCodeToGlyphId[charCode] = cmapMappings[i].glyphId;\n          }\n        }\n      }\n\n      if (charCodeToGlyphId.length === 0) {\n        charCodeToGlyphId[0] = 0;\n      }\n\n      let glyphZeroId = numGlyphsOut - 1;\n\n      if (!dupFirstEntry) {\n        glyphZeroId = 0;\n      }\n\n      var newMapping = adjustMapping(charCodeToGlyphId, hasGlyph, glyphZeroId);\n      this.toFontChar = newMapping.toFontChar;\n      tables[\"cmap\"] = {\n        tag: \"cmap\",\n        data: createCmapTable(newMapping.charCodeToGlyphId, numGlyphsOut)\n      };\n\n      if (!tables[\"OS/2\"] || !validateOS2Table(tables[\"OS/2\"])) {\n        tables[\"OS/2\"] = {\n          tag: \"OS/2\",\n          data: createOS2Table(properties, newMapping.charCodeToGlyphId, metricsOverride)\n        };\n      }\n\n      if (!isTrueType) {\n        try {\n          cffFile = new _stream.Stream(tables[\"CFF \"].data);\n          var parser = new _cff_parser.CFFParser(cffFile, properties, SEAC_ANALYSIS_ENABLED);\n          cff = parser.parse();\n          cff.duplicateFirstGlyph();\n          var compiler = new _cff_parser.CFFCompiler(cff);\n          tables[\"CFF \"].data = compiler.compile();\n        } catch (e) {\n          (0, _util.warn)(\"Failed to compile font \" + properties.loadedName);\n        }\n      }\n\n      if (!tables[\"name\"]) {\n        tables[\"name\"] = {\n          tag: \"name\",\n          data: createNameTable(this.name)\n        };\n      } else {\n        var namePrototype = readNameTable(tables[\"name\"]);\n        tables[\"name\"].data = createNameTable(name, namePrototype);\n      }\n\n      var builder = new OpenTypeFileBuilder(header.version);\n\n      for (var tableTag in tables) {\n        builder.addTable(tableTag, tables[tableTag].data);\n      }\n\n      return builder.toArray();\n    },\n    convert: function Font_convert(fontName, font, properties) {\n      properties.fixedPitch = false;\n\n      if (properties.builtInEncoding) {\n        adjustToUnicode(properties, properties.builtInEncoding);\n      }\n\n      let glyphZeroId = 1;\n\n      if (font instanceof CFFFont) {\n        glyphZeroId = font.numGlyphs - 1;\n      }\n\n      var mapping = font.getGlyphMapping(properties);\n      var newMapping = adjustMapping(mapping, font.hasGlyphId.bind(font), glyphZeroId);\n      this.toFontChar = newMapping.toFontChar;\n      var numGlyphs = font.numGlyphs;\n\n      function getCharCodes(charCodeToGlyphId, glyphId) {\n        var charCodes = null;\n\n        for (var charCode in charCodeToGlyphId) {\n          if (glyphId === charCodeToGlyphId[charCode]) {\n            if (!charCodes) {\n              charCodes = [];\n            }\n\n            charCodes.push(charCode | 0);\n          }\n        }\n\n        return charCodes;\n      }\n\n      function createCharCode(charCodeToGlyphId, glyphId) {\n        for (var charCode in charCodeToGlyphId) {\n          if (glyphId === charCodeToGlyphId[charCode]) {\n            return charCode | 0;\n          }\n        }\n\n        newMapping.charCodeToGlyphId[newMapping.nextAvailableFontCharCode] = glyphId;\n        return newMapping.nextAvailableFontCharCode++;\n      }\n\n      var seacs = font.seacs;\n\n      if (SEAC_ANALYSIS_ENABLED && seacs && seacs.length) {\n        var matrix = properties.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n        var charset = font.getCharset();\n        var seacMap = Object.create(null);\n\n        for (var glyphId in seacs) {\n          glyphId |= 0;\n          var seac = seacs[glyphId];\n          var baseGlyphName = _encodings.StandardEncoding[seac[2]];\n          var accentGlyphName = _encodings.StandardEncoding[seac[3]];\n          var baseGlyphId = charset.indexOf(baseGlyphName);\n          var accentGlyphId = charset.indexOf(accentGlyphName);\n\n          if (baseGlyphId < 0 || accentGlyphId < 0) {\n            continue;\n          }\n\n          var accentOffset = {\n            x: seac[0] * matrix[0] + seac[1] * matrix[2] + matrix[4],\n            y: seac[0] * matrix[1] + seac[1] * matrix[3] + matrix[5]\n          };\n          var charCodes = getCharCodes(mapping, glyphId);\n\n          if (!charCodes) {\n            continue;\n          }\n\n          for (var i = 0, ii = charCodes.length; i < ii; i++) {\n            var charCode = charCodes[i];\n            var charCodeToGlyphId = newMapping.charCodeToGlyphId;\n            var baseFontCharCode = createCharCode(charCodeToGlyphId, baseGlyphId);\n            var accentFontCharCode = createCharCode(charCodeToGlyphId, accentGlyphId);\n            seacMap[charCode] = {\n              baseFontCharCode,\n              accentFontCharCode,\n              accentOffset\n            };\n          }\n        }\n\n        properties.seacMap = seacMap;\n      }\n\n      var unitsPerEm = 1 / (properties.fontMatrix || _util.FONT_IDENTITY_MATRIX)[0];\n      var builder = new OpenTypeFileBuilder(\"\\x4F\\x54\\x54\\x4F\");\n      builder.addTable(\"CFF \", font.data);\n      builder.addTable(\"OS/2\", createOS2Table(properties, newMapping.charCodeToGlyphId));\n      builder.addTable(\"cmap\", createCmapTable(newMapping.charCodeToGlyphId, numGlyphs));\n      builder.addTable(\"head\", \"\\x00\\x01\\x00\\x00\" + \"\\x00\\x00\\x10\\x00\" + \"\\x00\\x00\\x00\\x00\" + \"\\x5F\\x0F\\x3C\\xF5\" + \"\\x00\\x00\" + safeString16(unitsPerEm) + \"\\x00\\x00\\x00\\x00\\x9e\\x0b\\x7e\\x27\" + \"\\x00\\x00\\x00\\x00\\x9e\\x0b\\x7e\\x27\" + \"\\x00\\x00\" + safeString16(properties.descent) + \"\\x0F\\xFF\" + safeString16(properties.ascent) + string16(properties.italicAngle ? 2 : 0) + \"\\x00\\x11\" + \"\\x00\\x00\" + \"\\x00\\x00\" + \"\\x00\\x00\");\n      builder.addTable(\"hhea\", \"\\x00\\x01\\x00\\x00\" + safeString16(properties.ascent) + safeString16(properties.descent) + \"\\x00\\x00\" + \"\\xFF\\xFF\" + \"\\x00\\x00\" + \"\\x00\\x00\" + \"\\x00\\x00\" + safeString16(properties.capHeight) + safeString16(Math.tan(properties.italicAngle) * properties.xHeight) + \"\\x00\\x00\" + \"\\x00\\x00\" + \"\\x00\\x00\" + \"\\x00\\x00\" + \"\\x00\\x00\" + \"\\x00\\x00\" + string16(numGlyphs));\n      builder.addTable(\"hmtx\", function fontFieldsHmtx() {\n        var charstrings = font.charstrings;\n        var cffWidths = font.cff ? font.cff.widths : null;\n        var hmtx = \"\\x00\\x00\\x00\\x00\";\n\n        for (var i = 1, ii = numGlyphs; i < ii; i++) {\n          var width = 0;\n\n          if (charstrings) {\n            var charstring = charstrings[i - 1];\n            width = \"width\" in charstring ? charstring.width : 0;\n          } else if (cffWidths) {\n            width = Math.ceil(cffWidths[i] || 0);\n          }\n\n          hmtx += string16(width) + string16(0);\n        }\n\n        return hmtx;\n      }());\n      builder.addTable(\"maxp\", \"\\x00\\x00\\x50\\x00\" + string16(numGlyphs));\n      builder.addTable(\"name\", createNameTable(fontName));\n      builder.addTable(\"post\", createPostTable(properties));\n      return builder.toArray();\n    },\n\n    get spaceWidth() {\n      if (\"_shadowWidth\" in this) {\n        return this._shadowWidth;\n      }\n\n      var possibleSpaceReplacements = [\"space\", \"minus\", \"one\", \"i\", \"I\"];\n      var width;\n\n      for (var i = 0, ii = possibleSpaceReplacements.length; i < ii; i++) {\n        var glyphName = possibleSpaceReplacements[i];\n\n        if (glyphName in this.widths) {\n          width = this.widths[glyphName];\n          break;\n        }\n\n        var glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n        var glyphUnicode = glyphsUnicodeMap[glyphName];\n        var charcode = 0;\n\n        if (this.composite) {\n          if (this.cMap.contains(glyphUnicode)) {\n            charcode = this.cMap.lookup(glyphUnicode);\n          }\n        }\n\n        if (!charcode && this.toUnicode) {\n          charcode = this.toUnicode.charCodeOf(glyphUnicode);\n        }\n\n        if (charcode <= 0) {\n          charcode = glyphUnicode;\n        }\n\n        width = this.widths[charcode];\n\n        if (width) {\n          break;\n        }\n      }\n\n      width = width || this.defaultWidth;\n      this._shadowWidth = width;\n      return width;\n    },\n\n    charToGlyph: function Font_charToGlyph(charcode, isSpace) {\n      var fontCharCode, width, operatorListId;\n      var widthCode = charcode;\n\n      if (this.cMap && this.cMap.contains(charcode)) {\n        widthCode = this.cMap.lookup(charcode);\n      }\n\n      width = this.widths[widthCode];\n      width = (0, _util.isNum)(width) ? width : this.defaultWidth;\n      var vmetric = this.vmetrics && this.vmetrics[widthCode];\n      let unicode = this.toUnicode.get(charcode) || this.fallbackToUnicode.get(charcode) || charcode;\n\n      if (typeof unicode === \"number\") {\n        unicode = String.fromCharCode(unicode);\n      }\n\n      var isInFont = charcode in this.toFontChar;\n      fontCharCode = this.toFontChar[charcode] || charcode;\n\n      if (this.missingFile) {\n        const glyphName = this.differences[charcode] || this.defaultEncoding[charcode];\n\n        if ((glyphName === \".notdef\" || glyphName === \"\") && this.type === \"Type1\") {\n          fontCharCode = 0x20;\n        }\n\n        fontCharCode = (0, _unicode.mapSpecialUnicodeValues)(fontCharCode);\n      }\n\n      if (this.isType3Font) {\n        operatorListId = fontCharCode;\n      }\n\n      var accent = null;\n\n      if (this.seacMap && this.seacMap[charcode]) {\n        isInFont = true;\n        var seac = this.seacMap[charcode];\n        fontCharCode = seac.baseFontCharCode;\n        accent = {\n          fontChar: String.fromCodePoint(seac.accentFontCharCode),\n          offset: seac.accentOffset\n        };\n      }\n\n      var fontChar = typeof fontCharCode === \"number\" ? String.fromCodePoint(fontCharCode) : \"\";\n      var glyph = this.glyphCache[charcode];\n\n      if (!glyph || !glyph.matchesForCache(fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont)) {\n        glyph = new Glyph(fontChar, unicode, accent, width, vmetric, operatorListId, isSpace, isInFont);\n        this.glyphCache[charcode] = glyph;\n      }\n\n      return glyph;\n    },\n    charsToGlyphs: function Font_charsToGlyphs(chars) {\n      var charsCache = this.charsCache;\n      var glyphs, glyph, charcode;\n\n      if (charsCache) {\n        glyphs = charsCache[chars];\n\n        if (glyphs) {\n          return glyphs;\n        }\n      }\n\n      if (!charsCache) {\n        charsCache = this.charsCache = Object.create(null);\n      }\n\n      glyphs = [];\n      var charsCacheKey = chars;\n      var i = 0,\n          ii;\n\n      if (this.cMap) {\n        var c = Object.create(null);\n\n        while (i < chars.length) {\n          this.cMap.readCharCode(chars, i, c);\n          charcode = c.charcode;\n          var length = c.length;\n          i += length;\n          var isSpace = length === 1 && chars.charCodeAt(i - 1) === 0x20;\n          glyph = this.charToGlyph(charcode, isSpace);\n          glyphs.push(glyph);\n        }\n      } else {\n        for (i = 0, ii = chars.length; i < ii; ++i) {\n          charcode = chars.charCodeAt(i);\n          glyph = this.charToGlyph(charcode, charcode === 0x20);\n          glyphs.push(glyph);\n        }\n      }\n\n      return charsCache[charsCacheKey] = glyphs;\n    },\n\n    get glyphCacheValues() {\n      return Object.values(this.glyphCache);\n    }\n\n  };\n  return Font;\n}();\n\nexports.Font = Font;\n\nvar ErrorFont = function ErrorFontClosure() {\n  function ErrorFont(error) {\n    this.error = error;\n    this.loadedName = \"g_font_error\";\n    this.missingFile = true;\n  }\n\n  ErrorFont.prototype = {\n    charsToGlyphs: function ErrorFont_charsToGlyphs() {\n      return [];\n    },\n    exportData: function ErrorFont_exportData() {\n      return {\n        error: this.error\n      };\n    }\n  };\n  return ErrorFont;\n}();\n\nexports.ErrorFont = ErrorFont;\n\nfunction type1FontGlyphMapping(properties, builtInEncoding, glyphNames) {\n  var charCodeToGlyphId = Object.create(null);\n  var glyphId, charCode, baseEncoding;\n  var isSymbolicFont = !!(properties.flags & FontFlags.Symbolic);\n\n  if (properties.baseEncodingName) {\n    baseEncoding = (0, _encodings.getEncoding)(properties.baseEncodingName);\n\n    for (charCode = 0; charCode < baseEncoding.length; charCode++) {\n      glyphId = glyphNames.indexOf(baseEncoding[charCode]);\n\n      if (glyphId >= 0) {\n        charCodeToGlyphId[charCode] = glyphId;\n      } else {\n        charCodeToGlyphId[charCode] = 0;\n      }\n    }\n  } else if (isSymbolicFont) {\n    for (charCode in builtInEncoding) {\n      charCodeToGlyphId[charCode] = builtInEncoding[charCode];\n    }\n  } else {\n    baseEncoding = _encodings.StandardEncoding;\n\n    for (charCode = 0; charCode < baseEncoding.length; charCode++) {\n      glyphId = glyphNames.indexOf(baseEncoding[charCode]);\n\n      if (glyphId >= 0) {\n        charCodeToGlyphId[charCode] = glyphId;\n      } else {\n        charCodeToGlyphId[charCode] = 0;\n      }\n    }\n  }\n\n  var differences = properties.differences,\n      glyphsUnicodeMap;\n\n  if (differences) {\n    for (charCode in differences) {\n      var glyphName = differences[charCode];\n      glyphId = glyphNames.indexOf(glyphName);\n\n      if (glyphId === -1) {\n        if (!glyphsUnicodeMap) {\n          glyphsUnicodeMap = (0, _glyphlist.getGlyphsUnicode)();\n        }\n\n        var standardGlyphName = recoverGlyphName(glyphName, glyphsUnicodeMap);\n\n        if (standardGlyphName !== glyphName) {\n          glyphId = glyphNames.indexOf(standardGlyphName);\n        }\n      }\n\n      if (glyphId >= 0) {\n        charCodeToGlyphId[charCode] = glyphId;\n      } else {\n        charCodeToGlyphId[charCode] = 0;\n      }\n    }\n  }\n\n  return charCodeToGlyphId;\n}\n\nvar Type1Font = function Type1FontClosure() {\n  function findBlock(streamBytes, signature, startIndex) {\n    var streamBytesLength = streamBytes.length;\n    var signatureLength = signature.length;\n    var scanLength = streamBytesLength - signatureLength;\n    var i = startIndex,\n        j,\n        found = false;\n\n    while (i < scanLength) {\n      j = 0;\n\n      while (j < signatureLength && streamBytes[i + j] === signature[j]) {\n        j++;\n      }\n\n      if (j >= signatureLength) {\n        i += j;\n\n        while (i < streamBytesLength && (0, _core_utils.isWhiteSpace)(streamBytes[i])) {\n          i++;\n        }\n\n        found = true;\n        break;\n      }\n\n      i++;\n    }\n\n    return {\n      found,\n      length: i\n    };\n  }\n\n  function getHeaderBlock(stream, suggestedLength) {\n    var EEXEC_SIGNATURE = [0x65, 0x65, 0x78, 0x65, 0x63];\n    var streamStartPos = stream.pos;\n    var headerBytes, headerBytesLength, block;\n\n    try {\n      headerBytes = stream.getBytes(suggestedLength);\n      headerBytesLength = headerBytes.length;\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n    }\n\n    if (headerBytesLength === suggestedLength) {\n      block = findBlock(headerBytes, EEXEC_SIGNATURE, suggestedLength - 2 * EEXEC_SIGNATURE.length);\n\n      if (block.found && block.length === suggestedLength) {\n        return {\n          stream: new _stream.Stream(headerBytes),\n          length: suggestedLength\n        };\n      }\n    }\n\n    (0, _util.warn)('Invalid \"Length1\" property in Type1 font -- trying to recover.');\n    stream.pos = streamStartPos;\n    var SCAN_BLOCK_LENGTH = 2048;\n    var actualLength;\n\n    while (true) {\n      var scanBytes = stream.peekBytes(SCAN_BLOCK_LENGTH);\n      block = findBlock(scanBytes, EEXEC_SIGNATURE, 0);\n\n      if (block.length === 0) {\n        break;\n      }\n\n      stream.pos += block.length;\n\n      if (block.found) {\n        actualLength = stream.pos - streamStartPos;\n        break;\n      }\n    }\n\n    stream.pos = streamStartPos;\n\n    if (actualLength) {\n      return {\n        stream: new _stream.Stream(stream.getBytes(actualLength)),\n        length: actualLength\n      };\n    }\n\n    (0, _util.warn)('Unable to recover \"Length1\" property in Type1 font -- using as is.');\n    return {\n      stream: new _stream.Stream(stream.getBytes(suggestedLength)),\n      length: suggestedLength\n    };\n  }\n\n  function getEexecBlock(stream, suggestedLength) {\n    var eexecBytes = stream.getBytes();\n    return {\n      stream: new _stream.Stream(eexecBytes),\n      length: eexecBytes.length\n    };\n  }\n\n  function Type1Font(name, file, properties) {\n    var PFB_HEADER_SIZE = 6;\n    var headerBlockLength = properties.length1;\n    var eexecBlockLength = properties.length2;\n    var pfbHeader = file.peekBytes(PFB_HEADER_SIZE);\n    var pfbHeaderPresent = pfbHeader[0] === 0x80 && pfbHeader[1] === 0x01;\n\n    if (pfbHeaderPresent) {\n      file.skip(PFB_HEADER_SIZE);\n      headerBlockLength = pfbHeader[5] << 24 | pfbHeader[4] << 16 | pfbHeader[3] << 8 | pfbHeader[2];\n    }\n\n    var headerBlock = getHeaderBlock(file, headerBlockLength);\n    var headerBlockParser = new _type1_parser.Type1Parser(headerBlock.stream, false, SEAC_ANALYSIS_ENABLED);\n    headerBlockParser.extractFontHeader(properties);\n\n    if (pfbHeaderPresent) {\n      pfbHeader = file.getBytes(PFB_HEADER_SIZE);\n      eexecBlockLength = pfbHeader[5] << 24 | pfbHeader[4] << 16 | pfbHeader[3] << 8 | pfbHeader[2];\n    }\n\n    var eexecBlock = getEexecBlock(file, eexecBlockLength);\n    var eexecBlockParser = new _type1_parser.Type1Parser(eexecBlock.stream, true, SEAC_ANALYSIS_ENABLED);\n    var data = eexecBlockParser.extractFontProgram(properties);\n\n    for (var info in data.properties) {\n      properties[info] = data.properties[info];\n    }\n\n    var charstrings = data.charstrings;\n    var type2Charstrings = this.getType2Charstrings(charstrings);\n    var subrs = this.getType2Subrs(data.subrs);\n    this.charstrings = charstrings;\n    this.data = this.wrap(name, type2Charstrings, this.charstrings, subrs, properties);\n    this.seacs = this.getSeacs(data.charstrings);\n  }\n\n  Type1Font.prototype = {\n    get numGlyphs() {\n      return this.charstrings.length + 1;\n    },\n\n    getCharset: function Type1Font_getCharset() {\n      var charset = [\".notdef\"];\n      var charstrings = this.charstrings;\n\n      for (var glyphId = 0; glyphId < charstrings.length; glyphId++) {\n        charset.push(charstrings[glyphId].glyphName);\n      }\n\n      return charset;\n    },\n    getGlyphMapping: function Type1Font_getGlyphMapping(properties) {\n      var charstrings = this.charstrings;\n      var glyphNames = [\".notdef\"],\n          glyphId;\n\n      for (glyphId = 0; glyphId < charstrings.length; glyphId++) {\n        glyphNames.push(charstrings[glyphId].glyphName);\n      }\n\n      var encoding = properties.builtInEncoding;\n\n      if (encoding) {\n        var builtInEncoding = Object.create(null);\n\n        for (var charCode in encoding) {\n          glyphId = glyphNames.indexOf(encoding[charCode]);\n\n          if (glyphId >= 0) {\n            builtInEncoding[charCode] = glyphId;\n          }\n        }\n      }\n\n      return type1FontGlyphMapping(properties, builtInEncoding, glyphNames);\n    },\n    hasGlyphId: function Type1Font_hasGlyphID(id) {\n      if (id < 0 || id >= this.numGlyphs) {\n        return false;\n      }\n\n      if (id === 0) {\n        return true;\n      }\n\n      var glyph = this.charstrings[id - 1];\n      return glyph.charstring.length > 0;\n    },\n    getSeacs: function Type1Font_getSeacs(charstrings) {\n      var i, ii;\n      var seacMap = [];\n\n      for (i = 0, ii = charstrings.length; i < ii; i++) {\n        var charstring = charstrings[i];\n\n        if (charstring.seac) {\n          seacMap[i + 1] = charstring.seac;\n        }\n      }\n\n      return seacMap;\n    },\n    getType2Charstrings: function Type1Font_getType2Charstrings(type1Charstrings) {\n      var type2Charstrings = [];\n\n      for (var i = 0, ii = type1Charstrings.length; i < ii; i++) {\n        type2Charstrings.push(type1Charstrings[i].charstring);\n      }\n\n      return type2Charstrings;\n    },\n    getType2Subrs: function Type1Font_getType2Subrs(type1Subrs) {\n      var bias = 0;\n      var count = type1Subrs.length;\n\n      if (count < 1133) {\n        bias = 107;\n      } else if (count < 33769) {\n        bias = 1131;\n      } else {\n        bias = 32768;\n      }\n\n      var type2Subrs = [];\n      var i;\n\n      for (i = 0; i < bias; i++) {\n        type2Subrs.push([0x0b]);\n      }\n\n      for (i = 0; i < count; i++) {\n        type2Subrs.push(type1Subrs[i]);\n      }\n\n      return type2Subrs;\n    },\n    wrap: function Type1Font_wrap(name, glyphs, charstrings, subrs, properties) {\n      var cff = new _cff_parser.CFF();\n      cff.header = new _cff_parser.CFFHeader(1, 0, 4, 4);\n      cff.names = [name];\n      var topDict = new _cff_parser.CFFTopDict();\n      topDict.setByName(\"version\", 391);\n      topDict.setByName(\"Notice\", 392);\n      topDict.setByName(\"FullName\", 393);\n      topDict.setByName(\"FamilyName\", 394);\n      topDict.setByName(\"Weight\", 395);\n      topDict.setByName(\"Encoding\", null);\n      topDict.setByName(\"FontMatrix\", properties.fontMatrix);\n      topDict.setByName(\"FontBBox\", properties.bbox);\n      topDict.setByName(\"charset\", null);\n      topDict.setByName(\"CharStrings\", null);\n      topDict.setByName(\"Private\", null);\n      cff.topDict = topDict;\n      var strings = new _cff_parser.CFFStrings();\n      strings.add(\"Version 0.11\");\n      strings.add(\"See original notice\");\n      strings.add(name);\n      strings.add(name);\n      strings.add(\"Medium\");\n      cff.strings = strings;\n      cff.globalSubrIndex = new _cff_parser.CFFIndex();\n      var count = glyphs.length;\n      var charsetArray = [\".notdef\"];\n      var i, ii;\n\n      for (i = 0; i < count; i++) {\n        const glyphName = charstrings[i].glyphName;\n\n        const index = _cff_parser.CFFStandardStrings.indexOf(glyphName);\n\n        if (index === -1) {\n          strings.add(glyphName);\n        }\n\n        charsetArray.push(glyphName);\n      }\n\n      cff.charset = new _cff_parser.CFFCharset(false, 0, charsetArray);\n      var charStringsIndex = new _cff_parser.CFFIndex();\n      charStringsIndex.add([0x8b, 0x0e]);\n\n      for (i = 0; i < count; i++) {\n        charStringsIndex.add(glyphs[i]);\n      }\n\n      cff.charStrings = charStringsIndex;\n      var privateDict = new _cff_parser.CFFPrivateDict();\n      privateDict.setByName(\"Subrs\", null);\n      var fields = [\"BlueValues\", \"OtherBlues\", \"FamilyBlues\", \"FamilyOtherBlues\", \"StemSnapH\", \"StemSnapV\", \"BlueShift\", \"BlueFuzz\", \"BlueScale\", \"LanguageGroup\", \"ExpansionFactor\", \"ForceBold\", \"StdHW\", \"StdVW\"];\n\n      for (i = 0, ii = fields.length; i < ii; i++) {\n        var field = fields[i];\n\n        if (!(field in properties.privateData)) {\n          continue;\n        }\n\n        var value = properties.privateData[field];\n\n        if (Array.isArray(value)) {\n          for (var j = value.length - 1; j > 0; j--) {\n            value[j] -= value[j - 1];\n          }\n        }\n\n        privateDict.setByName(field, value);\n      }\n\n      cff.topDict.privateDict = privateDict;\n      var subrIndex = new _cff_parser.CFFIndex();\n\n      for (i = 0, ii = subrs.length; i < ii; i++) {\n        subrIndex.add(subrs[i]);\n      }\n\n      privateDict.subrsIndex = subrIndex;\n      var compiler = new _cff_parser.CFFCompiler(cff);\n      return compiler.compile();\n    }\n  };\n  return Type1Font;\n}();\n\nvar CFFFont = function CFFFontClosure() {\n  function CFFFont(file, properties) {\n    this.properties = properties;\n    var parser = new _cff_parser.CFFParser(file, properties, SEAC_ANALYSIS_ENABLED);\n    this.cff = parser.parse();\n    this.cff.duplicateFirstGlyph();\n    var compiler = new _cff_parser.CFFCompiler(this.cff);\n    this.seacs = this.cff.seacs;\n\n    try {\n      this.data = compiler.compile();\n    } catch (e) {\n      (0, _util.warn)(\"Failed to compile font \" + properties.loadedName);\n      this.data = file;\n    }\n  }\n\n  CFFFont.prototype = {\n    get numGlyphs() {\n      return this.cff.charStrings.count;\n    },\n\n    getCharset: function CFFFont_getCharset() {\n      return this.cff.charset.charset;\n    },\n    getGlyphMapping: function CFFFont_getGlyphMapping() {\n      var cff = this.cff;\n      var properties = this.properties;\n      var charsets = cff.charset.charset;\n      var charCodeToGlyphId;\n      var glyphId;\n\n      if (properties.composite) {\n        charCodeToGlyphId = Object.create(null);\n        let charCode;\n\n        if (cff.isCIDFont) {\n          for (glyphId = 0; glyphId < charsets.length; glyphId++) {\n            var cid = charsets[glyphId];\n            charCode = properties.cMap.charCodeOf(cid);\n            charCodeToGlyphId[charCode] = glyphId;\n          }\n        } else {\n          for (glyphId = 0; glyphId < cff.charStrings.count; glyphId++) {\n            charCode = properties.cMap.charCodeOf(glyphId);\n            charCodeToGlyphId[charCode] = glyphId;\n          }\n        }\n\n        return charCodeToGlyphId;\n      }\n\n      var encoding = cff.encoding ? cff.encoding.encoding : null;\n      charCodeToGlyphId = type1FontGlyphMapping(properties, encoding, charsets);\n      return charCodeToGlyphId;\n    },\n    hasGlyphId: function CFFFont_hasGlyphID(id) {\n      return this.cff.hasGlyphId(id);\n    }\n  };\n  return CFFFont;\n}();\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CFFFDSelect = exports.CFFCompiler = exports.CFFPrivateDict = exports.CFFTopDict = exports.CFFCharset = exports.CFFIndex = exports.CFFStrings = exports.CFFHeader = exports.CFF = exports.CFFParser = exports.CFFStandardStrings = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _charsets = __w_pdfjs_require__(29);\n\nvar _encodings = __w_pdfjs_require__(30);\n\nvar MAX_SUBR_NESTING = 10;\nvar CFFStandardStrings = [\".notdef\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quoteright\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"quoteleft\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"exclamdown\", \"cent\", \"sterling\", \"fraction\", \"yen\", \"florin\", \"section\", \"currency\", \"quotesingle\", \"quotedblleft\", \"guillemotleft\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"endash\", \"dagger\", \"daggerdbl\", \"periodcentered\", \"paragraph\", \"bullet\", \"quotesinglbase\", \"quotedblbase\", \"quotedblright\", \"guillemotright\", \"ellipsis\", \"perthousand\", \"questiondown\", \"grave\", \"acute\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"dieresis\", \"ring\", \"cedilla\", \"hungarumlaut\", \"ogonek\", \"caron\", \"emdash\", \"AE\", \"ordfeminine\", \"Lslash\", \"Oslash\", \"OE\", \"ordmasculine\", \"ae\", \"dotlessi\", \"lslash\", \"oslash\", \"oe\", \"germandbls\", \"onesuperior\", \"logicalnot\", \"mu\", \"trademark\", \"Eth\", \"onehalf\", \"plusminus\", \"Thorn\", \"onequarter\", \"divide\", \"brokenbar\", \"degree\", \"thorn\", \"threequarters\", \"twosuperior\", \"registered\", \"minus\", \"eth\", \"multiply\", \"threesuperior\", \"copyright\", \"Aacute\", \"Acircumflex\", \"Adieresis\", \"Agrave\", \"Aring\", \"Atilde\", \"Ccedilla\", \"Eacute\", \"Ecircumflex\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Ntilde\", \"Oacute\", \"Ocircumflex\", \"Odieresis\", \"Ograve\", \"Otilde\", \"Scaron\", \"Uacute\", \"Ucircumflex\", \"Udieresis\", \"Ugrave\", \"Yacute\", \"Ydieresis\", \"Zcaron\", \"aacute\", \"acircumflex\", \"adieresis\", \"agrave\", \"aring\", \"atilde\", \"ccedilla\", \"eacute\", \"ecircumflex\", \"edieresis\", \"egrave\", \"iacute\", \"icircumflex\", \"idieresis\", \"igrave\", \"ntilde\", \"oacute\", \"ocircumflex\", \"odieresis\", \"ograve\", \"otilde\", \"scaron\", \"uacute\", \"ucircumflex\", \"udieresis\", \"ugrave\", \"yacute\", \"ydieresis\", \"zcaron\", \"exclamsmall\", \"Hungarumlautsmall\", \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"commasuperior\", \"threequartersemdash\", \"periodsuperior\", \"questionsmall\", \"asuperior\", \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"isuperior\", \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"rsuperior\", \"ssuperior\", \"tsuperior\", \"ff\", \"ffi\", \"ffl\", \"parenleftinferior\", \"parenrightinferior\", \"Circumflexsmall\", \"hyphensuperior\", \"Gravesmall\", \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\", \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\", \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\", \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"Tildesmall\", \"exclamdownsmall\", \"centoldstyle\", \"Lslashsmall\", \"Scaronsmall\", \"Zcaronsmall\", \"Dieresissmall\", \"Brevesmall\", \"Caronsmall\", \"Dotaccentsmall\", \"Macronsmall\", \"figuredash\", \"hypheninferior\", \"Ogoneksmall\", \"Ringsmall\", \"Cedillasmall\", \"questiondownsmall\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"zerosuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\", \"periodinferior\", \"commainferior\", \"Agravesmall\", \"Aacutesmall\", \"Acircumflexsmall\", \"Atildesmall\", \"Adieresissmall\", \"Aringsmall\", \"AEsmall\", \"Ccedillasmall\", \"Egravesmall\", \"Eacutesmall\", \"Ecircumflexsmall\", \"Edieresissmall\", \"Igravesmall\", \"Iacutesmall\", \"Icircumflexsmall\", \"Idieresissmall\", \"Ethsmall\", \"Ntildesmall\", \"Ogravesmall\", \"Oacutesmall\", \"Ocircumflexsmall\", \"Otildesmall\", \"Odieresissmall\", \"OEsmall\", \"Oslashsmall\", \"Ugravesmall\", \"Uacutesmall\", \"Ucircumflexsmall\", \"Udieresissmall\", \"Yacutesmall\", \"Thornsmall\", \"Ydieresissmall\", \"001.000\", \"001.001\", \"001.002\", \"001.003\", \"Black\", \"Bold\", \"Book\", \"Light\", \"Medium\", \"Regular\", \"Roman\", \"Semibold\"];\nexports.CFFStandardStrings = CFFStandardStrings;\nconst NUM_STANDARD_CFF_STRINGS = 391;\n\nvar CFFParser = function CFFParserClosure() {\n  var CharstringValidationData = [null, {\n    id: \"hstem\",\n    min: 2,\n    stackClearing: true,\n    stem: true\n  }, null, {\n    id: \"vstem\",\n    min: 2,\n    stackClearing: true,\n    stem: true\n  }, {\n    id: \"vmoveto\",\n    min: 1,\n    stackClearing: true\n  }, {\n    id: \"rlineto\",\n    min: 2,\n    resetStack: true\n  }, {\n    id: \"hlineto\",\n    min: 1,\n    resetStack: true\n  }, {\n    id: \"vlineto\",\n    min: 1,\n    resetStack: true\n  }, {\n    id: \"rrcurveto\",\n    min: 6,\n    resetStack: true\n  }, null, {\n    id: \"callsubr\",\n    min: 1,\n    undefStack: true\n  }, {\n    id: \"return\",\n    min: 0,\n    undefStack: true\n  }, null, null, {\n    id: \"endchar\",\n    min: 0,\n    stackClearing: true\n  }, null, null, null, {\n    id: \"hstemhm\",\n    min: 2,\n    stackClearing: true,\n    stem: true\n  }, {\n    id: \"hintmask\",\n    min: 0,\n    stackClearing: true\n  }, {\n    id: \"cntrmask\",\n    min: 0,\n    stackClearing: true\n  }, {\n    id: \"rmoveto\",\n    min: 2,\n    stackClearing: true\n  }, {\n    id: \"hmoveto\",\n    min: 1,\n    stackClearing: true\n  }, {\n    id: \"vstemhm\",\n    min: 2,\n    stackClearing: true,\n    stem: true\n  }, {\n    id: \"rcurveline\",\n    min: 8,\n    resetStack: true\n  }, {\n    id: \"rlinecurve\",\n    min: 8,\n    resetStack: true\n  }, {\n    id: \"vvcurveto\",\n    min: 4,\n    resetStack: true\n  }, {\n    id: \"hhcurveto\",\n    min: 4,\n    resetStack: true\n  }, null, {\n    id: \"callgsubr\",\n    min: 1,\n    undefStack: true\n  }, {\n    id: \"vhcurveto\",\n    min: 4,\n    resetStack: true\n  }, {\n    id: \"hvcurveto\",\n    min: 4,\n    resetStack: true\n  }];\n  var CharstringValidationData12 = [null, null, null, {\n    id: \"and\",\n    min: 2,\n    stackDelta: -1\n  }, {\n    id: \"or\",\n    min: 2,\n    stackDelta: -1\n  }, {\n    id: \"not\",\n    min: 1,\n    stackDelta: 0\n  }, null, null, null, {\n    id: \"abs\",\n    min: 1,\n    stackDelta: 0\n  }, {\n    id: \"add\",\n    min: 2,\n    stackDelta: -1,\n    stackFn: function stack_div(stack, index) {\n      stack[index - 2] = stack[index - 2] + stack[index - 1];\n    }\n  }, {\n    id: \"sub\",\n    min: 2,\n    stackDelta: -1,\n    stackFn: function stack_div(stack, index) {\n      stack[index - 2] = stack[index - 2] - stack[index - 1];\n    }\n  }, {\n    id: \"div\",\n    min: 2,\n    stackDelta: -1,\n    stackFn: function stack_div(stack, index) {\n      stack[index - 2] = stack[index - 2] / stack[index - 1];\n    }\n  }, null, {\n    id: \"neg\",\n    min: 1,\n    stackDelta: 0,\n    stackFn: function stack_div(stack, index) {\n      stack[index - 1] = -stack[index - 1];\n    }\n  }, {\n    id: \"eq\",\n    min: 2,\n    stackDelta: -1\n  }, null, null, {\n    id: \"drop\",\n    min: 1,\n    stackDelta: -1\n  }, null, {\n    id: \"put\",\n    min: 2,\n    stackDelta: -2\n  }, {\n    id: \"get\",\n    min: 1,\n    stackDelta: 0\n  }, {\n    id: \"ifelse\",\n    min: 4,\n    stackDelta: -3\n  }, {\n    id: \"random\",\n    min: 0,\n    stackDelta: 1\n  }, {\n    id: \"mul\",\n    min: 2,\n    stackDelta: -1,\n    stackFn: function stack_div(stack, index) {\n      stack[index - 2] = stack[index - 2] * stack[index - 1];\n    }\n  }, null, {\n    id: \"sqrt\",\n    min: 1,\n    stackDelta: 0\n  }, {\n    id: \"dup\",\n    min: 1,\n    stackDelta: 1\n  }, {\n    id: \"exch\",\n    min: 2,\n    stackDelta: 0\n  }, {\n    id: \"index\",\n    min: 2,\n    stackDelta: 0\n  }, {\n    id: \"roll\",\n    min: 3,\n    stackDelta: -2\n  }, null, null, null, {\n    id: \"hflex\",\n    min: 7,\n    resetStack: true\n  }, {\n    id: \"flex\",\n    min: 13,\n    resetStack: true\n  }, {\n    id: \"hflex1\",\n    min: 9,\n    resetStack: true\n  }, {\n    id: \"flex1\",\n    min: 11,\n    resetStack: true\n  }];\n\n  function CFFParser(file, properties, seacAnalysisEnabled) {\n    this.bytes = file.getBytes();\n    this.properties = properties;\n    this.seacAnalysisEnabled = !!seacAnalysisEnabled;\n  }\n\n  CFFParser.prototype = {\n    parse: function CFFParser_parse() {\n      var properties = this.properties;\n      var cff = new CFF();\n      this.cff = cff;\n      var header = this.parseHeader();\n      var nameIndex = this.parseIndex(header.endPos);\n      var topDictIndex = this.parseIndex(nameIndex.endPos);\n      var stringIndex = this.parseIndex(topDictIndex.endPos);\n      var globalSubrIndex = this.parseIndex(stringIndex.endPos);\n      var topDictParsed = this.parseDict(topDictIndex.obj.get(0));\n      var topDict = this.createDict(CFFTopDict, topDictParsed, cff.strings);\n      cff.header = header.obj;\n      cff.names = this.parseNameIndex(nameIndex.obj);\n      cff.strings = this.parseStringIndex(stringIndex.obj);\n      cff.topDict = topDict;\n      cff.globalSubrIndex = globalSubrIndex.obj;\n      this.parsePrivateDict(cff.topDict);\n      cff.isCIDFont = topDict.hasName(\"ROS\");\n      var charStringOffset = topDict.getByName(\"CharStrings\");\n      var charStringIndex = this.parseIndex(charStringOffset).obj;\n      var fontMatrix = topDict.getByName(\"FontMatrix\");\n\n      if (fontMatrix) {\n        properties.fontMatrix = fontMatrix;\n      }\n\n      var fontBBox = topDict.getByName(\"FontBBox\");\n\n      if (fontBBox) {\n        properties.ascent = Math.max(fontBBox[3], fontBBox[1]);\n        properties.descent = Math.min(fontBBox[1], fontBBox[3]);\n        properties.ascentScaled = true;\n      }\n\n      var charset, encoding;\n\n      if (cff.isCIDFont) {\n        var fdArrayIndex = this.parseIndex(topDict.getByName(\"FDArray\")).obj;\n\n        for (var i = 0, ii = fdArrayIndex.count; i < ii; ++i) {\n          var dictRaw = fdArrayIndex.get(i);\n          var fontDict = this.createDict(CFFTopDict, this.parseDict(dictRaw), cff.strings);\n          this.parsePrivateDict(fontDict);\n          cff.fdArray.push(fontDict);\n        }\n\n        encoding = null;\n        charset = this.parseCharsets(topDict.getByName(\"charset\"), charStringIndex.count, cff.strings, true);\n        cff.fdSelect = this.parseFDSelect(topDict.getByName(\"FDSelect\"), charStringIndex.count);\n      } else {\n        charset = this.parseCharsets(topDict.getByName(\"charset\"), charStringIndex.count, cff.strings, false);\n        encoding = this.parseEncoding(topDict.getByName(\"Encoding\"), properties, cff.strings, charset.charset);\n      }\n\n      cff.charset = charset;\n      cff.encoding = encoding;\n      var charStringsAndSeacs = this.parseCharStrings({\n        charStrings: charStringIndex,\n        localSubrIndex: topDict.privateDict.subrsIndex,\n        globalSubrIndex: globalSubrIndex.obj,\n        fdSelect: cff.fdSelect,\n        fdArray: cff.fdArray,\n        privateDict: topDict.privateDict\n      });\n      cff.charStrings = charStringsAndSeacs.charStrings;\n      cff.seacs = charStringsAndSeacs.seacs;\n      cff.widths = charStringsAndSeacs.widths;\n      return cff;\n    },\n    parseHeader: function CFFParser_parseHeader() {\n      var bytes = this.bytes;\n      var bytesLength = bytes.length;\n      var offset = 0;\n\n      while (offset < bytesLength && bytes[offset] !== 1) {\n        ++offset;\n      }\n\n      if (offset >= bytesLength) {\n        throw new _util.FormatError(\"Invalid CFF header\");\n      }\n\n      if (offset !== 0) {\n        (0, _util.info)(\"cff data is shifted\");\n        bytes = bytes.subarray(offset);\n        this.bytes = bytes;\n      }\n\n      var major = bytes[0];\n      var minor = bytes[1];\n      var hdrSize = bytes[2];\n      var offSize = bytes[3];\n      var header = new CFFHeader(major, minor, hdrSize, offSize);\n      return {\n        obj: header,\n        endPos: hdrSize\n      };\n    },\n    parseDict: function CFFParser_parseDict(dict) {\n      var pos = 0;\n\n      function parseOperand() {\n        var value = dict[pos++];\n\n        if (value === 30) {\n          return parseFloatOperand();\n        } else if (value === 28) {\n          value = dict[pos++];\n          value = (value << 24 | dict[pos++] << 16) >> 16;\n          return value;\n        } else if (value === 29) {\n          value = dict[pos++];\n          value = value << 8 | dict[pos++];\n          value = value << 8 | dict[pos++];\n          value = value << 8 | dict[pos++];\n          return value;\n        } else if (value >= 32 && value <= 246) {\n          return value - 139;\n        } else if (value >= 247 && value <= 250) {\n          return (value - 247) * 256 + dict[pos++] + 108;\n        } else if (value >= 251 && value <= 254) {\n          return -((value - 251) * 256) - dict[pos++] - 108;\n        }\n\n        (0, _util.warn)('CFFParser_parseDict: \"' + value + '\" is a reserved command.');\n        return NaN;\n      }\n\n      function parseFloatOperand() {\n        var str = \"\";\n        var eof = 15;\n        const lookup = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \".\", \"E\", \"E-\", null, \"-\"];\n        var length = dict.length;\n\n        while (pos < length) {\n          var b = dict[pos++];\n          var b1 = b >> 4;\n          var b2 = b & 15;\n\n          if (b1 === eof) {\n            break;\n          }\n\n          str += lookup[b1];\n\n          if (b2 === eof) {\n            break;\n          }\n\n          str += lookup[b2];\n        }\n\n        return parseFloat(str);\n      }\n\n      var operands = [];\n      var entries = [];\n      pos = 0;\n      var end = dict.length;\n\n      while (pos < end) {\n        var b = dict[pos];\n\n        if (b <= 21) {\n          if (b === 12) {\n            b = b << 8 | dict[++pos];\n          }\n\n          entries.push([b, operands]);\n          operands = [];\n          ++pos;\n        } else {\n          operands.push(parseOperand());\n        }\n      }\n\n      return entries;\n    },\n    parseIndex: function CFFParser_parseIndex(pos) {\n      var cffIndex = new CFFIndex();\n      var bytes = this.bytes;\n      var count = bytes[pos++] << 8 | bytes[pos++];\n      var offsets = [];\n      var end = pos;\n      var i, ii;\n\n      if (count !== 0) {\n        var offsetSize = bytes[pos++];\n        var startPos = pos + (count + 1) * offsetSize - 1;\n\n        for (i = 0, ii = count + 1; i < ii; ++i) {\n          var offset = 0;\n\n          for (var j = 0; j < offsetSize; ++j) {\n            offset <<= 8;\n            offset += bytes[pos++];\n          }\n\n          offsets.push(startPos + offset);\n        }\n\n        end = offsets[count];\n      }\n\n      for (i = 0, ii = offsets.length - 1; i < ii; ++i) {\n        var offsetStart = offsets[i];\n        var offsetEnd = offsets[i + 1];\n        cffIndex.add(bytes.subarray(offsetStart, offsetEnd));\n      }\n\n      return {\n        obj: cffIndex,\n        endPos: end\n      };\n    },\n    parseNameIndex: function CFFParser_parseNameIndex(index) {\n      var names = [];\n\n      for (var i = 0, ii = index.count; i < ii; ++i) {\n        var name = index.get(i);\n        names.push((0, _util.bytesToString)(name));\n      }\n\n      return names;\n    },\n    parseStringIndex: function CFFParser_parseStringIndex(index) {\n      var strings = new CFFStrings();\n\n      for (var i = 0, ii = index.count; i < ii; ++i) {\n        var data = index.get(i);\n        strings.add((0, _util.bytesToString)(data));\n      }\n\n      return strings;\n    },\n    createDict: function CFFParser_createDict(Type, dict, strings) {\n      var cffDict = new Type(strings);\n\n      for (var i = 0, ii = dict.length; i < ii; ++i) {\n        var pair = dict[i];\n        var key = pair[0];\n        var value = pair[1];\n        cffDict.setByKey(key, value);\n      }\n\n      return cffDict;\n    },\n    parseCharString: function CFFParser_parseCharString(state, data, localSubrIndex, globalSubrIndex) {\n      if (!data || state.callDepth > MAX_SUBR_NESTING) {\n        return false;\n      }\n\n      var stackSize = state.stackSize;\n      var stack = state.stack;\n      var length = data.length;\n\n      for (var j = 0; j < length;) {\n        var value = data[j++];\n        var validationCommand = null;\n\n        if (value === 12) {\n          var q = data[j++];\n\n          if (q === 0) {\n            data[j - 2] = 139;\n            data[j - 1] = 22;\n            stackSize = 0;\n          } else {\n            validationCommand = CharstringValidationData12[q];\n          }\n        } else if (value === 28) {\n          stack[stackSize] = (data[j] << 24 | data[j + 1] << 16) >> 16;\n          j += 2;\n          stackSize++;\n        } else if (value === 14) {\n          if (stackSize >= 4) {\n            stackSize -= 4;\n\n            if (this.seacAnalysisEnabled) {\n              state.seac = stack.slice(stackSize, stackSize + 4);\n              return false;\n            }\n          }\n\n          validationCommand = CharstringValidationData[value];\n        } else if (value >= 32 && value <= 246) {\n          stack[stackSize] = value - 139;\n          stackSize++;\n        } else if (value >= 247 && value <= 254) {\n          stack[stackSize] = value < 251 ? (value - 247 << 8) + data[j] + 108 : -(value - 251 << 8) - data[j] - 108;\n          j++;\n          stackSize++;\n        } else if (value === 255) {\n          stack[stackSize] = (data[j] << 24 | data[j + 1] << 16 | data[j + 2] << 8 | data[j + 3]) / 65536;\n          j += 4;\n          stackSize++;\n        } else if (value === 19 || value === 20) {\n          state.hints += stackSize >> 1;\n          j += state.hints + 7 >> 3;\n          stackSize %= 2;\n          validationCommand = CharstringValidationData[value];\n        } else if (value === 10 || value === 29) {\n          var subrsIndex;\n\n          if (value === 10) {\n            subrsIndex = localSubrIndex;\n          } else {\n            subrsIndex = globalSubrIndex;\n          }\n\n          if (!subrsIndex) {\n            validationCommand = CharstringValidationData[value];\n            (0, _util.warn)(\"Missing subrsIndex for \" + validationCommand.id);\n            return false;\n          }\n\n          var bias = 32768;\n\n          if (subrsIndex.count < 1240) {\n            bias = 107;\n          } else if (subrsIndex.count < 33900) {\n            bias = 1131;\n          }\n\n          var subrNumber = stack[--stackSize] + bias;\n\n          if (subrNumber < 0 || subrNumber >= subrsIndex.count || isNaN(subrNumber)) {\n            validationCommand = CharstringValidationData[value];\n            (0, _util.warn)(\"Out of bounds subrIndex for \" + validationCommand.id);\n            return false;\n          }\n\n          state.stackSize = stackSize;\n          state.callDepth++;\n          var valid = this.parseCharString(state, subrsIndex.get(subrNumber), localSubrIndex, globalSubrIndex);\n\n          if (!valid) {\n            return false;\n          }\n\n          state.callDepth--;\n          stackSize = state.stackSize;\n          continue;\n        } else if (value === 11) {\n          state.stackSize = stackSize;\n          return true;\n        } else {\n          validationCommand = CharstringValidationData[value];\n        }\n\n        if (validationCommand) {\n          if (validationCommand.stem) {\n            state.hints += stackSize >> 1;\n\n            if (value === 3 || value === 23) {\n              state.hasVStems = true;\n            } else if (state.hasVStems && (value === 1 || value === 18)) {\n              (0, _util.warn)(\"CFF stem hints are in wrong order\");\n              data[j - 1] = value === 1 ? 3 : 23;\n            }\n          }\n\n          if (\"min\" in validationCommand) {\n            if (!state.undefStack && stackSize < validationCommand.min) {\n              (0, _util.warn)(\"Not enough parameters for \" + validationCommand.id + \"; actual: \" + stackSize + \", expected: \" + validationCommand.min);\n              return false;\n            }\n          }\n\n          if (state.firstStackClearing && validationCommand.stackClearing) {\n            state.firstStackClearing = false;\n            stackSize -= validationCommand.min;\n\n            if (stackSize >= 2 && validationCommand.stem) {\n              stackSize %= 2;\n            } else if (stackSize > 1) {\n              (0, _util.warn)(\"Found too many parameters for stack-clearing command\");\n            }\n\n            if (stackSize > 0 && stack[stackSize - 1] >= 0) {\n              state.width = stack[stackSize - 1];\n            }\n          }\n\n          if (\"stackDelta\" in validationCommand) {\n            if (\"stackFn\" in validationCommand) {\n              validationCommand.stackFn(stack, stackSize);\n            }\n\n            stackSize += validationCommand.stackDelta;\n          } else if (validationCommand.stackClearing) {\n            stackSize = 0;\n          } else if (validationCommand.resetStack) {\n            stackSize = 0;\n            state.undefStack = false;\n          } else if (validationCommand.undefStack) {\n            stackSize = 0;\n            state.undefStack = true;\n            state.firstStackClearing = false;\n          }\n        }\n      }\n\n      state.stackSize = stackSize;\n      return true;\n    },\n\n    parseCharStrings({\n      charStrings,\n      localSubrIndex,\n      globalSubrIndex,\n      fdSelect,\n      fdArray,\n      privateDict\n    }) {\n      var seacs = [];\n      var widths = [];\n      var count = charStrings.count;\n\n      for (var i = 0; i < count; i++) {\n        var charstring = charStrings.get(i);\n        var state = {\n          callDepth: 0,\n          stackSize: 0,\n          stack: [],\n          undefStack: true,\n          hints: 0,\n          firstStackClearing: true,\n          seac: null,\n          width: null,\n          hasVStems: false\n        };\n        var valid = true;\n        var localSubrToUse = null;\n        var privateDictToUse = privateDict;\n\n        if (fdSelect && fdArray.length) {\n          var fdIndex = fdSelect.getFDIndex(i);\n\n          if (fdIndex === -1) {\n            (0, _util.warn)(\"Glyph index is not in fd select.\");\n            valid = false;\n          }\n\n          if (fdIndex >= fdArray.length) {\n            (0, _util.warn)(\"Invalid fd index for glyph index.\");\n            valid = false;\n          }\n\n          if (valid) {\n            privateDictToUse = fdArray[fdIndex].privateDict;\n            localSubrToUse = privateDictToUse.subrsIndex;\n          }\n        } else if (localSubrIndex) {\n          localSubrToUse = localSubrIndex;\n        }\n\n        if (valid) {\n          valid = this.parseCharString(state, charstring, localSubrToUse, globalSubrIndex);\n        }\n\n        if (state.width !== null) {\n          const nominalWidth = privateDictToUse.getByName(\"nominalWidthX\");\n          widths[i] = nominalWidth + state.width;\n        } else {\n          const defaultWidth = privateDictToUse.getByName(\"defaultWidthX\");\n          widths[i] = defaultWidth;\n        }\n\n        if (state.seac !== null) {\n          seacs[i] = state.seac;\n        }\n\n        if (!valid) {\n          charStrings.set(i, new Uint8Array([14]));\n        }\n      }\n\n      return {\n        charStrings,\n        seacs,\n        widths\n      };\n    },\n\n    emptyPrivateDictionary: function CFFParser_emptyPrivateDictionary(parentDict) {\n      var privateDict = this.createDict(CFFPrivateDict, [], parentDict.strings);\n      parentDict.setByKey(18, [0, 0]);\n      parentDict.privateDict = privateDict;\n    },\n    parsePrivateDict: function CFFParser_parsePrivateDict(parentDict) {\n      if (!parentDict.hasName(\"Private\")) {\n        this.emptyPrivateDictionary(parentDict);\n        return;\n      }\n\n      var privateOffset = parentDict.getByName(\"Private\");\n\n      if (!Array.isArray(privateOffset) || privateOffset.length !== 2) {\n        parentDict.removeByName(\"Private\");\n        return;\n      }\n\n      var size = privateOffset[0];\n      var offset = privateOffset[1];\n\n      if (size === 0 || offset >= this.bytes.length) {\n        this.emptyPrivateDictionary(parentDict);\n        return;\n      }\n\n      var privateDictEnd = offset + size;\n      var dictData = this.bytes.subarray(offset, privateDictEnd);\n      var dict = this.parseDict(dictData);\n      var privateDict = this.createDict(CFFPrivateDict, dict, parentDict.strings);\n      parentDict.privateDict = privateDict;\n\n      if (!privateDict.getByName(\"Subrs\")) {\n        return;\n      }\n\n      var subrsOffset = privateDict.getByName(\"Subrs\");\n      var relativeOffset = offset + subrsOffset;\n\n      if (subrsOffset === 0 || relativeOffset >= this.bytes.length) {\n        this.emptyPrivateDictionary(parentDict);\n        return;\n      }\n\n      var subrsIndex = this.parseIndex(relativeOffset);\n      privateDict.subrsIndex = subrsIndex.obj;\n    },\n    parseCharsets: function CFFParser_parseCharsets(pos, length, strings, cid) {\n      if (pos === 0) {\n        return new CFFCharset(true, CFFCharsetPredefinedTypes.ISO_ADOBE, _charsets.ISOAdobeCharset);\n      } else if (pos === 1) {\n        return new CFFCharset(true, CFFCharsetPredefinedTypes.EXPERT, _charsets.ExpertCharset);\n      } else if (pos === 2) {\n        return new CFFCharset(true, CFFCharsetPredefinedTypes.EXPERT_SUBSET, _charsets.ExpertSubsetCharset);\n      }\n\n      var bytes = this.bytes;\n      var start = pos;\n      var format = bytes[pos++];\n      var charset = [\".notdef\"];\n      var id, count, i;\n      length -= 1;\n\n      switch (format) {\n        case 0:\n          for (i = 0; i < length; i++) {\n            id = bytes[pos++] << 8 | bytes[pos++];\n            charset.push(cid ? id : strings.get(id));\n          }\n\n          break;\n\n        case 1:\n          while (charset.length <= length) {\n            id = bytes[pos++] << 8 | bytes[pos++];\n            count = bytes[pos++];\n\n            for (i = 0; i <= count; i++) {\n              charset.push(cid ? id++ : strings.get(id++));\n            }\n          }\n\n          break;\n\n        case 2:\n          while (charset.length <= length) {\n            id = bytes[pos++] << 8 | bytes[pos++];\n            count = bytes[pos++] << 8 | bytes[pos++];\n\n            for (i = 0; i <= count; i++) {\n              charset.push(cid ? id++ : strings.get(id++));\n            }\n          }\n\n          break;\n\n        default:\n          throw new _util.FormatError(\"Unknown charset format\");\n      }\n\n      var end = pos;\n      var raw = bytes.subarray(start, end);\n      return new CFFCharset(false, format, charset, raw);\n    },\n    parseEncoding: function CFFParser_parseEncoding(pos, properties, strings, charset) {\n      var encoding = Object.create(null);\n      var bytes = this.bytes;\n      var predefined = false;\n      var format, i, ii;\n      var raw = null;\n\n      function readSupplement() {\n        var supplementsCount = bytes[pos++];\n\n        for (i = 0; i < supplementsCount; i++) {\n          var code = bytes[pos++];\n          var sid = (bytes[pos++] << 8) + (bytes[pos++] & 0xff);\n          encoding[code] = charset.indexOf(strings.get(sid));\n        }\n      }\n\n      if (pos === 0 || pos === 1) {\n        predefined = true;\n        format = pos;\n        var baseEncoding = pos ? _encodings.ExpertEncoding : _encodings.StandardEncoding;\n\n        for (i = 0, ii = charset.length; i < ii; i++) {\n          var index = baseEncoding.indexOf(charset[i]);\n\n          if (index !== -1) {\n            encoding[index] = i;\n          }\n        }\n      } else {\n        var dataStart = pos;\n        format = bytes[pos++];\n\n        switch (format & 0x7f) {\n          case 0:\n            var glyphsCount = bytes[pos++];\n\n            for (i = 1; i <= glyphsCount; i++) {\n              encoding[bytes[pos++]] = i;\n            }\n\n            break;\n\n          case 1:\n            var rangesCount = bytes[pos++];\n            var gid = 1;\n\n            for (i = 0; i < rangesCount; i++) {\n              var start = bytes[pos++];\n              var left = bytes[pos++];\n\n              for (var j = start; j <= start + left; j++) {\n                encoding[j] = gid++;\n              }\n            }\n\n            break;\n\n          default:\n            throw new _util.FormatError(`Unknown encoding format: ${format} in CFF`);\n        }\n\n        var dataEnd = pos;\n\n        if (format & 0x80) {\n          bytes[dataStart] &= 0x7f;\n          readSupplement();\n        }\n\n        raw = bytes.subarray(dataStart, dataEnd);\n      }\n\n      format = format & 0x7f;\n      return new CFFEncoding(predefined, format, encoding, raw);\n    },\n    parseFDSelect: function CFFParser_parseFDSelect(pos, length) {\n      var bytes = this.bytes;\n      var format = bytes[pos++];\n      var fdSelect = [];\n      var i;\n\n      switch (format) {\n        case 0:\n          for (i = 0; i < length; ++i) {\n            var id = bytes[pos++];\n            fdSelect.push(id);\n          }\n\n          break;\n\n        case 3:\n          var rangesCount = bytes[pos++] << 8 | bytes[pos++];\n\n          for (i = 0; i < rangesCount; ++i) {\n            var first = bytes[pos++] << 8 | bytes[pos++];\n\n            if (i === 0 && first !== 0) {\n              (0, _util.warn)(\"parseFDSelect: The first range must have a first GID of 0\" + \" -- trying to recover.\");\n              first = 0;\n            }\n\n            var fdIndex = bytes[pos++];\n            var next = bytes[pos] << 8 | bytes[pos + 1];\n\n            for (var j = first; j < next; ++j) {\n              fdSelect.push(fdIndex);\n            }\n          }\n\n          pos += 2;\n          break;\n\n        default:\n          throw new _util.FormatError(`parseFDSelect: Unknown format \"${format}\".`);\n      }\n\n      if (fdSelect.length !== length) {\n        throw new _util.FormatError(\"parseFDSelect: Invalid font data.\");\n      }\n\n      return new CFFFDSelect(format, fdSelect);\n    }\n  };\n  return CFFParser;\n}();\n\nexports.CFFParser = CFFParser;\n\nvar CFF = function CFFClosure() {\n  function CFF() {\n    this.header = null;\n    this.names = [];\n    this.topDict = null;\n    this.strings = new CFFStrings();\n    this.globalSubrIndex = null;\n    this.encoding = null;\n    this.charset = null;\n    this.charStrings = null;\n    this.fdArray = [];\n    this.fdSelect = null;\n    this.isCIDFont = false;\n  }\n\n  CFF.prototype = {\n    duplicateFirstGlyph: function CFF_duplicateFirstGlyph() {\n      if (this.charStrings.count >= 65535) {\n        (0, _util.warn)(\"Not enough space in charstrings to duplicate first glyph.\");\n        return;\n      }\n\n      var glyphZero = this.charStrings.get(0);\n      this.charStrings.add(glyphZero);\n\n      if (this.isCIDFont) {\n        this.fdSelect.fdSelect.push(this.fdSelect.fdSelect[0]);\n      }\n    },\n    hasGlyphId: function CFF_hasGlyphID(id) {\n      if (id < 0 || id >= this.charStrings.count) {\n        return false;\n      }\n\n      var glyph = this.charStrings.get(id);\n      return glyph.length > 0;\n    }\n  };\n  return CFF;\n}();\n\nexports.CFF = CFF;\n\nvar CFFHeader = function CFFHeaderClosure() {\n  function CFFHeader(major, minor, hdrSize, offSize) {\n    this.major = major;\n    this.minor = minor;\n    this.hdrSize = hdrSize;\n    this.offSize = offSize;\n  }\n\n  return CFFHeader;\n}();\n\nexports.CFFHeader = CFFHeader;\n\nvar CFFStrings = function CFFStringsClosure() {\n  function CFFStrings() {\n    this.strings = [];\n  }\n\n  CFFStrings.prototype = {\n    get: function CFFStrings_get(index) {\n      if (index >= 0 && index <= NUM_STANDARD_CFF_STRINGS - 1) {\n        return CFFStandardStrings[index];\n      }\n\n      if (index - NUM_STANDARD_CFF_STRINGS <= this.strings.length) {\n        return this.strings[index - NUM_STANDARD_CFF_STRINGS];\n      }\n\n      return CFFStandardStrings[0];\n    },\n    getSID: function CFFStrings_getSID(str) {\n      let index = CFFStandardStrings.indexOf(str);\n\n      if (index !== -1) {\n        return index;\n      }\n\n      index = this.strings.indexOf(str);\n\n      if (index !== -1) {\n        return index + NUM_STANDARD_CFF_STRINGS;\n      }\n\n      return -1;\n    },\n    add: function CFFStrings_add(value) {\n      this.strings.push(value);\n    },\n\n    get count() {\n      return this.strings.length;\n    }\n\n  };\n  return CFFStrings;\n}();\n\nexports.CFFStrings = CFFStrings;\n\nvar CFFIndex = function CFFIndexClosure() {\n  function CFFIndex() {\n    this.objects = [];\n    this.length = 0;\n  }\n\n  CFFIndex.prototype = {\n    add: function CFFIndex_add(data) {\n      this.length += data.length;\n      this.objects.push(data);\n    },\n    set: function CFFIndex_set(index, data) {\n      this.length += data.length - this.objects[index].length;\n      this.objects[index] = data;\n    },\n    get: function CFFIndex_get(index) {\n      return this.objects[index];\n    },\n\n    get count() {\n      return this.objects.length;\n    }\n\n  };\n  return CFFIndex;\n}();\n\nexports.CFFIndex = CFFIndex;\n\nvar CFFDict = function CFFDictClosure() {\n  function CFFDict(tables, strings) {\n    this.keyToNameMap = tables.keyToNameMap;\n    this.nameToKeyMap = tables.nameToKeyMap;\n    this.defaults = tables.defaults;\n    this.types = tables.types;\n    this.opcodes = tables.opcodes;\n    this.order = tables.order;\n    this.strings = strings;\n    this.values = Object.create(null);\n  }\n\n  CFFDict.prototype = {\n    setByKey: function CFFDict_setByKey(key, value) {\n      if (!(key in this.keyToNameMap)) {\n        return false;\n      }\n\n      var valueLength = value.length;\n\n      if (valueLength === 0) {\n        return true;\n      }\n\n      for (var i = 0; i < valueLength; i++) {\n        if (isNaN(value[i])) {\n          (0, _util.warn)('Invalid CFFDict value: \"' + value + '\" for key \"' + key + '\".');\n          return true;\n        }\n      }\n\n      var type = this.types[key];\n\n      if (type === \"num\" || type === \"sid\" || type === \"offset\") {\n        value = value[0];\n      }\n\n      this.values[key] = value;\n      return true;\n    },\n    setByName: function CFFDict_setByName(name, value) {\n      if (!(name in this.nameToKeyMap)) {\n        throw new _util.FormatError(`Invalid dictionary name \"${name}\"`);\n      }\n\n      this.values[this.nameToKeyMap[name]] = value;\n    },\n    hasName: function CFFDict_hasName(name) {\n      return this.nameToKeyMap[name] in this.values;\n    },\n    getByName: function CFFDict_getByName(name) {\n      if (!(name in this.nameToKeyMap)) {\n        throw new _util.FormatError(`Invalid dictionary name ${name}\"`);\n      }\n\n      var key = this.nameToKeyMap[name];\n\n      if (!(key in this.values)) {\n        return this.defaults[key];\n      }\n\n      return this.values[key];\n    },\n    removeByName: function CFFDict_removeByName(name) {\n      delete this.values[this.nameToKeyMap[name]];\n    }\n  };\n\n  CFFDict.createTables = function CFFDict_createTables(layout) {\n    var tables = {\n      keyToNameMap: {},\n      nameToKeyMap: {},\n      defaults: {},\n      types: {},\n      opcodes: {},\n      order: []\n    };\n\n    for (var i = 0, ii = layout.length; i < ii; ++i) {\n      var entry = layout[i];\n      var key = Array.isArray(entry[0]) ? (entry[0][0] << 8) + entry[0][1] : entry[0];\n      tables.keyToNameMap[key] = entry[1];\n      tables.nameToKeyMap[entry[1]] = key;\n      tables.types[key] = entry[2];\n      tables.defaults[key] = entry[3];\n      tables.opcodes[key] = Array.isArray(entry[0]) ? entry[0] : [entry[0]];\n      tables.order.push(key);\n    }\n\n    return tables;\n  };\n\n  return CFFDict;\n}();\n\nvar CFFTopDict = function CFFTopDictClosure() {\n  var layout = [[[12, 30], \"ROS\", [\"sid\", \"sid\", \"num\"], null], [[12, 20], \"SyntheticBase\", \"num\", null], [0, \"version\", \"sid\", null], [1, \"Notice\", \"sid\", null], [[12, 0], \"Copyright\", \"sid\", null], [2, \"FullName\", \"sid\", null], [3, \"FamilyName\", \"sid\", null], [4, \"Weight\", \"sid\", null], [[12, 1], \"isFixedPitch\", \"num\", 0], [[12, 2], \"ItalicAngle\", \"num\", 0], [[12, 3], \"UnderlinePosition\", \"num\", -100], [[12, 4], \"UnderlineThickness\", \"num\", 50], [[12, 5], \"PaintType\", \"num\", 0], [[12, 6], \"CharstringType\", \"num\", 2], [[12, 7], \"FontMatrix\", [\"num\", \"num\", \"num\", \"num\", \"num\", \"num\"], [0.001, 0, 0, 0.001, 0, 0]], [13, \"UniqueID\", \"num\", null], [5, \"FontBBox\", [\"num\", \"num\", \"num\", \"num\"], [0, 0, 0, 0]], [[12, 8], \"StrokeWidth\", \"num\", 0], [14, \"XUID\", \"array\", null], [15, \"charset\", \"offset\", 0], [16, \"Encoding\", \"offset\", 0], [17, \"CharStrings\", \"offset\", 0], [18, \"Private\", [\"offset\", \"offset\"], null], [[12, 21], \"PostScript\", \"sid\", null], [[12, 22], \"BaseFontName\", \"sid\", null], [[12, 23], \"BaseFontBlend\", \"delta\", null], [[12, 31], \"CIDFontVersion\", \"num\", 0], [[12, 32], \"CIDFontRevision\", \"num\", 0], [[12, 33], \"CIDFontType\", \"num\", 0], [[12, 34], \"CIDCount\", \"num\", 8720], [[12, 35], \"UIDBase\", \"num\", null], [[12, 37], \"FDSelect\", \"offset\", null], [[12, 36], \"FDArray\", \"offset\", null], [[12, 38], \"FontName\", \"sid\", null]];\n  var tables = null;\n\n  function CFFTopDict(strings) {\n    if (tables === null) {\n      tables = CFFDict.createTables(layout);\n    }\n\n    CFFDict.call(this, tables, strings);\n    this.privateDict = null;\n  }\n\n  CFFTopDict.prototype = Object.create(CFFDict.prototype);\n  return CFFTopDict;\n}();\n\nexports.CFFTopDict = CFFTopDict;\n\nvar CFFPrivateDict = function CFFPrivateDictClosure() {\n  var layout = [[6, \"BlueValues\", \"delta\", null], [7, \"OtherBlues\", \"delta\", null], [8, \"FamilyBlues\", \"delta\", null], [9, \"FamilyOtherBlues\", \"delta\", null], [[12, 9], \"BlueScale\", \"num\", 0.039625], [[12, 10], \"BlueShift\", \"num\", 7], [[12, 11], \"BlueFuzz\", \"num\", 1], [10, \"StdHW\", \"num\", null], [11, \"StdVW\", \"num\", null], [[12, 12], \"StemSnapH\", \"delta\", null], [[12, 13], \"StemSnapV\", \"delta\", null], [[12, 14], \"ForceBold\", \"num\", 0], [[12, 17], \"LanguageGroup\", \"num\", 0], [[12, 18], \"ExpansionFactor\", \"num\", 0.06], [[12, 19], \"initialRandomSeed\", \"num\", 0], [20, \"defaultWidthX\", \"num\", 0], [21, \"nominalWidthX\", \"num\", 0], [19, \"Subrs\", \"offset\", null]];\n  var tables = null;\n\n  function CFFPrivateDict(strings) {\n    if (tables === null) {\n      tables = CFFDict.createTables(layout);\n    }\n\n    CFFDict.call(this, tables, strings);\n    this.subrsIndex = null;\n  }\n\n  CFFPrivateDict.prototype = Object.create(CFFDict.prototype);\n  return CFFPrivateDict;\n}();\n\nexports.CFFPrivateDict = CFFPrivateDict;\nvar CFFCharsetPredefinedTypes = {\n  ISO_ADOBE: 0,\n  EXPERT: 1,\n  EXPERT_SUBSET: 2\n};\n\nvar CFFCharset = function CFFCharsetClosure() {\n  function CFFCharset(predefined, format, charset, raw) {\n    this.predefined = predefined;\n    this.format = format;\n    this.charset = charset;\n    this.raw = raw;\n  }\n\n  return CFFCharset;\n}();\n\nexports.CFFCharset = CFFCharset;\n\nvar CFFEncoding = function CFFEncodingClosure() {\n  function CFFEncoding(predefined, format, encoding, raw) {\n    this.predefined = predefined;\n    this.format = format;\n    this.encoding = encoding;\n    this.raw = raw;\n  }\n\n  return CFFEncoding;\n}();\n\nvar CFFFDSelect = function CFFFDSelectClosure() {\n  function CFFFDSelect(format, fdSelect) {\n    this.format = format;\n    this.fdSelect = fdSelect;\n  }\n\n  CFFFDSelect.prototype = {\n    getFDIndex: function CFFFDSelect_get(glyphIndex) {\n      if (glyphIndex < 0 || glyphIndex >= this.fdSelect.length) {\n        return -1;\n      }\n\n      return this.fdSelect[glyphIndex];\n    }\n  };\n  return CFFFDSelect;\n}();\n\nexports.CFFFDSelect = CFFFDSelect;\n\nvar CFFOffsetTracker = function CFFOffsetTrackerClosure() {\n  function CFFOffsetTracker() {\n    this.offsets = Object.create(null);\n  }\n\n  CFFOffsetTracker.prototype = {\n    isTracking: function CFFOffsetTracker_isTracking(key) {\n      return key in this.offsets;\n    },\n    track: function CFFOffsetTracker_track(key, location) {\n      if (key in this.offsets) {\n        throw new _util.FormatError(`Already tracking location of ${key}`);\n      }\n\n      this.offsets[key] = location;\n    },\n    offset: function CFFOffsetTracker_offset(value) {\n      for (var key in this.offsets) {\n        this.offsets[key] += value;\n      }\n    },\n    setEntryLocation: function CFFOffsetTracker_setEntryLocation(key, values, output) {\n      if (!(key in this.offsets)) {\n        throw new _util.FormatError(`Not tracking location of ${key}`);\n      }\n\n      var data = output.data;\n      var dataOffset = this.offsets[key];\n      var size = 5;\n\n      for (var i = 0, ii = values.length; i < ii; ++i) {\n        var offset0 = i * size + dataOffset;\n        var offset1 = offset0 + 1;\n        var offset2 = offset0 + 2;\n        var offset3 = offset0 + 3;\n        var offset4 = offset0 + 4;\n\n        if (data[offset0] !== 0x1d || data[offset1] !== 0 || data[offset2] !== 0 || data[offset3] !== 0 || data[offset4] !== 0) {\n          throw new _util.FormatError(\"writing to an offset that is not empty\");\n        }\n\n        var value = values[i];\n        data[offset0] = 0x1d;\n        data[offset1] = value >> 24 & 0xff;\n        data[offset2] = value >> 16 & 0xff;\n        data[offset3] = value >> 8 & 0xff;\n        data[offset4] = value & 0xff;\n      }\n    }\n  };\n  return CFFOffsetTracker;\n}();\n\nvar CFFCompiler = function CFFCompilerClosure() {\n  function CFFCompiler(cff) {\n    this.cff = cff;\n  }\n\n  CFFCompiler.prototype = {\n    compile: function CFFCompiler_compile() {\n      var cff = this.cff;\n      var output = {\n        data: [],\n        length: 0,\n        add: function CFFCompiler_add(data) {\n          this.data = this.data.concat(data);\n          this.length = this.data.length;\n        }\n      };\n      var header = this.compileHeader(cff.header);\n      output.add(header);\n      var nameIndex = this.compileNameIndex(cff.names);\n      output.add(nameIndex);\n\n      if (cff.isCIDFont) {\n        if (cff.topDict.hasName(\"FontMatrix\")) {\n          var base = cff.topDict.getByName(\"FontMatrix\");\n          cff.topDict.removeByName(\"FontMatrix\");\n\n          for (var i = 0, ii = cff.fdArray.length; i < ii; i++) {\n            var subDict = cff.fdArray[i];\n            var matrix = base.slice(0);\n\n            if (subDict.hasName(\"FontMatrix\")) {\n              matrix = _util.Util.transform(matrix, subDict.getByName(\"FontMatrix\"));\n            }\n\n            subDict.setByName(\"FontMatrix\", matrix);\n          }\n        }\n      }\n\n      cff.topDict.setByName(\"charset\", 0);\n      var compiled = this.compileTopDicts([cff.topDict], output.length, cff.isCIDFont);\n      output.add(compiled.output);\n      var topDictTracker = compiled.trackers[0];\n      var stringIndex = this.compileStringIndex(cff.strings.strings);\n      output.add(stringIndex);\n      var globalSubrIndex = this.compileIndex(cff.globalSubrIndex);\n      output.add(globalSubrIndex);\n\n      if (cff.encoding && cff.topDict.hasName(\"Encoding\")) {\n        if (cff.encoding.predefined) {\n          topDictTracker.setEntryLocation(\"Encoding\", [cff.encoding.format], output);\n        } else {\n          var encoding = this.compileEncoding(cff.encoding);\n          topDictTracker.setEntryLocation(\"Encoding\", [output.length], output);\n          output.add(encoding);\n        }\n      }\n\n      var charset = this.compileCharset(cff.charset, cff.charStrings.count, cff.strings, cff.isCIDFont);\n      topDictTracker.setEntryLocation(\"charset\", [output.length], output);\n      output.add(charset);\n      var charStrings = this.compileCharStrings(cff.charStrings);\n      topDictTracker.setEntryLocation(\"CharStrings\", [output.length], output);\n      output.add(charStrings);\n\n      if (cff.isCIDFont) {\n        topDictTracker.setEntryLocation(\"FDSelect\", [output.length], output);\n        var fdSelect = this.compileFDSelect(cff.fdSelect);\n        output.add(fdSelect);\n        compiled = this.compileTopDicts(cff.fdArray, output.length, true);\n        topDictTracker.setEntryLocation(\"FDArray\", [output.length], output);\n        output.add(compiled.output);\n        var fontDictTrackers = compiled.trackers;\n        this.compilePrivateDicts(cff.fdArray, fontDictTrackers, output);\n      }\n\n      this.compilePrivateDicts([cff.topDict], [topDictTracker], output);\n      output.add([0]);\n      return output.data;\n    },\n    encodeNumber: function CFFCompiler_encodeNumber(value) {\n      if (parseFloat(value) === parseInt(value, 10) && !isNaN(value)) {\n        return this.encodeInteger(value);\n      }\n\n      return this.encodeFloat(value);\n    },\n    encodeFloat: function CFFCompiler_encodeFloat(num) {\n      var value = num.toString();\n      var m = /\\.(\\d*?)(?:9{5,20}|0{5,20})\\d{0,2}(?:e(.+)|$)/.exec(value);\n\n      if (m) {\n        var epsilon = parseFloat(\"1e\" + ((m[2] ? +m[2] : 0) + m[1].length));\n        value = (Math.round(num * epsilon) / epsilon).toString();\n      }\n\n      var nibbles = \"\";\n      var i, ii;\n\n      for (i = 0, ii = value.length; i < ii; ++i) {\n        var a = value[i];\n\n        if (a === \"e\") {\n          nibbles += value[++i] === \"-\" ? \"c\" : \"b\";\n        } else if (a === \".\") {\n          nibbles += \"a\";\n        } else if (a === \"-\") {\n          nibbles += \"e\";\n        } else {\n          nibbles += a;\n        }\n      }\n\n      nibbles += nibbles.length & 1 ? \"f\" : \"ff\";\n      var out = [30];\n\n      for (i = 0, ii = nibbles.length; i < ii; i += 2) {\n        out.push(parseInt(nibbles.substring(i, i + 2), 16));\n      }\n\n      return out;\n    },\n    encodeInteger: function CFFCompiler_encodeInteger(value) {\n      var code;\n\n      if (value >= -107 && value <= 107) {\n        code = [value + 139];\n      } else if (value >= 108 && value <= 1131) {\n        value = value - 108;\n        code = [(value >> 8) + 247, value & 0xff];\n      } else if (value >= -1131 && value <= -108) {\n        value = -value - 108;\n        code = [(value >> 8) + 251, value & 0xff];\n      } else if (value >= -32768 && value <= 32767) {\n        code = [0x1c, value >> 8 & 0xff, value & 0xff];\n      } else {\n        code = [0x1d, value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff];\n      }\n\n      return code;\n    },\n    compileHeader: function CFFCompiler_compileHeader(header) {\n      return [header.major, header.minor, header.hdrSize, header.offSize];\n    },\n    compileNameIndex: function CFFCompiler_compileNameIndex(names) {\n      var nameIndex = new CFFIndex();\n\n      for (var i = 0, ii = names.length; i < ii; ++i) {\n        var name = names[i];\n        var length = Math.min(name.length, 127);\n        var sanitizedName = new Array(length);\n\n        for (var j = 0; j < length; j++) {\n          var char = name[j];\n\n          if (char < \"!\" || char > \"~\" || char === \"[\" || char === \"]\" || char === \"(\" || char === \")\" || char === \"{\" || char === \"}\" || char === \"<\" || char === \">\" || char === \"/\" || char === \"%\") {\n            char = \"_\";\n          }\n\n          sanitizedName[j] = char;\n        }\n\n        sanitizedName = sanitizedName.join(\"\");\n\n        if (sanitizedName === \"\") {\n          sanitizedName = \"Bad_Font_Name\";\n        }\n\n        nameIndex.add((0, _util.stringToBytes)(sanitizedName));\n      }\n\n      return this.compileIndex(nameIndex);\n    },\n    compileTopDicts: function CFFCompiler_compileTopDicts(dicts, length, removeCidKeys) {\n      var fontDictTrackers = [];\n      var fdArrayIndex = new CFFIndex();\n\n      for (var i = 0, ii = dicts.length; i < ii; ++i) {\n        var fontDict = dicts[i];\n\n        if (removeCidKeys) {\n          fontDict.removeByName(\"CIDFontVersion\");\n          fontDict.removeByName(\"CIDFontRevision\");\n          fontDict.removeByName(\"CIDFontType\");\n          fontDict.removeByName(\"CIDCount\");\n          fontDict.removeByName(\"UIDBase\");\n        }\n\n        var fontDictTracker = new CFFOffsetTracker();\n        var fontDictData = this.compileDict(fontDict, fontDictTracker);\n        fontDictTrackers.push(fontDictTracker);\n        fdArrayIndex.add(fontDictData);\n        fontDictTracker.offset(length);\n      }\n\n      fdArrayIndex = this.compileIndex(fdArrayIndex, fontDictTrackers);\n      return {\n        trackers: fontDictTrackers,\n        output: fdArrayIndex\n      };\n    },\n    compilePrivateDicts: function CFFCompiler_compilePrivateDicts(dicts, trackers, output) {\n      for (var i = 0, ii = dicts.length; i < ii; ++i) {\n        var fontDict = dicts[i];\n        var privateDict = fontDict.privateDict;\n\n        if (!privateDict || !fontDict.hasName(\"Private\")) {\n          throw new _util.FormatError(\"There must be a private dictionary.\");\n        }\n\n        var privateDictTracker = new CFFOffsetTracker();\n        var privateDictData = this.compileDict(privateDict, privateDictTracker);\n        var outputLength = output.length;\n        privateDictTracker.offset(outputLength);\n\n        if (!privateDictData.length) {\n          outputLength = 0;\n        }\n\n        trackers[i].setEntryLocation(\"Private\", [privateDictData.length, outputLength], output);\n        output.add(privateDictData);\n\n        if (privateDict.subrsIndex && privateDict.hasName(\"Subrs\")) {\n          var subrs = this.compileIndex(privateDict.subrsIndex);\n          privateDictTracker.setEntryLocation(\"Subrs\", [privateDictData.length], output);\n          output.add(subrs);\n        }\n      }\n    },\n    compileDict: function CFFCompiler_compileDict(dict, offsetTracker) {\n      var out = [];\n      var order = dict.order;\n\n      for (var i = 0; i < order.length; ++i) {\n        var key = order[i];\n\n        if (!(key in dict.values)) {\n          continue;\n        }\n\n        var values = dict.values[key];\n        var types = dict.types[key];\n\n        if (!Array.isArray(types)) {\n          types = [types];\n        }\n\n        if (!Array.isArray(values)) {\n          values = [values];\n        }\n\n        if (values.length === 0) {\n          continue;\n        }\n\n        for (var j = 0, jj = types.length; j < jj; ++j) {\n          var type = types[j];\n          var value = values[j];\n\n          switch (type) {\n            case \"num\":\n            case \"sid\":\n              out = out.concat(this.encodeNumber(value));\n              break;\n\n            case \"offset\":\n              var name = dict.keyToNameMap[key];\n\n              if (!offsetTracker.isTracking(name)) {\n                offsetTracker.track(name, out.length);\n              }\n\n              out = out.concat([0x1d, 0, 0, 0, 0]);\n              break;\n\n            case \"array\":\n            case \"delta\":\n              out = out.concat(this.encodeNumber(value));\n\n              for (var k = 1, kk = values.length; k < kk; ++k) {\n                out = out.concat(this.encodeNumber(values[k]));\n              }\n\n              break;\n\n            default:\n              throw new _util.FormatError(`Unknown data type of ${type}`);\n          }\n        }\n\n        out = out.concat(dict.opcodes[key]);\n      }\n\n      return out;\n    },\n    compileStringIndex: function CFFCompiler_compileStringIndex(strings) {\n      var stringIndex = new CFFIndex();\n\n      for (var i = 0, ii = strings.length; i < ii; ++i) {\n        stringIndex.add((0, _util.stringToBytes)(strings[i]));\n      }\n\n      return this.compileIndex(stringIndex);\n    },\n    compileGlobalSubrIndex: function CFFCompiler_compileGlobalSubrIndex() {\n      var globalSubrIndex = this.cff.globalSubrIndex;\n      this.out.writeByteArray(this.compileIndex(globalSubrIndex));\n    },\n    compileCharStrings: function CFFCompiler_compileCharStrings(charStrings) {\n      var charStringsIndex = new CFFIndex();\n\n      for (var i = 0; i < charStrings.count; i++) {\n        var glyph = charStrings.get(i);\n\n        if (glyph.length === 0) {\n          charStringsIndex.add(new Uint8Array([0x8b, 0x0e]));\n          continue;\n        }\n\n        charStringsIndex.add(glyph);\n      }\n\n      return this.compileIndex(charStringsIndex);\n    },\n    compileCharset: function CFFCompiler_compileCharset(charset, numGlyphs, strings, isCIDFont) {\n      let out;\n      const numGlyphsLessNotDef = numGlyphs - 1;\n\n      if (isCIDFont) {\n        out = new Uint8Array([2, 0, 0, numGlyphsLessNotDef >> 8 & 0xff, numGlyphsLessNotDef & 0xff]);\n      } else {\n        const length = 1 + numGlyphsLessNotDef * 2;\n        out = new Uint8Array(length);\n        out[0] = 0;\n        let charsetIndex = 0;\n        const numCharsets = charset.charset.length;\n        let warned = false;\n\n        for (let i = 1; i < out.length; i += 2) {\n          let sid = 0;\n\n          if (charsetIndex < numCharsets) {\n            const name = charset.charset[charsetIndex++];\n            sid = strings.getSID(name);\n\n            if (sid === -1) {\n              sid = 0;\n\n              if (!warned) {\n                warned = true;\n                (0, _util.warn)(`Couldn't find ${name} in CFF strings`);\n              }\n            }\n          }\n\n          out[i] = sid >> 8 & 0xff;\n          out[i + 1] = sid & 0xff;\n        }\n      }\n\n      return this.compileTypedArray(out);\n    },\n    compileEncoding: function CFFCompiler_compileEncoding(encoding) {\n      return this.compileTypedArray(encoding.raw);\n    },\n    compileFDSelect: function CFFCompiler_compileFDSelect(fdSelect) {\n      const format = fdSelect.format;\n      let out, i;\n\n      switch (format) {\n        case 0:\n          out = new Uint8Array(1 + fdSelect.fdSelect.length);\n          out[0] = format;\n\n          for (i = 0; i < fdSelect.fdSelect.length; i++) {\n            out[i + 1] = fdSelect.fdSelect[i];\n          }\n\n          break;\n\n        case 3:\n          const start = 0;\n          let lastFD = fdSelect.fdSelect[0];\n          const ranges = [format, 0, 0, start >> 8 & 0xff, start & 0xff, lastFD];\n\n          for (i = 1; i < fdSelect.fdSelect.length; i++) {\n            const currentFD = fdSelect.fdSelect[i];\n\n            if (currentFD !== lastFD) {\n              ranges.push(i >> 8 & 0xff, i & 0xff, currentFD);\n              lastFD = currentFD;\n            }\n          }\n\n          const numRanges = (ranges.length - 3) / 3;\n          ranges[1] = numRanges >> 8 & 0xff;\n          ranges[2] = numRanges & 0xff;\n          ranges.push(i >> 8 & 0xff, i & 0xff);\n          out = new Uint8Array(ranges);\n          break;\n      }\n\n      return this.compileTypedArray(out);\n    },\n    compileTypedArray: function CFFCompiler_compileTypedArray(data) {\n      var out = [];\n\n      for (var i = 0, ii = data.length; i < ii; ++i) {\n        out[i] = data[i];\n      }\n\n      return out;\n    },\n    compileIndex: function CFFCompiler_compileIndex(index, trackers) {\n      trackers = trackers || [];\n      var objects = index.objects;\n      var count = objects.length;\n\n      if (count === 0) {\n        return [0, 0, 0];\n      }\n\n      var data = [count >> 8 & 0xff, count & 0xff];\n      var lastOffset = 1,\n          i;\n\n      for (i = 0; i < count; ++i) {\n        lastOffset += objects[i].length;\n      }\n\n      var offsetSize;\n\n      if (lastOffset < 0x100) {\n        offsetSize = 1;\n      } else if (lastOffset < 0x10000) {\n        offsetSize = 2;\n      } else if (lastOffset < 0x1000000) {\n        offsetSize = 3;\n      } else {\n        offsetSize = 4;\n      }\n\n      data.push(offsetSize);\n      var relativeOffset = 1;\n\n      for (i = 0; i < count + 1; i++) {\n        if (offsetSize === 1) {\n          data.push(relativeOffset & 0xff);\n        } else if (offsetSize === 2) {\n          data.push(relativeOffset >> 8 & 0xff, relativeOffset & 0xff);\n        } else if (offsetSize === 3) {\n          data.push(relativeOffset >> 16 & 0xff, relativeOffset >> 8 & 0xff, relativeOffset & 0xff);\n        } else {\n          data.push(relativeOffset >>> 24 & 0xff, relativeOffset >> 16 & 0xff, relativeOffset >> 8 & 0xff, relativeOffset & 0xff);\n        }\n\n        if (objects[i]) {\n          relativeOffset += objects[i].length;\n        }\n      }\n\n      for (i = 0; i < count; i++) {\n        if (trackers[i]) {\n          trackers[i].offset(data.length);\n        }\n\n        for (var j = 0, jj = objects[i].length; j < jj; j++) {\n          data.push(objects[i][j]);\n        }\n      }\n\n      return data;\n    }\n  };\n  return CFFCompiler;\n}();\n\nexports.CFFCompiler = CFFCompiler;\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExpertSubsetCharset = exports.ExpertCharset = exports.ISOAdobeCharset = void 0;\nconst ISOAdobeCharset = [\".notdef\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quoteright\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"quoteleft\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"exclamdown\", \"cent\", \"sterling\", \"fraction\", \"yen\", \"florin\", \"section\", \"currency\", \"quotesingle\", \"quotedblleft\", \"guillemotleft\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"endash\", \"dagger\", \"daggerdbl\", \"periodcentered\", \"paragraph\", \"bullet\", \"quotesinglbase\", \"quotedblbase\", \"quotedblright\", \"guillemotright\", \"ellipsis\", \"perthousand\", \"questiondown\", \"grave\", \"acute\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"dieresis\", \"ring\", \"cedilla\", \"hungarumlaut\", \"ogonek\", \"caron\", \"emdash\", \"AE\", \"ordfeminine\", \"Lslash\", \"Oslash\", \"OE\", \"ordmasculine\", \"ae\", \"dotlessi\", \"lslash\", \"oslash\", \"oe\", \"germandbls\", \"onesuperior\", \"logicalnot\", \"mu\", \"trademark\", \"Eth\", \"onehalf\", \"plusminus\", \"Thorn\", \"onequarter\", \"divide\", \"brokenbar\", \"degree\", \"thorn\", \"threequarters\", \"twosuperior\", \"registered\", \"minus\", \"eth\", \"multiply\", \"threesuperior\", \"copyright\", \"Aacute\", \"Acircumflex\", \"Adieresis\", \"Agrave\", \"Aring\", \"Atilde\", \"Ccedilla\", \"Eacute\", \"Ecircumflex\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Ntilde\", \"Oacute\", \"Ocircumflex\", \"Odieresis\", \"Ograve\", \"Otilde\", \"Scaron\", \"Uacute\", \"Ucircumflex\", \"Udieresis\", \"Ugrave\", \"Yacute\", \"Ydieresis\", \"Zcaron\", \"aacute\", \"acircumflex\", \"adieresis\", \"agrave\", \"aring\", \"atilde\", \"ccedilla\", \"eacute\", \"ecircumflex\", \"edieresis\", \"egrave\", \"iacute\", \"icircumflex\", \"idieresis\", \"igrave\", \"ntilde\", \"oacute\", \"ocircumflex\", \"odieresis\", \"ograve\", \"otilde\", \"scaron\", \"uacute\", \"ucircumflex\", \"udieresis\", \"ugrave\", \"yacute\", \"ydieresis\", \"zcaron\"];\nexports.ISOAdobeCharset = ISOAdobeCharset;\nconst ExpertCharset = [\".notdef\", \"space\", \"exclamsmall\", \"Hungarumlautsmall\", \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"comma\", \"hyphen\", \"period\", \"fraction\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"colon\", \"semicolon\", \"commasuperior\", \"threequartersemdash\", \"periodsuperior\", \"questionsmall\", \"asuperior\", \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"isuperior\", \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"rsuperior\", \"ssuperior\", \"tsuperior\", \"ff\", \"fi\", \"fl\", \"ffi\", \"ffl\", \"parenleftinferior\", \"parenrightinferior\", \"Circumflexsmall\", \"hyphensuperior\", \"Gravesmall\", \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\", \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\", \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\", \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"Tildesmall\", \"exclamdownsmall\", \"centoldstyle\", \"Lslashsmall\", \"Scaronsmall\", \"Zcaronsmall\", \"Dieresissmall\", \"Brevesmall\", \"Caronsmall\", \"Dotaccentsmall\", \"Macronsmall\", \"figuredash\", \"hypheninferior\", \"Ogoneksmall\", \"Ringsmall\", \"Cedillasmall\", \"onequarter\", \"onehalf\", \"threequarters\", \"questiondownsmall\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"zerosuperior\", \"onesuperior\", \"twosuperior\", \"threesuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\", \"periodinferior\", \"commainferior\", \"Agravesmall\", \"Aacutesmall\", \"Acircumflexsmall\", \"Atildesmall\", \"Adieresissmall\", \"Aringsmall\", \"AEsmall\", \"Ccedillasmall\", \"Egravesmall\", \"Eacutesmall\", \"Ecircumflexsmall\", \"Edieresissmall\", \"Igravesmall\", \"Iacutesmall\", \"Icircumflexsmall\", \"Idieresissmall\", \"Ethsmall\", \"Ntildesmall\", \"Ogravesmall\", \"Oacutesmall\", \"Ocircumflexsmall\", \"Otildesmall\", \"Odieresissmall\", \"OEsmall\", \"Oslashsmall\", \"Ugravesmall\", \"Uacutesmall\", \"Ucircumflexsmall\", \"Udieresissmall\", \"Yacutesmall\", \"Thornsmall\", \"Ydieresissmall\"];\nexports.ExpertCharset = ExpertCharset;\nconst ExpertSubsetCharset = [\".notdef\", \"space\", \"dollaroldstyle\", \"dollarsuperior\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"comma\", \"hyphen\", \"period\", \"fraction\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"colon\", \"semicolon\", \"commasuperior\", \"threequartersemdash\", \"periodsuperior\", \"asuperior\", \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"isuperior\", \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"rsuperior\", \"ssuperior\", \"tsuperior\", \"ff\", \"fi\", \"fl\", \"ffi\", \"ffl\", \"parenleftinferior\", \"parenrightinferior\", \"hyphensuperior\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"centoldstyle\", \"figuredash\", \"hypheninferior\", \"onequarter\", \"onehalf\", \"threequarters\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"zerosuperior\", \"onesuperior\", \"twosuperior\", \"threesuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\", \"periodinferior\", \"commainferior\"];\nexports.ExpertSubsetCharset = ExpertSubsetCharset;\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getEncoding = getEncoding;\nexports.ExpertEncoding = exports.ZapfDingbatsEncoding = exports.SymbolSetEncoding = exports.MacRomanEncoding = exports.StandardEncoding = exports.WinAnsiEncoding = void 0;\nconst ExpertEncoding = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"exclamsmall\", \"Hungarumlautsmall\", \"\", \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"comma\", \"hyphen\", \"period\", \"fraction\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"colon\", \"semicolon\", \"commasuperior\", \"threequartersemdash\", \"periodsuperior\", \"questionsmall\", \"\", \"asuperior\", \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"\", \"\", \"\", \"isuperior\", \"\", \"\", \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"\", \"\", \"rsuperior\", \"ssuperior\", \"tsuperior\", \"\", \"ff\", \"fi\", \"fl\", \"ffi\", \"ffl\", \"parenleftinferior\", \"\", \"parenrightinferior\", \"Circumflexsmall\", \"hyphensuperior\", \"Gravesmall\", \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\", \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\", \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\", \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"Tildesmall\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"exclamdownsmall\", \"centoldstyle\", \"Lslashsmall\", \"\", \"\", \"Scaronsmall\", \"Zcaronsmall\", \"Dieresissmall\", \"Brevesmall\", \"Caronsmall\", \"\", \"Dotaccentsmall\", \"\", \"\", \"Macronsmall\", \"\", \"\", \"figuredash\", \"hypheninferior\", \"\", \"\", \"Ogoneksmall\", \"Ringsmall\", \"Cedillasmall\", \"\", \"\", \"\", \"onequarter\", \"onehalf\", \"threequarters\", \"questiondownsmall\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"\", \"\", \"zerosuperior\", \"onesuperior\", \"twosuperior\", \"threesuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\", \"periodinferior\", \"commainferior\", \"Agravesmall\", \"Aacutesmall\", \"Acircumflexsmall\", \"Atildesmall\", \"Adieresissmall\", \"Aringsmall\", \"AEsmall\", \"Ccedillasmall\", \"Egravesmall\", \"Eacutesmall\", \"Ecircumflexsmall\", \"Edieresissmall\", \"Igravesmall\", \"Iacutesmall\", \"Icircumflexsmall\", \"Idieresissmall\", \"Ethsmall\", \"Ntildesmall\", \"Ogravesmall\", \"Oacutesmall\", \"Ocircumflexsmall\", \"Otildesmall\", \"Odieresissmall\", \"OEsmall\", \"Oslashsmall\", \"Ugravesmall\", \"Uacutesmall\", \"Ucircumflexsmall\", \"Udieresissmall\", \"Yacutesmall\", \"Thornsmall\", \"Ydieresissmall\"];\nexports.ExpertEncoding = ExpertEncoding;\nconst MacExpertEncoding = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"exclamsmall\", \"Hungarumlautsmall\", \"centoldstyle\", \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"comma\", \"hyphen\", \"period\", \"fraction\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"colon\", \"semicolon\", \"\", \"threequartersemdash\", \"\", \"questionsmall\", \"\", \"\", \"\", \"\", \"Ethsmall\", \"\", \"\", \"onequarter\", \"onehalf\", \"threequarters\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"\", \"\", \"\", \"\", \"\", \"\", \"ff\", \"fi\", \"fl\", \"ffi\", \"ffl\", \"parenleftinferior\", \"\", \"parenrightinferior\", \"Circumflexsmall\", \"hypheninferior\", \"Gravesmall\", \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\", \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\", \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\", \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"Tildesmall\", \"\", \"\", \"asuperior\", \"centsuperior\", \"\", \"\", \"\", \"\", \"Aacutesmall\", \"Agravesmall\", \"Acircumflexsmall\", \"Adieresissmall\", \"Atildesmall\", \"Aringsmall\", \"Ccedillasmall\", \"Eacutesmall\", \"Egravesmall\", \"Ecircumflexsmall\", \"Edieresissmall\", \"Iacutesmall\", \"Igravesmall\", \"Icircumflexsmall\", \"Idieresissmall\", \"Ntildesmall\", \"Oacutesmall\", \"Ogravesmall\", \"Ocircumflexsmall\", \"Odieresissmall\", \"Otildesmall\", \"Uacutesmall\", \"Ugravesmall\", \"Ucircumflexsmall\", \"Udieresissmall\", \"\", \"eightsuperior\", \"fourinferior\", \"threeinferior\", \"sixinferior\", \"eightinferior\", \"seveninferior\", \"Scaronsmall\", \"\", \"centinferior\", \"twoinferior\", \"\", \"Dieresissmall\", \"\", \"Caronsmall\", \"osuperior\", \"fiveinferior\", \"\", \"commainferior\", \"periodinferior\", \"Yacutesmall\", \"\", \"dollarinferior\", \"\", \"\", \"Thornsmall\", \"\", \"nineinferior\", \"zeroinferior\", \"Zcaronsmall\", \"AEsmall\", \"Oslashsmall\", \"questiondownsmall\", \"oneinferior\", \"Lslashsmall\", \"\", \"\", \"\", \"\", \"\", \"\", \"Cedillasmall\", \"\", \"\", \"\", \"\", \"\", \"OEsmall\", \"figuredash\", \"hyphensuperior\", \"\", \"\", \"\", \"\", \"exclamdownsmall\", \"\", \"Ydieresissmall\", \"\", \"onesuperior\", \"twosuperior\", \"threesuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"ninesuperior\", \"zerosuperior\", \"\", \"esuperior\", \"rsuperior\", \"tsuperior\", \"\", \"\", \"isuperior\", \"ssuperior\", \"dsuperior\", \"\", \"\", \"\", \"\", \"\", \"lsuperior\", \"Ogoneksmall\", \"Brevesmall\", \"Macronsmall\", \"bsuperior\", \"nsuperior\", \"msuperior\", \"commasuperior\", \"periodsuperior\", \"Dotaccentsmall\", \"Ringsmall\", \"\", \"\", \"\", \"\"];\nconst MacRomanEncoding = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quotesingle\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"grave\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"\", \"Adieresis\", \"Aring\", \"Ccedilla\", \"Eacute\", \"Ntilde\", \"Odieresis\", \"Udieresis\", \"aacute\", \"agrave\", \"acircumflex\", \"adieresis\", \"atilde\", \"aring\", \"ccedilla\", \"eacute\", \"egrave\", \"ecircumflex\", \"edieresis\", \"iacute\", \"igrave\", \"icircumflex\", \"idieresis\", \"ntilde\", \"oacute\", \"ograve\", \"ocircumflex\", \"odieresis\", \"otilde\", \"uacute\", \"ugrave\", \"ucircumflex\", \"udieresis\", \"dagger\", \"degree\", \"cent\", \"sterling\", \"section\", \"bullet\", \"paragraph\", \"germandbls\", \"registered\", \"copyright\", \"trademark\", \"acute\", \"dieresis\", \"notequal\", \"AE\", \"Oslash\", \"infinity\", \"plusminus\", \"lessequal\", \"greaterequal\", \"yen\", \"mu\", \"partialdiff\", \"summation\", \"product\", \"pi\", \"integral\", \"ordfeminine\", \"ordmasculine\", \"Omega\", \"ae\", \"oslash\", \"questiondown\", \"exclamdown\", \"logicalnot\", \"radical\", \"florin\", \"approxequal\", \"Delta\", \"guillemotleft\", \"guillemotright\", \"ellipsis\", \"space\", \"Agrave\", \"Atilde\", \"Otilde\", \"OE\", \"oe\", \"endash\", \"emdash\", \"quotedblleft\", \"quotedblright\", \"quoteleft\", \"quoteright\", \"divide\", \"lozenge\", \"ydieresis\", \"Ydieresis\", \"fraction\", \"currency\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"daggerdbl\", \"periodcentered\", \"quotesinglbase\", \"quotedblbase\", \"perthousand\", \"Acircumflex\", \"Ecircumflex\", \"Aacute\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Oacute\", \"Ocircumflex\", \"apple\", \"Ograve\", \"Uacute\", \"Ucircumflex\", \"Ugrave\", \"dotlessi\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"ring\", \"cedilla\", \"hungarumlaut\", \"ogonek\", \"caron\"];\nexports.MacRomanEncoding = MacRomanEncoding;\nconst StandardEncoding = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quoteright\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"quoteleft\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"exclamdown\", \"cent\", \"sterling\", \"fraction\", \"yen\", \"florin\", \"section\", \"currency\", \"quotesingle\", \"quotedblleft\", \"guillemotleft\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"\", \"endash\", \"dagger\", \"daggerdbl\", \"periodcentered\", \"\", \"paragraph\", \"bullet\", \"quotesinglbase\", \"quotedblbase\", \"quotedblright\", \"guillemotright\", \"ellipsis\", \"perthousand\", \"\", \"questiondown\", \"\", \"grave\", \"acute\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"dieresis\", \"\", \"ring\", \"cedilla\", \"\", \"hungarumlaut\", \"ogonek\", \"caron\", \"emdash\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"AE\", \"\", \"ordfeminine\", \"\", \"\", \"\", \"\", \"Lslash\", \"Oslash\", \"OE\", \"ordmasculine\", \"\", \"\", \"\", \"\", \"\", \"ae\", \"\", \"\", \"\", \"dotlessi\", \"\", \"\", \"lslash\", \"oslash\", \"oe\", \"germandbls\", \"\", \"\", \"\", \"\"];\nexports.StandardEncoding = StandardEncoding;\nconst WinAnsiEncoding = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quotesingle\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"grave\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"bullet\", \"Euro\", \"bullet\", \"quotesinglbase\", \"florin\", \"quotedblbase\", \"ellipsis\", \"dagger\", \"daggerdbl\", \"circumflex\", \"perthousand\", \"Scaron\", \"guilsinglleft\", \"OE\", \"bullet\", \"Zcaron\", \"bullet\", \"bullet\", \"quoteleft\", \"quoteright\", \"quotedblleft\", \"quotedblright\", \"bullet\", \"endash\", \"emdash\", \"tilde\", \"trademark\", \"scaron\", \"guilsinglright\", \"oe\", \"bullet\", \"zcaron\", \"Ydieresis\", \"space\", \"exclamdown\", \"cent\", \"sterling\", \"currency\", \"yen\", \"brokenbar\", \"section\", \"dieresis\", \"copyright\", \"ordfeminine\", \"guillemotleft\", \"logicalnot\", \"hyphen\", \"registered\", \"macron\", \"degree\", \"plusminus\", \"twosuperior\", \"threesuperior\", \"acute\", \"mu\", \"paragraph\", \"periodcentered\", \"cedilla\", \"onesuperior\", \"ordmasculine\", \"guillemotright\", \"onequarter\", \"onehalf\", \"threequarters\", \"questiondown\", \"Agrave\", \"Aacute\", \"Acircumflex\", \"Atilde\", \"Adieresis\", \"Aring\", \"AE\", \"Ccedilla\", \"Egrave\", \"Eacute\", \"Ecircumflex\", \"Edieresis\", \"Igrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Eth\", \"Ntilde\", \"Ograve\", \"Oacute\", \"Ocircumflex\", \"Otilde\", \"Odieresis\", \"multiply\", \"Oslash\", \"Ugrave\", \"Uacute\", \"Ucircumflex\", \"Udieresis\", \"Yacute\", \"Thorn\", \"germandbls\", \"agrave\", \"aacute\", \"acircumflex\", \"atilde\", \"adieresis\", \"aring\", \"ae\", \"ccedilla\", \"egrave\", \"eacute\", \"ecircumflex\", \"edieresis\", \"igrave\", \"iacute\", \"icircumflex\", \"idieresis\", \"eth\", \"ntilde\", \"ograve\", \"oacute\", \"ocircumflex\", \"otilde\", \"odieresis\", \"divide\", \"oslash\", \"ugrave\", \"uacute\", \"ucircumflex\", \"udieresis\", \"yacute\", \"thorn\", \"ydieresis\"];\nexports.WinAnsiEncoding = WinAnsiEncoding;\nconst SymbolSetEncoding = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"exclam\", \"universal\", \"numbersign\", \"existential\", \"percent\", \"ampersand\", \"suchthat\", \"parenleft\", \"parenright\", \"asteriskmath\", \"plus\", \"comma\", \"minus\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"congruent\", \"Alpha\", \"Beta\", \"Chi\", \"Delta\", \"Epsilon\", \"Phi\", \"Gamma\", \"Eta\", \"Iota\", \"theta1\", \"Kappa\", \"Lambda\", \"Mu\", \"Nu\", \"Omicron\", \"Pi\", \"Theta\", \"Rho\", \"Sigma\", \"Tau\", \"Upsilon\", \"sigma1\", \"Omega\", \"Xi\", \"Psi\", \"Zeta\", \"bracketleft\", \"therefore\", \"bracketright\", \"perpendicular\", \"underscore\", \"radicalex\", \"alpha\", \"beta\", \"chi\", \"delta\", \"epsilon\", \"phi\", \"gamma\", \"eta\", \"iota\", \"phi1\", \"kappa\", \"lambda\", \"mu\", \"nu\", \"omicron\", \"pi\", \"theta\", \"rho\", \"sigma\", \"tau\", \"upsilon\", \"omega1\", \"omega\", \"xi\", \"psi\", \"zeta\", \"braceleft\", \"bar\", \"braceright\", \"similar\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Euro\", \"Upsilon1\", \"minute\", \"lessequal\", \"fraction\", \"infinity\", \"florin\", \"club\", \"diamond\", \"heart\", \"spade\", \"arrowboth\", \"arrowleft\", \"arrowup\", \"arrowright\", \"arrowdown\", \"degree\", \"plusminus\", \"second\", \"greaterequal\", \"multiply\", \"proportional\", \"partialdiff\", \"bullet\", \"divide\", \"notequal\", \"equivalence\", \"approxequal\", \"ellipsis\", \"arrowvertex\", \"arrowhorizex\", \"carriagereturn\", \"aleph\", \"Ifraktur\", \"Rfraktur\", \"weierstrass\", \"circlemultiply\", \"circleplus\", \"emptyset\", \"intersection\", \"union\", \"propersuperset\", \"reflexsuperset\", \"notsubset\", \"propersubset\", \"reflexsubset\", \"element\", \"notelement\", \"angle\", \"gradient\", \"registerserif\", \"copyrightserif\", \"trademarkserif\", \"product\", \"radical\", \"dotmath\", \"logicalnot\", \"logicaland\", \"logicalor\", \"arrowdblboth\", \"arrowdblleft\", \"arrowdblup\", \"arrowdblright\", \"arrowdbldown\", \"lozenge\", \"angleleft\", \"registersans\", \"copyrightsans\", \"trademarksans\", \"summation\", \"parenlefttp\", \"parenleftex\", \"parenleftbt\", \"bracketlefttp\", \"bracketleftex\", \"bracketleftbt\", \"bracelefttp\", \"braceleftmid\", \"braceleftbt\", \"braceex\", \"\", \"angleright\", \"integral\", \"integraltp\", \"integralex\", \"integralbt\", \"parenrighttp\", \"parenrightex\", \"parenrightbt\", \"bracketrighttp\", \"bracketrightex\", \"bracketrightbt\", \"bracerighttp\", \"bracerightmid\", \"bracerightbt\", \"\"];\nexports.SymbolSetEncoding = SymbolSetEncoding;\nconst ZapfDingbatsEncoding = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"a1\", \"a2\", \"a202\", \"a3\", \"a4\", \"a5\", \"a119\", \"a118\", \"a117\", \"a11\", \"a12\", \"a13\", \"a14\", \"a15\", \"a16\", \"a105\", \"a17\", \"a18\", \"a19\", \"a20\", \"a21\", \"a22\", \"a23\", \"a24\", \"a25\", \"a26\", \"a27\", \"a28\", \"a6\", \"a7\", \"a8\", \"a9\", \"a10\", \"a29\", \"a30\", \"a31\", \"a32\", \"a33\", \"a34\", \"a35\", \"a36\", \"a37\", \"a38\", \"a39\", \"a40\", \"a41\", \"a42\", \"a43\", \"a44\", \"a45\", \"a46\", \"a47\", \"a48\", \"a49\", \"a50\", \"a51\", \"a52\", \"a53\", \"a54\", \"a55\", \"a56\", \"a57\", \"a58\", \"a59\", \"a60\", \"a61\", \"a62\", \"a63\", \"a64\", \"a65\", \"a66\", \"a67\", \"a68\", \"a69\", \"a70\", \"a71\", \"a72\", \"a73\", \"a74\", \"a203\", \"a75\", \"a204\", \"a76\", \"a77\", \"a78\", \"a79\", \"a81\", \"a82\", \"a83\", \"a84\", \"a97\", \"a98\", \"a99\", \"a100\", \"\", \"a89\", \"a90\", \"a93\", \"a94\", \"a91\", \"a92\", \"a205\", \"a85\", \"a206\", \"a86\", \"a87\", \"a88\", \"a95\", \"a96\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"a101\", \"a102\", \"a103\", \"a104\", \"a106\", \"a107\", \"a108\", \"a112\", \"a111\", \"a110\", \"a109\", \"a120\", \"a121\", \"a122\", \"a123\", \"a124\", \"a125\", \"a126\", \"a127\", \"a128\", \"a129\", \"a130\", \"a131\", \"a132\", \"a133\", \"a134\", \"a135\", \"a136\", \"a137\", \"a138\", \"a139\", \"a140\", \"a141\", \"a142\", \"a143\", \"a144\", \"a145\", \"a146\", \"a147\", \"a148\", \"a149\", \"a150\", \"a151\", \"a152\", \"a153\", \"a154\", \"a155\", \"a156\", \"a157\", \"a158\", \"a159\", \"a160\", \"a161\", \"a163\", \"a164\", \"a196\", \"a165\", \"a192\", \"a166\", \"a167\", \"a168\", \"a169\", \"a170\", \"a171\", \"a172\", \"a173\", \"a162\", \"a174\", \"a175\", \"a176\", \"a177\", \"a178\", \"a179\", \"a193\", \"a180\", \"a199\", \"a181\", \"a200\", \"a182\", \"\", \"a201\", \"a183\", \"a184\", \"a197\", \"a185\", \"a194\", \"a198\", \"a186\", \"a195\", \"a187\", \"a188\", \"a189\", \"a190\", \"a191\", \"\"];\nexports.ZapfDingbatsEncoding = ZapfDingbatsEncoding;\n\nfunction getEncoding(encodingName) {\n  switch (encodingName) {\n    case \"WinAnsiEncoding\":\n      return WinAnsiEncoding;\n\n    case \"StandardEncoding\":\n      return StandardEncoding;\n\n    case \"MacRomanEncoding\":\n      return MacRomanEncoding;\n\n    case \"SymbolSetEncoding\":\n      return SymbolSetEncoding;\n\n    case \"ZapfDingbatsEncoding\":\n      return ZapfDingbatsEncoding;\n\n    case \"ExpertEncoding\":\n      return ExpertEncoding;\n\n    case \"MacExpertEncoding\":\n      return MacExpertEncoding;\n\n    default:\n      return null;\n  }\n}\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\nvar getLookupTableFactory = __w_pdfjs_require__(7).getLookupTableFactory;\nvar getGlyphsUnicode = getLookupTableFactory(function (t) {\n t[\"A\"] = 0x0041;\n t[\"AE\"] = 0x00c6;\n t[\"AEacute\"] = 0x01fc;\n t[\"AEmacron\"] = 0x01e2;\n t[\"AEsmall\"] = 0xf7e6;\n t[\"Aacute\"] = 0x00c1;\n t[\"Aacutesmall\"] = 0xf7e1;\n t[\"Abreve\"] = 0x0102;\n t[\"Abreveacute\"] = 0x1eae;\n t[\"Abrevecyrillic\"] = 0x04d0;\n t[\"Abrevedotbelow\"] = 0x1eb6;\n t[\"Abrevegrave\"] = 0x1eb0;\n t[\"Abrevehookabove\"] = 0x1eb2;\n t[\"Abrevetilde\"] = 0x1eb4;\n t[\"Acaron\"] = 0x01cd;\n t[\"Acircle\"] = 0x24b6;\n t[\"Acircumflex\"] = 0x00c2;\n t[\"Acircumflexacute\"] = 0x1ea4;\n t[\"Acircumflexdotbelow\"] = 0x1eac;\n t[\"Acircumflexgrave\"] = 0x1ea6;\n t[\"Acircumflexhookabove\"] = 0x1ea8;\n t[\"Acircumflexsmall\"] = 0xf7e2;\n t[\"Acircumflextilde\"] = 0x1eaa;\n t[\"Acute\"] = 0xf6c9;\n t[\"Acutesmall\"] = 0xf7b4;\n t[\"Acyrillic\"] = 0x0410;\n t[\"Adblgrave\"] = 0x0200;\n t[\"Adieresis\"] = 0x00c4;\n t[\"Adieresiscyrillic\"] = 0x04d2;\n t[\"Adieresismacron\"] = 0x01de;\n t[\"Adieresissmall\"] = 0xf7e4;\n t[\"Adotbelow\"] = 0x1ea0;\n t[\"Adotmacron\"] = 0x01e0;\n t[\"Agrave\"] = 0x00c0;\n t[\"Agravesmall\"] = 0xf7e0;\n t[\"Ahookabove\"] = 0x1ea2;\n t[\"Aiecyrillic\"] = 0x04d4;\n t[\"Ainvertedbreve\"] = 0x0202;\n t[\"Alpha\"] = 0x0391;\n t[\"Alphatonos\"] = 0x0386;\n t[\"Amacron\"] = 0x0100;\n t[\"Amonospace\"] = 0xff21;\n t[\"Aogonek\"] = 0x0104;\n t[\"Aring\"] = 0x00c5;\n t[\"Aringacute\"] = 0x01fa;\n t[\"Aringbelow\"] = 0x1e00;\n t[\"Aringsmall\"] = 0xf7e5;\n t[\"Asmall\"] = 0xf761;\n t[\"Atilde\"] = 0x00c3;\n t[\"Atildesmall\"] = 0xf7e3;\n t[\"Aybarmenian\"] = 0x0531;\n t[\"B\"] = 0x0042;\n t[\"Bcircle\"] = 0x24b7;\n t[\"Bdotaccent\"] = 0x1e02;\n t[\"Bdotbelow\"] = 0x1e04;\n t[\"Becyrillic\"] = 0x0411;\n t[\"Benarmenian\"] = 0x0532;\n t[\"Beta\"] = 0x0392;\n t[\"Bhook\"] = 0x0181;\n t[\"Blinebelow\"] = 0x1e06;\n t[\"Bmonospace\"] = 0xff22;\n t[\"Brevesmall\"] = 0xf6f4;\n t[\"Bsmall\"] = 0xf762;\n t[\"Btopbar\"] = 0x0182;\n t[\"C\"] = 0x0043;\n t[\"Caarmenian\"] = 0x053e;\n t[\"Cacute\"] = 0x0106;\n t[\"Caron\"] = 0xf6ca;\n t[\"Caronsmall\"] = 0xf6f5;\n t[\"Ccaron\"] = 0x010c;\n t[\"Ccedilla\"] = 0x00c7;\n t[\"Ccedillaacute\"] = 0x1e08;\n t[\"Ccedillasmall\"] = 0xf7e7;\n t[\"Ccircle\"] = 0x24b8;\n t[\"Ccircumflex\"] = 0x0108;\n t[\"Cdot\"] = 0x010a;\n t[\"Cdotaccent\"] = 0x010a;\n t[\"Cedillasmall\"] = 0xf7b8;\n t[\"Chaarmenian\"] = 0x0549;\n t[\"Cheabkhasiancyrillic\"] = 0x04bc;\n t[\"Checyrillic\"] = 0x0427;\n t[\"Chedescenderabkhasiancyrillic\"] = 0x04be;\n t[\"Chedescendercyrillic\"] = 0x04b6;\n t[\"Chedieresiscyrillic\"] = 0x04f4;\n t[\"Cheharmenian\"] = 0x0543;\n t[\"Chekhakassiancyrillic\"] = 0x04cb;\n t[\"Cheverticalstrokecyrillic\"] = 0x04b8;\n t[\"Chi\"] = 0x03a7;\n t[\"Chook\"] = 0x0187;\n t[\"Circumflexsmall\"] = 0xf6f6;\n t[\"Cmonospace\"] = 0xff23;\n t[\"Coarmenian\"] = 0x0551;\n t[\"Csmall\"] = 0xf763;\n t[\"D\"] = 0x0044;\n t[\"DZ\"] = 0x01f1;\n t[\"DZcaron\"] = 0x01c4;\n t[\"Daarmenian\"] = 0x0534;\n t[\"Dafrican\"] = 0x0189;\n t[\"Dcaron\"] = 0x010e;\n t[\"Dcedilla\"] = 0x1e10;\n t[\"Dcircle\"] = 0x24b9;\n t[\"Dcircumflexbelow\"] = 0x1e12;\n t[\"Dcroat\"] = 0x0110;\n t[\"Ddotaccent\"] = 0x1e0a;\n t[\"Ddotbelow\"] = 0x1e0c;\n t[\"Decyrillic\"] = 0x0414;\n t[\"Deicoptic\"] = 0x03ee;\n t[\"Delta\"] = 0x2206;\n t[\"Deltagreek\"] = 0x0394;\n t[\"Dhook\"] = 0x018a;\n t[\"Dieresis\"] = 0xf6cb;\n t[\"DieresisAcute\"] = 0xf6cc;\n t[\"DieresisGrave\"] = 0xf6cd;\n t[\"Dieresissmall\"] = 0xf7a8;\n t[\"Digammagreek\"] = 0x03dc;\n t[\"Djecyrillic\"] = 0x0402;\n t[\"Dlinebelow\"] = 0x1e0e;\n t[\"Dmonospace\"] = 0xff24;\n t[\"Dotaccentsmall\"] = 0xf6f7;\n t[\"Dslash\"] = 0x0110;\n t[\"Dsmall\"] = 0xf764;\n t[\"Dtopbar\"] = 0x018b;\n t[\"Dz\"] = 0x01f2;\n t[\"Dzcaron\"] = 0x01c5;\n t[\"Dzeabkhasiancyrillic\"] = 0x04e0;\n t[\"Dzecyrillic\"] = 0x0405;\n t[\"Dzhecyrillic\"] = 0x040f;\n t[\"E\"] = 0x0045;\n t[\"Eacute\"] = 0x00c9;\n t[\"Eacutesmall\"] = 0xf7e9;\n t[\"Ebreve\"] = 0x0114;\n t[\"Ecaron\"] = 0x011a;\n t[\"Ecedillabreve\"] = 0x1e1c;\n t[\"Echarmenian\"] = 0x0535;\n t[\"Ecircle\"] = 0x24ba;\n t[\"Ecircumflex\"] = 0x00ca;\n t[\"Ecircumflexacute\"] = 0x1ebe;\n t[\"Ecircumflexbelow\"] = 0x1e18;\n t[\"Ecircumflexdotbelow\"] = 0x1ec6;\n t[\"Ecircumflexgrave\"] = 0x1ec0;\n t[\"Ecircumflexhookabove\"] = 0x1ec2;\n t[\"Ecircumflexsmall\"] = 0xf7ea;\n t[\"Ecircumflextilde\"] = 0x1ec4;\n t[\"Ecyrillic\"] = 0x0404;\n t[\"Edblgrave\"] = 0x0204;\n t[\"Edieresis\"] = 0x00cb;\n t[\"Edieresissmall\"] = 0xf7eb;\n t[\"Edot\"] = 0x0116;\n t[\"Edotaccent\"] = 0x0116;\n t[\"Edotbelow\"] = 0x1eb8;\n t[\"Efcyrillic\"] = 0x0424;\n t[\"Egrave\"] = 0x00c8;\n t[\"Egravesmall\"] = 0xf7e8;\n t[\"Eharmenian\"] = 0x0537;\n t[\"Ehookabove\"] = 0x1eba;\n t[\"Eightroman\"] = 0x2167;\n t[\"Einvertedbreve\"] = 0x0206;\n t[\"Eiotifiedcyrillic\"] = 0x0464;\n t[\"Elcyrillic\"] = 0x041b;\n t[\"Elevenroman\"] = 0x216a;\n t[\"Emacron\"] = 0x0112;\n t[\"Emacronacute\"] = 0x1e16;\n t[\"Emacrongrave\"] = 0x1e14;\n t[\"Emcyrillic\"] = 0x041c;\n t[\"Emonospace\"] = 0xff25;\n t[\"Encyrillic\"] = 0x041d;\n t[\"Endescendercyrillic\"] = 0x04a2;\n t[\"Eng\"] = 0x014a;\n t[\"Enghecyrillic\"] = 0x04a4;\n t[\"Enhookcyrillic\"] = 0x04c7;\n t[\"Eogonek\"] = 0x0118;\n t[\"Eopen\"] = 0x0190;\n t[\"Epsilon\"] = 0x0395;\n t[\"Epsilontonos\"] = 0x0388;\n t[\"Ercyrillic\"] = 0x0420;\n t[\"Ereversed\"] = 0x018e;\n t[\"Ereversedcyrillic\"] = 0x042d;\n t[\"Escyrillic\"] = 0x0421;\n t[\"Esdescendercyrillic\"] = 0x04aa;\n t[\"Esh\"] = 0x01a9;\n t[\"Esmall\"] = 0xf765;\n t[\"Eta\"] = 0x0397;\n t[\"Etarmenian\"] = 0x0538;\n t[\"Etatonos\"] = 0x0389;\n t[\"Eth\"] = 0x00d0;\n t[\"Ethsmall\"] = 0xf7f0;\n t[\"Etilde\"] = 0x1ebc;\n t[\"Etildebelow\"] = 0x1e1a;\n t[\"Euro\"] = 0x20ac;\n t[\"Ezh\"] = 0x01b7;\n t[\"Ezhcaron\"] = 0x01ee;\n t[\"Ezhreversed\"] = 0x01b8;\n t[\"F\"] = 0x0046;\n t[\"Fcircle\"] = 0x24bb;\n t[\"Fdotaccent\"] = 0x1e1e;\n t[\"Feharmenian\"] = 0x0556;\n t[\"Feicoptic\"] = 0x03e4;\n t[\"Fhook\"] = 0x0191;\n t[\"Fitacyrillic\"] = 0x0472;\n t[\"Fiveroman\"] = 0x2164;\n t[\"Fmonospace\"] = 0xff26;\n t[\"Fourroman\"] = 0x2163;\n t[\"Fsmall\"] = 0xf766;\n t[\"G\"] = 0x0047;\n t[\"GBsquare\"] = 0x3387;\n t[\"Gacute\"] = 0x01f4;\n t[\"Gamma\"] = 0x0393;\n t[\"Gammaafrican\"] = 0x0194;\n t[\"Gangiacoptic\"] = 0x03ea;\n t[\"Gbreve\"] = 0x011e;\n t[\"Gcaron\"] = 0x01e6;\n t[\"Gcedilla\"] = 0x0122;\n t[\"Gcircle\"] = 0x24bc;\n t[\"Gcircumflex\"] = 0x011c;\n t[\"Gcommaaccent\"] = 0x0122;\n t[\"Gdot\"] = 0x0120;\n t[\"Gdotaccent\"] = 0x0120;\n t[\"Gecyrillic\"] = 0x0413;\n t[\"Ghadarmenian\"] = 0x0542;\n t[\"Ghemiddlehookcyrillic\"] = 0x0494;\n t[\"Ghestrokecyrillic\"] = 0x0492;\n t[\"Gheupturncyrillic\"] = 0x0490;\n t[\"Ghook\"] = 0x0193;\n t[\"Gimarmenian\"] = 0x0533;\n t[\"Gjecyrillic\"] = 0x0403;\n t[\"Gmacron\"] = 0x1e20;\n t[\"Gmonospace\"] = 0xff27;\n t[\"Grave\"] = 0xf6ce;\n t[\"Gravesmall\"] = 0xf760;\n t[\"Gsmall\"] = 0xf767;\n t[\"Gsmallhook\"] = 0x029b;\n t[\"Gstroke\"] = 0x01e4;\n t[\"H\"] = 0x0048;\n t[\"H18533\"] = 0x25cf;\n t[\"H18543\"] = 0x25aa;\n t[\"H18551\"] = 0x25ab;\n t[\"H22073\"] = 0x25a1;\n t[\"HPsquare\"] = 0x33cb;\n t[\"Haabkhasiancyrillic\"] = 0x04a8;\n t[\"Hadescendercyrillic\"] = 0x04b2;\n t[\"Hardsigncyrillic\"] = 0x042a;\n t[\"Hbar\"] = 0x0126;\n t[\"Hbrevebelow\"] = 0x1e2a;\n t[\"Hcedilla\"] = 0x1e28;\n t[\"Hcircle\"] = 0x24bd;\n t[\"Hcircumflex\"] = 0x0124;\n t[\"Hdieresis\"] = 0x1e26;\n t[\"Hdotaccent\"] = 0x1e22;\n t[\"Hdotbelow\"] = 0x1e24;\n t[\"Hmonospace\"] = 0xff28;\n t[\"Hoarmenian\"] = 0x0540;\n t[\"Horicoptic\"] = 0x03e8;\n t[\"Hsmall\"] = 0xf768;\n t[\"Hungarumlaut\"] = 0xf6cf;\n t[\"Hungarumlautsmall\"] = 0xf6f8;\n t[\"Hzsquare\"] = 0x3390;\n t[\"I\"] = 0x0049;\n t[\"IAcyrillic\"] = 0x042f;\n t[\"IJ\"] = 0x0132;\n t[\"IUcyrillic\"] = 0x042e;\n t[\"Iacute\"] = 0x00cd;\n t[\"Iacutesmall\"] = 0xf7ed;\n t[\"Ibreve\"] = 0x012c;\n t[\"Icaron\"] = 0x01cf;\n t[\"Icircle\"] = 0x24be;\n t[\"Icircumflex\"] = 0x00ce;\n t[\"Icircumflexsmall\"] = 0xf7ee;\n t[\"Icyrillic\"] = 0x0406;\n t[\"Idblgrave\"] = 0x0208;\n t[\"Idieresis\"] = 0x00cf;\n t[\"Idieresisacute\"] = 0x1e2e;\n t[\"Idieresiscyrillic\"] = 0x04e4;\n t[\"Idieresissmall\"] = 0xf7ef;\n t[\"Idot\"] = 0x0130;\n t[\"Idotaccent\"] = 0x0130;\n t[\"Idotbelow\"] = 0x1eca;\n t[\"Iebrevecyrillic\"] = 0x04d6;\n t[\"Iecyrillic\"] = 0x0415;\n t[\"Ifraktur\"] = 0x2111;\n t[\"Igrave\"] = 0x00cc;\n t[\"Igravesmall\"] = 0xf7ec;\n t[\"Ihookabove\"] = 0x1ec8;\n t[\"Iicyrillic\"] = 0x0418;\n t[\"Iinvertedbreve\"] = 0x020a;\n t[\"Iishortcyrillic\"] = 0x0419;\n t[\"Imacron\"] = 0x012a;\n t[\"Imacroncyrillic\"] = 0x04e2;\n t[\"Imonospace\"] = 0xff29;\n t[\"Iniarmenian\"] = 0x053b;\n t[\"Iocyrillic\"] = 0x0401;\n t[\"Iogonek\"] = 0x012e;\n t[\"Iota\"] = 0x0399;\n t[\"Iotaafrican\"] = 0x0196;\n t[\"Iotadieresis\"] = 0x03aa;\n t[\"Iotatonos\"] = 0x038a;\n t[\"Ismall\"] = 0xf769;\n t[\"Istroke\"] = 0x0197;\n t[\"Itilde\"] = 0x0128;\n t[\"Itildebelow\"] = 0x1e2c;\n t[\"Izhitsacyrillic\"] = 0x0474;\n t[\"Izhitsadblgravecyrillic\"] = 0x0476;\n t[\"J\"] = 0x004a;\n t[\"Jaarmenian\"] = 0x0541;\n t[\"Jcircle\"] = 0x24bf;\n t[\"Jcircumflex\"] = 0x0134;\n t[\"Jecyrillic\"] = 0x0408;\n t[\"Jheharmenian\"] = 0x054b;\n t[\"Jmonospace\"] = 0xff2a;\n t[\"Jsmall\"] = 0xf76a;\n t[\"K\"] = 0x004b;\n t[\"KBsquare\"] = 0x3385;\n t[\"KKsquare\"] = 0x33cd;\n t[\"Kabashkircyrillic\"] = 0x04a0;\n t[\"Kacute\"] = 0x1e30;\n t[\"Kacyrillic\"] = 0x041a;\n t[\"Kadescendercyrillic\"] = 0x049a;\n t[\"Kahookcyrillic\"] = 0x04c3;\n t[\"Kappa\"] = 0x039a;\n t[\"Kastrokecyrillic\"] = 0x049e;\n t[\"Kaverticalstrokecyrillic\"] = 0x049c;\n t[\"Kcaron\"] = 0x01e8;\n t[\"Kcedilla\"] = 0x0136;\n t[\"Kcircle\"] = 0x24c0;\n t[\"Kcommaaccent\"] = 0x0136;\n t[\"Kdotbelow\"] = 0x1e32;\n t[\"Keharmenian\"] = 0x0554;\n t[\"Kenarmenian\"] = 0x053f;\n t[\"Khacyrillic\"] = 0x0425;\n t[\"Kheicoptic\"] = 0x03e6;\n t[\"Khook\"] = 0x0198;\n t[\"Kjecyrillic\"] = 0x040c;\n t[\"Klinebelow\"] = 0x1e34;\n t[\"Kmonospace\"] = 0xff2b;\n t[\"Koppacyrillic\"] = 0x0480;\n t[\"Koppagreek\"] = 0x03de;\n t[\"Ksicyrillic\"] = 0x046e;\n t[\"Ksmall\"] = 0xf76b;\n t[\"L\"] = 0x004c;\n t[\"LJ\"] = 0x01c7;\n t[\"LL\"] = 0xf6bf;\n t[\"Lacute\"] = 0x0139;\n t[\"Lambda\"] = 0x039b;\n t[\"Lcaron\"] = 0x013d;\n t[\"Lcedilla\"] = 0x013b;\n t[\"Lcircle\"] = 0x24c1;\n t[\"Lcircumflexbelow\"] = 0x1e3c;\n t[\"Lcommaaccent\"] = 0x013b;\n t[\"Ldot\"] = 0x013f;\n t[\"Ldotaccent\"] = 0x013f;\n t[\"Ldotbelow\"] = 0x1e36;\n t[\"Ldotbelowmacron\"] = 0x1e38;\n t[\"Liwnarmenian\"] = 0x053c;\n t[\"Lj\"] = 0x01c8;\n t[\"Ljecyrillic\"] = 0x0409;\n t[\"Llinebelow\"] = 0x1e3a;\n t[\"Lmonospace\"] = 0xff2c;\n t[\"Lslash\"] = 0x0141;\n t[\"Lslashsmall\"] = 0xf6f9;\n t[\"Lsmall\"] = 0xf76c;\n t[\"M\"] = 0x004d;\n t[\"MBsquare\"] = 0x3386;\n t[\"Macron\"] = 0xf6d0;\n t[\"Macronsmall\"] = 0xf7af;\n t[\"Macute\"] = 0x1e3e;\n t[\"Mcircle\"] = 0x24c2;\n t[\"Mdotaccent\"] = 0x1e40;\n t[\"Mdotbelow\"] = 0x1e42;\n t[\"Menarmenian\"] = 0x0544;\n t[\"Mmonospace\"] = 0xff2d;\n t[\"Msmall\"] = 0xf76d;\n t[\"Mturned\"] = 0x019c;\n t[\"Mu\"] = 0x039c;\n t[\"N\"] = 0x004e;\n t[\"NJ\"] = 0x01ca;\n t[\"Nacute\"] = 0x0143;\n t[\"Ncaron\"] = 0x0147;\n t[\"Ncedilla\"] = 0x0145;\n t[\"Ncircle\"] = 0x24c3;\n t[\"Ncircumflexbelow\"] = 0x1e4a;\n t[\"Ncommaaccent\"] = 0x0145;\n t[\"Ndotaccent\"] = 0x1e44;\n t[\"Ndotbelow\"] = 0x1e46;\n t[\"Nhookleft\"] = 0x019d;\n t[\"Nineroman\"] = 0x2168;\n t[\"Nj\"] = 0x01cb;\n t[\"Njecyrillic\"] = 0x040a;\n t[\"Nlinebelow\"] = 0x1e48;\n t[\"Nmonospace\"] = 0xff2e;\n t[\"Nowarmenian\"] = 0x0546;\n t[\"Nsmall\"] = 0xf76e;\n t[\"Ntilde\"] = 0x00d1;\n t[\"Ntildesmall\"] = 0xf7f1;\n t[\"Nu\"] = 0x039d;\n t[\"O\"] = 0x004f;\n t[\"OE\"] = 0x0152;\n t[\"OEsmall\"] = 0xf6fa;\n t[\"Oacute\"] = 0x00d3;\n t[\"Oacutesmall\"] = 0xf7f3;\n t[\"Obarredcyrillic\"] = 0x04e8;\n t[\"Obarreddieresiscyrillic\"] = 0x04ea;\n t[\"Obreve\"] = 0x014e;\n t[\"Ocaron\"] = 0x01d1;\n t[\"Ocenteredtilde\"] = 0x019f;\n t[\"Ocircle\"] = 0x24c4;\n t[\"Ocircumflex\"] = 0x00d4;\n t[\"Ocircumflexacute\"] = 0x1ed0;\n t[\"Ocircumflexdotbelow\"] = 0x1ed8;\n t[\"Ocircumflexgrave\"] = 0x1ed2;\n t[\"Ocircumflexhookabove\"] = 0x1ed4;\n t[\"Ocircumflexsmall\"] = 0xf7f4;\n t[\"Ocircumflextilde\"] = 0x1ed6;\n t[\"Ocyrillic\"] = 0x041e;\n t[\"Odblacute\"] = 0x0150;\n t[\"Odblgrave\"] = 0x020c;\n t[\"Odieresis\"] = 0x00d6;\n t[\"Odieresiscyrillic\"] = 0x04e6;\n t[\"Odieresissmall\"] = 0xf7f6;\n t[\"Odotbelow\"] = 0x1ecc;\n t[\"Ogoneksmall\"] = 0xf6fb;\n t[\"Ograve\"] = 0x00d2;\n t[\"Ogravesmall\"] = 0xf7f2;\n t[\"Oharmenian\"] = 0x0555;\n t[\"Ohm\"] = 0x2126;\n t[\"Ohookabove\"] = 0x1ece;\n t[\"Ohorn\"] = 0x01a0;\n t[\"Ohornacute\"] = 0x1eda;\n t[\"Ohorndotbelow\"] = 0x1ee2;\n t[\"Ohorngrave\"] = 0x1edc;\n t[\"Ohornhookabove\"] = 0x1ede;\n t[\"Ohorntilde\"] = 0x1ee0;\n t[\"Ohungarumlaut\"] = 0x0150;\n t[\"Oi\"] = 0x01a2;\n t[\"Oinvertedbreve\"] = 0x020e;\n t[\"Omacron\"] = 0x014c;\n t[\"Omacronacute\"] = 0x1e52;\n t[\"Omacrongrave\"] = 0x1e50;\n t[\"Omega\"] = 0x2126;\n t[\"Omegacyrillic\"] = 0x0460;\n t[\"Omegagreek\"] = 0x03a9;\n t[\"Omegaroundcyrillic\"] = 0x047a;\n t[\"Omegatitlocyrillic\"] = 0x047c;\n t[\"Omegatonos\"] = 0x038f;\n t[\"Omicron\"] = 0x039f;\n t[\"Omicrontonos\"] = 0x038c;\n t[\"Omonospace\"] = 0xff2f;\n t[\"Oneroman\"] = 0x2160;\n t[\"Oogonek\"] = 0x01ea;\n t[\"Oogonekmacron\"] = 0x01ec;\n t[\"Oopen\"] = 0x0186;\n t[\"Oslash\"] = 0x00d8;\n t[\"Oslashacute\"] = 0x01fe;\n t[\"Oslashsmall\"] = 0xf7f8;\n t[\"Osmall\"] = 0xf76f;\n t[\"Ostrokeacute\"] = 0x01fe;\n t[\"Otcyrillic\"] = 0x047e;\n t[\"Otilde\"] = 0x00d5;\n t[\"Otildeacute\"] = 0x1e4c;\n t[\"Otildedieresis\"] = 0x1e4e;\n t[\"Otildesmall\"] = 0xf7f5;\n t[\"P\"] = 0x0050;\n t[\"Pacute\"] = 0x1e54;\n t[\"Pcircle\"] = 0x24c5;\n t[\"Pdotaccent\"] = 0x1e56;\n t[\"Pecyrillic\"] = 0x041f;\n t[\"Peharmenian\"] = 0x054a;\n t[\"Pemiddlehookcyrillic\"] = 0x04a6;\n t[\"Phi\"] = 0x03a6;\n t[\"Phook\"] = 0x01a4;\n t[\"Pi\"] = 0x03a0;\n t[\"Piwrarmenian\"] = 0x0553;\n t[\"Pmonospace\"] = 0xff30;\n t[\"Psi\"] = 0x03a8;\n t[\"Psicyrillic\"] = 0x0470;\n t[\"Psmall\"] = 0xf770;\n t[\"Q\"] = 0x0051;\n t[\"Qcircle\"] = 0x24c6;\n t[\"Qmonospace\"] = 0xff31;\n t[\"Qsmall\"] = 0xf771;\n t[\"R\"] = 0x0052;\n t[\"Raarmenian\"] = 0x054c;\n t[\"Racute\"] = 0x0154;\n t[\"Rcaron\"] = 0x0158;\n t[\"Rcedilla\"] = 0x0156;\n t[\"Rcircle\"] = 0x24c7;\n t[\"Rcommaaccent\"] = 0x0156;\n t[\"Rdblgrave\"] = 0x0210;\n t[\"Rdotaccent\"] = 0x1e58;\n t[\"Rdotbelow\"] = 0x1e5a;\n t[\"Rdotbelowmacron\"] = 0x1e5c;\n t[\"Reharmenian\"] = 0x0550;\n t[\"Rfraktur\"] = 0x211c;\n t[\"Rho\"] = 0x03a1;\n t[\"Ringsmall\"] = 0xf6fc;\n t[\"Rinvertedbreve\"] = 0x0212;\n t[\"Rlinebelow\"] = 0x1e5e;\n t[\"Rmonospace\"] = 0xff32;\n t[\"Rsmall\"] = 0xf772;\n t[\"Rsmallinverted\"] = 0x0281;\n t[\"Rsmallinvertedsuperior\"] = 0x02b6;\n t[\"S\"] = 0x0053;\n t[\"SF010000\"] = 0x250c;\n t[\"SF020000\"] = 0x2514;\n t[\"SF030000\"] = 0x2510;\n t[\"SF040000\"] = 0x2518;\n t[\"SF050000\"] = 0x253c;\n t[\"SF060000\"] = 0x252c;\n t[\"SF070000\"] = 0x2534;\n t[\"SF080000\"] = 0x251c;\n t[\"SF090000\"] = 0x2524;\n t[\"SF100000\"] = 0x2500;\n t[\"SF110000\"] = 0x2502;\n t[\"SF190000\"] = 0x2561;\n t[\"SF200000\"] = 0x2562;\n t[\"SF210000\"] = 0x2556;\n t[\"SF220000\"] = 0x2555;\n t[\"SF230000\"] = 0x2563;\n t[\"SF240000\"] = 0x2551;\n t[\"SF250000\"] = 0x2557;\n t[\"SF260000\"] = 0x255d;\n t[\"SF270000\"] = 0x255c;\n t[\"SF280000\"] = 0x255b;\n t[\"SF360000\"] = 0x255e;\n t[\"SF370000\"] = 0x255f;\n t[\"SF380000\"] = 0x255a;\n t[\"SF390000\"] = 0x2554;\n t[\"SF400000\"] = 0x2569;\n t[\"SF410000\"] = 0x2566;\n t[\"SF420000\"] = 0x2560;\n t[\"SF430000\"] = 0x2550;\n t[\"SF440000\"] = 0x256c;\n t[\"SF450000\"] = 0x2567;\n t[\"SF460000\"] = 0x2568;\n t[\"SF470000\"] = 0x2564;\n t[\"SF480000\"] = 0x2565;\n t[\"SF490000\"] = 0x2559;\n t[\"SF500000\"] = 0x2558;\n t[\"SF510000\"] = 0x2552;\n t[\"SF520000\"] = 0x2553;\n t[\"SF530000\"] = 0x256b;\n t[\"SF540000\"] = 0x256a;\n t[\"Sacute\"] = 0x015a;\n t[\"Sacutedotaccent\"] = 0x1e64;\n t[\"Sampigreek\"] = 0x03e0;\n t[\"Scaron\"] = 0x0160;\n t[\"Scarondotaccent\"] = 0x1e66;\n t[\"Scaronsmall\"] = 0xf6fd;\n t[\"Scedilla\"] = 0x015e;\n t[\"Schwa\"] = 0x018f;\n t[\"Schwacyrillic\"] = 0x04d8;\n t[\"Schwadieresiscyrillic\"] = 0x04da;\n t[\"Scircle\"] = 0x24c8;\n t[\"Scircumflex\"] = 0x015c;\n t[\"Scommaaccent\"] = 0x0218;\n t[\"Sdotaccent\"] = 0x1e60;\n t[\"Sdotbelow\"] = 0x1e62;\n t[\"Sdotbelowdotaccent\"] = 0x1e68;\n t[\"Seharmenian\"] = 0x054d;\n t[\"Sevenroman\"] = 0x2166;\n t[\"Shaarmenian\"] = 0x0547;\n t[\"Shacyrillic\"] = 0x0428;\n t[\"Shchacyrillic\"] = 0x0429;\n t[\"Sheicoptic\"] = 0x03e2;\n t[\"Shhacyrillic\"] = 0x04ba;\n t[\"Shimacoptic\"] = 0x03ec;\n t[\"Sigma\"] = 0x03a3;\n t[\"Sixroman\"] = 0x2165;\n t[\"Smonospace\"] = 0xff33;\n t[\"Softsigncyrillic\"] = 0x042c;\n t[\"Ssmall\"] = 0xf773;\n t[\"Stigmagreek\"] = 0x03da;\n t[\"T\"] = 0x0054;\n t[\"Tau\"] = 0x03a4;\n t[\"Tbar\"] = 0x0166;\n t[\"Tcaron\"] = 0x0164;\n t[\"Tcedilla\"] = 0x0162;\n t[\"Tcircle\"] = 0x24c9;\n t[\"Tcircumflexbelow\"] = 0x1e70;\n t[\"Tcommaaccent\"] = 0x0162;\n t[\"Tdotaccent\"] = 0x1e6a;\n t[\"Tdotbelow\"] = 0x1e6c;\n t[\"Tecyrillic\"] = 0x0422;\n t[\"Tedescendercyrillic\"] = 0x04ac;\n t[\"Tenroman\"] = 0x2169;\n t[\"Tetsecyrillic\"] = 0x04b4;\n t[\"Theta\"] = 0x0398;\n t[\"Thook\"] = 0x01ac;\n t[\"Thorn\"] = 0x00de;\n t[\"Thornsmall\"] = 0xf7fe;\n t[\"Threeroman\"] = 0x2162;\n t[\"Tildesmall\"] = 0xf6fe;\n t[\"Tiwnarmenian\"] = 0x054f;\n t[\"Tlinebelow\"] = 0x1e6e;\n t[\"Tmonospace\"] = 0xff34;\n t[\"Toarmenian\"] = 0x0539;\n t[\"Tonefive\"] = 0x01bc;\n t[\"Tonesix\"] = 0x0184;\n t[\"Tonetwo\"] = 0x01a7;\n t[\"Tretroflexhook\"] = 0x01ae;\n t[\"Tsecyrillic\"] = 0x0426;\n t[\"Tshecyrillic\"] = 0x040b;\n t[\"Tsmall\"] = 0xf774;\n t[\"Twelveroman\"] = 0x216b;\n t[\"Tworoman\"] = 0x2161;\n t[\"U\"] = 0x0055;\n t[\"Uacute\"] = 0x00da;\n t[\"Uacutesmall\"] = 0xf7fa;\n t[\"Ubreve\"] = 0x016c;\n t[\"Ucaron\"] = 0x01d3;\n t[\"Ucircle\"] = 0x24ca;\n t[\"Ucircumflex\"] = 0x00db;\n t[\"Ucircumflexbelow\"] = 0x1e76;\n t[\"Ucircumflexsmall\"] = 0xf7fb;\n t[\"Ucyrillic\"] = 0x0423;\n t[\"Udblacute\"] = 0x0170;\n t[\"Udblgrave\"] = 0x0214;\n t[\"Udieresis\"] = 0x00dc;\n t[\"Udieresisacute\"] = 0x01d7;\n t[\"Udieresisbelow\"] = 0x1e72;\n t[\"Udieresiscaron\"] = 0x01d9;\n t[\"Udieresiscyrillic\"] = 0x04f0;\n t[\"Udieresisgrave\"] = 0x01db;\n t[\"Udieresismacron\"] = 0x01d5;\n t[\"Udieresissmall\"] = 0xf7fc;\n t[\"Udotbelow\"] = 0x1ee4;\n t[\"Ugrave\"] = 0x00d9;\n t[\"Ugravesmall\"] = 0xf7f9;\n t[\"Uhookabove\"] = 0x1ee6;\n t[\"Uhorn\"] = 0x01af;\n t[\"Uhornacute\"] = 0x1ee8;\n t[\"Uhorndotbelow\"] = 0x1ef0;\n t[\"Uhorngrave\"] = 0x1eea;\n t[\"Uhornhookabove\"] = 0x1eec;\n t[\"Uhorntilde\"] = 0x1eee;\n t[\"Uhungarumlaut\"] = 0x0170;\n t[\"Uhungarumlautcyrillic\"] = 0x04f2;\n t[\"Uinvertedbreve\"] = 0x0216;\n t[\"Ukcyrillic\"] = 0x0478;\n t[\"Umacron\"] = 0x016a;\n t[\"Umacroncyrillic\"] = 0x04ee;\n t[\"Umacrondieresis\"] = 0x1e7a;\n t[\"Umonospace\"] = 0xff35;\n t[\"Uogonek\"] = 0x0172;\n t[\"Upsilon\"] = 0x03a5;\n t[\"Upsilon1\"] = 0x03d2;\n t[\"Upsilonacutehooksymbolgreek\"] = 0x03d3;\n t[\"Upsilonafrican\"] = 0x01b1;\n t[\"Upsilondieresis\"] = 0x03ab;\n t[\"Upsilondieresishooksymbolgreek\"] = 0x03d4;\n t[\"Upsilonhooksymbol\"] = 0x03d2;\n t[\"Upsilontonos\"] = 0x038e;\n t[\"Uring\"] = 0x016e;\n t[\"Ushortcyrillic\"] = 0x040e;\n t[\"Usmall\"] = 0xf775;\n t[\"Ustraightcyrillic\"] = 0x04ae;\n t[\"Ustraightstrokecyrillic\"] = 0x04b0;\n t[\"Utilde\"] = 0x0168;\n t[\"Utildeacute\"] = 0x1e78;\n t[\"Utildebelow\"] = 0x1e74;\n t[\"V\"] = 0x0056;\n t[\"Vcircle\"] = 0x24cb;\n t[\"Vdotbelow\"] = 0x1e7e;\n t[\"Vecyrillic\"] = 0x0412;\n t[\"Vewarmenian\"] = 0x054e;\n t[\"Vhook\"] = 0x01b2;\n t[\"Vmonospace\"] = 0xff36;\n t[\"Voarmenian\"] = 0x0548;\n t[\"Vsmall\"] = 0xf776;\n t[\"Vtilde\"] = 0x1e7c;\n t[\"W\"] = 0x0057;\n t[\"Wacute\"] = 0x1e82;\n t[\"Wcircle\"] = 0x24cc;\n t[\"Wcircumflex\"] = 0x0174;\n t[\"Wdieresis\"] = 0x1e84;\n t[\"Wdotaccent\"] = 0x1e86;\n t[\"Wdotbelow\"] = 0x1e88;\n t[\"Wgrave\"] = 0x1e80;\n t[\"Wmonospace\"] = 0xff37;\n t[\"Wsmall\"] = 0xf777;\n t[\"X\"] = 0x0058;\n t[\"Xcircle\"] = 0x24cd;\n t[\"Xdieresis\"] = 0x1e8c;\n t[\"Xdotaccent\"] = 0x1e8a;\n t[\"Xeharmenian\"] = 0x053d;\n t[\"Xi\"] = 0x039e;\n t[\"Xmonospace\"] = 0xff38;\n t[\"Xsmall\"] = 0xf778;\n t[\"Y\"] = 0x0059;\n t[\"Yacute\"] = 0x00dd;\n t[\"Yacutesmall\"] = 0xf7fd;\n t[\"Yatcyrillic\"] = 0x0462;\n t[\"Ycircle\"] = 0x24ce;\n t[\"Ycircumflex\"] = 0x0176;\n t[\"Ydieresis\"] = 0x0178;\n t[\"Ydieresissmall\"] = 0xf7ff;\n t[\"Ydotaccent\"] = 0x1e8e;\n t[\"Ydotbelow\"] = 0x1ef4;\n t[\"Yericyrillic\"] = 0x042b;\n t[\"Yerudieresiscyrillic\"] = 0x04f8;\n t[\"Ygrave\"] = 0x1ef2;\n t[\"Yhook\"] = 0x01b3;\n t[\"Yhookabove\"] = 0x1ef6;\n t[\"Yiarmenian\"] = 0x0545;\n t[\"Yicyrillic\"] = 0x0407;\n t[\"Yiwnarmenian\"] = 0x0552;\n t[\"Ymonospace\"] = 0xff39;\n t[\"Ysmall\"] = 0xf779;\n t[\"Ytilde\"] = 0x1ef8;\n t[\"Yusbigcyrillic\"] = 0x046a;\n t[\"Yusbigiotifiedcyrillic\"] = 0x046c;\n t[\"Yuslittlecyrillic\"] = 0x0466;\n t[\"Yuslittleiotifiedcyrillic\"] = 0x0468;\n t[\"Z\"] = 0x005a;\n t[\"Zaarmenian\"] = 0x0536;\n t[\"Zacute\"] = 0x0179;\n t[\"Zcaron\"] = 0x017d;\n t[\"Zcaronsmall\"] = 0xf6ff;\n t[\"Zcircle\"] = 0x24cf;\n t[\"Zcircumflex\"] = 0x1e90;\n t[\"Zdot\"] = 0x017b;\n t[\"Zdotaccent\"] = 0x017b;\n t[\"Zdotbelow\"] = 0x1e92;\n t[\"Zecyrillic\"] = 0x0417;\n t[\"Zedescendercyrillic\"] = 0x0498;\n t[\"Zedieresiscyrillic\"] = 0x04de;\n t[\"Zeta\"] = 0x0396;\n t[\"Zhearmenian\"] = 0x053a;\n t[\"Zhebrevecyrillic\"] = 0x04c1;\n t[\"Zhecyrillic\"] = 0x0416;\n t[\"Zhedescendercyrillic\"] = 0x0496;\n t[\"Zhedieresiscyrillic\"] = 0x04dc;\n t[\"Zlinebelow\"] = 0x1e94;\n t[\"Zmonospace\"] = 0xff3a;\n t[\"Zsmall\"] = 0xf77a;\n t[\"Zstroke\"] = 0x01b5;\n t[\"a\"] = 0x0061;\n t[\"aabengali\"] = 0x0986;\n t[\"aacute\"] = 0x00e1;\n t[\"aadeva\"] = 0x0906;\n t[\"aagujarati\"] = 0x0a86;\n t[\"aagurmukhi\"] = 0x0a06;\n t[\"aamatragurmukhi\"] = 0x0a3e;\n t[\"aarusquare\"] = 0x3303;\n t[\"aavowelsignbengali\"] = 0x09be;\n t[\"aavowelsigndeva\"] = 0x093e;\n t[\"aavowelsigngujarati\"] = 0x0abe;\n t[\"abbreviationmarkarmenian\"] = 0x055f;\n t[\"abbreviationsigndeva\"] = 0x0970;\n t[\"abengali\"] = 0x0985;\n t[\"abopomofo\"] = 0x311a;\n t[\"abreve\"] = 0x0103;\n t[\"abreveacute\"] = 0x1eaf;\n t[\"abrevecyrillic\"] = 0x04d1;\n t[\"abrevedotbelow\"] = 0x1eb7;\n t[\"abrevegrave\"] = 0x1eb1;\n t[\"abrevehookabove\"] = 0x1eb3;\n t[\"abrevetilde\"] = 0x1eb5;\n t[\"acaron\"] = 0x01ce;\n t[\"acircle\"] = 0x24d0;\n t[\"acircumflex\"] = 0x00e2;\n t[\"acircumflexacute\"] = 0x1ea5;\n t[\"acircumflexdotbelow\"] = 0x1ead;\n t[\"acircumflexgrave\"] = 0x1ea7;\n t[\"acircumflexhookabove\"] = 0x1ea9;\n t[\"acircumflextilde\"] = 0x1eab;\n t[\"acute\"] = 0x00b4;\n t[\"acutebelowcmb\"] = 0x0317;\n t[\"acutecmb\"] = 0x0301;\n t[\"acutecomb\"] = 0x0301;\n t[\"acutedeva\"] = 0x0954;\n t[\"acutelowmod\"] = 0x02cf;\n t[\"acutetonecmb\"] = 0x0341;\n t[\"acyrillic\"] = 0x0430;\n t[\"adblgrave\"] = 0x0201;\n t[\"addakgurmukhi\"] = 0x0a71;\n t[\"adeva\"] = 0x0905;\n t[\"adieresis\"] = 0x00e4;\n t[\"adieresiscyrillic\"] = 0x04d3;\n t[\"adieresismacron\"] = 0x01df;\n t[\"adotbelow\"] = 0x1ea1;\n t[\"adotmacron\"] = 0x01e1;\n t[\"ae\"] = 0x00e6;\n t[\"aeacute\"] = 0x01fd;\n t[\"aekorean\"] = 0x3150;\n t[\"aemacron\"] = 0x01e3;\n t[\"afii00208\"] = 0x2015;\n t[\"afii08941\"] = 0x20a4;\n t[\"afii10017\"] = 0x0410;\n t[\"afii10018\"] = 0x0411;\n t[\"afii10019\"] = 0x0412;\n t[\"afii10020\"] = 0x0413;\n t[\"afii10021\"] = 0x0414;\n t[\"afii10022\"] = 0x0415;\n t[\"afii10023\"] = 0x0401;\n t[\"afii10024\"] = 0x0416;\n t[\"afii10025\"] = 0x0417;\n t[\"afii10026\"] = 0x0418;\n t[\"afii10027\"] = 0x0419;\n t[\"afii10028\"] = 0x041a;\n t[\"afii10029\"] = 0x041b;\n t[\"afii10030\"] = 0x041c;\n t[\"afii10031\"] = 0x041d;\n t[\"afii10032\"] = 0x041e;\n t[\"afii10033\"] = 0x041f;\n t[\"afii10034\"] = 0x0420;\n t[\"afii10035\"] = 0x0421;\n t[\"afii10036\"] = 0x0422;\n t[\"afii10037\"] = 0x0423;\n t[\"afii10038\"] = 0x0424;\n t[\"afii10039\"] = 0x0425;\n t[\"afii10040\"] = 0x0426;\n t[\"afii10041\"] = 0x0427;\n t[\"afii10042\"] = 0x0428;\n t[\"afii10043\"] = 0x0429;\n t[\"afii10044\"] = 0x042a;\n t[\"afii10045\"] = 0x042b;\n t[\"afii10046\"] = 0x042c;\n t[\"afii10047\"] = 0x042d;\n t[\"afii10048\"] = 0x042e;\n t[\"afii10049\"] = 0x042f;\n t[\"afii10050\"] = 0x0490;\n t[\"afii10051\"] = 0x0402;\n t[\"afii10052\"] = 0x0403;\n t[\"afii10053\"] = 0x0404;\n t[\"afii10054\"] = 0x0405;\n t[\"afii10055\"] = 0x0406;\n t[\"afii10056\"] = 0x0407;\n t[\"afii10057\"] = 0x0408;\n t[\"afii10058\"] = 0x0409;\n t[\"afii10059\"] = 0x040a;\n t[\"afii10060\"] = 0x040b;\n t[\"afii10061\"] = 0x040c;\n t[\"afii10062\"] = 0x040e;\n t[\"afii10063\"] = 0xf6c4;\n t[\"afii10064\"] = 0xf6c5;\n t[\"afii10065\"] = 0x0430;\n t[\"afii10066\"] = 0x0431;\n t[\"afii10067\"] = 0x0432;\n t[\"afii10068\"] = 0x0433;\n t[\"afii10069\"] = 0x0434;\n t[\"afii10070\"] = 0x0435;\n t[\"afii10071\"] = 0x0451;\n t[\"afii10072\"] = 0x0436;\n t[\"afii10073\"] = 0x0437;\n t[\"afii10074\"] = 0x0438;\n t[\"afii10075\"] = 0x0439;\n t[\"afii10076\"] = 0x043a;\n t[\"afii10077\"] = 0x043b;\n t[\"afii10078\"] = 0x043c;\n t[\"afii10079\"] = 0x043d;\n t[\"afii10080\"] = 0x043e;\n t[\"afii10081\"] = 0x043f;\n t[\"afii10082\"] = 0x0440;\n t[\"afii10083\"] = 0x0441;\n t[\"afii10084\"] = 0x0442;\n t[\"afii10085\"] = 0x0443;\n t[\"afii10086\"] = 0x0444;\n t[\"afii10087\"] = 0x0445;\n t[\"afii10088\"] = 0x0446;\n t[\"afii10089\"] = 0x0447;\n t[\"afii10090\"] = 0x0448;\n t[\"afii10091\"] = 0x0449;\n t[\"afii10092\"] = 0x044a;\n t[\"afii10093\"] = 0x044b;\n t[\"afii10094\"] = 0x044c;\n t[\"afii10095\"] = 0x044d;\n t[\"afii10096\"] = 0x044e;\n t[\"afii10097\"] = 0x044f;\n t[\"afii10098\"] = 0x0491;\n t[\"afii10099\"] = 0x0452;\n t[\"afii10100\"] = 0x0453;\n t[\"afii10101\"] = 0x0454;\n t[\"afii10102\"] = 0x0455;\n t[\"afii10103\"] = 0x0456;\n t[\"afii10104\"] = 0x0457;\n t[\"afii10105\"] = 0x0458;\n t[\"afii10106\"] = 0x0459;\n t[\"afii10107\"] = 0x045a;\n t[\"afii10108\"] = 0x045b;\n t[\"afii10109\"] = 0x045c;\n t[\"afii10110\"] = 0x045e;\n t[\"afii10145\"] = 0x040f;\n t[\"afii10146\"] = 0x0462;\n t[\"afii10147\"] = 0x0472;\n t[\"afii10148\"] = 0x0474;\n t[\"afii10192\"] = 0xf6c6;\n t[\"afii10193\"] = 0x045f;\n t[\"afii10194\"] = 0x0463;\n t[\"afii10195\"] = 0x0473;\n t[\"afii10196\"] = 0x0475;\n t[\"afii10831\"] = 0xf6c7;\n t[\"afii10832\"] = 0xf6c8;\n t[\"afii10846\"] = 0x04d9;\n t[\"afii299\"] = 0x200e;\n t[\"afii300\"] = 0x200f;\n t[\"afii301\"] = 0x200d;\n t[\"afii57381\"] = 0x066a;\n t[\"afii57388\"] = 0x060c;\n t[\"afii57392\"] = 0x0660;\n t[\"afii57393\"] = 0x0661;\n t[\"afii57394\"] = 0x0662;\n t[\"afii57395\"] = 0x0663;\n t[\"afii57396\"] = 0x0664;\n t[\"afii57397\"] = 0x0665;\n t[\"afii57398\"] = 0x0666;\n t[\"afii57399\"] = 0x0667;\n t[\"afii57400\"] = 0x0668;\n t[\"afii57401\"] = 0x0669;\n t[\"afii57403\"] = 0x061b;\n t[\"afii57407\"] = 0x061f;\n t[\"afii57409\"] = 0x0621;\n t[\"afii57410\"] = 0x0622;\n t[\"afii57411\"] = 0x0623;\n t[\"afii57412\"] = 0x0624;\n t[\"afii57413\"] = 0x0625;\n t[\"afii57414\"] = 0x0626;\n t[\"afii57415\"] = 0x0627;\n t[\"afii57416\"] = 0x0628;\n t[\"afii57417\"] = 0x0629;\n t[\"afii57418\"] = 0x062a;\n t[\"afii57419\"] = 0x062b;\n t[\"afii57420\"] = 0x062c;\n t[\"afii57421\"] = 0x062d;\n t[\"afii57422\"] = 0x062e;\n t[\"afii57423\"] = 0x062f;\n t[\"afii57424\"] = 0x0630;\n t[\"afii57425\"] = 0x0631;\n t[\"afii57426\"] = 0x0632;\n t[\"afii57427\"] = 0x0633;\n t[\"afii57428\"] = 0x0634;\n t[\"afii57429\"] = 0x0635;\n t[\"afii57430\"] = 0x0636;\n t[\"afii57431\"] = 0x0637;\n t[\"afii57432\"] = 0x0638;\n t[\"afii57433\"] = 0x0639;\n t[\"afii57434\"] = 0x063a;\n t[\"afii57440\"] = 0x0640;\n t[\"afii57441\"] = 0x0641;\n t[\"afii57442\"] = 0x0642;\n t[\"afii57443\"] = 0x0643;\n t[\"afii57444\"] = 0x0644;\n t[\"afii57445\"] = 0x0645;\n t[\"afii57446\"] = 0x0646;\n t[\"afii57448\"] = 0x0648;\n t[\"afii57449\"] = 0x0649;\n t[\"afii57450\"] = 0x064a;\n t[\"afii57451\"] = 0x064b;\n t[\"afii57452\"] = 0x064c;\n t[\"afii57453\"] = 0x064d;\n t[\"afii57454\"] = 0x064e;\n t[\"afii57455\"] = 0x064f;\n t[\"afii57456\"] = 0x0650;\n t[\"afii57457\"] = 0x0651;\n t[\"afii57458\"] = 0x0652;\n t[\"afii57470\"] = 0x0647;\n t[\"afii57505\"] = 0x06a4;\n t[\"afii57506\"] = 0x067e;\n t[\"afii57507\"] = 0x0686;\n t[\"afii57508\"] = 0x0698;\n t[\"afii57509\"] = 0x06af;\n t[\"afii57511\"] = 0x0679;\n t[\"afii57512\"] = 0x0688;\n t[\"afii57513\"] = 0x0691;\n t[\"afii57514\"] = 0x06ba;\n t[\"afii57519\"] = 0x06d2;\n t[\"afii57534\"] = 0x06d5;\n t[\"afii57636\"] = 0x20aa;\n t[\"afii57645\"] = 0x05be;\n t[\"afii57658\"] = 0x05c3;\n t[\"afii57664\"] = 0x05d0;\n t[\"afii57665\"] = 0x05d1;\n t[\"afii57666\"] = 0x05d2;\n t[\"afii57667\"] = 0x05d3;\n t[\"afii57668\"] = 0x05d4;\n t[\"afii57669\"] = 0x05d5;\n t[\"afii57670\"] = 0x05d6;\n t[\"afii57671\"] = 0x05d7;\n t[\"afii57672\"] = 0x05d8;\n t[\"afii57673\"] = 0x05d9;\n t[\"afii57674\"] = 0x05da;\n t[\"afii57675\"] = 0x05db;\n t[\"afii57676\"] = 0x05dc;\n t[\"afii57677\"] = 0x05dd;\n t[\"afii57678\"] = 0x05de;\n t[\"afii57679\"] = 0x05df;\n t[\"afii57680\"] = 0x05e0;\n t[\"afii57681\"] = 0x05e1;\n t[\"afii57682\"] = 0x05e2;\n t[\"afii57683\"] = 0x05e3;\n t[\"afii57684\"] = 0x05e4;\n t[\"afii57685\"] = 0x05e5;\n t[\"afii57686\"] = 0x05e6;\n t[\"afii57687\"] = 0x05e7;\n t[\"afii57688\"] = 0x05e8;\n t[\"afii57689\"] = 0x05e9;\n t[\"afii57690\"] = 0x05ea;\n t[\"afii57694\"] = 0xfb2a;\n t[\"afii57695\"] = 0xfb2b;\n t[\"afii57700\"] = 0xfb4b;\n t[\"afii57705\"] = 0xfb1f;\n t[\"afii57716\"] = 0x05f0;\n t[\"afii57717\"] = 0x05f1;\n t[\"afii57718\"] = 0x05f2;\n t[\"afii57723\"] = 0xfb35;\n t[\"afii57793\"] = 0x05b4;\n t[\"afii57794\"] = 0x05b5;\n t[\"afii57795\"] = 0x05b6;\n t[\"afii57796\"] = 0x05bb;\n t[\"afii57797\"] = 0x05b8;\n t[\"afii57798\"] = 0x05b7;\n t[\"afii57799\"] = 0x05b0;\n t[\"afii57800\"] = 0x05b2;\n t[\"afii57801\"] = 0x05b1;\n t[\"afii57802\"] = 0x05b3;\n t[\"afii57803\"] = 0x05c2;\n t[\"afii57804\"] = 0x05c1;\n t[\"afii57806\"] = 0x05b9;\n t[\"afii57807\"] = 0x05bc;\n t[\"afii57839\"] = 0x05bd;\n t[\"afii57841\"] = 0x05bf;\n t[\"afii57842\"] = 0x05c0;\n t[\"afii57929\"] = 0x02bc;\n t[\"afii61248\"] = 0x2105;\n t[\"afii61289\"] = 0x2113;\n t[\"afii61352\"] = 0x2116;\n t[\"afii61573\"] = 0x202c;\n t[\"afii61574\"] = 0x202d;\n t[\"afii61575\"] = 0x202e;\n t[\"afii61664\"] = 0x200c;\n t[\"afii63167\"] = 0x066d;\n t[\"afii64937\"] = 0x02bd;\n t[\"agrave\"] = 0x00e0;\n t[\"agujarati\"] = 0x0a85;\n t[\"agurmukhi\"] = 0x0a05;\n t[\"ahiragana\"] = 0x3042;\n t[\"ahookabove\"] = 0x1ea3;\n t[\"aibengali\"] = 0x0990;\n t[\"aibopomofo\"] = 0x311e;\n t[\"aideva\"] = 0x0910;\n t[\"aiecyrillic\"] = 0x04d5;\n t[\"aigujarati\"] = 0x0a90;\n t[\"aigurmukhi\"] = 0x0a10;\n t[\"aimatragurmukhi\"] = 0x0a48;\n t[\"ainarabic\"] = 0x0639;\n t[\"ainfinalarabic\"] = 0xfeca;\n t[\"aininitialarabic\"] = 0xfecb;\n t[\"ainmedialarabic\"] = 0xfecc;\n t[\"ainvertedbreve\"] = 0x0203;\n t[\"aivowelsignbengali\"] = 0x09c8;\n t[\"aivowelsigndeva\"] = 0x0948;\n t[\"aivowelsigngujarati\"] = 0x0ac8;\n t[\"akatakana\"] = 0x30a2;\n t[\"akatakanahalfwidth\"] = 0xff71;\n t[\"akorean\"] = 0x314f;\n t[\"alef\"] = 0x05d0;\n t[\"alefarabic\"] = 0x0627;\n t[\"alefdageshhebrew\"] = 0xfb30;\n t[\"aleffinalarabic\"] = 0xfe8e;\n t[\"alefhamzaabovearabic\"] = 0x0623;\n t[\"alefhamzaabovefinalarabic\"] = 0xfe84;\n t[\"alefhamzabelowarabic\"] = 0x0625;\n t[\"alefhamzabelowfinalarabic\"] = 0xfe88;\n t[\"alefhebrew\"] = 0x05d0;\n t[\"aleflamedhebrew\"] = 0xfb4f;\n t[\"alefmaddaabovearabic\"] = 0x0622;\n t[\"alefmaddaabovefinalarabic\"] = 0xfe82;\n t[\"alefmaksuraarabic\"] = 0x0649;\n t[\"alefmaksurafinalarabic\"] = 0xfef0;\n t[\"alefmaksurainitialarabic\"] = 0xfef3;\n t[\"alefmaksuramedialarabic\"] = 0xfef4;\n t[\"alefpatahhebrew\"] = 0xfb2e;\n t[\"alefqamatshebrew\"] = 0xfb2f;\n t[\"aleph\"] = 0x2135;\n t[\"allequal\"] = 0x224c;\n t[\"alpha\"] = 0x03b1;\n t[\"alphatonos\"] = 0x03ac;\n t[\"amacron\"] = 0x0101;\n t[\"amonospace\"] = 0xff41;\n t[\"ampersand\"] = 0x0026;\n t[\"ampersandmonospace\"] = 0xff06;\n t[\"ampersandsmall\"] = 0xf726;\n t[\"amsquare\"] = 0x33c2;\n t[\"anbopomofo\"] = 0x3122;\n t[\"angbopomofo\"] = 0x3124;\n t[\"angbracketleft\"] = 0x3008;\n t[\"angbracketright\"] = 0x3009;\n t[\"angkhankhuthai\"] = 0x0e5a;\n t[\"angle\"] = 0x2220;\n t[\"anglebracketleft\"] = 0x3008;\n t[\"anglebracketleftvertical\"] = 0xfe3f;\n t[\"anglebracketright\"] = 0x3009;\n t[\"anglebracketrightvertical\"] = 0xfe40;\n t[\"angleleft\"] = 0x2329;\n t[\"angleright\"] = 0x232a;\n t[\"angstrom\"] = 0x212b;\n t[\"anoteleia\"] = 0x0387;\n t[\"anudattadeva\"] = 0x0952;\n t[\"anusvarabengali\"] = 0x0982;\n t[\"anusvaradeva\"] = 0x0902;\n t[\"anusvaragujarati\"] = 0x0a82;\n t[\"aogonek\"] = 0x0105;\n t[\"apaatosquare\"] = 0x3300;\n t[\"aparen\"] = 0x249c;\n t[\"apostrophearmenian\"] = 0x055a;\n t[\"apostrophemod\"] = 0x02bc;\n t[\"apple\"] = 0xf8ff;\n t[\"approaches\"] = 0x2250;\n t[\"approxequal\"] = 0x2248;\n t[\"approxequalorimage\"] = 0x2252;\n t[\"approximatelyequal\"] = 0x2245;\n t[\"araeaekorean\"] = 0x318e;\n t[\"araeakorean\"] = 0x318d;\n t[\"arc\"] = 0x2312;\n t[\"arighthalfring\"] = 0x1e9a;\n t[\"aring\"] = 0x00e5;\n t[\"aringacute\"] = 0x01fb;\n t[\"aringbelow\"] = 0x1e01;\n t[\"arrowboth\"] = 0x2194;\n t[\"arrowdashdown\"] = 0x21e3;\n t[\"arrowdashleft\"] = 0x21e0;\n t[\"arrowdashright\"] = 0x21e2;\n t[\"arrowdashup\"] = 0x21e1;\n t[\"arrowdblboth\"] = 0x21d4;\n t[\"arrowdbldown\"] = 0x21d3;\n t[\"arrowdblleft\"] = 0x21d0;\n t[\"arrowdblright\"] = 0x21d2;\n t[\"arrowdblup\"] = 0x21d1;\n t[\"arrowdown\"] = 0x2193;\n t[\"arrowdownleft\"] = 0x2199;\n t[\"arrowdownright\"] = 0x2198;\n t[\"arrowdownwhite\"] = 0x21e9;\n t[\"arrowheaddownmod\"] = 0x02c5;\n t[\"arrowheadleftmod\"] = 0x02c2;\n t[\"arrowheadrightmod\"] = 0x02c3;\n t[\"arrowheadupmod\"] = 0x02c4;\n t[\"arrowhorizex\"] = 0xf8e7;\n t[\"arrowleft\"] = 0x2190;\n t[\"arrowleftdbl\"] = 0x21d0;\n t[\"arrowleftdblstroke\"] = 0x21cd;\n t[\"arrowleftoverright\"] = 0x21c6;\n t[\"arrowleftwhite\"] = 0x21e6;\n t[\"arrowright\"] = 0x2192;\n t[\"arrowrightdblstroke\"] = 0x21cf;\n t[\"arrowrightheavy\"] = 0x279e;\n t[\"arrowrightoverleft\"] = 0x21c4;\n t[\"arrowrightwhite\"] = 0x21e8;\n t[\"arrowtableft\"] = 0x21e4;\n t[\"arrowtabright\"] = 0x21e5;\n t[\"arrowup\"] = 0x2191;\n t[\"arrowupdn\"] = 0x2195;\n t[\"arrowupdnbse\"] = 0x21a8;\n t[\"arrowupdownbase\"] = 0x21a8;\n t[\"arrowupleft\"] = 0x2196;\n t[\"arrowupleftofdown\"] = 0x21c5;\n t[\"arrowupright\"] = 0x2197;\n t[\"arrowupwhite\"] = 0x21e7;\n t[\"arrowvertex\"] = 0xf8e6;\n t[\"asciicircum\"] = 0x005e;\n t[\"asciicircummonospace\"] = 0xff3e;\n t[\"asciitilde\"] = 0x007e;\n t[\"asciitildemonospace\"] = 0xff5e;\n t[\"ascript\"] = 0x0251;\n t[\"ascriptturned\"] = 0x0252;\n t[\"asmallhiragana\"] = 0x3041;\n t[\"asmallkatakana\"] = 0x30a1;\n t[\"asmallkatakanahalfwidth\"] = 0xff67;\n t[\"asterisk\"] = 0x002a;\n t[\"asteriskaltonearabic\"] = 0x066d;\n t[\"asteriskarabic\"] = 0x066d;\n t[\"asteriskmath\"] = 0x2217;\n t[\"asteriskmonospace\"] = 0xff0a;\n t[\"asterisksmall\"] = 0xfe61;\n t[\"asterism\"] = 0x2042;\n t[\"asuperior\"] = 0xf6e9;\n t[\"asymptoticallyequal\"] = 0x2243;\n t[\"at\"] = 0x0040;\n t[\"atilde\"] = 0x00e3;\n t[\"atmonospace\"] = 0xff20;\n t[\"atsmall\"] = 0xfe6b;\n t[\"aturned\"] = 0x0250;\n t[\"aubengali\"] = 0x0994;\n t[\"aubopomofo\"] = 0x3120;\n t[\"audeva\"] = 0x0914;\n t[\"augujarati\"] = 0x0a94;\n t[\"augurmukhi\"] = 0x0a14;\n t[\"aulengthmarkbengali\"] = 0x09d7;\n t[\"aumatragurmukhi\"] = 0x0a4c;\n t[\"auvowelsignbengali\"] = 0x09cc;\n t[\"auvowelsigndeva\"] = 0x094c;\n t[\"auvowelsigngujarati\"] = 0x0acc;\n t[\"avagrahadeva\"] = 0x093d;\n t[\"aybarmenian\"] = 0x0561;\n t[\"ayin\"] = 0x05e2;\n t[\"ayinaltonehebrew\"] = 0xfb20;\n t[\"ayinhebrew\"] = 0x05e2;\n t[\"b\"] = 0x0062;\n t[\"babengali\"] = 0x09ac;\n t[\"backslash\"] = 0x005c;\n t[\"backslashmonospace\"] = 0xff3c;\n t[\"badeva\"] = 0x092c;\n t[\"bagujarati\"] = 0x0aac;\n t[\"bagurmukhi\"] = 0x0a2c;\n t[\"bahiragana\"] = 0x3070;\n t[\"bahtthai\"] = 0x0e3f;\n t[\"bakatakana\"] = 0x30d0;\n t[\"bar\"] = 0x007c;\n t[\"barmonospace\"] = 0xff5c;\n t[\"bbopomofo\"] = 0x3105;\n t[\"bcircle\"] = 0x24d1;\n t[\"bdotaccent\"] = 0x1e03;\n t[\"bdotbelow\"] = 0x1e05;\n t[\"beamedsixteenthnotes\"] = 0x266c;\n t[\"because\"] = 0x2235;\n t[\"becyrillic\"] = 0x0431;\n t[\"beharabic\"] = 0x0628;\n t[\"behfinalarabic\"] = 0xfe90;\n t[\"behinitialarabic\"] = 0xfe91;\n t[\"behiragana\"] = 0x3079;\n t[\"behmedialarabic\"] = 0xfe92;\n t[\"behmeeminitialarabic\"] = 0xfc9f;\n t[\"behmeemisolatedarabic\"] = 0xfc08;\n t[\"behnoonfinalarabic\"] = 0xfc6d;\n t[\"bekatakana\"] = 0x30d9;\n t[\"benarmenian\"] = 0x0562;\n t[\"bet\"] = 0x05d1;\n t[\"beta\"] = 0x03b2;\n t[\"betasymbolgreek\"] = 0x03d0;\n t[\"betdagesh\"] = 0xfb31;\n t[\"betdageshhebrew\"] = 0xfb31;\n t[\"bethebrew\"] = 0x05d1;\n t[\"betrafehebrew\"] = 0xfb4c;\n t[\"bhabengali\"] = 0x09ad;\n t[\"bhadeva\"] = 0x092d;\n t[\"bhagujarati\"] = 0x0aad;\n t[\"bhagurmukhi\"] = 0x0a2d;\n t[\"bhook\"] = 0x0253;\n t[\"bihiragana\"] = 0x3073;\n t[\"bikatakana\"] = 0x30d3;\n t[\"bilabialclick\"] = 0x0298;\n t[\"bindigurmukhi\"] = 0x0a02;\n t[\"birusquare\"] = 0x3331;\n t[\"blackcircle\"] = 0x25cf;\n t[\"blackdiamond\"] = 0x25c6;\n t[\"blackdownpointingtriangle\"] = 0x25bc;\n t[\"blackleftpointingpointer\"] = 0x25c4;\n t[\"blackleftpointingtriangle\"] = 0x25c0;\n t[\"blacklenticularbracketleft\"] = 0x3010;\n t[\"blacklenticularbracketleftvertical\"] = 0xfe3b;\n t[\"blacklenticularbracketright\"] = 0x3011;\n t[\"blacklenticularbracketrightvertical\"] = 0xfe3c;\n t[\"blacklowerlefttriangle\"] = 0x25e3;\n t[\"blacklowerrighttriangle\"] = 0x25e2;\n t[\"blackrectangle\"] = 0x25ac;\n t[\"blackrightpointingpointer\"] = 0x25ba;\n t[\"blackrightpointingtriangle\"] = 0x25b6;\n t[\"blacksmallsquare\"] = 0x25aa;\n t[\"blacksmilingface\"] = 0x263b;\n t[\"blacksquare\"] = 0x25a0;\n t[\"blackstar\"] = 0x2605;\n t[\"blackupperlefttriangle\"] = 0x25e4;\n t[\"blackupperrighttriangle\"] = 0x25e5;\n t[\"blackuppointingsmalltriangle\"] = 0x25b4;\n t[\"blackuppointingtriangle\"] = 0x25b2;\n t[\"blank\"] = 0x2423;\n t[\"blinebelow\"] = 0x1e07;\n t[\"block\"] = 0x2588;\n t[\"bmonospace\"] = 0xff42;\n t[\"bobaimaithai\"] = 0x0e1a;\n t[\"bohiragana\"] = 0x307c;\n t[\"bokatakana\"] = 0x30dc;\n t[\"bparen\"] = 0x249d;\n t[\"bqsquare\"] = 0x33c3;\n t[\"braceex\"] = 0xf8f4;\n t[\"braceleft\"] = 0x007b;\n t[\"braceleftbt\"] = 0xf8f3;\n t[\"braceleftmid\"] = 0xf8f2;\n t[\"braceleftmonospace\"] = 0xff5b;\n t[\"braceleftsmall\"] = 0xfe5b;\n t[\"bracelefttp\"] = 0xf8f1;\n t[\"braceleftvertical\"] = 0xfe37;\n t[\"braceright\"] = 0x007d;\n t[\"bracerightbt\"] = 0xf8fe;\n t[\"bracerightmid\"] = 0xf8fd;\n t[\"bracerightmonospace\"] = 0xff5d;\n t[\"bracerightsmall\"] = 0xfe5c;\n t[\"bracerighttp\"] = 0xf8fc;\n t[\"bracerightvertical\"] = 0xfe38;\n t[\"bracketleft\"] = 0x005b;\n t[\"bracketleftbt\"] = 0xf8f0;\n t[\"bracketleftex\"] = 0xf8ef;\n t[\"bracketleftmonospace\"] = 0xff3b;\n t[\"bracketlefttp\"] = 0xf8ee;\n t[\"bracketright\"] = 0x005d;\n t[\"bracketrightbt\"] = 0xf8fb;\n t[\"bracketrightex\"] = 0xf8fa;\n t[\"bracketrightmonospace\"] = 0xff3d;\n t[\"bracketrighttp\"] = 0xf8f9;\n t[\"breve\"] = 0x02d8;\n t[\"brevebelowcmb\"] = 0x032e;\n t[\"brevecmb\"] = 0x0306;\n t[\"breveinvertedbelowcmb\"] = 0x032f;\n t[\"breveinvertedcmb\"] = 0x0311;\n t[\"breveinverteddoublecmb\"] = 0x0361;\n t[\"bridgebelowcmb\"] = 0x032a;\n t[\"bridgeinvertedbelowcmb\"] = 0x033a;\n t[\"brokenbar\"] = 0x00a6;\n t[\"bstroke\"] = 0x0180;\n t[\"bsuperior\"] = 0xf6ea;\n t[\"btopbar\"] = 0x0183;\n t[\"buhiragana\"] = 0x3076;\n t[\"bukatakana\"] = 0x30d6;\n t[\"bullet\"] = 0x2022;\n t[\"bulletinverse\"] = 0x25d8;\n t[\"bulletoperator\"] = 0x2219;\n t[\"bullseye\"] = 0x25ce;\n t[\"c\"] = 0x0063;\n t[\"caarmenian\"] = 0x056e;\n t[\"cabengali\"] = 0x099a;\n t[\"cacute\"] = 0x0107;\n t[\"cadeva\"] = 0x091a;\n t[\"cagujarati\"] = 0x0a9a;\n t[\"cagurmukhi\"] = 0x0a1a;\n t[\"calsquare\"] = 0x3388;\n t[\"candrabindubengali\"] = 0x0981;\n t[\"candrabinducmb\"] = 0x0310;\n t[\"candrabindudeva\"] = 0x0901;\n t[\"candrabindugujarati\"] = 0x0a81;\n t[\"capslock\"] = 0x21ea;\n t[\"careof\"] = 0x2105;\n t[\"caron\"] = 0x02c7;\n t[\"caronbelowcmb\"] = 0x032c;\n t[\"caroncmb\"] = 0x030c;\n t[\"carriagereturn\"] = 0x21b5;\n t[\"cbopomofo\"] = 0x3118;\n t[\"ccaron\"] = 0x010d;\n t[\"ccedilla\"] = 0x00e7;\n t[\"ccedillaacute\"] = 0x1e09;\n t[\"ccircle\"] = 0x24d2;\n t[\"ccircumflex\"] = 0x0109;\n t[\"ccurl\"] = 0x0255;\n t[\"cdot\"] = 0x010b;\n t[\"cdotaccent\"] = 0x010b;\n t[\"cdsquare\"] = 0x33c5;\n t[\"cedilla\"] = 0x00b8;\n t[\"cedillacmb\"] = 0x0327;\n t[\"cent\"] = 0x00a2;\n t[\"centigrade\"] = 0x2103;\n t[\"centinferior\"] = 0xf6df;\n t[\"centmonospace\"] = 0xffe0;\n t[\"centoldstyle\"] = 0xf7a2;\n t[\"centsuperior\"] = 0xf6e0;\n t[\"chaarmenian\"] = 0x0579;\n t[\"chabengali\"] = 0x099b;\n t[\"chadeva\"] = 0x091b;\n t[\"chagujarati\"] = 0x0a9b;\n t[\"chagurmukhi\"] = 0x0a1b;\n t[\"chbopomofo\"] = 0x3114;\n t[\"cheabkhasiancyrillic\"] = 0x04bd;\n t[\"checkmark\"] = 0x2713;\n t[\"checyrillic\"] = 0x0447;\n t[\"chedescenderabkhasiancyrillic\"] = 0x04bf;\n t[\"chedescendercyrillic\"] = 0x04b7;\n t[\"chedieresiscyrillic\"] = 0x04f5;\n t[\"cheharmenian\"] = 0x0573;\n t[\"chekhakassiancyrillic\"] = 0x04cc;\n t[\"cheverticalstrokecyrillic\"] = 0x04b9;\n t[\"chi\"] = 0x03c7;\n t[\"chieuchacirclekorean\"] = 0x3277;\n t[\"chieuchaparenkorean\"] = 0x3217;\n t[\"chieuchcirclekorean\"] = 0x3269;\n t[\"chieuchkorean\"] = 0x314a;\n t[\"chieuchparenkorean\"] = 0x3209;\n t[\"chochangthai\"] = 0x0e0a;\n t[\"chochanthai\"] = 0x0e08;\n t[\"chochingthai\"] = 0x0e09;\n t[\"chochoethai\"] = 0x0e0c;\n t[\"chook\"] = 0x0188;\n t[\"cieucacirclekorean\"] = 0x3276;\n t[\"cieucaparenkorean\"] = 0x3216;\n t[\"cieuccirclekorean\"] = 0x3268;\n t[\"cieuckorean\"] = 0x3148;\n t[\"cieucparenkorean\"] = 0x3208;\n t[\"cieucuparenkorean\"] = 0x321c;\n t[\"circle\"] = 0x25cb;\n t[\"circlecopyrt\"] = 0x00a9;\n t[\"circlemultiply\"] = 0x2297;\n t[\"circleot\"] = 0x2299;\n t[\"circleplus\"] = 0x2295;\n t[\"circlepostalmark\"] = 0x3036;\n t[\"circlewithlefthalfblack\"] = 0x25d0;\n t[\"circlewithrighthalfblack\"] = 0x25d1;\n t[\"circumflex\"] = 0x02c6;\n t[\"circumflexbelowcmb\"] = 0x032d;\n t[\"circumflexcmb\"] = 0x0302;\n t[\"clear\"] = 0x2327;\n t[\"clickalveolar\"] = 0x01c2;\n t[\"clickdental\"] = 0x01c0;\n t[\"clicklateral\"] = 0x01c1;\n t[\"clickretroflex\"] = 0x01c3;\n t[\"club\"] = 0x2663;\n t[\"clubsuitblack\"] = 0x2663;\n t[\"clubsuitwhite\"] = 0x2667;\n t[\"cmcubedsquare\"] = 0x33a4;\n t[\"cmonospace\"] = 0xff43;\n t[\"cmsquaredsquare\"] = 0x33a0;\n t[\"coarmenian\"] = 0x0581;\n t[\"colon\"] = 0x003a;\n t[\"colonmonetary\"] = 0x20a1;\n t[\"colonmonospace\"] = 0xff1a;\n t[\"colonsign\"] = 0x20a1;\n t[\"colonsmall\"] = 0xfe55;\n t[\"colontriangularhalfmod\"] = 0x02d1;\n t[\"colontriangularmod\"] = 0x02d0;\n t[\"comma\"] = 0x002c;\n t[\"commaabovecmb\"] = 0x0313;\n t[\"commaaboverightcmb\"] = 0x0315;\n t[\"commaaccent\"] = 0xf6c3;\n t[\"commaarabic\"] = 0x060c;\n t[\"commaarmenian\"] = 0x055d;\n t[\"commainferior\"] = 0xf6e1;\n t[\"commamonospace\"] = 0xff0c;\n t[\"commareversedabovecmb\"] = 0x0314;\n t[\"commareversedmod\"] = 0x02bd;\n t[\"commasmall\"] = 0xfe50;\n t[\"commasuperior\"] = 0xf6e2;\n t[\"commaturnedabovecmb\"] = 0x0312;\n t[\"commaturnedmod\"] = 0x02bb;\n t[\"compass\"] = 0x263c;\n t[\"congruent\"] = 0x2245;\n t[\"contourintegral\"] = 0x222e;\n t[\"control\"] = 0x2303;\n t[\"controlACK\"] = 0x0006;\n t[\"controlBEL\"] = 0x0007;\n t[\"controlBS\"] = 0x0008;\n t[\"controlCAN\"] = 0x0018;\n t[\"controlCR\"] = 0x000d;\n t[\"controlDC1\"] = 0x0011;\n t[\"controlDC2\"] = 0x0012;\n t[\"controlDC3\"] = 0x0013;\n t[\"controlDC4\"] = 0x0014;\n t[\"controlDEL\"] = 0x007f;\n t[\"controlDLE\"] = 0x0010;\n t[\"controlEM\"] = 0x0019;\n t[\"controlENQ\"] = 0x0005;\n t[\"controlEOT\"] = 0x0004;\n t[\"controlESC\"] = 0x001b;\n t[\"controlETB\"] = 0x0017;\n t[\"controlETX\"] = 0x0003;\n t[\"controlFF\"] = 0x000c;\n t[\"controlFS\"] = 0x001c;\n t[\"controlGS\"] = 0x001d;\n t[\"controlHT\"] = 0x0009;\n t[\"controlLF\"] = 0x000a;\n t[\"controlNAK\"] = 0x0015;\n t[\"controlNULL\"] = 0x0000;\n t[\"controlRS\"] = 0x001e;\n t[\"controlSI\"] = 0x000f;\n t[\"controlSO\"] = 0x000e;\n t[\"controlSOT\"] = 0x0002;\n t[\"controlSTX\"] = 0x0001;\n t[\"controlSUB\"] = 0x001a;\n t[\"controlSYN\"] = 0x0016;\n t[\"controlUS\"] = 0x001f;\n t[\"controlVT\"] = 0x000b;\n t[\"copyright\"] = 0x00a9;\n t[\"copyrightsans\"] = 0xf8e9;\n t[\"copyrightserif\"] = 0xf6d9;\n t[\"cornerbracketleft\"] = 0x300c;\n t[\"cornerbracketlefthalfwidth\"] = 0xff62;\n t[\"cornerbracketleftvertical\"] = 0xfe41;\n t[\"cornerbracketright\"] = 0x300d;\n t[\"cornerbracketrighthalfwidth\"] = 0xff63;\n t[\"cornerbracketrightvertical\"] = 0xfe42;\n t[\"corporationsquare\"] = 0x337f;\n t[\"cosquare\"] = 0x33c7;\n t[\"coverkgsquare\"] = 0x33c6;\n t[\"cparen\"] = 0x249e;\n t[\"cruzeiro\"] = 0x20a2;\n t[\"cstretched\"] = 0x0297;\n t[\"curlyand\"] = 0x22cf;\n t[\"curlyor\"] = 0x22ce;\n t[\"currency\"] = 0x00a4;\n t[\"cyrBreve\"] = 0xf6d1;\n t[\"cyrFlex\"] = 0xf6d2;\n t[\"cyrbreve\"] = 0xf6d4;\n t[\"cyrflex\"] = 0xf6d5;\n t[\"d\"] = 0x0064;\n t[\"daarmenian\"] = 0x0564;\n t[\"dabengali\"] = 0x09a6;\n t[\"dadarabic\"] = 0x0636;\n t[\"dadeva\"] = 0x0926;\n t[\"dadfinalarabic\"] = 0xfebe;\n t[\"dadinitialarabic\"] = 0xfebf;\n t[\"dadmedialarabic\"] = 0xfec0;\n t[\"dagesh\"] = 0x05bc;\n t[\"dageshhebrew\"] = 0x05bc;\n t[\"dagger\"] = 0x2020;\n t[\"daggerdbl\"] = 0x2021;\n t[\"dagujarati\"] = 0x0aa6;\n t[\"dagurmukhi\"] = 0x0a26;\n t[\"dahiragana\"] = 0x3060;\n t[\"dakatakana\"] = 0x30c0;\n t[\"dalarabic\"] = 0x062f;\n t[\"dalet\"] = 0x05d3;\n t[\"daletdagesh\"] = 0xfb33;\n t[\"daletdageshhebrew\"] = 0xfb33;\n t[\"dalethebrew\"] = 0x05d3;\n t[\"dalfinalarabic\"] = 0xfeaa;\n t[\"dammaarabic\"] = 0x064f;\n t[\"dammalowarabic\"] = 0x064f;\n t[\"dammatanaltonearabic\"] = 0x064c;\n t[\"dammatanarabic\"] = 0x064c;\n t[\"danda\"] = 0x0964;\n t[\"dargahebrew\"] = 0x05a7;\n t[\"dargalefthebrew\"] = 0x05a7;\n t[\"dasiapneumatacyrilliccmb\"] = 0x0485;\n t[\"dblGrave\"] = 0xf6d3;\n t[\"dblanglebracketleft\"] = 0x300a;\n t[\"dblanglebracketleftvertical\"] = 0xfe3d;\n t[\"dblanglebracketright\"] = 0x300b;\n t[\"dblanglebracketrightvertical\"] = 0xfe3e;\n t[\"dblarchinvertedbelowcmb\"] = 0x032b;\n t[\"dblarrowleft\"] = 0x21d4;\n t[\"dblarrowright\"] = 0x21d2;\n t[\"dbldanda\"] = 0x0965;\n t[\"dblgrave\"] = 0xf6d6;\n t[\"dblgravecmb\"] = 0x030f;\n t[\"dblintegral\"] = 0x222c;\n t[\"dbllowline\"] = 0x2017;\n t[\"dbllowlinecmb\"] = 0x0333;\n t[\"dbloverlinecmb\"] = 0x033f;\n t[\"dblprimemod\"] = 0x02ba;\n t[\"dblverticalbar\"] = 0x2016;\n t[\"dblverticallineabovecmb\"] = 0x030e;\n t[\"dbopomofo\"] = 0x3109;\n t[\"dbsquare\"] = 0x33c8;\n t[\"dcaron\"] = 0x010f;\n t[\"dcedilla\"] = 0x1e11;\n t[\"dcircle\"] = 0x24d3;\n t[\"dcircumflexbelow\"] = 0x1e13;\n t[\"dcroat\"] = 0x0111;\n t[\"ddabengali\"] = 0x09a1;\n t[\"ddadeva\"] = 0x0921;\n t[\"ddagujarati\"] = 0x0aa1;\n t[\"ddagurmukhi\"] = 0x0a21;\n t[\"ddalarabic\"] = 0x0688;\n t[\"ddalfinalarabic\"] = 0xfb89;\n t[\"dddhadeva\"] = 0x095c;\n t[\"ddhabengali\"] = 0x09a2;\n t[\"ddhadeva\"] = 0x0922;\n t[\"ddhagujarati\"] = 0x0aa2;\n t[\"ddhagurmukhi\"] = 0x0a22;\n t[\"ddotaccent\"] = 0x1e0b;\n t[\"ddotbelow\"] = 0x1e0d;\n t[\"decimalseparatorarabic\"] = 0x066b;\n t[\"decimalseparatorpersian\"] = 0x066b;\n t[\"decyrillic\"] = 0x0434;\n t[\"degree\"] = 0x00b0;\n t[\"dehihebrew\"] = 0x05ad;\n t[\"dehiragana\"] = 0x3067;\n t[\"deicoptic\"] = 0x03ef;\n t[\"dekatakana\"] = 0x30c7;\n t[\"deleteleft\"] = 0x232b;\n t[\"deleteright\"] = 0x2326;\n t[\"delta\"] = 0x03b4;\n t[\"deltaturned\"] = 0x018d;\n t[\"denominatorminusonenumeratorbengali\"] = 0x09f8;\n t[\"dezh\"] = 0x02a4;\n t[\"dhabengali\"] = 0x09a7;\n t[\"dhadeva\"] = 0x0927;\n t[\"dhagujarati\"] = 0x0aa7;\n t[\"dhagurmukhi\"] = 0x0a27;\n t[\"dhook\"] = 0x0257;\n t[\"dialytikatonos\"] = 0x0385;\n t[\"dialytikatonoscmb\"] = 0x0344;\n t[\"diamond\"] = 0x2666;\n t[\"diamondsuitwhite\"] = 0x2662;\n t[\"dieresis\"] = 0x00a8;\n t[\"dieresisacute\"] = 0xf6d7;\n t[\"dieresisbelowcmb\"] = 0x0324;\n t[\"dieresiscmb\"] = 0x0308;\n t[\"dieresisgrave\"] = 0xf6d8;\n t[\"dieresistonos\"] = 0x0385;\n t[\"dihiragana\"] = 0x3062;\n t[\"dikatakana\"] = 0x30c2;\n t[\"dittomark\"] = 0x3003;\n t[\"divide\"] = 0x00f7;\n t[\"divides\"] = 0x2223;\n t[\"divisionslash\"] = 0x2215;\n t[\"djecyrillic\"] = 0x0452;\n t[\"dkshade\"] = 0x2593;\n t[\"dlinebelow\"] = 0x1e0f;\n t[\"dlsquare\"] = 0x3397;\n t[\"dmacron\"] = 0x0111;\n t[\"dmonospace\"] = 0xff44;\n t[\"dnblock\"] = 0x2584;\n t[\"dochadathai\"] = 0x0e0e;\n t[\"dodekthai\"] = 0x0e14;\n t[\"dohiragana\"] = 0x3069;\n t[\"dokatakana\"] = 0x30c9;\n t[\"dollar\"] = 0x0024;\n t[\"dollarinferior\"] = 0xf6e3;\n t[\"dollarmonospace\"] = 0xff04;\n t[\"dollaroldstyle\"] = 0xf724;\n t[\"dollarsmall\"] = 0xfe69;\n t[\"dollarsuperior\"] = 0xf6e4;\n t[\"dong\"] = 0x20ab;\n t[\"dorusquare\"] = 0x3326;\n t[\"dotaccent\"] = 0x02d9;\n t[\"dotaccentcmb\"] = 0x0307;\n t[\"dotbelowcmb\"] = 0x0323;\n t[\"dotbelowcomb\"] = 0x0323;\n t[\"dotkatakana\"] = 0x30fb;\n t[\"dotlessi\"] = 0x0131;\n t[\"dotlessj\"] = 0xf6be;\n t[\"dotlessjstrokehook\"] = 0x0284;\n t[\"dotmath\"] = 0x22c5;\n t[\"dottedcircle\"] = 0x25cc;\n t[\"doubleyodpatah\"] = 0xfb1f;\n t[\"doubleyodpatahhebrew\"] = 0xfb1f;\n t[\"downtackbelowcmb\"] = 0x031e;\n t[\"downtackmod\"] = 0x02d5;\n t[\"dparen\"] = 0x249f;\n t[\"dsuperior\"] = 0xf6eb;\n t[\"dtail\"] = 0x0256;\n t[\"dtopbar\"] = 0x018c;\n t[\"duhiragana\"] = 0x3065;\n t[\"dukatakana\"] = 0x30c5;\n t[\"dz\"] = 0x01f3;\n t[\"dzaltone\"] = 0x02a3;\n t[\"dzcaron\"] = 0x01c6;\n t[\"dzcurl\"] = 0x02a5;\n t[\"dzeabkhasiancyrillic\"] = 0x04e1;\n t[\"dzecyrillic\"] = 0x0455;\n t[\"dzhecyrillic\"] = 0x045f;\n t[\"e\"] = 0x0065;\n t[\"eacute\"] = 0x00e9;\n t[\"earth\"] = 0x2641;\n t[\"ebengali\"] = 0x098f;\n t[\"ebopomofo\"] = 0x311c;\n t[\"ebreve\"] = 0x0115;\n t[\"ecandradeva\"] = 0x090d;\n t[\"ecandragujarati\"] = 0x0a8d;\n t[\"ecandravowelsigndeva\"] = 0x0945;\n t[\"ecandravowelsigngujarati\"] = 0x0ac5;\n t[\"ecaron\"] = 0x011b;\n t[\"ecedillabreve\"] = 0x1e1d;\n t[\"echarmenian\"] = 0x0565;\n t[\"echyiwnarmenian\"] = 0x0587;\n t[\"ecircle\"] = 0x24d4;\n t[\"ecircumflex\"] = 0x00ea;\n t[\"ecircumflexacute\"] = 0x1ebf;\n t[\"ecircumflexbelow\"] = 0x1e19;\n t[\"ecircumflexdotbelow\"] = 0x1ec7;\n t[\"ecircumflexgrave\"] = 0x1ec1;\n t[\"ecircumflexhookabove\"] = 0x1ec3;\n t[\"ecircumflextilde\"] = 0x1ec5;\n t[\"ecyrillic\"] = 0x0454;\n t[\"edblgrave\"] = 0x0205;\n t[\"edeva\"] = 0x090f;\n t[\"edieresis\"] = 0x00eb;\n t[\"edot\"] = 0x0117;\n t[\"edotaccent\"] = 0x0117;\n t[\"edotbelow\"] = 0x1eb9;\n t[\"eegurmukhi\"] = 0x0a0f;\n t[\"eematragurmukhi\"] = 0x0a47;\n t[\"efcyrillic\"] = 0x0444;\n t[\"egrave\"] = 0x00e8;\n t[\"egujarati\"] = 0x0a8f;\n t[\"eharmenian\"] = 0x0567;\n t[\"ehbopomofo\"] = 0x311d;\n t[\"ehiragana\"] = 0x3048;\n t[\"ehookabove\"] = 0x1ebb;\n t[\"eibopomofo\"] = 0x311f;\n t[\"eight\"] = 0x0038;\n t[\"eightarabic\"] = 0x0668;\n t[\"eightbengali\"] = 0x09ee;\n t[\"eightcircle\"] = 0x2467;\n t[\"eightcircleinversesansserif\"] = 0x2791;\n t[\"eightdeva\"] = 0x096e;\n t[\"eighteencircle\"] = 0x2471;\n t[\"eighteenparen\"] = 0x2485;\n t[\"eighteenperiod\"] = 0x2499;\n t[\"eightgujarati\"] = 0x0aee;\n t[\"eightgurmukhi\"] = 0x0a6e;\n t[\"eighthackarabic\"] = 0x0668;\n t[\"eighthangzhou\"] = 0x3028;\n t[\"eighthnotebeamed\"] = 0x266b;\n t[\"eightideographicparen\"] = 0x3227;\n t[\"eightinferior\"] = 0x2088;\n t[\"eightmonospace\"] = 0xff18;\n t[\"eightoldstyle\"] = 0xf738;\n t[\"eightparen\"] = 0x247b;\n t[\"eightperiod\"] = 0x248f;\n t[\"eightpersian\"] = 0x06f8;\n t[\"eightroman\"] = 0x2177;\n t[\"eightsuperior\"] = 0x2078;\n t[\"eightthai\"] = 0x0e58;\n t[\"einvertedbreve\"] = 0x0207;\n t[\"eiotifiedcyrillic\"] = 0x0465;\n t[\"ekatakana\"] = 0x30a8;\n t[\"ekatakanahalfwidth\"] = 0xff74;\n t[\"ekonkargurmukhi\"] = 0x0a74;\n t[\"ekorean\"] = 0x3154;\n t[\"elcyrillic\"] = 0x043b;\n t[\"element\"] = 0x2208;\n t[\"elevencircle\"] = 0x246a;\n t[\"elevenparen\"] = 0x247e;\n t[\"elevenperiod\"] = 0x2492;\n t[\"elevenroman\"] = 0x217a;\n t[\"ellipsis\"] = 0x2026;\n t[\"ellipsisvertical\"] = 0x22ee;\n t[\"emacron\"] = 0x0113;\n t[\"emacronacute\"] = 0x1e17;\n t[\"emacrongrave\"] = 0x1e15;\n t[\"emcyrillic\"] = 0x043c;\n t[\"emdash\"] = 0x2014;\n t[\"emdashvertical\"] = 0xfe31;\n t[\"emonospace\"] = 0xff45;\n t[\"emphasismarkarmenian\"] = 0x055b;\n t[\"emptyset\"] = 0x2205;\n t[\"enbopomofo\"] = 0x3123;\n t[\"encyrillic\"] = 0x043d;\n t[\"endash\"] = 0x2013;\n t[\"endashvertical\"] = 0xfe32;\n t[\"endescendercyrillic\"] = 0x04a3;\n t[\"eng\"] = 0x014b;\n t[\"engbopomofo\"] = 0x3125;\n t[\"enghecyrillic\"] = 0x04a5;\n t[\"enhookcyrillic\"] = 0x04c8;\n t[\"enspace\"] = 0x2002;\n t[\"eogonek\"] = 0x0119;\n t[\"eokorean\"] = 0x3153;\n t[\"eopen\"] = 0x025b;\n t[\"eopenclosed\"] = 0x029a;\n t[\"eopenreversed\"] = 0x025c;\n t[\"eopenreversedclosed\"] = 0x025e;\n t[\"eopenreversedhook\"] = 0x025d;\n t[\"eparen\"] = 0x24a0;\n t[\"epsilon\"] = 0x03b5;\n t[\"epsilontonos\"] = 0x03ad;\n t[\"equal\"] = 0x003d;\n t[\"equalmonospace\"] = 0xff1d;\n t[\"equalsmall\"] = 0xfe66;\n t[\"equalsuperior\"] = 0x207c;\n t[\"equivalence\"] = 0x2261;\n t[\"erbopomofo\"] = 0x3126;\n t[\"ercyrillic\"] = 0x0440;\n t[\"ereversed\"] = 0x0258;\n t[\"ereversedcyrillic\"] = 0x044d;\n t[\"escyrillic\"] = 0x0441;\n t[\"esdescendercyrillic\"] = 0x04ab;\n t[\"esh\"] = 0x0283;\n t[\"eshcurl\"] = 0x0286;\n t[\"eshortdeva\"] = 0x090e;\n t[\"eshortvowelsigndeva\"] = 0x0946;\n t[\"eshreversedloop\"] = 0x01aa;\n t[\"eshsquatreversed\"] = 0x0285;\n t[\"esmallhiragana\"] = 0x3047;\n t[\"esmallkatakana\"] = 0x30a7;\n t[\"esmallkatakanahalfwidth\"] = 0xff6a;\n t[\"estimated\"] = 0x212e;\n t[\"esuperior\"] = 0xf6ec;\n t[\"eta\"] = 0x03b7;\n t[\"etarmenian\"] = 0x0568;\n t[\"etatonos\"] = 0x03ae;\n t[\"eth\"] = 0x00f0;\n t[\"etilde\"] = 0x1ebd;\n t[\"etildebelow\"] = 0x1e1b;\n t[\"etnahtafoukhhebrew\"] = 0x0591;\n t[\"etnahtafoukhlefthebrew\"] = 0x0591;\n t[\"etnahtahebrew\"] = 0x0591;\n t[\"etnahtalefthebrew\"] = 0x0591;\n t[\"eturned\"] = 0x01dd;\n t[\"eukorean\"] = 0x3161;\n t[\"euro\"] = 0x20ac;\n t[\"evowelsignbengali\"] = 0x09c7;\n t[\"evowelsigndeva\"] = 0x0947;\n t[\"evowelsigngujarati\"] = 0x0ac7;\n t[\"exclam\"] = 0x0021;\n t[\"exclamarmenian\"] = 0x055c;\n t[\"exclamdbl\"] = 0x203c;\n t[\"exclamdown\"] = 0x00a1;\n t[\"exclamdownsmall\"] = 0xf7a1;\n t[\"exclammonospace\"] = 0xff01;\n t[\"exclamsmall\"] = 0xf721;\n t[\"existential\"] = 0x2203;\n t[\"ezh\"] = 0x0292;\n t[\"ezhcaron\"] = 0x01ef;\n t[\"ezhcurl\"] = 0x0293;\n t[\"ezhreversed\"] = 0x01b9;\n t[\"ezhtail\"] = 0x01ba;\n t[\"f\"] = 0x0066;\n t[\"fadeva\"] = 0x095e;\n t[\"fagurmukhi\"] = 0x0a5e;\n t[\"fahrenheit\"] = 0x2109;\n t[\"fathaarabic\"] = 0x064e;\n t[\"fathalowarabic\"] = 0x064e;\n t[\"fathatanarabic\"] = 0x064b;\n t[\"fbopomofo\"] = 0x3108;\n t[\"fcircle\"] = 0x24d5;\n t[\"fdotaccent\"] = 0x1e1f;\n t[\"feharabic\"] = 0x0641;\n t[\"feharmenian\"] = 0x0586;\n t[\"fehfinalarabic\"] = 0xfed2;\n t[\"fehinitialarabic\"] = 0xfed3;\n t[\"fehmedialarabic\"] = 0xfed4;\n t[\"feicoptic\"] = 0x03e5;\n t[\"female\"] = 0x2640;\n t[\"ff\"] = 0xfb00;\n t[\"f_f\"] = 0xfb00;\n t[\"ffi\"] = 0xfb03;\n t[\"ffl\"] = 0xfb04;\n t[\"fi\"] = 0xfb01;\n t[\"fifteencircle\"] = 0x246e;\n t[\"fifteenparen\"] = 0x2482;\n t[\"fifteenperiod\"] = 0x2496;\n t[\"figuredash\"] = 0x2012;\n t[\"filledbox\"] = 0x25a0;\n t[\"filledrect\"] = 0x25ac;\n t[\"finalkaf\"] = 0x05da;\n t[\"finalkafdagesh\"] = 0xfb3a;\n t[\"finalkafdageshhebrew\"] = 0xfb3a;\n t[\"finalkafhebrew\"] = 0x05da;\n t[\"finalmem\"] = 0x05dd;\n t[\"finalmemhebrew\"] = 0x05dd;\n t[\"finalnun\"] = 0x05df;\n t[\"finalnunhebrew\"] = 0x05df;\n t[\"finalpe\"] = 0x05e3;\n t[\"finalpehebrew\"] = 0x05e3;\n t[\"finaltsadi\"] = 0x05e5;\n t[\"finaltsadihebrew\"] = 0x05e5;\n t[\"firsttonechinese\"] = 0x02c9;\n t[\"fisheye\"] = 0x25c9;\n t[\"fitacyrillic\"] = 0x0473;\n t[\"five\"] = 0x0035;\n t[\"fivearabic\"] = 0x0665;\n t[\"fivebengali\"] = 0x09eb;\n t[\"fivecircle\"] = 0x2464;\n t[\"fivecircleinversesansserif\"] = 0x278e;\n t[\"fivedeva\"] = 0x096b;\n t[\"fiveeighths\"] = 0x215d;\n t[\"fivegujarati\"] = 0x0aeb;\n t[\"fivegurmukhi\"] = 0x0a6b;\n t[\"fivehackarabic\"] = 0x0665;\n t[\"fivehangzhou\"] = 0x3025;\n t[\"fiveideographicparen\"] = 0x3224;\n t[\"fiveinferior\"] = 0x2085;\n t[\"fivemonospace\"] = 0xff15;\n t[\"fiveoldstyle\"] = 0xf735;\n t[\"fiveparen\"] = 0x2478;\n t[\"fiveperiod\"] = 0x248c;\n t[\"fivepersian\"] = 0x06f5;\n t[\"fiveroman\"] = 0x2174;\n t[\"fivesuperior\"] = 0x2075;\n t[\"fivethai\"] = 0x0e55;\n t[\"fl\"] = 0xfb02;\n t[\"florin\"] = 0x0192;\n t[\"fmonospace\"] = 0xff46;\n t[\"fmsquare\"] = 0x3399;\n t[\"fofanthai\"] = 0x0e1f;\n t[\"fofathai\"] = 0x0e1d;\n t[\"fongmanthai\"] = 0x0e4f;\n t[\"forall\"] = 0x2200;\n t[\"four\"] = 0x0034;\n t[\"fourarabic\"] = 0x0664;\n t[\"fourbengali\"] = 0x09ea;\n t[\"fourcircle\"] = 0x2463;\n t[\"fourcircleinversesansserif\"] = 0x278d;\n t[\"fourdeva\"] = 0x096a;\n t[\"fourgujarati\"] = 0x0aea;\n t[\"fourgurmukhi\"] = 0x0a6a;\n t[\"fourhackarabic\"] = 0x0664;\n t[\"fourhangzhou\"] = 0x3024;\n t[\"fourideographicparen\"] = 0x3223;\n t[\"fourinferior\"] = 0x2084;\n t[\"fourmonospace\"] = 0xff14;\n t[\"fournumeratorbengali\"] = 0x09f7;\n t[\"fouroldstyle\"] = 0xf734;\n t[\"fourparen\"] = 0x2477;\n t[\"fourperiod\"] = 0x248b;\n t[\"fourpersian\"] = 0x06f4;\n t[\"fourroman\"] = 0x2173;\n t[\"foursuperior\"] = 0x2074;\n t[\"fourteencircle\"] = 0x246d;\n t[\"fourteenparen\"] = 0x2481;\n t[\"fourteenperiod\"] = 0x2495;\n t[\"fourthai\"] = 0x0e54;\n t[\"fourthtonechinese\"] = 0x02cb;\n t[\"fparen\"] = 0x24a1;\n t[\"fraction\"] = 0x2044;\n t[\"franc\"] = 0x20a3;\n t[\"g\"] = 0x0067;\n t[\"gabengali\"] = 0x0997;\n t[\"gacute\"] = 0x01f5;\n t[\"gadeva\"] = 0x0917;\n t[\"gafarabic\"] = 0x06af;\n t[\"gaffinalarabic\"] = 0xfb93;\n t[\"gafinitialarabic\"] = 0xfb94;\n t[\"gafmedialarabic\"] = 0xfb95;\n t[\"gagujarati\"] = 0x0a97;\n t[\"gagurmukhi\"] = 0x0a17;\n t[\"gahiragana\"] = 0x304c;\n t[\"gakatakana\"] = 0x30ac;\n t[\"gamma\"] = 0x03b3;\n t[\"gammalatinsmall\"] = 0x0263;\n t[\"gammasuperior\"] = 0x02e0;\n t[\"gangiacoptic\"] = 0x03eb;\n t[\"gbopomofo\"] = 0x310d;\n t[\"gbreve\"] = 0x011f;\n t[\"gcaron\"] = 0x01e7;\n t[\"gcedilla\"] = 0x0123;\n t[\"gcircle\"] = 0x24d6;\n t[\"gcircumflex\"] = 0x011d;\n t[\"gcommaaccent\"] = 0x0123;\n t[\"gdot\"] = 0x0121;\n t[\"gdotaccent\"] = 0x0121;\n t[\"gecyrillic\"] = 0x0433;\n t[\"gehiragana\"] = 0x3052;\n t[\"gekatakana\"] = 0x30b2;\n t[\"geometricallyequal\"] = 0x2251;\n t[\"gereshaccenthebrew\"] = 0x059c;\n t[\"gereshhebrew\"] = 0x05f3;\n t[\"gereshmuqdamhebrew\"] = 0x059d;\n t[\"germandbls\"] = 0x00df;\n t[\"gershayimaccenthebrew\"] = 0x059e;\n t[\"gershayimhebrew\"] = 0x05f4;\n t[\"getamark\"] = 0x3013;\n t[\"ghabengali\"] = 0x0998;\n t[\"ghadarmenian\"] = 0x0572;\n t[\"ghadeva\"] = 0x0918;\n t[\"ghagujarati\"] = 0x0a98;\n t[\"ghagurmukhi\"] = 0x0a18;\n t[\"ghainarabic\"] = 0x063a;\n t[\"ghainfinalarabic\"] = 0xfece;\n t[\"ghaininitialarabic\"] = 0xfecf;\n t[\"ghainmedialarabic\"] = 0xfed0;\n t[\"ghemiddlehookcyrillic\"] = 0x0495;\n t[\"ghestrokecyrillic\"] = 0x0493;\n t[\"gheupturncyrillic\"] = 0x0491;\n t[\"ghhadeva\"] = 0x095a;\n t[\"ghhagurmukhi\"] = 0x0a5a;\n t[\"ghook\"] = 0x0260;\n t[\"ghzsquare\"] = 0x3393;\n t[\"gihiragana\"] = 0x304e;\n t[\"gikatakana\"] = 0x30ae;\n t[\"gimarmenian\"] = 0x0563;\n t[\"gimel\"] = 0x05d2;\n t[\"gimeldagesh\"] = 0xfb32;\n t[\"gimeldageshhebrew\"] = 0xfb32;\n t[\"gimelhebrew\"] = 0x05d2;\n t[\"gjecyrillic\"] = 0x0453;\n t[\"glottalinvertedstroke\"] = 0x01be;\n t[\"glottalstop\"] = 0x0294;\n t[\"glottalstopinverted\"] = 0x0296;\n t[\"glottalstopmod\"] = 0x02c0;\n t[\"glottalstopreversed\"] = 0x0295;\n t[\"glottalstopreversedmod\"] = 0x02c1;\n t[\"glottalstopreversedsuperior\"] = 0x02e4;\n t[\"glottalstopstroke\"] = 0x02a1;\n t[\"glottalstopstrokereversed\"] = 0x02a2;\n t[\"gmacron\"] = 0x1e21;\n t[\"gmonospace\"] = 0xff47;\n t[\"gohiragana\"] = 0x3054;\n t[\"gokatakana\"] = 0x30b4;\n t[\"gparen\"] = 0x24a2;\n t[\"gpasquare\"] = 0x33ac;\n t[\"gradient\"] = 0x2207;\n t[\"grave\"] = 0x0060;\n t[\"gravebelowcmb\"] = 0x0316;\n t[\"gravecmb\"] = 0x0300;\n t[\"gravecomb\"] = 0x0300;\n t[\"gravedeva\"] = 0x0953;\n t[\"gravelowmod\"] = 0x02ce;\n t[\"gravemonospace\"] = 0xff40;\n t[\"gravetonecmb\"] = 0x0340;\n t[\"greater\"] = 0x003e;\n t[\"greaterequal\"] = 0x2265;\n t[\"greaterequalorless\"] = 0x22db;\n t[\"greatermonospace\"] = 0xff1e;\n t[\"greaterorequivalent\"] = 0x2273;\n t[\"greaterorless\"] = 0x2277;\n t[\"greateroverequal\"] = 0x2267;\n t[\"greatersmall\"] = 0xfe65;\n t[\"gscript\"] = 0x0261;\n t[\"gstroke\"] = 0x01e5;\n t[\"guhiragana\"] = 0x3050;\n t[\"guillemotleft\"] = 0x00ab;\n t[\"guillemotright\"] = 0x00bb;\n t[\"guilsinglleft\"] = 0x2039;\n t[\"guilsinglright\"] = 0x203a;\n t[\"gukatakana\"] = 0x30b0;\n t[\"guramusquare\"] = 0x3318;\n t[\"gysquare\"] = 0x33c9;\n t[\"h\"] = 0x0068;\n t[\"haabkhasiancyrillic\"] = 0x04a9;\n t[\"haaltonearabic\"] = 0x06c1;\n t[\"habengali\"] = 0x09b9;\n t[\"hadescendercyrillic\"] = 0x04b3;\n t[\"hadeva\"] = 0x0939;\n t[\"hagujarati\"] = 0x0ab9;\n t[\"hagurmukhi\"] = 0x0a39;\n t[\"haharabic\"] = 0x062d;\n t[\"hahfinalarabic\"] = 0xfea2;\n t[\"hahinitialarabic\"] = 0xfea3;\n t[\"hahiragana\"] = 0x306f;\n t[\"hahmedialarabic\"] = 0xfea4;\n t[\"haitusquare\"] = 0x332a;\n t[\"hakatakana\"] = 0x30cf;\n t[\"hakatakanahalfwidth\"] = 0xff8a;\n t[\"halantgurmukhi\"] = 0x0a4d;\n t[\"hamzaarabic\"] = 0x0621;\n t[\"hamzalowarabic\"] = 0x0621;\n t[\"hangulfiller\"] = 0x3164;\n t[\"hardsigncyrillic\"] = 0x044a;\n t[\"harpoonleftbarbup\"] = 0x21bc;\n t[\"harpoonrightbarbup\"] = 0x21c0;\n t[\"hasquare\"] = 0x33ca;\n t[\"hatafpatah\"] = 0x05b2;\n t[\"hatafpatah16\"] = 0x05b2;\n t[\"hatafpatah23\"] = 0x05b2;\n t[\"hatafpatah2f\"] = 0x05b2;\n t[\"hatafpatahhebrew\"] = 0x05b2;\n t[\"hatafpatahnarrowhebrew\"] = 0x05b2;\n t[\"hatafpatahquarterhebrew\"] = 0x05b2;\n t[\"hatafpatahwidehebrew\"] = 0x05b2;\n t[\"hatafqamats\"] = 0x05b3;\n t[\"hatafqamats1b\"] = 0x05b3;\n t[\"hatafqamats28\"] = 0x05b3;\n t[\"hatafqamats34\"] = 0x05b3;\n t[\"hatafqamatshebrew\"] = 0x05b3;\n t[\"hatafqamatsnarrowhebrew\"] = 0x05b3;\n t[\"hatafqamatsquarterhebrew\"] = 0x05b3;\n t[\"hatafqamatswidehebrew\"] = 0x05b3;\n t[\"hatafsegol\"] = 0x05b1;\n t[\"hatafsegol17\"] = 0x05b1;\n t[\"hatafsegol24\"] = 0x05b1;\n t[\"hatafsegol30\"] = 0x05b1;\n t[\"hatafsegolhebrew\"] = 0x05b1;\n t[\"hatafsegolnarrowhebrew\"] = 0x05b1;\n t[\"hatafsegolquarterhebrew\"] = 0x05b1;\n t[\"hatafsegolwidehebrew\"] = 0x05b1;\n t[\"hbar\"] = 0x0127;\n t[\"hbopomofo\"] = 0x310f;\n t[\"hbrevebelow\"] = 0x1e2b;\n t[\"hcedilla\"] = 0x1e29;\n t[\"hcircle\"] = 0x24d7;\n t[\"hcircumflex\"] = 0x0125;\n t[\"hdieresis\"] = 0x1e27;\n t[\"hdotaccent\"] = 0x1e23;\n t[\"hdotbelow\"] = 0x1e25;\n t[\"he\"] = 0x05d4;\n t[\"heart\"] = 0x2665;\n t[\"heartsuitblack\"] = 0x2665;\n t[\"heartsuitwhite\"] = 0x2661;\n t[\"hedagesh\"] = 0xfb34;\n t[\"hedageshhebrew\"] = 0xfb34;\n t[\"hehaltonearabic\"] = 0x06c1;\n t[\"heharabic\"] = 0x0647;\n t[\"hehebrew\"] = 0x05d4;\n t[\"hehfinalaltonearabic\"] = 0xfba7;\n t[\"hehfinalalttwoarabic\"] = 0xfeea;\n t[\"hehfinalarabic\"] = 0xfeea;\n t[\"hehhamzaabovefinalarabic\"] = 0xfba5;\n t[\"hehhamzaaboveisolatedarabic\"] = 0xfba4;\n t[\"hehinitialaltonearabic\"] = 0xfba8;\n t[\"hehinitialarabic\"] = 0xfeeb;\n t[\"hehiragana\"] = 0x3078;\n t[\"hehmedialaltonearabic\"] = 0xfba9;\n t[\"hehmedialarabic\"] = 0xfeec;\n t[\"heiseierasquare\"] = 0x337b;\n t[\"hekatakana\"] = 0x30d8;\n t[\"hekatakanahalfwidth\"] = 0xff8d;\n t[\"hekutaarusquare\"] = 0x3336;\n t[\"henghook\"] = 0x0267;\n t[\"herutusquare\"] = 0x3339;\n t[\"het\"] = 0x05d7;\n t[\"hethebrew\"] = 0x05d7;\n t[\"hhook\"] = 0x0266;\n t[\"hhooksuperior\"] = 0x02b1;\n t[\"hieuhacirclekorean\"] = 0x327b;\n t[\"hieuhaparenkorean\"] = 0x321b;\n t[\"hieuhcirclekorean\"] = 0x326d;\n t[\"hieuhkorean\"] = 0x314e;\n t[\"hieuhparenkorean\"] = 0x320d;\n t[\"hihiragana\"] = 0x3072;\n t[\"hikatakana\"] = 0x30d2;\n t[\"hikatakanahalfwidth\"] = 0xff8b;\n t[\"hiriq\"] = 0x05b4;\n t[\"hiriq14\"] = 0x05b4;\n t[\"hiriq21\"] = 0x05b4;\n t[\"hiriq2d\"] = 0x05b4;\n t[\"hiriqhebrew\"] = 0x05b4;\n t[\"hiriqnarrowhebrew\"] = 0x05b4;\n t[\"hiriqquarterhebrew\"] = 0x05b4;\n t[\"hiriqwidehebrew\"] = 0x05b4;\n t[\"hlinebelow\"] = 0x1e96;\n t[\"hmonospace\"] = 0xff48;\n t[\"hoarmenian\"] = 0x0570;\n t[\"hohipthai\"] = 0x0e2b;\n t[\"hohiragana\"] = 0x307b;\n t[\"hokatakana\"] = 0x30db;\n t[\"hokatakanahalfwidth\"] = 0xff8e;\n t[\"holam\"] = 0x05b9;\n t[\"holam19\"] = 0x05b9;\n t[\"holam26\"] = 0x05b9;\n t[\"holam32\"] = 0x05b9;\n t[\"holamhebrew\"] = 0x05b9;\n t[\"holamnarrowhebrew\"] = 0x05b9;\n t[\"holamquarterhebrew\"] = 0x05b9;\n t[\"holamwidehebrew\"] = 0x05b9;\n t[\"honokhukthai\"] = 0x0e2e;\n t[\"hookabovecomb\"] = 0x0309;\n t[\"hookcmb\"] = 0x0309;\n t[\"hookpalatalizedbelowcmb\"] = 0x0321;\n t[\"hookretroflexbelowcmb\"] = 0x0322;\n t[\"hoonsquare\"] = 0x3342;\n t[\"horicoptic\"] = 0x03e9;\n t[\"horizontalbar\"] = 0x2015;\n t[\"horncmb\"] = 0x031b;\n t[\"hotsprings\"] = 0x2668;\n t[\"house\"] = 0x2302;\n t[\"hparen\"] = 0x24a3;\n t[\"hsuperior\"] = 0x02b0;\n t[\"hturned\"] = 0x0265;\n t[\"huhiragana\"] = 0x3075;\n t[\"huiitosquare\"] = 0x3333;\n t[\"hukatakana\"] = 0x30d5;\n t[\"hukatakanahalfwidth\"] = 0xff8c;\n t[\"hungarumlaut\"] = 0x02dd;\n t[\"hungarumlautcmb\"] = 0x030b;\n t[\"hv\"] = 0x0195;\n t[\"hyphen\"] = 0x002d;\n t[\"hypheninferior\"] = 0xf6e5;\n t[\"hyphenmonospace\"] = 0xff0d;\n t[\"hyphensmall\"] = 0xfe63;\n t[\"hyphensuperior\"] = 0xf6e6;\n t[\"hyphentwo\"] = 0x2010;\n t[\"i\"] = 0x0069;\n t[\"iacute\"] = 0x00ed;\n t[\"iacyrillic\"] = 0x044f;\n t[\"ibengali\"] = 0x0987;\n t[\"ibopomofo\"] = 0x3127;\n t[\"ibreve\"] = 0x012d;\n t[\"icaron\"] = 0x01d0;\n t[\"icircle\"] = 0x24d8;\n t[\"icircumflex\"] = 0x00ee;\n t[\"icyrillic\"] = 0x0456;\n t[\"idblgrave\"] = 0x0209;\n t[\"ideographearthcircle\"] = 0x328f;\n t[\"ideographfirecircle\"] = 0x328b;\n t[\"ideographicallianceparen\"] = 0x323f;\n t[\"ideographiccallparen\"] = 0x323a;\n t[\"ideographiccentrecircle\"] = 0x32a5;\n t[\"ideographicclose\"] = 0x3006;\n t[\"ideographiccomma\"] = 0x3001;\n t[\"ideographiccommaleft\"] = 0xff64;\n t[\"ideographiccongratulationparen\"] = 0x3237;\n t[\"ideographiccorrectcircle\"] = 0x32a3;\n t[\"ideographicearthparen\"] = 0x322f;\n t[\"ideographicenterpriseparen\"] = 0x323d;\n t[\"ideographicexcellentcircle\"] = 0x329d;\n t[\"ideographicfestivalparen\"] = 0x3240;\n t[\"ideographicfinancialcircle\"] = 0x3296;\n t[\"ideographicfinancialparen\"] = 0x3236;\n t[\"ideographicfireparen\"] = 0x322b;\n t[\"ideographichaveparen\"] = 0x3232;\n t[\"ideographichighcircle\"] = 0x32a4;\n t[\"ideographiciterationmark\"] = 0x3005;\n t[\"ideographiclaborcircle\"] = 0x3298;\n t[\"ideographiclaborparen\"] = 0x3238;\n t[\"ideographicleftcircle\"] = 0x32a7;\n t[\"ideographiclowcircle\"] = 0x32a6;\n t[\"ideographicmedicinecircle\"] = 0x32a9;\n t[\"ideographicmetalparen\"] = 0x322e;\n t[\"ideographicmoonparen\"] = 0x322a;\n t[\"ideographicnameparen\"] = 0x3234;\n t[\"ideographicperiod\"] = 0x3002;\n t[\"ideographicprintcircle\"] = 0x329e;\n t[\"ideographicreachparen\"] = 0x3243;\n t[\"ideographicrepresentparen\"] = 0x3239;\n t[\"ideographicresourceparen\"] = 0x323e;\n t[\"ideographicrightcircle\"] = 0x32a8;\n t[\"ideographicsecretcircle\"] = 0x3299;\n t[\"ideographicselfparen\"] = 0x3242;\n t[\"ideographicsocietyparen\"] = 0x3233;\n t[\"ideographicspace\"] = 0x3000;\n t[\"ideographicspecialparen\"] = 0x3235;\n t[\"ideographicstockparen\"] = 0x3231;\n t[\"ideographicstudyparen\"] = 0x323b;\n t[\"ideographicsunparen\"] = 0x3230;\n t[\"ideographicsuperviseparen\"] = 0x323c;\n t[\"ideographicwaterparen\"] = 0x322c;\n t[\"ideographicwoodparen\"] = 0x322d;\n t[\"ideographiczero\"] = 0x3007;\n t[\"ideographmetalcircle\"] = 0x328e;\n t[\"ideographmooncircle\"] = 0x328a;\n t[\"ideographnamecircle\"] = 0x3294;\n t[\"ideographsuncircle\"] = 0x3290;\n t[\"ideographwatercircle\"] = 0x328c;\n t[\"ideographwoodcircle\"] = 0x328d;\n t[\"ideva\"] = 0x0907;\n t[\"idieresis\"] = 0x00ef;\n t[\"idieresisacute\"] = 0x1e2f;\n t[\"idieresiscyrillic\"] = 0x04e5;\n t[\"idotbelow\"] = 0x1ecb;\n t[\"iebrevecyrillic\"] = 0x04d7;\n t[\"iecyrillic\"] = 0x0435;\n t[\"ieungacirclekorean\"] = 0x3275;\n t[\"ieungaparenkorean\"] = 0x3215;\n t[\"ieungcirclekorean\"] = 0x3267;\n t[\"ieungkorean\"] = 0x3147;\n t[\"ieungparenkorean\"] = 0x3207;\n t[\"igrave\"] = 0x00ec;\n t[\"igujarati\"] = 0x0a87;\n t[\"igurmukhi\"] = 0x0a07;\n t[\"ihiragana\"] = 0x3044;\n t[\"ihookabove\"] = 0x1ec9;\n t[\"iibengali\"] = 0x0988;\n t[\"iicyrillic\"] = 0x0438;\n t[\"iideva\"] = 0x0908;\n t[\"iigujarati\"] = 0x0a88;\n t[\"iigurmukhi\"] = 0x0a08;\n t[\"iimatragurmukhi\"] = 0x0a40;\n t[\"iinvertedbreve\"] = 0x020b;\n t[\"iishortcyrillic\"] = 0x0439;\n t[\"iivowelsignbengali\"] = 0x09c0;\n t[\"iivowelsigndeva\"] = 0x0940;\n t[\"iivowelsigngujarati\"] = 0x0ac0;\n t[\"ij\"] = 0x0133;\n t[\"ikatakana\"] = 0x30a4;\n t[\"ikatakanahalfwidth\"] = 0xff72;\n t[\"ikorean\"] = 0x3163;\n t[\"ilde\"] = 0x02dc;\n t[\"iluyhebrew\"] = 0x05ac;\n t[\"imacron\"] = 0x012b;\n t[\"imacroncyrillic\"] = 0x04e3;\n t[\"imageorapproximatelyequal\"] = 0x2253;\n t[\"imatragurmukhi\"] = 0x0a3f;\n t[\"imonospace\"] = 0xff49;\n t[\"increment\"] = 0x2206;\n t[\"infinity\"] = 0x221e;\n t[\"iniarmenian\"] = 0x056b;\n t[\"integral\"] = 0x222b;\n t[\"integralbottom\"] = 0x2321;\n t[\"integralbt\"] = 0x2321;\n t[\"integralex\"] = 0xf8f5;\n t[\"integraltop\"] = 0x2320;\n t[\"integraltp\"] = 0x2320;\n t[\"intersection\"] = 0x2229;\n t[\"intisquare\"] = 0x3305;\n t[\"invbullet\"] = 0x25d8;\n t[\"invcircle\"] = 0x25d9;\n t[\"invsmileface\"] = 0x263b;\n t[\"iocyrillic\"] = 0x0451;\n t[\"iogonek\"] = 0x012f;\n t[\"iota\"] = 0x03b9;\n t[\"iotadieresis\"] = 0x03ca;\n t[\"iotadieresistonos\"] = 0x0390;\n t[\"iotalatin\"] = 0x0269;\n t[\"iotatonos\"] = 0x03af;\n t[\"iparen\"] = 0x24a4;\n t[\"irigurmukhi\"] = 0x0a72;\n t[\"ismallhiragana\"] = 0x3043;\n t[\"ismallkatakana\"] = 0x30a3;\n t[\"ismallkatakanahalfwidth\"] = 0xff68;\n t[\"issharbengali\"] = 0x09fa;\n t[\"istroke\"] = 0x0268;\n t[\"isuperior\"] = 0xf6ed;\n t[\"iterationhiragana\"] = 0x309d;\n t[\"iterationkatakana\"] = 0x30fd;\n t[\"itilde\"] = 0x0129;\n t[\"itildebelow\"] = 0x1e2d;\n t[\"iubopomofo\"] = 0x3129;\n t[\"iucyrillic\"] = 0x044e;\n t[\"ivowelsignbengali\"] = 0x09bf;\n t[\"ivowelsigndeva\"] = 0x093f;\n t[\"ivowelsigngujarati\"] = 0x0abf;\n t[\"izhitsacyrillic\"] = 0x0475;\n t[\"izhitsadblgravecyrillic\"] = 0x0477;\n t[\"j\"] = 0x006a;\n t[\"jaarmenian\"] = 0x0571;\n t[\"jabengali\"] = 0x099c;\n t[\"jadeva\"] = 0x091c;\n t[\"jagujarati\"] = 0x0a9c;\n t[\"jagurmukhi\"] = 0x0a1c;\n t[\"jbopomofo\"] = 0x3110;\n t[\"jcaron\"] = 0x01f0;\n t[\"jcircle\"] = 0x24d9;\n t[\"jcircumflex\"] = 0x0135;\n t[\"jcrossedtail\"] = 0x029d;\n t[\"jdotlessstroke\"] = 0x025f;\n t[\"jecyrillic\"] = 0x0458;\n t[\"jeemarabic\"] = 0x062c;\n t[\"jeemfinalarabic\"] = 0xfe9e;\n t[\"jeeminitialarabic\"] = 0xfe9f;\n t[\"jeemmedialarabic\"] = 0xfea0;\n t[\"jeharabic\"] = 0x0698;\n t[\"jehfinalarabic\"] = 0xfb8b;\n t[\"jhabengali\"] = 0x099d;\n t[\"jhadeva\"] = 0x091d;\n t[\"jhagujarati\"] = 0x0a9d;\n t[\"jhagurmukhi\"] = 0x0a1d;\n t[\"jheharmenian\"] = 0x057b;\n t[\"jis\"] = 0x3004;\n t[\"jmonospace\"] = 0xff4a;\n t[\"jparen\"] = 0x24a5;\n t[\"jsuperior\"] = 0x02b2;\n t[\"k\"] = 0x006b;\n t[\"kabashkircyrillic\"] = 0x04a1;\n t[\"kabengali\"] = 0x0995;\n t[\"kacute\"] = 0x1e31;\n t[\"kacyrillic\"] = 0x043a;\n t[\"kadescendercyrillic\"] = 0x049b;\n t[\"kadeva\"] = 0x0915;\n t[\"kaf\"] = 0x05db;\n t[\"kafarabic\"] = 0x0643;\n t[\"kafdagesh\"] = 0xfb3b;\n t[\"kafdageshhebrew\"] = 0xfb3b;\n t[\"kaffinalarabic\"] = 0xfeda;\n t[\"kafhebrew\"] = 0x05db;\n t[\"kafinitialarabic\"] = 0xfedb;\n t[\"kafmedialarabic\"] = 0xfedc;\n t[\"kafrafehebrew\"] = 0xfb4d;\n t[\"kagujarati\"] = 0x0a95;\n t[\"kagurmukhi\"] = 0x0a15;\n t[\"kahiragana\"] = 0x304b;\n t[\"kahookcyrillic\"] = 0x04c4;\n t[\"kakatakana\"] = 0x30ab;\n t[\"kakatakanahalfwidth\"] = 0xff76;\n t[\"kappa\"] = 0x03ba;\n t[\"kappasymbolgreek\"] = 0x03f0;\n t[\"kapyeounmieumkorean\"] = 0x3171;\n t[\"kapyeounphieuphkorean\"] = 0x3184;\n t[\"kapyeounpieupkorean\"] = 0x3178;\n t[\"kapyeounssangpieupkorean\"] = 0x3179;\n t[\"karoriisquare\"] = 0x330d;\n t[\"kashidaautoarabic\"] = 0x0640;\n t[\"kashidaautonosidebearingarabic\"] = 0x0640;\n t[\"kasmallkatakana\"] = 0x30f5;\n t[\"kasquare\"] = 0x3384;\n t[\"kasraarabic\"] = 0x0650;\n t[\"kasratanarabic\"] = 0x064d;\n t[\"kastrokecyrillic\"] = 0x049f;\n t[\"katahiraprolongmarkhalfwidth\"] = 0xff70;\n t[\"kaverticalstrokecyrillic\"] = 0x049d;\n t[\"kbopomofo\"] = 0x310e;\n t[\"kcalsquare\"] = 0x3389;\n t[\"kcaron\"] = 0x01e9;\n t[\"kcedilla\"] = 0x0137;\n t[\"kcircle\"] = 0x24da;\n t[\"kcommaaccent\"] = 0x0137;\n t[\"kdotbelow\"] = 0x1e33;\n t[\"keharmenian\"] = 0x0584;\n t[\"kehiragana\"] = 0x3051;\n t[\"kekatakana\"] = 0x30b1;\n t[\"kekatakanahalfwidth\"] = 0xff79;\n t[\"kenarmenian\"] = 0x056f;\n t[\"kesmallkatakana\"] = 0x30f6;\n t[\"kgreenlandic\"] = 0x0138;\n t[\"khabengali\"] = 0x0996;\n t[\"khacyrillic\"] = 0x0445;\n t[\"khadeva\"] = 0x0916;\n t[\"khagujarati\"] = 0x0a96;\n t[\"khagurmukhi\"] = 0x0a16;\n t[\"khaharabic\"] = 0x062e;\n t[\"khahfinalarabic\"] = 0xfea6;\n t[\"khahinitialarabic\"] = 0xfea7;\n t[\"khahmedialarabic\"] = 0xfea8;\n t[\"kheicoptic\"] = 0x03e7;\n t[\"khhadeva\"] = 0x0959;\n t[\"khhagurmukhi\"] = 0x0a59;\n t[\"khieukhacirclekorean\"] = 0x3278;\n t[\"khieukhaparenkorean\"] = 0x3218;\n t[\"khieukhcirclekorean\"] = 0x326a;\n t[\"khieukhkorean\"] = 0x314b;\n t[\"khieukhparenkorean\"] = 0x320a;\n t[\"khokhaithai\"] = 0x0e02;\n t[\"khokhonthai\"] = 0x0e05;\n t[\"khokhuatthai\"] = 0x0e03;\n t[\"khokhwaithai\"] = 0x0e04;\n t[\"khomutthai\"] = 0x0e5b;\n t[\"khook\"] = 0x0199;\n t[\"khorakhangthai\"] = 0x0e06;\n t[\"khzsquare\"] = 0x3391;\n t[\"kihiragana\"] = 0x304d;\n t[\"kikatakana\"] = 0x30ad;\n t[\"kikatakanahalfwidth\"] = 0xff77;\n t[\"kiroguramusquare\"] = 0x3315;\n t[\"kiromeetorusquare\"] = 0x3316;\n t[\"kirosquare\"] = 0x3314;\n t[\"kiyeokacirclekorean\"] = 0x326e;\n t[\"kiyeokaparenkorean\"] = 0x320e;\n t[\"kiyeokcirclekorean\"] = 0x3260;\n t[\"kiyeokkorean\"] = 0x3131;\n t[\"kiyeokparenkorean\"] = 0x3200;\n t[\"kiyeoksioskorean\"] = 0x3133;\n t[\"kjecyrillic\"] = 0x045c;\n t[\"klinebelow\"] = 0x1e35;\n t[\"klsquare\"] = 0x3398;\n t[\"kmcubedsquare\"] = 0x33a6;\n t[\"kmonospace\"] = 0xff4b;\n t[\"kmsquaredsquare\"] = 0x33a2;\n t[\"kohiragana\"] = 0x3053;\n t[\"kohmsquare\"] = 0x33c0;\n t[\"kokaithai\"] = 0x0e01;\n t[\"kokatakana\"] = 0x30b3;\n t[\"kokatakanahalfwidth\"] = 0xff7a;\n t[\"kooposquare\"] = 0x331e;\n t[\"koppacyrillic\"] = 0x0481;\n t[\"koreanstandardsymbol\"] = 0x327f;\n t[\"koroniscmb\"] = 0x0343;\n t[\"kparen\"] = 0x24a6;\n t[\"kpasquare\"] = 0x33aa;\n t[\"ksicyrillic\"] = 0x046f;\n t[\"ktsquare\"] = 0x33cf;\n t[\"kturned\"] = 0x029e;\n t[\"kuhiragana\"] = 0x304f;\n t[\"kukatakana\"] = 0x30af;\n t[\"kukatakanahalfwidth\"] = 0xff78;\n t[\"kvsquare\"] = 0x33b8;\n t[\"kwsquare\"] = 0x33be;\n t[\"l\"] = 0x006c;\n t[\"labengali\"] = 0x09b2;\n t[\"lacute\"] = 0x013a;\n t[\"ladeva\"] = 0x0932;\n t[\"lagujarati\"] = 0x0ab2;\n t[\"lagurmukhi\"] = 0x0a32;\n t[\"lakkhangyaothai\"] = 0x0e45;\n t[\"lamaleffinalarabic\"] = 0xfefc;\n t[\"lamalefhamzaabovefinalarabic\"] = 0xfef8;\n t[\"lamalefhamzaaboveisolatedarabic\"] = 0xfef7;\n t[\"lamalefhamzabelowfinalarabic\"] = 0xfefa;\n t[\"lamalefhamzabelowisolatedarabic\"] = 0xfef9;\n t[\"lamalefisolatedarabic\"] = 0xfefb;\n t[\"lamalefmaddaabovefinalarabic\"] = 0xfef6;\n t[\"lamalefmaddaaboveisolatedarabic\"] = 0xfef5;\n t[\"lamarabic\"] = 0x0644;\n t[\"lambda\"] = 0x03bb;\n t[\"lambdastroke\"] = 0x019b;\n t[\"lamed\"] = 0x05dc;\n t[\"lameddagesh\"] = 0xfb3c;\n t[\"lameddageshhebrew\"] = 0xfb3c;\n t[\"lamedhebrew\"] = 0x05dc;\n t[\"lamfinalarabic\"] = 0xfede;\n t[\"lamhahinitialarabic\"] = 0xfcca;\n t[\"laminitialarabic\"] = 0xfedf;\n t[\"lamjeeminitialarabic\"] = 0xfcc9;\n t[\"lamkhahinitialarabic\"] = 0xfccb;\n t[\"lamlamhehisolatedarabic\"] = 0xfdf2;\n t[\"lammedialarabic\"] = 0xfee0;\n t[\"lammeemhahinitialarabic\"] = 0xfd88;\n t[\"lammeeminitialarabic\"] = 0xfccc;\n t[\"largecircle\"] = 0x25ef;\n t[\"lbar\"] = 0x019a;\n t[\"lbelt\"] = 0x026c;\n t[\"lbopomofo\"] = 0x310c;\n t[\"lcaron\"] = 0x013e;\n t[\"lcedilla\"] = 0x013c;\n t[\"lcircle\"] = 0x24db;\n t[\"lcircumflexbelow\"] = 0x1e3d;\n t[\"lcommaaccent\"] = 0x013c;\n t[\"ldot\"] = 0x0140;\n t[\"ldotaccent\"] = 0x0140;\n t[\"ldotbelow\"] = 0x1e37;\n t[\"ldotbelowmacron\"] = 0x1e39;\n t[\"leftangleabovecmb\"] = 0x031a;\n t[\"lefttackbelowcmb\"] = 0x0318;\n t[\"less\"] = 0x003c;\n t[\"lessequal\"] = 0x2264;\n t[\"lessequalorgreater\"] = 0x22da;\n t[\"lessmonospace\"] = 0xff1c;\n t[\"lessorequivalent\"] = 0x2272;\n t[\"lessorgreater\"] = 0x2276;\n t[\"lessoverequal\"] = 0x2266;\n t[\"lesssmall\"] = 0xfe64;\n t[\"lezh\"] = 0x026e;\n t[\"lfblock\"] = 0x258c;\n t[\"lhookretroflex\"] = 0x026d;\n t[\"lira\"] = 0x20a4;\n t[\"liwnarmenian\"] = 0x056c;\n t[\"lj\"] = 0x01c9;\n t[\"ljecyrillic\"] = 0x0459;\n t[\"ll\"] = 0xf6c0;\n t[\"lladeva\"] = 0x0933;\n t[\"llagujarati\"] = 0x0ab3;\n t[\"llinebelow\"] = 0x1e3b;\n t[\"llladeva\"] = 0x0934;\n t[\"llvocalicbengali\"] = 0x09e1;\n t[\"llvocalicdeva\"] = 0x0961;\n t[\"llvocalicvowelsignbengali\"] = 0x09e3;\n t[\"llvocalicvowelsigndeva\"] = 0x0963;\n t[\"lmiddletilde\"] = 0x026b;\n t[\"lmonospace\"] = 0xff4c;\n t[\"lmsquare\"] = 0x33d0;\n t[\"lochulathai\"] = 0x0e2c;\n t[\"logicaland\"] = 0x2227;\n t[\"logicalnot\"] = 0x00ac;\n t[\"logicalnotreversed\"] = 0x2310;\n t[\"logicalor\"] = 0x2228;\n t[\"lolingthai\"] = 0x0e25;\n t[\"longs\"] = 0x017f;\n t[\"lowlinecenterline\"] = 0xfe4e;\n t[\"lowlinecmb\"] = 0x0332;\n t[\"lowlinedashed\"] = 0xfe4d;\n t[\"lozenge\"] = 0x25ca;\n t[\"lparen\"] = 0x24a7;\n t[\"lslash\"] = 0x0142;\n t[\"lsquare\"] = 0x2113;\n t[\"lsuperior\"] = 0xf6ee;\n t[\"ltshade\"] = 0x2591;\n t[\"luthai\"] = 0x0e26;\n t[\"lvocalicbengali\"] = 0x098c;\n t[\"lvocalicdeva\"] = 0x090c;\n t[\"lvocalicvowelsignbengali\"] = 0x09e2;\n t[\"lvocalicvowelsigndeva\"] = 0x0962;\n t[\"lxsquare\"] = 0x33d3;\n t[\"m\"] = 0x006d;\n t[\"mabengali\"] = 0x09ae;\n t[\"macron\"] = 0x00af;\n t[\"macronbelowcmb\"] = 0x0331;\n t[\"macroncmb\"] = 0x0304;\n t[\"macronlowmod\"] = 0x02cd;\n t[\"macronmonospace\"] = 0xffe3;\n t[\"macute\"] = 0x1e3f;\n t[\"madeva\"] = 0x092e;\n t[\"magujarati\"] = 0x0aae;\n t[\"magurmukhi\"] = 0x0a2e;\n t[\"mahapakhhebrew\"] = 0x05a4;\n t[\"mahapakhlefthebrew\"] = 0x05a4;\n t[\"mahiragana\"] = 0x307e;\n t[\"maichattawalowleftthai\"] = 0xf895;\n t[\"maichattawalowrightthai\"] = 0xf894;\n t[\"maichattawathai\"] = 0x0e4b;\n t[\"maichattawaupperleftthai\"] = 0xf893;\n t[\"maieklowleftthai\"] = 0xf88c;\n t[\"maieklowrightthai\"] = 0xf88b;\n t[\"maiekthai\"] = 0x0e48;\n t[\"maiekupperleftthai\"] = 0xf88a;\n t[\"maihanakatleftthai\"] = 0xf884;\n t[\"maihanakatthai\"] = 0x0e31;\n t[\"maitaikhuleftthai\"] = 0xf889;\n t[\"maitaikhuthai\"] = 0x0e47;\n t[\"maitholowleftthai\"] = 0xf88f;\n t[\"maitholowrightthai\"] = 0xf88e;\n t[\"maithothai\"] = 0x0e49;\n t[\"maithoupperleftthai\"] = 0xf88d;\n t[\"maitrilowleftthai\"] = 0xf892;\n t[\"maitrilowrightthai\"] = 0xf891;\n t[\"maitrithai\"] = 0x0e4a;\n t[\"maitriupperleftthai\"] = 0xf890;\n t[\"maiyamokthai\"] = 0x0e46;\n t[\"makatakana\"] = 0x30de;\n t[\"makatakanahalfwidth\"] = 0xff8f;\n t[\"male\"] = 0x2642;\n t[\"mansyonsquare\"] = 0x3347;\n t[\"maqafhebrew\"] = 0x05be;\n t[\"mars\"] = 0x2642;\n t[\"masoracirclehebrew\"] = 0x05af;\n t[\"masquare\"] = 0x3383;\n t[\"mbopomofo\"] = 0x3107;\n t[\"mbsquare\"] = 0x33d4;\n t[\"mcircle\"] = 0x24dc;\n t[\"mcubedsquare\"] = 0x33a5;\n t[\"mdotaccent\"] = 0x1e41;\n t[\"mdotbelow\"] = 0x1e43;\n t[\"meemarabic\"] = 0x0645;\n t[\"meemfinalarabic\"] = 0xfee2;\n t[\"meeminitialarabic\"] = 0xfee3;\n t[\"meemmedialarabic\"] = 0xfee4;\n t[\"meemmeeminitialarabic\"] = 0xfcd1;\n t[\"meemmeemisolatedarabic\"] = 0xfc48;\n t[\"meetorusquare\"] = 0x334d;\n t[\"mehiragana\"] = 0x3081;\n t[\"meizierasquare\"] = 0x337e;\n t[\"mekatakana\"] = 0x30e1;\n t[\"mekatakanahalfwidth\"] = 0xff92;\n t[\"mem\"] = 0x05de;\n t[\"memdagesh\"] = 0xfb3e;\n t[\"memdageshhebrew\"] = 0xfb3e;\n t[\"memhebrew\"] = 0x05de;\n t[\"menarmenian\"] = 0x0574;\n t[\"merkhahebrew\"] = 0x05a5;\n t[\"merkhakefulahebrew\"] = 0x05a6;\n t[\"merkhakefulalefthebrew\"] = 0x05a6;\n t[\"merkhalefthebrew\"] = 0x05a5;\n t[\"mhook\"] = 0x0271;\n t[\"mhzsquare\"] = 0x3392;\n t[\"middledotkatakanahalfwidth\"] = 0xff65;\n t[\"middot\"] = 0x00b7;\n t[\"mieumacirclekorean\"] = 0x3272;\n t[\"mieumaparenkorean\"] = 0x3212;\n t[\"mieumcirclekorean\"] = 0x3264;\n t[\"mieumkorean\"] = 0x3141;\n t[\"mieumpansioskorean\"] = 0x3170;\n t[\"mieumparenkorean\"] = 0x3204;\n t[\"mieumpieupkorean\"] = 0x316e;\n t[\"mieumsioskorean\"] = 0x316f;\n t[\"mihiragana\"] = 0x307f;\n t[\"mikatakana\"] = 0x30df;\n t[\"mikatakanahalfwidth\"] = 0xff90;\n t[\"minus\"] = 0x2212;\n t[\"minusbelowcmb\"] = 0x0320;\n t[\"minuscircle\"] = 0x2296;\n t[\"minusmod\"] = 0x02d7;\n t[\"minusplus\"] = 0x2213;\n t[\"minute\"] = 0x2032;\n t[\"miribaarusquare\"] = 0x334a;\n t[\"mirisquare\"] = 0x3349;\n t[\"mlonglegturned\"] = 0x0270;\n t[\"mlsquare\"] = 0x3396;\n t[\"mmcubedsquare\"] = 0x33a3;\n t[\"mmonospace\"] = 0xff4d;\n t[\"mmsquaredsquare\"] = 0x339f;\n t[\"mohiragana\"] = 0x3082;\n t[\"mohmsquare\"] = 0x33c1;\n t[\"mokatakana\"] = 0x30e2;\n t[\"mokatakanahalfwidth\"] = 0xff93;\n t[\"molsquare\"] = 0x33d6;\n t[\"momathai\"] = 0x0e21;\n t[\"moverssquare\"] = 0x33a7;\n t[\"moverssquaredsquare\"] = 0x33a8;\n t[\"mparen\"] = 0x24a8;\n t[\"mpasquare\"] = 0x33ab;\n t[\"mssquare\"] = 0x33b3;\n t[\"msuperior\"] = 0xf6ef;\n t[\"mturned\"] = 0x026f;\n t[\"mu\"] = 0x00b5;\n t[\"mu1\"] = 0x00b5;\n t[\"muasquare\"] = 0x3382;\n t[\"muchgreater\"] = 0x226b;\n t[\"muchless\"] = 0x226a;\n t[\"mufsquare\"] = 0x338c;\n t[\"mugreek\"] = 0x03bc;\n t[\"mugsquare\"] = 0x338d;\n t[\"muhiragana\"] = 0x3080;\n t[\"mukatakana\"] = 0x30e0;\n t[\"mukatakanahalfwidth\"] = 0xff91;\n t[\"mulsquare\"] = 0x3395;\n t[\"multiply\"] = 0x00d7;\n t[\"mumsquare\"] = 0x339b;\n t[\"munahhebrew\"] = 0x05a3;\n t[\"munahlefthebrew\"] = 0x05a3;\n t[\"musicalnote\"] = 0x266a;\n t[\"musicalnotedbl\"] = 0x266b;\n t[\"musicflatsign\"] = 0x266d;\n t[\"musicsharpsign\"] = 0x266f;\n t[\"mussquare\"] = 0x33b2;\n t[\"muvsquare\"] = 0x33b6;\n t[\"muwsquare\"] = 0x33bc;\n t[\"mvmegasquare\"] = 0x33b9;\n t[\"mvsquare\"] = 0x33b7;\n t[\"mwmegasquare\"] = 0x33bf;\n t[\"mwsquare\"] = 0x33bd;\n t[\"n\"] = 0x006e;\n t[\"nabengali\"] = 0x09a8;\n t[\"nabla\"] = 0x2207;\n t[\"nacute\"] = 0x0144;\n t[\"nadeva\"] = 0x0928;\n t[\"nagujarati\"] = 0x0aa8;\n t[\"nagurmukhi\"] = 0x0a28;\n t[\"nahiragana\"] = 0x306a;\n t[\"nakatakana\"] = 0x30ca;\n t[\"nakatakanahalfwidth\"] = 0xff85;\n t[\"napostrophe\"] = 0x0149;\n t[\"nasquare\"] = 0x3381;\n t[\"nbopomofo\"] = 0x310b;\n t[\"nbspace\"] = 0x00a0;\n t[\"ncaron\"] = 0x0148;\n t[\"ncedilla\"] = 0x0146;\n t[\"ncircle\"] = 0x24dd;\n t[\"ncircumflexbelow\"] = 0x1e4b;\n t[\"ncommaaccent\"] = 0x0146;\n t[\"ndotaccent\"] = 0x1e45;\n t[\"ndotbelow\"] = 0x1e47;\n t[\"nehiragana\"] = 0x306d;\n t[\"nekatakana\"] = 0x30cd;\n t[\"nekatakanahalfwidth\"] = 0xff88;\n t[\"newsheqelsign\"] = 0x20aa;\n t[\"nfsquare\"] = 0x338b;\n t[\"ngabengali\"] = 0x0999;\n t[\"ngadeva\"] = 0x0919;\n t[\"ngagujarati\"] = 0x0a99;\n t[\"ngagurmukhi\"] = 0x0a19;\n t[\"ngonguthai\"] = 0x0e07;\n t[\"nhiragana\"] = 0x3093;\n t[\"nhookleft\"] = 0x0272;\n t[\"nhookretroflex\"] = 0x0273;\n t[\"nieunacirclekorean\"] = 0x326f;\n t[\"nieunaparenkorean\"] = 0x320f;\n t[\"nieuncieuckorean\"] = 0x3135;\n t[\"nieuncirclekorean\"] = 0x3261;\n t[\"nieunhieuhkorean\"] = 0x3136;\n t[\"nieunkorean\"] = 0x3134;\n t[\"nieunpansioskorean\"] = 0x3168;\n t[\"nieunparenkorean\"] = 0x3201;\n t[\"nieunsioskorean\"] = 0x3167;\n t[\"nieuntikeutkorean\"] = 0x3166;\n t[\"nihiragana\"] = 0x306b;\n t[\"nikatakana\"] = 0x30cb;\n t[\"nikatakanahalfwidth\"] = 0xff86;\n t[\"nikhahitleftthai\"] = 0xf899;\n t[\"nikhahitthai\"] = 0x0e4d;\n t[\"nine\"] = 0x0039;\n t[\"ninearabic\"] = 0x0669;\n t[\"ninebengali\"] = 0x09ef;\n t[\"ninecircle\"] = 0x2468;\n t[\"ninecircleinversesansserif\"] = 0x2792;\n t[\"ninedeva\"] = 0x096f;\n t[\"ninegujarati\"] = 0x0aef;\n t[\"ninegurmukhi\"] = 0x0a6f;\n t[\"ninehackarabic\"] = 0x0669;\n t[\"ninehangzhou\"] = 0x3029;\n t[\"nineideographicparen\"] = 0x3228;\n t[\"nineinferior\"] = 0x2089;\n t[\"ninemonospace\"] = 0xff19;\n t[\"nineoldstyle\"] = 0xf739;\n t[\"nineparen\"] = 0x247c;\n t[\"nineperiod\"] = 0x2490;\n t[\"ninepersian\"] = 0x06f9;\n t[\"nineroman\"] = 0x2178;\n t[\"ninesuperior\"] = 0x2079;\n t[\"nineteencircle\"] = 0x2472;\n t[\"nineteenparen\"] = 0x2486;\n t[\"nineteenperiod\"] = 0x249a;\n t[\"ninethai\"] = 0x0e59;\n t[\"nj\"] = 0x01cc;\n t[\"njecyrillic\"] = 0x045a;\n t[\"nkatakana\"] = 0x30f3;\n t[\"nkatakanahalfwidth\"] = 0xff9d;\n t[\"nlegrightlong\"] = 0x019e;\n t[\"nlinebelow\"] = 0x1e49;\n t[\"nmonospace\"] = 0xff4e;\n t[\"nmsquare\"] = 0x339a;\n t[\"nnabengali\"] = 0x09a3;\n t[\"nnadeva\"] = 0x0923;\n t[\"nnagujarati\"] = 0x0aa3;\n t[\"nnagurmukhi\"] = 0x0a23;\n t[\"nnnadeva\"] = 0x0929;\n t[\"nohiragana\"] = 0x306e;\n t[\"nokatakana\"] = 0x30ce;\n t[\"nokatakanahalfwidth\"] = 0xff89;\n t[\"nonbreakingspace\"] = 0x00a0;\n t[\"nonenthai\"] = 0x0e13;\n t[\"nonuthai\"] = 0x0e19;\n t[\"noonarabic\"] = 0x0646;\n t[\"noonfinalarabic\"] = 0xfee6;\n t[\"noonghunnaarabic\"] = 0x06ba;\n t[\"noonghunnafinalarabic\"] = 0xfb9f;\n t[\"nooninitialarabic\"] = 0xfee7;\n t[\"noonjeeminitialarabic\"] = 0xfcd2;\n t[\"noonjeemisolatedarabic\"] = 0xfc4b;\n t[\"noonmedialarabic\"] = 0xfee8;\n t[\"noonmeeminitialarabic\"] = 0xfcd5;\n t[\"noonmeemisolatedarabic\"] = 0xfc4e;\n t[\"noonnoonfinalarabic\"] = 0xfc8d;\n t[\"notcontains\"] = 0x220c;\n t[\"notelement\"] = 0x2209;\n t[\"notelementof\"] = 0x2209;\n t[\"notequal\"] = 0x2260;\n t[\"notgreater\"] = 0x226f;\n t[\"notgreaternorequal\"] = 0x2271;\n t[\"notgreaternorless\"] = 0x2279;\n t[\"notidentical\"] = 0x2262;\n t[\"notless\"] = 0x226e;\n t[\"notlessnorequal\"] = 0x2270;\n t[\"notparallel\"] = 0x2226;\n t[\"notprecedes\"] = 0x2280;\n t[\"notsubset\"] = 0x2284;\n t[\"notsucceeds\"] = 0x2281;\n t[\"notsuperset\"] = 0x2285;\n t[\"nowarmenian\"] = 0x0576;\n t[\"nparen\"] = 0x24a9;\n t[\"nssquare\"] = 0x33b1;\n t[\"nsuperior\"] = 0x207f;\n t[\"ntilde\"] = 0x00f1;\n t[\"nu\"] = 0x03bd;\n t[\"nuhiragana\"] = 0x306c;\n t[\"nukatakana\"] = 0x30cc;\n t[\"nukatakanahalfwidth\"] = 0xff87;\n t[\"nuktabengali\"] = 0x09bc;\n t[\"nuktadeva\"] = 0x093c;\n t[\"nuktagujarati\"] = 0x0abc;\n t[\"nuktagurmukhi\"] = 0x0a3c;\n t[\"numbersign\"] = 0x0023;\n t[\"numbersignmonospace\"] = 0xff03;\n t[\"numbersignsmall\"] = 0xfe5f;\n t[\"numeralsigngreek\"] = 0x0374;\n t[\"numeralsignlowergreek\"] = 0x0375;\n t[\"numero\"] = 0x2116;\n t[\"nun\"] = 0x05e0;\n t[\"nundagesh\"] = 0xfb40;\n t[\"nundageshhebrew\"] = 0xfb40;\n t[\"nunhebrew\"] = 0x05e0;\n t[\"nvsquare\"] = 0x33b5;\n t[\"nwsquare\"] = 0x33bb;\n t[\"nyabengali\"] = 0x099e;\n t[\"nyadeva\"] = 0x091e;\n t[\"nyagujarati\"] = 0x0a9e;\n t[\"nyagurmukhi\"] = 0x0a1e;\n t[\"o\"] = 0x006f;\n t[\"oacute\"] = 0x00f3;\n t[\"oangthai\"] = 0x0e2d;\n t[\"obarred\"] = 0x0275;\n t[\"obarredcyrillic\"] = 0x04e9;\n t[\"obarreddieresiscyrillic\"] = 0x04eb;\n t[\"obengali\"] = 0x0993;\n t[\"obopomofo\"] = 0x311b;\n t[\"obreve\"] = 0x014f;\n t[\"ocandradeva\"] = 0x0911;\n t[\"ocandragujarati\"] = 0x0a91;\n t[\"ocandravowelsigndeva\"] = 0x0949;\n t[\"ocandravowelsigngujarati\"] = 0x0ac9;\n t[\"ocaron\"] = 0x01d2;\n t[\"ocircle\"] = 0x24de;\n t[\"ocircumflex\"] = 0x00f4;\n t[\"ocircumflexacute\"] = 0x1ed1;\n t[\"ocircumflexdotbelow\"] = 0x1ed9;\n t[\"ocircumflexgrave\"] = 0x1ed3;\n t[\"ocircumflexhookabove\"] = 0x1ed5;\n t[\"ocircumflextilde\"] = 0x1ed7;\n t[\"ocyrillic\"] = 0x043e;\n t[\"odblacute\"] = 0x0151;\n t[\"odblgrave\"] = 0x020d;\n t[\"odeva\"] = 0x0913;\n t[\"odieresis\"] = 0x00f6;\n t[\"odieresiscyrillic\"] = 0x04e7;\n t[\"odotbelow\"] = 0x1ecd;\n t[\"oe\"] = 0x0153;\n t[\"oekorean\"] = 0x315a;\n t[\"ogonek\"] = 0x02db;\n t[\"ogonekcmb\"] = 0x0328;\n t[\"ograve\"] = 0x00f2;\n t[\"ogujarati\"] = 0x0a93;\n t[\"oharmenian\"] = 0x0585;\n t[\"ohiragana\"] = 0x304a;\n t[\"ohookabove\"] = 0x1ecf;\n t[\"ohorn\"] = 0x01a1;\n t[\"ohornacute\"] = 0x1edb;\n t[\"ohorndotbelow\"] = 0x1ee3;\n t[\"ohorngrave\"] = 0x1edd;\n t[\"ohornhookabove\"] = 0x1edf;\n t[\"ohorntilde\"] = 0x1ee1;\n t[\"ohungarumlaut\"] = 0x0151;\n t[\"oi\"] = 0x01a3;\n t[\"oinvertedbreve\"] = 0x020f;\n t[\"okatakana\"] = 0x30aa;\n t[\"okatakanahalfwidth\"] = 0xff75;\n t[\"okorean\"] = 0x3157;\n t[\"olehebrew\"] = 0x05ab;\n t[\"omacron\"] = 0x014d;\n t[\"omacronacute\"] = 0x1e53;\n t[\"omacrongrave\"] = 0x1e51;\n t[\"omdeva\"] = 0x0950;\n t[\"omega\"] = 0x03c9;\n t[\"omega1\"] = 0x03d6;\n t[\"omegacyrillic\"] = 0x0461;\n t[\"omegalatinclosed\"] = 0x0277;\n t[\"omegaroundcyrillic\"] = 0x047b;\n t[\"omegatitlocyrillic\"] = 0x047d;\n t[\"omegatonos\"] = 0x03ce;\n t[\"omgujarati\"] = 0x0ad0;\n t[\"omicron\"] = 0x03bf;\n t[\"omicrontonos\"] = 0x03cc;\n t[\"omonospace\"] = 0xff4f;\n t[\"one\"] = 0x0031;\n t[\"onearabic\"] = 0x0661;\n t[\"onebengali\"] = 0x09e7;\n t[\"onecircle\"] = 0x2460;\n t[\"onecircleinversesansserif\"] = 0x278a;\n t[\"onedeva\"] = 0x0967;\n t[\"onedotenleader\"] = 0x2024;\n t[\"oneeighth\"] = 0x215b;\n t[\"onefitted\"] = 0xf6dc;\n t[\"onegujarati\"] = 0x0ae7;\n t[\"onegurmukhi\"] = 0x0a67;\n t[\"onehackarabic\"] = 0x0661;\n t[\"onehalf\"] = 0x00bd;\n t[\"onehangzhou\"] = 0x3021;\n t[\"oneideographicparen\"] = 0x3220;\n t[\"oneinferior\"] = 0x2081;\n t[\"onemonospace\"] = 0xff11;\n t[\"onenumeratorbengali\"] = 0x09f4;\n t[\"oneoldstyle\"] = 0xf731;\n t[\"oneparen\"] = 0x2474;\n t[\"oneperiod\"] = 0x2488;\n t[\"onepersian\"] = 0x06f1;\n t[\"onequarter\"] = 0x00bc;\n t[\"oneroman\"] = 0x2170;\n t[\"onesuperior\"] = 0x00b9;\n t[\"onethai\"] = 0x0e51;\n t[\"onethird\"] = 0x2153;\n t[\"oogonek\"] = 0x01eb;\n t[\"oogonekmacron\"] = 0x01ed;\n t[\"oogurmukhi\"] = 0x0a13;\n t[\"oomatragurmukhi\"] = 0x0a4b;\n t[\"oopen\"] = 0x0254;\n t[\"oparen\"] = 0x24aa;\n t[\"openbullet\"] = 0x25e6;\n t[\"option\"] = 0x2325;\n t[\"ordfeminine\"] = 0x00aa;\n t[\"ordmasculine\"] = 0x00ba;\n t[\"orthogonal\"] = 0x221f;\n t[\"oshortdeva\"] = 0x0912;\n t[\"oshortvowelsigndeva\"] = 0x094a;\n t[\"oslash\"] = 0x00f8;\n t[\"oslashacute\"] = 0x01ff;\n t[\"osmallhiragana\"] = 0x3049;\n t[\"osmallkatakana\"] = 0x30a9;\n t[\"osmallkatakanahalfwidth\"] = 0xff6b;\n t[\"ostrokeacute\"] = 0x01ff;\n t[\"osuperior\"] = 0xf6f0;\n t[\"otcyrillic\"] = 0x047f;\n t[\"otilde\"] = 0x00f5;\n t[\"otildeacute\"] = 0x1e4d;\n t[\"otildedieresis\"] = 0x1e4f;\n t[\"oubopomofo\"] = 0x3121;\n t[\"overline\"] = 0x203e;\n t[\"overlinecenterline\"] = 0xfe4a;\n t[\"overlinecmb\"] = 0x0305;\n t[\"overlinedashed\"] = 0xfe49;\n t[\"overlinedblwavy\"] = 0xfe4c;\n t[\"overlinewavy\"] = 0xfe4b;\n t[\"overscore\"] = 0x00af;\n t[\"ovowelsignbengali\"] = 0x09cb;\n t[\"ovowelsigndeva\"] = 0x094b;\n t[\"ovowelsigngujarati\"] = 0x0acb;\n t[\"p\"] = 0x0070;\n t[\"paampssquare\"] = 0x3380;\n t[\"paasentosquare\"] = 0x332b;\n t[\"pabengali\"] = 0x09aa;\n t[\"pacute\"] = 0x1e55;\n t[\"padeva\"] = 0x092a;\n t[\"pagedown\"] = 0x21df;\n t[\"pageup\"] = 0x21de;\n t[\"pagujarati\"] = 0x0aaa;\n t[\"pagurmukhi\"] = 0x0a2a;\n t[\"pahiragana\"] = 0x3071;\n t[\"paiyannoithai\"] = 0x0e2f;\n t[\"pakatakana\"] = 0x30d1;\n t[\"palatalizationcyrilliccmb\"] = 0x0484;\n t[\"palochkacyrillic\"] = 0x04c0;\n t[\"pansioskorean\"] = 0x317f;\n t[\"paragraph\"] = 0x00b6;\n t[\"parallel\"] = 0x2225;\n t[\"parenleft\"] = 0x0028;\n t[\"parenleftaltonearabic\"] = 0xfd3e;\n t[\"parenleftbt\"] = 0xf8ed;\n t[\"parenleftex\"] = 0xf8ec;\n t[\"parenleftinferior\"] = 0x208d;\n t[\"parenleftmonospace\"] = 0xff08;\n t[\"parenleftsmall\"] = 0xfe59;\n t[\"parenleftsuperior\"] = 0x207d;\n t[\"parenlefttp\"] = 0xf8eb;\n t[\"parenleftvertical\"] = 0xfe35;\n t[\"parenright\"] = 0x0029;\n t[\"parenrightaltonearabic\"] = 0xfd3f;\n t[\"parenrightbt\"] = 0xf8f8;\n t[\"parenrightex\"] = 0xf8f7;\n t[\"parenrightinferior\"] = 0x208e;\n t[\"parenrightmonospace\"] = 0xff09;\n t[\"parenrightsmall\"] = 0xfe5a;\n t[\"parenrightsuperior\"] = 0x207e;\n t[\"parenrighttp\"] = 0xf8f6;\n t[\"parenrightvertical\"] = 0xfe36;\n t[\"partialdiff\"] = 0x2202;\n t[\"paseqhebrew\"] = 0x05c0;\n t[\"pashtahebrew\"] = 0x0599;\n t[\"pasquare\"] = 0x33a9;\n t[\"patah\"] = 0x05b7;\n t[\"patah11\"] = 0x05b7;\n t[\"patah1d\"] = 0x05b7;\n t[\"patah2a\"] = 0x05b7;\n t[\"patahhebrew\"] = 0x05b7;\n t[\"patahnarrowhebrew\"] = 0x05b7;\n t[\"patahquarterhebrew\"] = 0x05b7;\n t[\"patahwidehebrew\"] = 0x05b7;\n t[\"pazerhebrew\"] = 0x05a1;\n t[\"pbopomofo\"] = 0x3106;\n t[\"pcircle\"] = 0x24df;\n t[\"pdotaccent\"] = 0x1e57;\n t[\"pe\"] = 0x05e4;\n t[\"pecyrillic\"] = 0x043f;\n t[\"pedagesh\"] = 0xfb44;\n t[\"pedageshhebrew\"] = 0xfb44;\n t[\"peezisquare\"] = 0x333b;\n t[\"pefinaldageshhebrew\"] = 0xfb43;\n t[\"peharabic\"] = 0x067e;\n t[\"peharmenian\"] = 0x057a;\n t[\"pehebrew\"] = 0x05e4;\n t[\"pehfinalarabic\"] = 0xfb57;\n t[\"pehinitialarabic\"] = 0xfb58;\n t[\"pehiragana\"] = 0x307a;\n t[\"pehmedialarabic\"] = 0xfb59;\n t[\"pekatakana\"] = 0x30da;\n t[\"pemiddlehookcyrillic\"] = 0x04a7;\n t[\"perafehebrew\"] = 0xfb4e;\n t[\"percent\"] = 0x0025;\n t[\"percentarabic\"] = 0x066a;\n t[\"percentmonospace\"] = 0xff05;\n t[\"percentsmall\"] = 0xfe6a;\n t[\"period\"] = 0x002e;\n t[\"periodarmenian\"] = 0x0589;\n t[\"periodcentered\"] = 0x00b7;\n t[\"periodhalfwidth\"] = 0xff61;\n t[\"periodinferior\"] = 0xf6e7;\n t[\"periodmonospace\"] = 0xff0e;\n t[\"periodsmall\"] = 0xfe52;\n t[\"periodsuperior\"] = 0xf6e8;\n t[\"perispomenigreekcmb\"] = 0x0342;\n t[\"perpendicular\"] = 0x22a5;\n t[\"perthousand\"] = 0x2030;\n t[\"peseta\"] = 0x20a7;\n t[\"pfsquare\"] = 0x338a;\n t[\"phabengali\"] = 0x09ab;\n t[\"phadeva\"] = 0x092b;\n t[\"phagujarati\"] = 0x0aab;\n t[\"phagurmukhi\"] = 0x0a2b;\n t[\"phi\"] = 0x03c6;\n t[\"phi1\"] = 0x03d5;\n t[\"phieuphacirclekorean\"] = 0x327a;\n t[\"phieuphaparenkorean\"] = 0x321a;\n t[\"phieuphcirclekorean\"] = 0x326c;\n t[\"phieuphkorean\"] = 0x314d;\n t[\"phieuphparenkorean\"] = 0x320c;\n t[\"philatin\"] = 0x0278;\n t[\"phinthuthai\"] = 0x0e3a;\n t[\"phisymbolgreek\"] = 0x03d5;\n t[\"phook\"] = 0x01a5;\n t[\"phophanthai\"] = 0x0e1e;\n t[\"phophungthai\"] = 0x0e1c;\n t[\"phosamphaothai\"] = 0x0e20;\n t[\"pi\"] = 0x03c0;\n t[\"pieupacirclekorean\"] = 0x3273;\n t[\"pieupaparenkorean\"] = 0x3213;\n t[\"pieupcieuckorean\"] = 0x3176;\n t[\"pieupcirclekorean\"] = 0x3265;\n t[\"pieupkiyeokkorean\"] = 0x3172;\n t[\"pieupkorean\"] = 0x3142;\n t[\"pieupparenkorean\"] = 0x3205;\n t[\"pieupsioskiyeokkorean\"] = 0x3174;\n t[\"pieupsioskorean\"] = 0x3144;\n t[\"pieupsiostikeutkorean\"] = 0x3175;\n t[\"pieupthieuthkorean\"] = 0x3177;\n t[\"pieuptikeutkorean\"] = 0x3173;\n t[\"pihiragana\"] = 0x3074;\n t[\"pikatakana\"] = 0x30d4;\n t[\"pisymbolgreek\"] = 0x03d6;\n t[\"piwrarmenian\"] = 0x0583;\n t[\"plus\"] = 0x002b;\n t[\"plusbelowcmb\"] = 0x031f;\n t[\"pluscircle\"] = 0x2295;\n t[\"plusminus\"] = 0x00b1;\n t[\"plusmod\"] = 0x02d6;\n t[\"plusmonospace\"] = 0xff0b;\n t[\"plussmall\"] = 0xfe62;\n t[\"plussuperior\"] = 0x207a;\n t[\"pmonospace\"] = 0xff50;\n t[\"pmsquare\"] = 0x33d8;\n t[\"pohiragana\"] = 0x307d;\n t[\"pointingindexdownwhite\"] = 0x261f;\n t[\"pointingindexleftwhite\"] = 0x261c;\n t[\"pointingindexrightwhite\"] = 0x261e;\n t[\"pointingindexupwhite\"] = 0x261d;\n t[\"pokatakana\"] = 0x30dd;\n t[\"poplathai\"] = 0x0e1b;\n t[\"postalmark\"] = 0x3012;\n t[\"postalmarkface\"] = 0x3020;\n t[\"pparen\"] = 0x24ab;\n t[\"precedes\"] = 0x227a;\n t[\"prescription\"] = 0x211e;\n t[\"primemod\"] = 0x02b9;\n t[\"primereversed\"] = 0x2035;\n t[\"product\"] = 0x220f;\n t[\"projective\"] = 0x2305;\n t[\"prolongedkana\"] = 0x30fc;\n t[\"propellor\"] = 0x2318;\n t[\"propersubset\"] = 0x2282;\n t[\"propersuperset\"] = 0x2283;\n t[\"proportion\"] = 0x2237;\n t[\"proportional\"] = 0x221d;\n t[\"psi\"] = 0x03c8;\n t[\"psicyrillic\"] = 0x0471;\n t[\"psilipneumatacyrilliccmb\"] = 0x0486;\n t[\"pssquare\"] = 0x33b0;\n t[\"puhiragana\"] = 0x3077;\n t[\"pukatakana\"] = 0x30d7;\n t[\"pvsquare\"] = 0x33b4;\n t[\"pwsquare\"] = 0x33ba;\n t[\"q\"] = 0x0071;\n t[\"qadeva\"] = 0x0958;\n t[\"qadmahebrew\"] = 0x05a8;\n t[\"qafarabic\"] = 0x0642;\n t[\"qaffinalarabic\"] = 0xfed6;\n t[\"qafinitialarabic\"] = 0xfed7;\n t[\"qafmedialarabic\"] = 0xfed8;\n t[\"qamats\"] = 0x05b8;\n t[\"qamats10\"] = 0x05b8;\n t[\"qamats1a\"] = 0x05b8;\n t[\"qamats1c\"] = 0x05b8;\n t[\"qamats27\"] = 0x05b8;\n t[\"qamats29\"] = 0x05b8;\n t[\"qamats33\"] = 0x05b8;\n t[\"qamatsde\"] = 0x05b8;\n t[\"qamatshebrew\"] = 0x05b8;\n t[\"qamatsnarrowhebrew\"] = 0x05b8;\n t[\"qamatsqatanhebrew\"] = 0x05b8;\n t[\"qamatsqatannarrowhebrew\"] = 0x05b8;\n t[\"qamatsqatanquarterhebrew\"] = 0x05b8;\n t[\"qamatsqatanwidehebrew\"] = 0x05b8;\n t[\"qamatsquarterhebrew\"] = 0x05b8;\n t[\"qamatswidehebrew\"] = 0x05b8;\n t[\"qarneyparahebrew\"] = 0x059f;\n t[\"qbopomofo\"] = 0x3111;\n t[\"qcircle\"] = 0x24e0;\n t[\"qhook\"] = 0x02a0;\n t[\"qmonospace\"] = 0xff51;\n t[\"qof\"] = 0x05e7;\n t[\"qofdagesh\"] = 0xfb47;\n t[\"qofdageshhebrew\"] = 0xfb47;\n t[\"qofhebrew\"] = 0x05e7;\n t[\"qparen\"] = 0x24ac;\n t[\"quarternote\"] = 0x2669;\n t[\"qubuts\"] = 0x05bb;\n t[\"qubuts18\"] = 0x05bb;\n t[\"qubuts25\"] = 0x05bb;\n t[\"qubuts31\"] = 0x05bb;\n t[\"qubutshebrew\"] = 0x05bb;\n t[\"qubutsnarrowhebrew\"] = 0x05bb;\n t[\"qubutsquarterhebrew\"] = 0x05bb;\n t[\"qubutswidehebrew\"] = 0x05bb;\n t[\"question\"] = 0x003f;\n t[\"questionarabic\"] = 0x061f;\n t[\"questionarmenian\"] = 0x055e;\n t[\"questiondown\"] = 0x00bf;\n t[\"questiondownsmall\"] = 0xf7bf;\n t[\"questiongreek\"] = 0x037e;\n t[\"questionmonospace\"] = 0xff1f;\n t[\"questionsmall\"] = 0xf73f;\n t[\"quotedbl\"] = 0x0022;\n t[\"quotedblbase\"] = 0x201e;\n t[\"quotedblleft\"] = 0x201c;\n t[\"quotedblmonospace\"] = 0xff02;\n t[\"quotedblprime\"] = 0x301e;\n t[\"quotedblprimereversed\"] = 0x301d;\n t[\"quotedblright\"] = 0x201d;\n t[\"quoteleft\"] = 0x2018;\n t[\"quoteleftreversed\"] = 0x201b;\n t[\"quotereversed\"] = 0x201b;\n t[\"quoteright\"] = 0x2019;\n t[\"quoterightn\"] = 0x0149;\n t[\"quotesinglbase\"] = 0x201a;\n t[\"quotesingle\"] = 0x0027;\n t[\"quotesinglemonospace\"] = 0xff07;\n t[\"r\"] = 0x0072;\n t[\"raarmenian\"] = 0x057c;\n t[\"rabengali\"] = 0x09b0;\n t[\"racute\"] = 0x0155;\n t[\"radeva\"] = 0x0930;\n t[\"radical\"] = 0x221a;\n t[\"radicalex\"] = 0xf8e5;\n t[\"radoverssquare\"] = 0x33ae;\n t[\"radoverssquaredsquare\"] = 0x33af;\n t[\"radsquare\"] = 0x33ad;\n t[\"rafe\"] = 0x05bf;\n t[\"rafehebrew\"] = 0x05bf;\n t[\"ragujarati\"] = 0x0ab0;\n t[\"ragurmukhi\"] = 0x0a30;\n t[\"rahiragana\"] = 0x3089;\n t[\"rakatakana\"] = 0x30e9;\n t[\"rakatakanahalfwidth\"] = 0xff97;\n t[\"ralowerdiagonalbengali\"] = 0x09f1;\n t[\"ramiddlediagonalbengali\"] = 0x09f0;\n t[\"ramshorn\"] = 0x0264;\n t[\"ratio\"] = 0x2236;\n t[\"rbopomofo\"] = 0x3116;\n t[\"rcaron\"] = 0x0159;\n t[\"rcedilla\"] = 0x0157;\n t[\"rcircle\"] = 0x24e1;\n t[\"rcommaaccent\"] = 0x0157;\n t[\"rdblgrave\"] = 0x0211;\n t[\"rdotaccent\"] = 0x1e59;\n t[\"rdotbelow\"] = 0x1e5b;\n t[\"rdotbelowmacron\"] = 0x1e5d;\n t[\"referencemark\"] = 0x203b;\n t[\"reflexsubset\"] = 0x2286;\n t[\"reflexsuperset\"] = 0x2287;\n t[\"registered\"] = 0x00ae;\n t[\"registersans\"] = 0xf8e8;\n t[\"registerserif\"] = 0xf6da;\n t[\"reharabic\"] = 0x0631;\n t[\"reharmenian\"] = 0x0580;\n t[\"rehfinalarabic\"] = 0xfeae;\n t[\"rehiragana\"] = 0x308c;\n t[\"rekatakana\"] = 0x30ec;\n t[\"rekatakanahalfwidth\"] = 0xff9a;\n t[\"resh\"] = 0x05e8;\n t[\"reshdageshhebrew\"] = 0xfb48;\n t[\"reshhebrew\"] = 0x05e8;\n t[\"reversedtilde\"] = 0x223d;\n t[\"reviahebrew\"] = 0x0597;\n t[\"reviamugrashhebrew\"] = 0x0597;\n t[\"revlogicalnot\"] = 0x2310;\n t[\"rfishhook\"] = 0x027e;\n t[\"rfishhookreversed\"] = 0x027f;\n t[\"rhabengali\"] = 0x09dd;\n t[\"rhadeva\"] = 0x095d;\n t[\"rho\"] = 0x03c1;\n t[\"rhook\"] = 0x027d;\n t[\"rhookturned\"] = 0x027b;\n t[\"rhookturnedsuperior\"] = 0x02b5;\n t[\"rhosymbolgreek\"] = 0x03f1;\n t[\"rhotichookmod\"] = 0x02de;\n t[\"rieulacirclekorean\"] = 0x3271;\n t[\"rieulaparenkorean\"] = 0x3211;\n t[\"rieulcirclekorean\"] = 0x3263;\n t[\"rieulhieuhkorean\"] = 0x3140;\n t[\"rieulkiyeokkorean\"] = 0x313a;\n t[\"rieulkiyeoksioskorean\"] = 0x3169;\n t[\"rieulkorean\"] = 0x3139;\n t[\"rieulmieumkorean\"] = 0x313b;\n t[\"rieulpansioskorean\"] = 0x316c;\n t[\"rieulparenkorean\"] = 0x3203;\n t[\"rieulphieuphkorean\"] = 0x313f;\n t[\"rieulpieupkorean\"] = 0x313c;\n t[\"rieulpieupsioskorean\"] = 0x316b;\n t[\"rieulsioskorean\"] = 0x313d;\n t[\"rieulthieuthkorean\"] = 0x313e;\n t[\"rieultikeutkorean\"] = 0x316a;\n t[\"rieulyeorinhieuhkorean\"] = 0x316d;\n t[\"rightangle\"] = 0x221f;\n t[\"righttackbelowcmb\"] = 0x0319;\n t[\"righttriangle\"] = 0x22bf;\n t[\"rihiragana\"] = 0x308a;\n t[\"rikatakana\"] = 0x30ea;\n t[\"rikatakanahalfwidth\"] = 0xff98;\n t[\"ring\"] = 0x02da;\n t[\"ringbelowcmb\"] = 0x0325;\n t[\"ringcmb\"] = 0x030a;\n t[\"ringhalfleft\"] = 0x02bf;\n t[\"ringhalfleftarmenian\"] = 0x0559;\n t[\"ringhalfleftbelowcmb\"] = 0x031c;\n t[\"ringhalfleftcentered\"] = 0x02d3;\n t[\"ringhalfright\"] = 0x02be;\n t[\"ringhalfrightbelowcmb\"] = 0x0339;\n t[\"ringhalfrightcentered\"] = 0x02d2;\n t[\"rinvertedbreve\"] = 0x0213;\n t[\"rittorusquare\"] = 0x3351;\n t[\"rlinebelow\"] = 0x1e5f;\n t[\"rlongleg\"] = 0x027c;\n t[\"rlonglegturned\"] = 0x027a;\n t[\"rmonospace\"] = 0xff52;\n t[\"rohiragana\"] = 0x308d;\n t[\"rokatakana\"] = 0x30ed;\n t[\"rokatakanahalfwidth\"] = 0xff9b;\n t[\"roruathai\"] = 0x0e23;\n t[\"rparen\"] = 0x24ad;\n t[\"rrabengali\"] = 0x09dc;\n t[\"rradeva\"] = 0x0931;\n t[\"rragurmukhi\"] = 0x0a5c;\n t[\"rreharabic\"] = 0x0691;\n t[\"rrehfinalarabic\"] = 0xfb8d;\n t[\"rrvocalicbengali\"] = 0x09e0;\n t[\"rrvocalicdeva\"] = 0x0960;\n t[\"rrvocalicgujarati\"] = 0x0ae0;\n t[\"rrvocalicvowelsignbengali\"] = 0x09c4;\n t[\"rrvocalicvowelsigndeva\"] = 0x0944;\n t[\"rrvocalicvowelsigngujarati\"] = 0x0ac4;\n t[\"rsuperior\"] = 0xf6f1;\n t[\"rtblock\"] = 0x2590;\n t[\"rturned\"] = 0x0279;\n t[\"rturnedsuperior\"] = 0x02b4;\n t[\"ruhiragana\"] = 0x308b;\n t[\"rukatakana\"] = 0x30eb;\n t[\"rukatakanahalfwidth\"] = 0xff99;\n t[\"rupeemarkbengali\"] = 0x09f2;\n t[\"rupeesignbengali\"] = 0x09f3;\n t[\"rupiah\"] = 0xf6dd;\n t[\"ruthai\"] = 0x0e24;\n t[\"rvocalicbengali\"] = 0x098b;\n t[\"rvocalicdeva\"] = 0x090b;\n t[\"rvocalicgujarati\"] = 0x0a8b;\n t[\"rvocalicvowelsignbengali\"] = 0x09c3;\n t[\"rvocalicvowelsigndeva\"] = 0x0943;\n t[\"rvocalicvowelsigngujarati\"] = 0x0ac3;\n t[\"s\"] = 0x0073;\n t[\"sabengali\"] = 0x09b8;\n t[\"sacute\"] = 0x015b;\n t[\"sacutedotaccent\"] = 0x1e65;\n t[\"sadarabic\"] = 0x0635;\n t[\"sadeva\"] = 0x0938;\n t[\"sadfinalarabic\"] = 0xfeba;\n t[\"sadinitialarabic\"] = 0xfebb;\n t[\"sadmedialarabic\"] = 0xfebc;\n t[\"sagujarati\"] = 0x0ab8;\n t[\"sagurmukhi\"] = 0x0a38;\n t[\"sahiragana\"] = 0x3055;\n t[\"sakatakana\"] = 0x30b5;\n t[\"sakatakanahalfwidth\"] = 0xff7b;\n t[\"sallallahoualayhewasallamarabic\"] = 0xfdfa;\n t[\"samekh\"] = 0x05e1;\n t[\"samekhdagesh\"] = 0xfb41;\n t[\"samekhdageshhebrew\"] = 0xfb41;\n t[\"samekhhebrew\"] = 0x05e1;\n t[\"saraaathai\"] = 0x0e32;\n t[\"saraaethai\"] = 0x0e41;\n t[\"saraaimaimalaithai\"] = 0x0e44;\n t[\"saraaimaimuanthai\"] = 0x0e43;\n t[\"saraamthai\"] = 0x0e33;\n t[\"saraathai\"] = 0x0e30;\n t[\"saraethai\"] = 0x0e40;\n t[\"saraiileftthai\"] = 0xf886;\n t[\"saraiithai\"] = 0x0e35;\n t[\"saraileftthai\"] = 0xf885;\n t[\"saraithai\"] = 0x0e34;\n t[\"saraothai\"] = 0x0e42;\n t[\"saraueeleftthai\"] = 0xf888;\n t[\"saraueethai\"] = 0x0e37;\n t[\"saraueleftthai\"] = 0xf887;\n t[\"sarauethai\"] = 0x0e36;\n t[\"sarauthai\"] = 0x0e38;\n t[\"sarauuthai\"] = 0x0e39;\n t[\"sbopomofo\"] = 0x3119;\n t[\"scaron\"] = 0x0161;\n t[\"scarondotaccent\"] = 0x1e67;\n t[\"scedilla\"] = 0x015f;\n t[\"schwa\"] = 0x0259;\n t[\"schwacyrillic\"] = 0x04d9;\n t[\"schwadieresiscyrillic\"] = 0x04db;\n t[\"schwahook\"] = 0x025a;\n t[\"scircle\"] = 0x24e2;\n t[\"scircumflex\"] = 0x015d;\n t[\"scommaaccent\"] = 0x0219;\n t[\"sdotaccent\"] = 0x1e61;\n t[\"sdotbelow\"] = 0x1e63;\n t[\"sdotbelowdotaccent\"] = 0x1e69;\n t[\"seagullbelowcmb\"] = 0x033c;\n t[\"second\"] = 0x2033;\n t[\"secondtonechinese\"] = 0x02ca;\n t[\"section\"] = 0x00a7;\n t[\"seenarabic\"] = 0x0633;\n t[\"seenfinalarabic\"] = 0xfeb2;\n t[\"seeninitialarabic\"] = 0xfeb3;\n t[\"seenmedialarabic\"] = 0xfeb4;\n t[\"segol\"] = 0x05b6;\n t[\"segol13\"] = 0x05b6;\n t[\"segol1f\"] = 0x05b6;\n t[\"segol2c\"] = 0x05b6;\n t[\"segolhebrew\"] = 0x05b6;\n t[\"segolnarrowhebrew\"] = 0x05b6;\n t[\"segolquarterhebrew\"] = 0x05b6;\n t[\"segoltahebrew\"] = 0x0592;\n t[\"segolwidehebrew\"] = 0x05b6;\n t[\"seharmenian\"] = 0x057d;\n t[\"sehiragana\"] = 0x305b;\n t[\"sekatakana\"] = 0x30bb;\n t[\"sekatakanahalfwidth\"] = 0xff7e;\n t[\"semicolon\"] = 0x003b;\n t[\"semicolonarabic\"] = 0x061b;\n t[\"semicolonmonospace\"] = 0xff1b;\n t[\"semicolonsmall\"] = 0xfe54;\n t[\"semivoicedmarkkana\"] = 0x309c;\n t[\"semivoicedmarkkanahalfwidth\"] = 0xff9f;\n t[\"sentisquare\"] = 0x3322;\n t[\"sentosquare\"] = 0x3323;\n t[\"seven\"] = 0x0037;\n t[\"sevenarabic\"] = 0x0667;\n t[\"sevenbengali\"] = 0x09ed;\n t[\"sevencircle\"] = 0x2466;\n t[\"sevencircleinversesansserif\"] = 0x2790;\n t[\"sevendeva\"] = 0x096d;\n t[\"seveneighths\"] = 0x215e;\n t[\"sevengujarati\"] = 0x0aed;\n t[\"sevengurmukhi\"] = 0x0a6d;\n t[\"sevenhackarabic\"] = 0x0667;\n t[\"sevenhangzhou\"] = 0x3027;\n t[\"sevenideographicparen\"] = 0x3226;\n t[\"seveninferior\"] = 0x2087;\n t[\"sevenmonospace\"] = 0xff17;\n t[\"sevenoldstyle\"] = 0xf737;\n t[\"sevenparen\"] = 0x247a;\n t[\"sevenperiod\"] = 0x248e;\n t[\"sevenpersian\"] = 0x06f7;\n t[\"sevenroman\"] = 0x2176;\n t[\"sevensuperior\"] = 0x2077;\n t[\"seventeencircle\"] = 0x2470;\n t[\"seventeenparen\"] = 0x2484;\n t[\"seventeenperiod\"] = 0x2498;\n t[\"seventhai\"] = 0x0e57;\n t[\"sfthyphen\"] = 0x00ad;\n t[\"shaarmenian\"] = 0x0577;\n t[\"shabengali\"] = 0x09b6;\n t[\"shacyrillic\"] = 0x0448;\n t[\"shaddaarabic\"] = 0x0651;\n t[\"shaddadammaarabic\"] = 0xfc61;\n t[\"shaddadammatanarabic\"] = 0xfc5e;\n t[\"shaddafathaarabic\"] = 0xfc60;\n t[\"shaddakasraarabic\"] = 0xfc62;\n t[\"shaddakasratanarabic\"] = 0xfc5f;\n t[\"shade\"] = 0x2592;\n t[\"shadedark\"] = 0x2593;\n t[\"shadelight\"] = 0x2591;\n t[\"shademedium\"] = 0x2592;\n t[\"shadeva\"] = 0x0936;\n t[\"shagujarati\"] = 0x0ab6;\n t[\"shagurmukhi\"] = 0x0a36;\n t[\"shalshelethebrew\"] = 0x0593;\n t[\"shbopomofo\"] = 0x3115;\n t[\"shchacyrillic\"] = 0x0449;\n t[\"sheenarabic\"] = 0x0634;\n t[\"sheenfinalarabic\"] = 0xfeb6;\n t[\"sheeninitialarabic\"] = 0xfeb7;\n t[\"sheenmedialarabic\"] = 0xfeb8;\n t[\"sheicoptic\"] = 0x03e3;\n t[\"sheqel\"] = 0x20aa;\n t[\"sheqelhebrew\"] = 0x20aa;\n t[\"sheva\"] = 0x05b0;\n t[\"sheva115\"] = 0x05b0;\n t[\"sheva15\"] = 0x05b0;\n t[\"sheva22\"] = 0x05b0;\n t[\"sheva2e\"] = 0x05b0;\n t[\"shevahebrew\"] = 0x05b0;\n t[\"shevanarrowhebrew\"] = 0x05b0;\n t[\"shevaquarterhebrew\"] = 0x05b0;\n t[\"shevawidehebrew\"] = 0x05b0;\n t[\"shhacyrillic\"] = 0x04bb;\n t[\"shimacoptic\"] = 0x03ed;\n t[\"shin\"] = 0x05e9;\n t[\"shindagesh\"] = 0xfb49;\n t[\"shindageshhebrew\"] = 0xfb49;\n t[\"shindageshshindot\"] = 0xfb2c;\n t[\"shindageshshindothebrew\"] = 0xfb2c;\n t[\"shindageshsindot\"] = 0xfb2d;\n t[\"shindageshsindothebrew\"] = 0xfb2d;\n t[\"shindothebrew\"] = 0x05c1;\n t[\"shinhebrew\"] = 0x05e9;\n t[\"shinshindot\"] = 0xfb2a;\n t[\"shinshindothebrew\"] = 0xfb2a;\n t[\"shinsindot\"] = 0xfb2b;\n t[\"shinsindothebrew\"] = 0xfb2b;\n t[\"shook\"] = 0x0282;\n t[\"sigma\"] = 0x03c3;\n t[\"sigma1\"] = 0x03c2;\n t[\"sigmafinal\"] = 0x03c2;\n t[\"sigmalunatesymbolgreek\"] = 0x03f2;\n t[\"sihiragana\"] = 0x3057;\n t[\"sikatakana\"] = 0x30b7;\n t[\"sikatakanahalfwidth\"] = 0xff7c;\n t[\"siluqhebrew\"] = 0x05bd;\n t[\"siluqlefthebrew\"] = 0x05bd;\n t[\"similar\"] = 0x223c;\n t[\"sindothebrew\"] = 0x05c2;\n t[\"siosacirclekorean\"] = 0x3274;\n t[\"siosaparenkorean\"] = 0x3214;\n t[\"sioscieuckorean\"] = 0x317e;\n t[\"sioscirclekorean\"] = 0x3266;\n t[\"sioskiyeokkorean\"] = 0x317a;\n t[\"sioskorean\"] = 0x3145;\n t[\"siosnieunkorean\"] = 0x317b;\n t[\"siosparenkorean\"] = 0x3206;\n t[\"siospieupkorean\"] = 0x317d;\n t[\"siostikeutkorean\"] = 0x317c;\n t[\"six\"] = 0x0036;\n t[\"sixarabic\"] = 0x0666;\n t[\"sixbengali\"] = 0x09ec;\n t[\"sixcircle\"] = 0x2465;\n t[\"sixcircleinversesansserif\"] = 0x278f;\n t[\"sixdeva\"] = 0x096c;\n t[\"sixgujarati\"] = 0x0aec;\n t[\"sixgurmukhi\"] = 0x0a6c;\n t[\"sixhackarabic\"] = 0x0666;\n t[\"sixhangzhou\"] = 0x3026;\n t[\"sixideographicparen\"] = 0x3225;\n t[\"sixinferior\"] = 0x2086;\n t[\"sixmonospace\"] = 0xff16;\n t[\"sixoldstyle\"] = 0xf736;\n t[\"sixparen\"] = 0x2479;\n t[\"sixperiod\"] = 0x248d;\n t[\"sixpersian\"] = 0x06f6;\n t[\"sixroman\"] = 0x2175;\n t[\"sixsuperior\"] = 0x2076;\n t[\"sixteencircle\"] = 0x246f;\n t[\"sixteencurrencydenominatorbengali\"] = 0x09f9;\n t[\"sixteenparen\"] = 0x2483;\n t[\"sixteenperiod\"] = 0x2497;\n t[\"sixthai\"] = 0x0e56;\n t[\"slash\"] = 0x002f;\n t[\"slashmonospace\"] = 0xff0f;\n t[\"slong\"] = 0x017f;\n t[\"slongdotaccent\"] = 0x1e9b;\n t[\"smileface\"] = 0x263a;\n t[\"smonospace\"] = 0xff53;\n t[\"sofpasuqhebrew\"] = 0x05c3;\n t[\"softhyphen\"] = 0x00ad;\n t[\"softsigncyrillic\"] = 0x044c;\n t[\"sohiragana\"] = 0x305d;\n t[\"sokatakana\"] = 0x30bd;\n t[\"sokatakanahalfwidth\"] = 0xff7f;\n t[\"soliduslongoverlaycmb\"] = 0x0338;\n t[\"solidusshortoverlaycmb\"] = 0x0337;\n t[\"sorusithai\"] = 0x0e29;\n t[\"sosalathai\"] = 0x0e28;\n t[\"sosothai\"] = 0x0e0b;\n t[\"sosuathai\"] = 0x0e2a;\n t[\"space\"] = 0x0020;\n t[\"spacehackarabic\"] = 0x0020;\n t[\"spade\"] = 0x2660;\n t[\"spadesuitblack\"] = 0x2660;\n t[\"spadesuitwhite\"] = 0x2664;\n t[\"sparen\"] = 0x24ae;\n t[\"squarebelowcmb\"] = 0x033b;\n t[\"squarecc\"] = 0x33c4;\n t[\"squarecm\"] = 0x339d;\n t[\"squarediagonalcrosshatchfill\"] = 0x25a9;\n t[\"squarehorizontalfill\"] = 0x25a4;\n t[\"squarekg\"] = 0x338f;\n t[\"squarekm\"] = 0x339e;\n t[\"squarekmcapital\"] = 0x33ce;\n t[\"squareln\"] = 0x33d1;\n t[\"squarelog\"] = 0x33d2;\n t[\"squaremg\"] = 0x338e;\n t[\"squaremil\"] = 0x33d5;\n t[\"squaremm\"] = 0x339c;\n t[\"squaremsquared\"] = 0x33a1;\n t[\"squareorthogonalcrosshatchfill\"] = 0x25a6;\n t[\"squareupperlefttolowerrightfill\"] = 0x25a7;\n t[\"squareupperrighttolowerleftfill\"] = 0x25a8;\n t[\"squareverticalfill\"] = 0x25a5;\n t[\"squarewhitewithsmallblack\"] = 0x25a3;\n t[\"srsquare\"] = 0x33db;\n t[\"ssabengali\"] = 0x09b7;\n t[\"ssadeva\"] = 0x0937;\n t[\"ssagujarati\"] = 0x0ab7;\n t[\"ssangcieuckorean\"] = 0x3149;\n t[\"ssanghieuhkorean\"] = 0x3185;\n t[\"ssangieungkorean\"] = 0x3180;\n t[\"ssangkiyeokkorean\"] = 0x3132;\n t[\"ssangnieunkorean\"] = 0x3165;\n t[\"ssangpieupkorean\"] = 0x3143;\n t[\"ssangsioskorean\"] = 0x3146;\n t[\"ssangtikeutkorean\"] = 0x3138;\n t[\"ssuperior\"] = 0xf6f2;\n t[\"sterling\"] = 0x00a3;\n t[\"sterlingmonospace\"] = 0xffe1;\n t[\"strokelongoverlaycmb\"] = 0x0336;\n t[\"strokeshortoverlaycmb\"] = 0x0335;\n t[\"subset\"] = 0x2282;\n t[\"subsetnotequal\"] = 0x228a;\n t[\"subsetorequal\"] = 0x2286;\n t[\"succeeds\"] = 0x227b;\n t[\"suchthat\"] = 0x220b;\n t[\"suhiragana\"] = 0x3059;\n t[\"sukatakana\"] = 0x30b9;\n t[\"sukatakanahalfwidth\"] = 0xff7d;\n t[\"sukunarabic\"] = 0x0652;\n t[\"summation\"] = 0x2211;\n t[\"sun\"] = 0x263c;\n t[\"superset\"] = 0x2283;\n t[\"supersetnotequal\"] = 0x228b;\n t[\"supersetorequal\"] = 0x2287;\n t[\"svsquare\"] = 0x33dc;\n t[\"syouwaerasquare\"] = 0x337c;\n t[\"t\"] = 0x0074;\n t[\"tabengali\"] = 0x09a4;\n t[\"tackdown\"] = 0x22a4;\n t[\"tackleft\"] = 0x22a3;\n t[\"tadeva\"] = 0x0924;\n t[\"tagujarati\"] = 0x0aa4;\n t[\"tagurmukhi\"] = 0x0a24;\n t[\"taharabic\"] = 0x0637;\n t[\"tahfinalarabic\"] = 0xfec2;\n t[\"tahinitialarabic\"] = 0xfec3;\n t[\"tahiragana\"] = 0x305f;\n t[\"tahmedialarabic\"] = 0xfec4;\n t[\"taisyouerasquare\"] = 0x337d;\n t[\"takatakana\"] = 0x30bf;\n t[\"takatakanahalfwidth\"] = 0xff80;\n t[\"tatweelarabic\"] = 0x0640;\n t[\"tau\"] = 0x03c4;\n t[\"tav\"] = 0x05ea;\n t[\"tavdages\"] = 0xfb4a;\n t[\"tavdagesh\"] = 0xfb4a;\n t[\"tavdageshhebrew\"] = 0xfb4a;\n t[\"tavhebrew\"] = 0x05ea;\n t[\"tbar\"] = 0x0167;\n t[\"tbopomofo\"] = 0x310a;\n t[\"tcaron\"] = 0x0165;\n t[\"tccurl\"] = 0x02a8;\n t[\"tcedilla\"] = 0x0163;\n t[\"tcheharabic\"] = 0x0686;\n t[\"tchehfinalarabic\"] = 0xfb7b;\n t[\"tchehinitialarabic\"] = 0xfb7c;\n t[\"tchehmedialarabic\"] = 0xfb7d;\n t[\"tcircle\"] = 0x24e3;\n t[\"tcircumflexbelow\"] = 0x1e71;\n t[\"tcommaaccent\"] = 0x0163;\n t[\"tdieresis\"] = 0x1e97;\n t[\"tdotaccent\"] = 0x1e6b;\n t[\"tdotbelow\"] = 0x1e6d;\n t[\"tecyrillic\"] = 0x0442;\n t[\"tedescendercyrillic\"] = 0x04ad;\n t[\"teharabic\"] = 0x062a;\n t[\"tehfinalarabic\"] = 0xfe96;\n t[\"tehhahinitialarabic\"] = 0xfca2;\n t[\"tehhahisolatedarabic\"] = 0xfc0c;\n t[\"tehinitialarabic\"] = 0xfe97;\n t[\"tehiragana\"] = 0x3066;\n t[\"tehjeeminitialarabic\"] = 0xfca1;\n t[\"tehjeemisolatedarabic\"] = 0xfc0b;\n t[\"tehmarbutaarabic\"] = 0x0629;\n t[\"tehmarbutafinalarabic\"] = 0xfe94;\n t[\"tehmedialarabic\"] = 0xfe98;\n t[\"tehmeeminitialarabic\"] = 0xfca4;\n t[\"tehmeemisolatedarabic\"] = 0xfc0e;\n t[\"tehnoonfinalarabic\"] = 0xfc73;\n t[\"tekatakana\"] = 0x30c6;\n t[\"tekatakanahalfwidth\"] = 0xff83;\n t[\"telephone\"] = 0x2121;\n t[\"telephoneblack\"] = 0x260e;\n t[\"telishagedolahebrew\"] = 0x05a0;\n t[\"telishaqetanahebrew\"] = 0x05a9;\n t[\"tencircle\"] = 0x2469;\n t[\"tenideographicparen\"] = 0x3229;\n t[\"tenparen\"] = 0x247d;\n t[\"tenperiod\"] = 0x2491;\n t[\"tenroman\"] = 0x2179;\n t[\"tesh\"] = 0x02a7;\n t[\"tet\"] = 0x05d8;\n t[\"tetdagesh\"] = 0xfb38;\n t[\"tetdageshhebrew\"] = 0xfb38;\n t[\"tethebrew\"] = 0x05d8;\n t[\"tetsecyrillic\"] = 0x04b5;\n t[\"tevirhebrew\"] = 0x059b;\n t[\"tevirlefthebrew\"] = 0x059b;\n t[\"thabengali\"] = 0x09a5;\n t[\"thadeva\"] = 0x0925;\n t[\"thagujarati\"] = 0x0aa5;\n t[\"thagurmukhi\"] = 0x0a25;\n t[\"thalarabic\"] = 0x0630;\n t[\"thalfinalarabic\"] = 0xfeac;\n t[\"thanthakhatlowleftthai\"] = 0xf898;\n t[\"thanthakhatlowrightthai\"] = 0xf897;\n t[\"thanthakhatthai\"] = 0x0e4c;\n t[\"thanthakhatupperleftthai\"] = 0xf896;\n t[\"theharabic\"] = 0x062b;\n t[\"thehfinalarabic\"] = 0xfe9a;\n t[\"thehinitialarabic\"] = 0xfe9b;\n t[\"thehmedialarabic\"] = 0xfe9c;\n t[\"thereexists\"] = 0x2203;\n t[\"therefore\"] = 0x2234;\n t[\"theta\"] = 0x03b8;\n t[\"theta1\"] = 0x03d1;\n t[\"thetasymbolgreek\"] = 0x03d1;\n t[\"thieuthacirclekorean\"] = 0x3279;\n t[\"thieuthaparenkorean\"] = 0x3219;\n t[\"thieuthcirclekorean\"] = 0x326b;\n t[\"thieuthkorean\"] = 0x314c;\n t[\"thieuthparenkorean\"] = 0x320b;\n t[\"thirteencircle\"] = 0x246c;\n t[\"thirteenparen\"] = 0x2480;\n t[\"thirteenperiod\"] = 0x2494;\n t[\"thonangmonthothai\"] = 0x0e11;\n t[\"thook\"] = 0x01ad;\n t[\"thophuthaothai\"] = 0x0e12;\n t[\"thorn\"] = 0x00fe;\n t[\"thothahanthai\"] = 0x0e17;\n t[\"thothanthai\"] = 0x0e10;\n t[\"thothongthai\"] = 0x0e18;\n t[\"thothungthai\"] = 0x0e16;\n t[\"thousandcyrillic\"] = 0x0482;\n t[\"thousandsseparatorarabic\"] = 0x066c;\n t[\"thousandsseparatorpersian\"] = 0x066c;\n t[\"three\"] = 0x0033;\n t[\"threearabic\"] = 0x0663;\n t[\"threebengali\"] = 0x09e9;\n t[\"threecircle\"] = 0x2462;\n t[\"threecircleinversesansserif\"] = 0x278c;\n t[\"threedeva\"] = 0x0969;\n t[\"threeeighths\"] = 0x215c;\n t[\"threegujarati\"] = 0x0ae9;\n t[\"threegurmukhi\"] = 0x0a69;\n t[\"threehackarabic\"] = 0x0663;\n t[\"threehangzhou\"] = 0x3023;\n t[\"threeideographicparen\"] = 0x3222;\n t[\"threeinferior\"] = 0x2083;\n t[\"threemonospace\"] = 0xff13;\n t[\"threenumeratorbengali\"] = 0x09f6;\n t[\"threeoldstyle\"] = 0xf733;\n t[\"threeparen\"] = 0x2476;\n t[\"threeperiod\"] = 0x248a;\n t[\"threepersian\"] = 0x06f3;\n t[\"threequarters\"] = 0x00be;\n t[\"threequartersemdash\"] = 0xf6de;\n t[\"threeroman\"] = 0x2172;\n t[\"threesuperior\"] = 0x00b3;\n t[\"threethai\"] = 0x0e53;\n t[\"thzsquare\"] = 0x3394;\n t[\"tihiragana\"] = 0x3061;\n t[\"tikatakana\"] = 0x30c1;\n t[\"tikatakanahalfwidth\"] = 0xff81;\n t[\"tikeutacirclekorean\"] = 0x3270;\n t[\"tikeutaparenkorean\"] = 0x3210;\n t[\"tikeutcirclekorean\"] = 0x3262;\n t[\"tikeutkorean\"] = 0x3137;\n t[\"tikeutparenkorean\"] = 0x3202;\n t[\"tilde\"] = 0x02dc;\n t[\"tildebelowcmb\"] = 0x0330;\n t[\"tildecmb\"] = 0x0303;\n t[\"tildecomb\"] = 0x0303;\n t[\"tildedoublecmb\"] = 0x0360;\n t[\"tildeoperator\"] = 0x223c;\n t[\"tildeoverlaycmb\"] = 0x0334;\n t[\"tildeverticalcmb\"] = 0x033e;\n t[\"timescircle\"] = 0x2297;\n t[\"tipehahebrew\"] = 0x0596;\n t[\"tipehalefthebrew\"] = 0x0596;\n t[\"tippigurmukhi\"] = 0x0a70;\n t[\"titlocyrilliccmb\"] = 0x0483;\n t[\"tiwnarmenian\"] = 0x057f;\n t[\"tlinebelow\"] = 0x1e6f;\n t[\"tmonospace\"] = 0xff54;\n t[\"toarmenian\"] = 0x0569;\n t[\"tohiragana\"] = 0x3068;\n t[\"tokatakana\"] = 0x30c8;\n t[\"tokatakanahalfwidth\"] = 0xff84;\n t[\"tonebarextrahighmod\"] = 0x02e5;\n t[\"tonebarextralowmod\"] = 0x02e9;\n t[\"tonebarhighmod\"] = 0x02e6;\n t[\"tonebarlowmod\"] = 0x02e8;\n t[\"tonebarmidmod\"] = 0x02e7;\n t[\"tonefive\"] = 0x01bd;\n t[\"tonesix\"] = 0x0185;\n t[\"tonetwo\"] = 0x01a8;\n t[\"tonos\"] = 0x0384;\n t[\"tonsquare\"] = 0x3327;\n t[\"topatakthai\"] = 0x0e0f;\n t[\"tortoiseshellbracketleft\"] = 0x3014;\n t[\"tortoiseshellbracketleftsmall\"] = 0xfe5d;\n t[\"tortoiseshellbracketleftvertical\"] = 0xfe39;\n t[\"tortoiseshellbracketright\"] = 0x3015;\n t[\"tortoiseshellbracketrightsmall\"] = 0xfe5e;\n t[\"tortoiseshellbracketrightvertical\"] = 0xfe3a;\n t[\"totaothai\"] = 0x0e15;\n t[\"tpalatalhook\"] = 0x01ab;\n t[\"tparen\"] = 0x24af;\n t[\"trademark\"] = 0x2122;\n t[\"trademarksans\"] = 0xf8ea;\n t[\"trademarkserif\"] = 0xf6db;\n t[\"tretroflexhook\"] = 0x0288;\n t[\"triagdn\"] = 0x25bc;\n t[\"triaglf\"] = 0x25c4;\n t[\"triagrt\"] = 0x25ba;\n t[\"triagup\"] = 0x25b2;\n t[\"ts\"] = 0x02a6;\n t[\"tsadi\"] = 0x05e6;\n t[\"tsadidagesh\"] = 0xfb46;\n t[\"tsadidageshhebrew\"] = 0xfb46;\n t[\"tsadihebrew\"] = 0x05e6;\n t[\"tsecyrillic\"] = 0x0446;\n t[\"tsere\"] = 0x05b5;\n t[\"tsere12\"] = 0x05b5;\n t[\"tsere1e\"] = 0x05b5;\n t[\"tsere2b\"] = 0x05b5;\n t[\"tserehebrew\"] = 0x05b5;\n t[\"tserenarrowhebrew\"] = 0x05b5;\n t[\"tserequarterhebrew\"] = 0x05b5;\n t[\"tserewidehebrew\"] = 0x05b5;\n t[\"tshecyrillic\"] = 0x045b;\n t[\"tsuperior\"] = 0xf6f3;\n t[\"ttabengali\"] = 0x099f;\n t[\"ttadeva\"] = 0x091f;\n t[\"ttagujarati\"] = 0x0a9f;\n t[\"ttagurmukhi\"] = 0x0a1f;\n t[\"tteharabic\"] = 0x0679;\n t[\"ttehfinalarabic\"] = 0xfb67;\n t[\"ttehinitialarabic\"] = 0xfb68;\n t[\"ttehmedialarabic\"] = 0xfb69;\n t[\"tthabengali\"] = 0x09a0;\n t[\"tthadeva\"] = 0x0920;\n t[\"tthagujarati\"] = 0x0aa0;\n t[\"tthagurmukhi\"] = 0x0a20;\n t[\"tturned\"] = 0x0287;\n t[\"tuhiragana\"] = 0x3064;\n t[\"tukatakana\"] = 0x30c4;\n t[\"tukatakanahalfwidth\"] = 0xff82;\n t[\"tusmallhiragana\"] = 0x3063;\n t[\"tusmallkatakana\"] = 0x30c3;\n t[\"tusmallkatakanahalfwidth\"] = 0xff6f;\n t[\"twelvecircle\"] = 0x246b;\n t[\"twelveparen\"] = 0x247f;\n t[\"twelveperiod\"] = 0x2493;\n t[\"twelveroman\"] = 0x217b;\n t[\"twentycircle\"] = 0x2473;\n t[\"twentyhangzhou\"] = 0x5344;\n t[\"twentyparen\"] = 0x2487;\n t[\"twentyperiod\"] = 0x249b;\n t[\"two\"] = 0x0032;\n t[\"twoarabic\"] = 0x0662;\n t[\"twobengali\"] = 0x09e8;\n t[\"twocircle\"] = 0x2461;\n t[\"twocircleinversesansserif\"] = 0x278b;\n t[\"twodeva\"] = 0x0968;\n t[\"twodotenleader\"] = 0x2025;\n t[\"twodotleader\"] = 0x2025;\n t[\"twodotleadervertical\"] = 0xfe30;\n t[\"twogujarati\"] = 0x0ae8;\n t[\"twogurmukhi\"] = 0x0a68;\n t[\"twohackarabic\"] = 0x0662;\n t[\"twohangzhou\"] = 0x3022;\n t[\"twoideographicparen\"] = 0x3221;\n t[\"twoinferior\"] = 0x2082;\n t[\"twomonospace\"] = 0xff12;\n t[\"twonumeratorbengali\"] = 0x09f5;\n t[\"twooldstyle\"] = 0xf732;\n t[\"twoparen\"] = 0x2475;\n t[\"twoperiod\"] = 0x2489;\n t[\"twopersian\"] = 0x06f2;\n t[\"tworoman\"] = 0x2171;\n t[\"twostroke\"] = 0x01bb;\n t[\"twosuperior\"] = 0x00b2;\n t[\"twothai\"] = 0x0e52;\n t[\"twothirds\"] = 0x2154;\n t[\"u\"] = 0x0075;\n t[\"uacute\"] = 0x00fa;\n t[\"ubar\"] = 0x0289;\n t[\"ubengali\"] = 0x0989;\n t[\"ubopomofo\"] = 0x3128;\n t[\"ubreve\"] = 0x016d;\n t[\"ucaron\"] = 0x01d4;\n t[\"ucircle\"] = 0x24e4;\n t[\"ucircumflex\"] = 0x00fb;\n t[\"ucircumflexbelow\"] = 0x1e77;\n t[\"ucyrillic\"] = 0x0443;\n t[\"udattadeva\"] = 0x0951;\n t[\"udblacute\"] = 0x0171;\n t[\"udblgrave\"] = 0x0215;\n t[\"udeva\"] = 0x0909;\n t[\"udieresis\"] = 0x00fc;\n t[\"udieresisacute\"] = 0x01d8;\n t[\"udieresisbelow\"] = 0x1e73;\n t[\"udieresiscaron\"] = 0x01da;\n t[\"udieresiscyrillic\"] = 0x04f1;\n t[\"udieresisgrave\"] = 0x01dc;\n t[\"udieresismacron\"] = 0x01d6;\n t[\"udotbelow\"] = 0x1ee5;\n t[\"ugrave\"] = 0x00f9;\n t[\"ugujarati\"] = 0x0a89;\n t[\"ugurmukhi\"] = 0x0a09;\n t[\"uhiragana\"] = 0x3046;\n t[\"uhookabove\"] = 0x1ee7;\n t[\"uhorn\"] = 0x01b0;\n t[\"uhornacute\"] = 0x1ee9;\n t[\"uhorndotbelow\"] = 0x1ef1;\n t[\"uhorngrave\"] = 0x1eeb;\n t[\"uhornhookabove\"] = 0x1eed;\n t[\"uhorntilde\"] = 0x1eef;\n t[\"uhungarumlaut\"] = 0x0171;\n t[\"uhungarumlautcyrillic\"] = 0x04f3;\n t[\"uinvertedbreve\"] = 0x0217;\n t[\"ukatakana\"] = 0x30a6;\n t[\"ukatakanahalfwidth\"] = 0xff73;\n t[\"ukcyrillic\"] = 0x0479;\n t[\"ukorean\"] = 0x315c;\n t[\"umacron\"] = 0x016b;\n t[\"umacroncyrillic\"] = 0x04ef;\n t[\"umacrondieresis\"] = 0x1e7b;\n t[\"umatragurmukhi\"] = 0x0a41;\n t[\"umonospace\"] = 0xff55;\n t[\"underscore\"] = 0x005f;\n t[\"underscoredbl\"] = 0x2017;\n t[\"underscoremonospace\"] = 0xff3f;\n t[\"underscorevertical\"] = 0xfe33;\n t[\"underscorewavy\"] = 0xfe4f;\n t[\"union\"] = 0x222a;\n t[\"universal\"] = 0x2200;\n t[\"uogonek\"] = 0x0173;\n t[\"uparen\"] = 0x24b0;\n t[\"upblock\"] = 0x2580;\n t[\"upperdothebrew\"] = 0x05c4;\n t[\"upsilon\"] = 0x03c5;\n t[\"upsilondieresis\"] = 0x03cb;\n t[\"upsilondieresistonos\"] = 0x03b0;\n t[\"upsilonlatin\"] = 0x028a;\n t[\"upsilontonos\"] = 0x03cd;\n t[\"uptackbelowcmb\"] = 0x031d;\n t[\"uptackmod\"] = 0x02d4;\n t[\"uragurmukhi\"] = 0x0a73;\n t[\"uring\"] = 0x016f;\n t[\"ushortcyrillic\"] = 0x045e;\n t[\"usmallhiragana\"] = 0x3045;\n t[\"usmallkatakana\"] = 0x30a5;\n t[\"usmallkatakanahalfwidth\"] = 0xff69;\n t[\"ustraightcyrillic\"] = 0x04af;\n t[\"ustraightstrokecyrillic\"] = 0x04b1;\n t[\"utilde\"] = 0x0169;\n t[\"utildeacute\"] = 0x1e79;\n t[\"utildebelow\"] = 0x1e75;\n t[\"uubengali\"] = 0x098a;\n t[\"uudeva\"] = 0x090a;\n t[\"uugujarati\"] = 0x0a8a;\n t[\"uugurmukhi\"] = 0x0a0a;\n t[\"uumatragurmukhi\"] = 0x0a42;\n t[\"uuvowelsignbengali\"] = 0x09c2;\n t[\"uuvowelsigndeva\"] = 0x0942;\n t[\"uuvowelsigngujarati\"] = 0x0ac2;\n t[\"uvowelsignbengali\"] = 0x09c1;\n t[\"uvowelsigndeva\"] = 0x0941;\n t[\"uvowelsigngujarati\"] = 0x0ac1;\n t[\"v\"] = 0x0076;\n t[\"vadeva\"] = 0x0935;\n t[\"vagujarati\"] = 0x0ab5;\n t[\"vagurmukhi\"] = 0x0a35;\n t[\"vakatakana\"] = 0x30f7;\n t[\"vav\"] = 0x05d5;\n t[\"vavdagesh\"] = 0xfb35;\n t[\"vavdagesh65\"] = 0xfb35;\n t[\"vavdageshhebrew\"] = 0xfb35;\n t[\"vavhebrew\"] = 0x05d5;\n t[\"vavholam\"] = 0xfb4b;\n t[\"vavholamhebrew\"] = 0xfb4b;\n t[\"vavvavhebrew\"] = 0x05f0;\n t[\"vavyodhebrew\"] = 0x05f1;\n t[\"vcircle\"] = 0x24e5;\n t[\"vdotbelow\"] = 0x1e7f;\n t[\"vecyrillic\"] = 0x0432;\n t[\"veharabic\"] = 0x06a4;\n t[\"vehfinalarabic\"] = 0xfb6b;\n t[\"vehinitialarabic\"] = 0xfb6c;\n t[\"vehmedialarabic\"] = 0xfb6d;\n t[\"vekatakana\"] = 0x30f9;\n t[\"venus\"] = 0x2640;\n t[\"verticalbar\"] = 0x007c;\n t[\"verticallineabovecmb\"] = 0x030d;\n t[\"verticallinebelowcmb\"] = 0x0329;\n t[\"verticallinelowmod\"] = 0x02cc;\n t[\"verticallinemod\"] = 0x02c8;\n t[\"vewarmenian\"] = 0x057e;\n t[\"vhook\"] = 0x028b;\n t[\"vikatakana\"] = 0x30f8;\n t[\"viramabengali\"] = 0x09cd;\n t[\"viramadeva\"] = 0x094d;\n t[\"viramagujarati\"] = 0x0acd;\n t[\"visargabengali\"] = 0x0983;\n t[\"visargadeva\"] = 0x0903;\n t[\"visargagujarati\"] = 0x0a83;\n t[\"vmonospace\"] = 0xff56;\n t[\"voarmenian\"] = 0x0578;\n t[\"voicediterationhiragana\"] = 0x309e;\n t[\"voicediterationkatakana\"] = 0x30fe;\n t[\"voicedmarkkana\"] = 0x309b;\n t[\"voicedmarkkanahalfwidth\"] = 0xff9e;\n t[\"vokatakana\"] = 0x30fa;\n t[\"vparen\"] = 0x24b1;\n t[\"vtilde\"] = 0x1e7d;\n t[\"vturned\"] = 0x028c;\n t[\"vuhiragana\"] = 0x3094;\n t[\"vukatakana\"] = 0x30f4;\n t[\"w\"] = 0x0077;\n t[\"wacute\"] = 0x1e83;\n t[\"waekorean\"] = 0x3159;\n t[\"wahiragana\"] = 0x308f;\n t[\"wakatakana\"] = 0x30ef;\n t[\"wakatakanahalfwidth\"] = 0xff9c;\n t[\"wakorean\"] = 0x3158;\n t[\"wasmallhiragana\"] = 0x308e;\n t[\"wasmallkatakana\"] = 0x30ee;\n t[\"wattosquare\"] = 0x3357;\n t[\"wavedash\"] = 0x301c;\n t[\"wavyunderscorevertical\"] = 0xfe34;\n t[\"wawarabic\"] = 0x0648;\n t[\"wawfinalarabic\"] = 0xfeee;\n t[\"wawhamzaabovearabic\"] = 0x0624;\n t[\"wawhamzaabovefinalarabic\"] = 0xfe86;\n t[\"wbsquare\"] = 0x33dd;\n t[\"wcircle\"] = 0x24e6;\n t[\"wcircumflex\"] = 0x0175;\n t[\"wdieresis\"] = 0x1e85;\n t[\"wdotaccent\"] = 0x1e87;\n t[\"wdotbelow\"] = 0x1e89;\n t[\"wehiragana\"] = 0x3091;\n t[\"weierstrass\"] = 0x2118;\n t[\"wekatakana\"] = 0x30f1;\n t[\"wekorean\"] = 0x315e;\n t[\"weokorean\"] = 0x315d;\n t[\"wgrave\"] = 0x1e81;\n t[\"whitebullet\"] = 0x25e6;\n t[\"whitecircle\"] = 0x25cb;\n t[\"whitecircleinverse\"] = 0x25d9;\n t[\"whitecornerbracketleft\"] = 0x300e;\n t[\"whitecornerbracketleftvertical\"] = 0xfe43;\n t[\"whitecornerbracketright\"] = 0x300f;\n t[\"whitecornerbracketrightvertical\"] = 0xfe44;\n t[\"whitediamond\"] = 0x25c7;\n t[\"whitediamondcontainingblacksmalldiamond\"] = 0x25c8;\n t[\"whitedownpointingsmalltriangle\"] = 0x25bf;\n t[\"whitedownpointingtriangle\"] = 0x25bd;\n t[\"whiteleftpointingsmalltriangle\"] = 0x25c3;\n t[\"whiteleftpointingtriangle\"] = 0x25c1;\n t[\"whitelenticularbracketleft\"] = 0x3016;\n t[\"whitelenticularbracketright\"] = 0x3017;\n t[\"whiterightpointingsmalltriangle\"] = 0x25b9;\n t[\"whiterightpointingtriangle\"] = 0x25b7;\n t[\"whitesmallsquare\"] = 0x25ab;\n t[\"whitesmilingface\"] = 0x263a;\n t[\"whitesquare\"] = 0x25a1;\n t[\"whitestar\"] = 0x2606;\n t[\"whitetelephone\"] = 0x260f;\n t[\"whitetortoiseshellbracketleft\"] = 0x3018;\n t[\"whitetortoiseshellbracketright\"] = 0x3019;\n t[\"whiteuppointingsmalltriangle\"] = 0x25b5;\n t[\"whiteuppointingtriangle\"] = 0x25b3;\n t[\"wihiragana\"] = 0x3090;\n t[\"wikatakana\"] = 0x30f0;\n t[\"wikorean\"] = 0x315f;\n t[\"wmonospace\"] = 0xff57;\n t[\"wohiragana\"] = 0x3092;\n t[\"wokatakana\"] = 0x30f2;\n t[\"wokatakanahalfwidth\"] = 0xff66;\n t[\"won\"] = 0x20a9;\n t[\"wonmonospace\"] = 0xffe6;\n t[\"wowaenthai\"] = 0x0e27;\n t[\"wparen\"] = 0x24b2;\n t[\"wring\"] = 0x1e98;\n t[\"wsuperior\"] = 0x02b7;\n t[\"wturned\"] = 0x028d;\n t[\"wynn\"] = 0x01bf;\n t[\"x\"] = 0x0078;\n t[\"xabovecmb\"] = 0x033d;\n t[\"xbopomofo\"] = 0x3112;\n t[\"xcircle\"] = 0x24e7;\n t[\"xdieresis\"] = 0x1e8d;\n t[\"xdotaccent\"] = 0x1e8b;\n t[\"xeharmenian\"] = 0x056d;\n t[\"xi\"] = 0x03be;\n t[\"xmonospace\"] = 0xff58;\n t[\"xparen\"] = 0x24b3;\n t[\"xsuperior\"] = 0x02e3;\n t[\"y\"] = 0x0079;\n t[\"yaadosquare\"] = 0x334e;\n t[\"yabengali\"] = 0x09af;\n t[\"yacute\"] = 0x00fd;\n t[\"yadeva\"] = 0x092f;\n t[\"yaekorean\"] = 0x3152;\n t[\"yagujarati\"] = 0x0aaf;\n t[\"yagurmukhi\"] = 0x0a2f;\n t[\"yahiragana\"] = 0x3084;\n t[\"yakatakana\"] = 0x30e4;\n t[\"yakatakanahalfwidth\"] = 0xff94;\n t[\"yakorean\"] = 0x3151;\n t[\"yamakkanthai\"] = 0x0e4e;\n t[\"yasmallhiragana\"] = 0x3083;\n t[\"yasmallkatakana\"] = 0x30e3;\n t[\"yasmallkatakanahalfwidth\"] = 0xff6c;\n t[\"yatcyrillic\"] = 0x0463;\n t[\"ycircle\"] = 0x24e8;\n t[\"ycircumflex\"] = 0x0177;\n t[\"ydieresis\"] = 0x00ff;\n t[\"ydotaccent\"] = 0x1e8f;\n t[\"ydotbelow\"] = 0x1ef5;\n t[\"yeharabic\"] = 0x064a;\n t[\"yehbarreearabic\"] = 0x06d2;\n t[\"yehbarreefinalarabic\"] = 0xfbaf;\n t[\"yehfinalarabic\"] = 0xfef2;\n t[\"yehhamzaabovearabic\"] = 0x0626;\n t[\"yehhamzaabovefinalarabic\"] = 0xfe8a;\n t[\"yehhamzaaboveinitialarabic\"] = 0xfe8b;\n t[\"yehhamzaabovemedialarabic\"] = 0xfe8c;\n t[\"yehinitialarabic\"] = 0xfef3;\n t[\"yehmedialarabic\"] = 0xfef4;\n t[\"yehmeeminitialarabic\"] = 0xfcdd;\n t[\"yehmeemisolatedarabic\"] = 0xfc58;\n t[\"yehnoonfinalarabic\"] = 0xfc94;\n t[\"yehthreedotsbelowarabic\"] = 0x06d1;\n t[\"yekorean\"] = 0x3156;\n t[\"yen\"] = 0x00a5;\n t[\"yenmonospace\"] = 0xffe5;\n t[\"yeokorean\"] = 0x3155;\n t[\"yeorinhieuhkorean\"] = 0x3186;\n t[\"yerahbenyomohebrew\"] = 0x05aa;\n t[\"yerahbenyomolefthebrew\"] = 0x05aa;\n t[\"yericyrillic\"] = 0x044b;\n t[\"yerudieresiscyrillic\"] = 0x04f9;\n t[\"yesieungkorean\"] = 0x3181;\n t[\"yesieungpansioskorean\"] = 0x3183;\n t[\"yesieungsioskorean\"] = 0x3182;\n t[\"yetivhebrew\"] = 0x059a;\n t[\"ygrave\"] = 0x1ef3;\n t[\"yhook\"] = 0x01b4;\n t[\"yhookabove\"] = 0x1ef7;\n t[\"yiarmenian\"] = 0x0575;\n t[\"yicyrillic\"] = 0x0457;\n t[\"yikorean\"] = 0x3162;\n t[\"yinyang\"] = 0x262f;\n t[\"yiwnarmenian\"] = 0x0582;\n t[\"ymonospace\"] = 0xff59;\n t[\"yod\"] = 0x05d9;\n t[\"yoddagesh\"] = 0xfb39;\n t[\"yoddageshhebrew\"] = 0xfb39;\n t[\"yodhebrew\"] = 0x05d9;\n t[\"yodyodhebrew\"] = 0x05f2;\n t[\"yodyodpatahhebrew\"] = 0xfb1f;\n t[\"yohiragana\"] = 0x3088;\n t[\"yoikorean\"] = 0x3189;\n t[\"yokatakana\"] = 0x30e8;\n t[\"yokatakanahalfwidth\"] = 0xff96;\n t[\"yokorean\"] = 0x315b;\n t[\"yosmallhiragana\"] = 0x3087;\n t[\"yosmallkatakana\"] = 0x30e7;\n t[\"yosmallkatakanahalfwidth\"] = 0xff6e;\n t[\"yotgreek\"] = 0x03f3;\n t[\"yoyaekorean\"] = 0x3188;\n t[\"yoyakorean\"] = 0x3187;\n t[\"yoyakthai\"] = 0x0e22;\n t[\"yoyingthai\"] = 0x0e0d;\n t[\"yparen\"] = 0x24b4;\n t[\"ypogegrammeni\"] = 0x037a;\n t[\"ypogegrammenigreekcmb\"] = 0x0345;\n t[\"yr\"] = 0x01a6;\n t[\"yring\"] = 0x1e99;\n t[\"ysuperior\"] = 0x02b8;\n t[\"ytilde\"] = 0x1ef9;\n t[\"yturned\"] = 0x028e;\n t[\"yuhiragana\"] = 0x3086;\n t[\"yuikorean\"] = 0x318c;\n t[\"yukatakana\"] = 0x30e6;\n t[\"yukatakanahalfwidth\"] = 0xff95;\n t[\"yukorean\"] = 0x3160;\n t[\"yusbigcyrillic\"] = 0x046b;\n t[\"yusbigiotifiedcyrillic\"] = 0x046d;\n t[\"yuslittlecyrillic\"] = 0x0467;\n t[\"yuslittleiotifiedcyrillic\"] = 0x0469;\n t[\"yusmallhiragana\"] = 0x3085;\n t[\"yusmallkatakana\"] = 0x30e5;\n t[\"yusmallkatakanahalfwidth\"] = 0xff6d;\n t[\"yuyekorean\"] = 0x318b;\n t[\"yuyeokorean\"] = 0x318a;\n t[\"yyabengali\"] = 0x09df;\n t[\"yyadeva\"] = 0x095f;\n t[\"z\"] = 0x007a;\n t[\"zaarmenian\"] = 0x0566;\n t[\"zacute\"] = 0x017a;\n t[\"zadeva\"] = 0x095b;\n t[\"zagurmukhi\"] = 0x0a5b;\n t[\"zaharabic\"] = 0x0638;\n t[\"zahfinalarabic\"] = 0xfec6;\n t[\"zahinitialarabic\"] = 0xfec7;\n t[\"zahiragana\"] = 0x3056;\n t[\"zahmedialarabic\"] = 0xfec8;\n t[\"zainarabic\"] = 0x0632;\n t[\"zainfinalarabic\"] = 0xfeb0;\n t[\"zakatakana\"] = 0x30b6;\n t[\"zaqefgadolhebrew\"] = 0x0595;\n t[\"zaqefqatanhebrew\"] = 0x0594;\n t[\"zarqahebrew\"] = 0x0598;\n t[\"zayin\"] = 0x05d6;\n t[\"zayindagesh\"] = 0xfb36;\n t[\"zayindageshhebrew\"] = 0xfb36;\n t[\"zayinhebrew\"] = 0x05d6;\n t[\"zbopomofo\"] = 0x3117;\n t[\"zcaron\"] = 0x017e;\n t[\"zcircle\"] = 0x24e9;\n t[\"zcircumflex\"] = 0x1e91;\n t[\"zcurl\"] = 0x0291;\n t[\"zdot\"] = 0x017c;\n t[\"zdotaccent\"] = 0x017c;\n t[\"zdotbelow\"] = 0x1e93;\n t[\"zecyrillic\"] = 0x0437;\n t[\"zedescendercyrillic\"] = 0x0499;\n t[\"zedieresiscyrillic\"] = 0x04df;\n t[\"zehiragana\"] = 0x305c;\n t[\"zekatakana\"] = 0x30bc;\n t[\"zero\"] = 0x0030;\n t[\"zeroarabic\"] = 0x0660;\n t[\"zerobengali\"] = 0x09e6;\n t[\"zerodeva\"] = 0x0966;\n t[\"zerogujarati\"] = 0x0ae6;\n t[\"zerogurmukhi\"] = 0x0a66;\n t[\"zerohackarabic\"] = 0x0660;\n t[\"zeroinferior\"] = 0x2080;\n t[\"zeromonospace\"] = 0xff10;\n t[\"zerooldstyle\"] = 0xf730;\n t[\"zeropersian\"] = 0x06f0;\n t[\"zerosuperior\"] = 0x2070;\n t[\"zerothai\"] = 0x0e50;\n t[\"zerowidthjoiner\"] = 0xfeff;\n t[\"zerowidthnonjoiner\"] = 0x200c;\n t[\"zerowidthspace\"] = 0x200b;\n t[\"zeta\"] = 0x03b6;\n t[\"zhbopomofo\"] = 0x3113;\n t[\"zhearmenian\"] = 0x056a;\n t[\"zhebrevecyrillic\"] = 0x04c2;\n t[\"zhecyrillic\"] = 0x0436;\n t[\"zhedescendercyrillic\"] = 0x0497;\n t[\"zhedieresiscyrillic\"] = 0x04dd;\n t[\"zihiragana\"] = 0x3058;\n t[\"zikatakana\"] = 0x30b8;\n t[\"zinorhebrew\"] = 0x05ae;\n t[\"zlinebelow\"] = 0x1e95;\n t[\"zmonospace\"] = 0xff5a;\n t[\"zohiragana\"] = 0x305e;\n t[\"zokatakana\"] = 0x30be;\n t[\"zparen\"] = 0x24b5;\n t[\"zretroflexhook\"] = 0x0290;\n t[\"zstroke\"] = 0x01b6;\n t[\"zuhiragana\"] = 0x305a;\n t[\"zukatakana\"] = 0x30ba;\n t[\".notdef\"] = 0x0000;\n t[\"angbracketleftbig\"] = 0x2329;\n t[\"angbracketleftBig\"] = 0x2329;\n t[\"angbracketleftbigg\"] = 0x2329;\n t[\"angbracketleftBigg\"] = 0x2329;\n t[\"angbracketrightBig\"] = 0x232a;\n t[\"angbracketrightbig\"] = 0x232a;\n t[\"angbracketrightBigg\"] = 0x232a;\n t[\"angbracketrightbigg\"] = 0x232a;\n t[\"arrowhookleft\"] = 0x21aa;\n t[\"arrowhookright\"] = 0x21a9;\n t[\"arrowlefttophalf\"] = 0x21bc;\n t[\"arrowleftbothalf\"] = 0x21bd;\n t[\"arrownortheast\"] = 0x2197;\n t[\"arrownorthwest\"] = 0x2196;\n t[\"arrowrighttophalf\"] = 0x21c0;\n t[\"arrowrightbothalf\"] = 0x21c1;\n t[\"arrowsoutheast\"] = 0x2198;\n t[\"arrowsouthwest\"] = 0x2199;\n t[\"backslashbig\"] = 0x2216;\n t[\"backslashBig\"] = 0x2216;\n t[\"backslashBigg\"] = 0x2216;\n t[\"backslashbigg\"] = 0x2216;\n t[\"bardbl\"] = 0x2016;\n t[\"bracehtipdownleft\"] = 0xfe37;\n t[\"bracehtipdownright\"] = 0xfe37;\n t[\"bracehtipupleft\"] = 0xfe38;\n t[\"bracehtipupright\"] = 0xfe38;\n t[\"braceleftBig\"] = 0x007b;\n t[\"braceleftbig\"] = 0x007b;\n t[\"braceleftbigg\"] = 0x007b;\n t[\"braceleftBigg\"] = 0x007b;\n t[\"bracerightBig\"] = 0x007d;\n t[\"bracerightbig\"] = 0x007d;\n t[\"bracerightbigg\"] = 0x007d;\n t[\"bracerightBigg\"] = 0x007d;\n t[\"bracketleftbig\"] = 0x005b;\n t[\"bracketleftBig\"] = 0x005b;\n t[\"bracketleftbigg\"] = 0x005b;\n t[\"bracketleftBigg\"] = 0x005b;\n t[\"bracketrightBig\"] = 0x005d;\n t[\"bracketrightbig\"] = 0x005d;\n t[\"bracketrightbigg\"] = 0x005d;\n t[\"bracketrightBigg\"] = 0x005d;\n t[\"ceilingleftbig\"] = 0x2308;\n t[\"ceilingleftBig\"] = 0x2308;\n t[\"ceilingleftBigg\"] = 0x2308;\n t[\"ceilingleftbigg\"] = 0x2308;\n t[\"ceilingrightbig\"] = 0x2309;\n t[\"ceilingrightBig\"] = 0x2309;\n t[\"ceilingrightbigg\"] = 0x2309;\n t[\"ceilingrightBigg\"] = 0x2309;\n t[\"circledotdisplay\"] = 0x2299;\n t[\"circledottext\"] = 0x2299;\n t[\"circlemultiplydisplay\"] = 0x2297;\n t[\"circlemultiplytext\"] = 0x2297;\n t[\"circleplusdisplay\"] = 0x2295;\n t[\"circleplustext\"] = 0x2295;\n t[\"contintegraldisplay\"] = 0x222e;\n t[\"contintegraltext\"] = 0x222e;\n t[\"coproductdisplay\"] = 0x2210;\n t[\"coproducttext\"] = 0x2210;\n t[\"floorleftBig\"] = 0x230a;\n t[\"floorleftbig\"] = 0x230a;\n t[\"floorleftbigg\"] = 0x230a;\n t[\"floorleftBigg\"] = 0x230a;\n t[\"floorrightbig\"] = 0x230b;\n t[\"floorrightBig\"] = 0x230b;\n t[\"floorrightBigg\"] = 0x230b;\n t[\"floorrightbigg\"] = 0x230b;\n t[\"hatwide\"] = 0x0302;\n t[\"hatwider\"] = 0x0302;\n t[\"hatwidest\"] = 0x0302;\n t[\"intercal\"] = 0x1d40;\n t[\"integraldisplay\"] = 0x222b;\n t[\"integraltext\"] = 0x222b;\n t[\"intersectiondisplay\"] = 0x22c2;\n t[\"intersectiontext\"] = 0x22c2;\n t[\"logicalanddisplay\"] = 0x2227;\n t[\"logicalandtext\"] = 0x2227;\n t[\"logicalordisplay\"] = 0x2228;\n t[\"logicalortext\"] = 0x2228;\n t[\"parenleftBig\"] = 0x0028;\n t[\"parenleftbig\"] = 0x0028;\n t[\"parenleftBigg\"] = 0x0028;\n t[\"parenleftbigg\"] = 0x0028;\n t[\"parenrightBig\"] = 0x0029;\n t[\"parenrightbig\"] = 0x0029;\n t[\"parenrightBigg\"] = 0x0029;\n t[\"parenrightbigg\"] = 0x0029;\n t[\"prime\"] = 0x2032;\n t[\"productdisplay\"] = 0x220f;\n t[\"producttext\"] = 0x220f;\n t[\"radicalbig\"] = 0x221a;\n t[\"radicalBig\"] = 0x221a;\n t[\"radicalBigg\"] = 0x221a;\n t[\"radicalbigg\"] = 0x221a;\n t[\"radicalbt\"] = 0x221a;\n t[\"radicaltp\"] = 0x221a;\n t[\"radicalvertex\"] = 0x221a;\n t[\"slashbig\"] = 0x002f;\n t[\"slashBig\"] = 0x002f;\n t[\"slashBigg\"] = 0x002f;\n t[\"slashbigg\"] = 0x002f;\n t[\"summationdisplay\"] = 0x2211;\n t[\"summationtext\"] = 0x2211;\n t[\"tildewide\"] = 0x02dc;\n t[\"tildewider\"] = 0x02dc;\n t[\"tildewidest\"] = 0x02dc;\n t[\"uniondisplay\"] = 0x22c3;\n t[\"unionmultidisplay\"] = 0x228e;\n t[\"unionmultitext\"] = 0x228e;\n t[\"unionsqdisplay\"] = 0x2294;\n t[\"unionsqtext\"] = 0x2294;\n t[\"uniontext\"] = 0x22c3;\n t[\"vextenddouble\"] = 0x2225;\n t[\"vextendsingle\"] = 0x2223;\n});\nvar getDingbatsGlyphsUnicode = getLookupTableFactory(function (t) {\n t[\"space\"] = 0x0020;\n t[\"a1\"] = 0x2701;\n t[\"a2\"] = 0x2702;\n t[\"a202\"] = 0x2703;\n t[\"a3\"] = 0x2704;\n t[\"a4\"] = 0x260e;\n t[\"a5\"] = 0x2706;\n t[\"a119\"] = 0x2707;\n t[\"a118\"] = 0x2708;\n t[\"a117\"] = 0x2709;\n t[\"a11\"] = 0x261b;\n t[\"a12\"] = 0x261e;\n t[\"a13\"] = 0x270c;\n t[\"a14\"] = 0x270d;\n t[\"a15\"] = 0x270e;\n t[\"a16\"] = 0x270f;\n t[\"a105\"] = 0x2710;\n t[\"a17\"] = 0x2711;\n t[\"a18\"] = 0x2712;\n t[\"a19\"] = 0x2713;\n t[\"a20\"] = 0x2714;\n t[\"a21\"] = 0x2715;\n t[\"a22\"] = 0x2716;\n t[\"a23\"] = 0x2717;\n t[\"a24\"] = 0x2718;\n t[\"a25\"] = 0x2719;\n t[\"a26\"] = 0x271a;\n t[\"a27\"] = 0x271b;\n t[\"a28\"] = 0x271c;\n t[\"a6\"] = 0x271d;\n t[\"a7\"] = 0x271e;\n t[\"a8\"] = 0x271f;\n t[\"a9\"] = 0x2720;\n t[\"a10\"] = 0x2721;\n t[\"a29\"] = 0x2722;\n t[\"a30\"] = 0x2723;\n t[\"a31\"] = 0x2724;\n t[\"a32\"] = 0x2725;\n t[\"a33\"] = 0x2726;\n t[\"a34\"] = 0x2727;\n t[\"a35\"] = 0x2605;\n t[\"a36\"] = 0x2729;\n t[\"a37\"] = 0x272a;\n t[\"a38\"] = 0x272b;\n t[\"a39\"] = 0x272c;\n t[\"a40\"] = 0x272d;\n t[\"a41\"] = 0x272e;\n t[\"a42\"] = 0x272f;\n t[\"a43\"] = 0x2730;\n t[\"a44\"] = 0x2731;\n t[\"a45\"] = 0x2732;\n t[\"a46\"] = 0x2733;\n t[\"a47\"] = 0x2734;\n t[\"a48\"] = 0x2735;\n t[\"a49\"] = 0x2736;\n t[\"a50\"] = 0x2737;\n t[\"a51\"] = 0x2738;\n t[\"a52\"] = 0x2739;\n t[\"a53\"] = 0x273a;\n t[\"a54\"] = 0x273b;\n t[\"a55\"] = 0x273c;\n t[\"a56\"] = 0x273d;\n t[\"a57\"] = 0x273e;\n t[\"a58\"] = 0x273f;\n t[\"a59\"] = 0x2740;\n t[\"a60\"] = 0x2741;\n t[\"a61\"] = 0x2742;\n t[\"a62\"] = 0x2743;\n t[\"a63\"] = 0x2744;\n t[\"a64\"] = 0x2745;\n t[\"a65\"] = 0x2746;\n t[\"a66\"] = 0x2747;\n t[\"a67\"] = 0x2748;\n t[\"a68\"] = 0x2749;\n t[\"a69\"] = 0x274a;\n t[\"a70\"] = 0x274b;\n t[\"a71\"] = 0x25cf;\n t[\"a72\"] = 0x274d;\n t[\"a73\"] = 0x25a0;\n t[\"a74\"] = 0x274f;\n t[\"a203\"] = 0x2750;\n t[\"a75\"] = 0x2751;\n t[\"a204\"] = 0x2752;\n t[\"a76\"] = 0x25b2;\n t[\"a77\"] = 0x25bc;\n t[\"a78\"] = 0x25c6;\n t[\"a79\"] = 0x2756;\n t[\"a81\"] = 0x25d7;\n t[\"a82\"] = 0x2758;\n t[\"a83\"] = 0x2759;\n t[\"a84\"] = 0x275a;\n t[\"a97\"] = 0x275b;\n t[\"a98\"] = 0x275c;\n t[\"a99\"] = 0x275d;\n t[\"a100\"] = 0x275e;\n t[\"a101\"] = 0x2761;\n t[\"a102\"] = 0x2762;\n t[\"a103\"] = 0x2763;\n t[\"a104\"] = 0x2764;\n t[\"a106\"] = 0x2765;\n t[\"a107\"] = 0x2766;\n t[\"a108\"] = 0x2767;\n t[\"a112\"] = 0x2663;\n t[\"a111\"] = 0x2666;\n t[\"a110\"] = 0x2665;\n t[\"a109\"] = 0x2660;\n t[\"a120\"] = 0x2460;\n t[\"a121\"] = 0x2461;\n t[\"a122\"] = 0x2462;\n t[\"a123\"] = 0x2463;\n t[\"a124\"] = 0x2464;\n t[\"a125\"] = 0x2465;\n t[\"a126\"] = 0x2466;\n t[\"a127\"] = 0x2467;\n t[\"a128\"] = 0x2468;\n t[\"a129\"] = 0x2469;\n t[\"a130\"] = 0x2776;\n t[\"a131\"] = 0x2777;\n t[\"a132\"] = 0x2778;\n t[\"a133\"] = 0x2779;\n t[\"a134\"] = 0x277a;\n t[\"a135\"] = 0x277b;\n t[\"a136\"] = 0x277c;\n t[\"a137\"] = 0x277d;\n t[\"a138\"] = 0x277e;\n t[\"a139\"] = 0x277f;\n t[\"a140\"] = 0x2780;\n t[\"a141\"] = 0x2781;\n t[\"a142\"] = 0x2782;\n t[\"a143\"] = 0x2783;\n t[\"a144\"] = 0x2784;\n t[\"a145\"] = 0x2785;\n t[\"a146\"] = 0x2786;\n t[\"a147\"] = 0x2787;\n t[\"a148\"] = 0x2788;\n t[\"a149\"] = 0x2789;\n t[\"a150\"] = 0x278a;\n t[\"a151\"] = 0x278b;\n t[\"a152\"] = 0x278c;\n t[\"a153\"] = 0x278d;\n t[\"a154\"] = 0x278e;\n t[\"a155\"] = 0x278f;\n t[\"a156\"] = 0x2790;\n t[\"a157\"] = 0x2791;\n t[\"a158\"] = 0x2792;\n t[\"a159\"] = 0x2793;\n t[\"a160\"] = 0x2794;\n t[\"a161\"] = 0x2192;\n t[\"a163\"] = 0x2194;\n t[\"a164\"] = 0x2195;\n t[\"a196\"] = 0x2798;\n t[\"a165\"] = 0x2799;\n t[\"a192\"] = 0x279a;\n t[\"a166\"] = 0x279b;\n t[\"a167\"] = 0x279c;\n t[\"a168\"] = 0x279d;\n t[\"a169\"] = 0x279e;\n t[\"a170\"] = 0x279f;\n t[\"a171\"] = 0x27a0;\n t[\"a172\"] = 0x27a1;\n t[\"a173\"] = 0x27a2;\n t[\"a162\"] = 0x27a3;\n t[\"a174\"] = 0x27a4;\n t[\"a175\"] = 0x27a5;\n t[\"a176\"] = 0x27a6;\n t[\"a177\"] = 0x27a7;\n t[\"a178\"] = 0x27a8;\n t[\"a179\"] = 0x27a9;\n t[\"a193\"] = 0x27aa;\n t[\"a180\"] = 0x27ab;\n t[\"a199\"] = 0x27ac;\n t[\"a181\"] = 0x27ad;\n t[\"a200\"] = 0x27ae;\n t[\"a182\"] = 0x27af;\n t[\"a201\"] = 0x27b1;\n t[\"a183\"] = 0x27b2;\n t[\"a184\"] = 0x27b3;\n t[\"a197\"] = 0x27b4;\n t[\"a185\"] = 0x27b5;\n t[\"a194\"] = 0x27b6;\n t[\"a198\"] = 0x27b7;\n t[\"a186\"] = 0x27b8;\n t[\"a195\"] = 0x27b9;\n t[\"a187\"] = 0x27ba;\n t[\"a188\"] = 0x27bb;\n t[\"a189\"] = 0x27bc;\n t[\"a190\"] = 0x27bd;\n t[\"a191\"] = 0x27be;\n t[\"a89\"] = 0x2768;\n t[\"a90\"] = 0x2769;\n t[\"a93\"] = 0x276a;\n t[\"a94\"] = 0x276b;\n t[\"a91\"] = 0x276c;\n t[\"a92\"] = 0x276d;\n t[\"a205\"] = 0x276e;\n t[\"a85\"] = 0x276f;\n t[\"a206\"] = 0x2770;\n t[\"a86\"] = 0x2771;\n t[\"a87\"] = 0x2772;\n t[\"a88\"] = 0x2773;\n t[\"a95\"] = 0x2774;\n t[\"a96\"] = 0x2775;\n t[\".notdef\"] = 0x0000;\n});\nexports.getGlyphsUnicode = getGlyphsUnicode;\nexports.getDingbatsGlyphsUnicode = getDingbatsGlyphsUnicode;\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSupplementalGlyphMapForCalibri = exports.getSupplementalGlyphMapForArialBlack = exports.getGlyphMapForStandardFonts = exports.getSymbolsFonts = exports.getSerifFonts = exports.getNonStdFontMap = exports.getStdFontMap = void 0;\n\nvar _core_utils = __w_pdfjs_require__(7);\n\nconst getStdFontMap = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t[\"ArialNarrow\"] = \"Helvetica\";\n  t[\"ArialNarrow-Bold\"] = \"Helvetica-Bold\";\n  t[\"ArialNarrow-BoldItalic\"] = \"Helvetica-BoldOblique\";\n  t[\"ArialNarrow-Italic\"] = \"Helvetica-Oblique\";\n  t[\"ArialBlack\"] = \"Helvetica\";\n  t[\"ArialBlack-Bold\"] = \"Helvetica-Bold\";\n  t[\"ArialBlack-BoldItalic\"] = \"Helvetica-BoldOblique\";\n  t[\"ArialBlack-Italic\"] = \"Helvetica-Oblique\";\n  t[\"Arial-Black\"] = \"Helvetica\";\n  t[\"Arial-Black-Bold\"] = \"Helvetica-Bold\";\n  t[\"Arial-Black-BoldItalic\"] = \"Helvetica-BoldOblique\";\n  t[\"Arial-Black-Italic\"] = \"Helvetica-Oblique\";\n  t[\"Arial\"] = \"Helvetica\";\n  t[\"Arial-Bold\"] = \"Helvetica-Bold\";\n  t[\"Arial-BoldItalic\"] = \"Helvetica-BoldOblique\";\n  t[\"Arial-Italic\"] = \"Helvetica-Oblique\";\n  t[\"Arial-BoldItalicMT\"] = \"Helvetica-BoldOblique\";\n  t[\"Arial-BoldMT\"] = \"Helvetica-Bold\";\n  t[\"Arial-ItalicMT\"] = \"Helvetica-Oblique\";\n  t[\"ArialMT\"] = \"Helvetica\";\n  t[\"Courier-Bold\"] = \"Courier-Bold\";\n  t[\"Courier-BoldItalic\"] = \"Courier-BoldOblique\";\n  t[\"Courier-Italic\"] = \"Courier-Oblique\";\n  t[\"CourierNew\"] = \"Courier\";\n  t[\"CourierNew-Bold\"] = \"Courier-Bold\";\n  t[\"CourierNew-BoldItalic\"] = \"Courier-BoldOblique\";\n  t[\"CourierNew-Italic\"] = \"Courier-Oblique\";\n  t[\"CourierNewPS-BoldItalicMT\"] = \"Courier-BoldOblique\";\n  t[\"CourierNewPS-BoldMT\"] = \"Courier-Bold\";\n  t[\"CourierNewPS-ItalicMT\"] = \"Courier-Oblique\";\n  t[\"CourierNewPSMT\"] = \"Courier\";\n  t[\"Helvetica\"] = \"Helvetica\";\n  t[\"Helvetica-Bold\"] = \"Helvetica-Bold\";\n  t[\"Helvetica-BoldItalic\"] = \"Helvetica-BoldOblique\";\n  t[\"Helvetica-BoldOblique\"] = \"Helvetica-BoldOblique\";\n  t[\"Helvetica-Italic\"] = \"Helvetica-Oblique\";\n  t[\"Helvetica-Oblique\"] = \"Helvetica-Oblique\";\n  t[\"Symbol-Bold\"] = \"Symbol\";\n  t[\"Symbol-BoldItalic\"] = \"Symbol\";\n  t[\"Symbol-Italic\"] = \"Symbol\";\n  t[\"TimesNewRoman\"] = \"Times-Roman\";\n  t[\"TimesNewRoman-Bold\"] = \"Times-Bold\";\n  t[\"TimesNewRoman-BoldItalic\"] = \"Times-BoldItalic\";\n  t[\"TimesNewRoman-Italic\"] = \"Times-Italic\";\n  t[\"TimesNewRomanPS\"] = \"Times-Roman\";\n  t[\"TimesNewRomanPS-Bold\"] = \"Times-Bold\";\n  t[\"TimesNewRomanPS-BoldItalic\"] = \"Times-BoldItalic\";\n  t[\"TimesNewRomanPS-BoldItalicMT\"] = \"Times-BoldItalic\";\n  t[\"TimesNewRomanPS-BoldMT\"] = \"Times-Bold\";\n  t[\"TimesNewRomanPS-Italic\"] = \"Times-Italic\";\n  t[\"TimesNewRomanPS-ItalicMT\"] = \"Times-Italic\";\n  t[\"TimesNewRomanPSMT\"] = \"Times-Roman\";\n  t[\"TimesNewRomanPSMT-Bold\"] = \"Times-Bold\";\n  t[\"TimesNewRomanPSMT-BoldItalic\"] = \"Times-BoldItalic\";\n  t[\"TimesNewRomanPSMT-Italic\"] = \"Times-Italic\";\n});\nexports.getStdFontMap = getStdFontMap;\nconst getNonStdFontMap = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t[\"Calibri\"] = \"Helvetica\";\n  t[\"Calibri-Bold\"] = \"Helvetica-Bold\";\n  t[\"Calibri-BoldItalic\"] = \"Helvetica-BoldOblique\";\n  t[\"Calibri-Italic\"] = \"Helvetica-Oblique\";\n  t[\"CenturyGothic\"] = \"Helvetica\";\n  t[\"CenturyGothic-Bold\"] = \"Helvetica-Bold\";\n  t[\"CenturyGothic-BoldItalic\"] = \"Helvetica-BoldOblique\";\n  t[\"CenturyGothic-Italic\"] = \"Helvetica-Oblique\";\n  t[\"ComicSansMS\"] = \"Comic Sans MS\";\n  t[\"ComicSansMS-Bold\"] = \"Comic Sans MS-Bold\";\n  t[\"ComicSansMS-BoldItalic\"] = \"Comic Sans MS-BoldItalic\";\n  t[\"ComicSansMS-Italic\"] = \"Comic Sans MS-Italic\";\n  t[\"LucidaConsole\"] = \"Courier\";\n  t[\"LucidaConsole-Bold\"] = \"Courier-Bold\";\n  t[\"LucidaConsole-BoldItalic\"] = \"Courier-BoldOblique\";\n  t[\"LucidaConsole-Italic\"] = \"Courier-Oblique\";\n  t[\"LucidaSans-Demi\"] = \"Helvetica-Bold\";\n  t[\"MS-Gothic\"] = \"MS Gothic\";\n  t[\"MS-Gothic-Bold\"] = \"MS Gothic-Bold\";\n  t[\"MS-Gothic-BoldItalic\"] = \"MS Gothic-BoldItalic\";\n  t[\"MS-Gothic-Italic\"] = \"MS Gothic-Italic\";\n  t[\"MS-Mincho\"] = \"MS Mincho\";\n  t[\"MS-Mincho-Bold\"] = \"MS Mincho-Bold\";\n  t[\"MS-Mincho-BoldItalic\"] = \"MS Mincho-BoldItalic\";\n  t[\"MS-Mincho-Italic\"] = \"MS Mincho-Italic\";\n  t[\"MS-PGothic\"] = \"MS PGothic\";\n  t[\"MS-PGothic-Bold\"] = \"MS PGothic-Bold\";\n  t[\"MS-PGothic-BoldItalic\"] = \"MS PGothic-BoldItalic\";\n  t[\"MS-PGothic-Italic\"] = \"MS PGothic-Italic\";\n  t[\"MS-PMincho\"] = \"MS PMincho\";\n  t[\"MS-PMincho-Bold\"] = \"MS PMincho-Bold\";\n  t[\"MS-PMincho-BoldItalic\"] = \"MS PMincho-BoldItalic\";\n  t[\"MS-PMincho-Italic\"] = \"MS PMincho-Italic\";\n  t[\"NuptialScript\"] = \"Times-Italic\";\n  t[\"SegoeUISymbol\"] = \"Helvetica\";\n  t[\"Wingdings\"] = \"ZapfDingbats\";\n  t[\"Wingdings-Regular\"] = \"ZapfDingbats\";\n});\nexports.getNonStdFontMap = getNonStdFontMap;\nconst getSerifFonts = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t[\"Adobe Jenson\"] = true;\n  t[\"Adobe Text\"] = true;\n  t[\"Albertus\"] = true;\n  t[\"Aldus\"] = true;\n  t[\"Alexandria\"] = true;\n  t[\"Algerian\"] = true;\n  t[\"American Typewriter\"] = true;\n  t[\"Antiqua\"] = true;\n  t[\"Apex\"] = true;\n  t[\"Arno\"] = true;\n  t[\"Aster\"] = true;\n  t[\"Aurora\"] = true;\n  t[\"Baskerville\"] = true;\n  t[\"Bell\"] = true;\n  t[\"Bembo\"] = true;\n  t[\"Bembo Schoolbook\"] = true;\n  t[\"Benguiat\"] = true;\n  t[\"Berkeley Old Style\"] = true;\n  t[\"Bernhard Modern\"] = true;\n  t[\"Berthold City\"] = true;\n  t[\"Bodoni\"] = true;\n  t[\"Bauer Bodoni\"] = true;\n  t[\"Book Antiqua\"] = true;\n  t[\"Bookman\"] = true;\n  t[\"Bordeaux Roman\"] = true;\n  t[\"Californian FB\"] = true;\n  t[\"Calisto\"] = true;\n  t[\"Calvert\"] = true;\n  t[\"Capitals\"] = true;\n  t[\"Cambria\"] = true;\n  t[\"Cartier\"] = true;\n  t[\"Caslon\"] = true;\n  t[\"Catull\"] = true;\n  t[\"Centaur\"] = true;\n  t[\"Century Old Style\"] = true;\n  t[\"Century Schoolbook\"] = true;\n  t[\"Chaparral\"] = true;\n  t[\"Charis SIL\"] = true;\n  t[\"Cheltenham\"] = true;\n  t[\"Cholla Slab\"] = true;\n  t[\"Clarendon\"] = true;\n  t[\"Clearface\"] = true;\n  t[\"Cochin\"] = true;\n  t[\"Colonna\"] = true;\n  t[\"Computer Modern\"] = true;\n  t[\"Concrete Roman\"] = true;\n  t[\"Constantia\"] = true;\n  t[\"Cooper Black\"] = true;\n  t[\"Corona\"] = true;\n  t[\"Ecotype\"] = true;\n  t[\"Egyptienne\"] = true;\n  t[\"Elephant\"] = true;\n  t[\"Excelsior\"] = true;\n  t[\"Fairfield\"] = true;\n  t[\"FF Scala\"] = true;\n  t[\"Folkard\"] = true;\n  t[\"Footlight\"] = true;\n  t[\"FreeSerif\"] = true;\n  t[\"Friz Quadrata\"] = true;\n  t[\"Garamond\"] = true;\n  t[\"Gentium\"] = true;\n  t[\"Georgia\"] = true;\n  t[\"Gloucester\"] = true;\n  t[\"Goudy Old Style\"] = true;\n  t[\"Goudy Schoolbook\"] = true;\n  t[\"Goudy Pro Font\"] = true;\n  t[\"Granjon\"] = true;\n  t[\"Guardian Egyptian\"] = true;\n  t[\"Heather\"] = true;\n  t[\"Hercules\"] = true;\n  t[\"High Tower Text\"] = true;\n  t[\"Hiroshige\"] = true;\n  t[\"Hoefler Text\"] = true;\n  t[\"Humana Serif\"] = true;\n  t[\"Imprint\"] = true;\n  t[\"Ionic No. 5\"] = true;\n  t[\"Janson\"] = true;\n  t[\"Joanna\"] = true;\n  t[\"Korinna\"] = true;\n  t[\"Lexicon\"] = true;\n  t[\"Liberation Serif\"] = true;\n  t[\"Linux Libertine\"] = true;\n  t[\"Literaturnaya\"] = true;\n  t[\"Lucida\"] = true;\n  t[\"Lucida Bright\"] = true;\n  t[\"Melior\"] = true;\n  t[\"Memphis\"] = true;\n  t[\"Miller\"] = true;\n  t[\"Minion\"] = true;\n  t[\"Modern\"] = true;\n  t[\"Mona Lisa\"] = true;\n  t[\"Mrs Eaves\"] = true;\n  t[\"MS Serif\"] = true;\n  t[\"Museo Slab\"] = true;\n  t[\"New York\"] = true;\n  t[\"Nimbus Roman\"] = true;\n  t[\"NPS Rawlinson Roadway\"] = true;\n  t[\"NuptialScript\"] = true;\n  t[\"Palatino\"] = true;\n  t[\"Perpetua\"] = true;\n  t[\"Plantin\"] = true;\n  t[\"Plantin Schoolbook\"] = true;\n  t[\"Playbill\"] = true;\n  t[\"Poor Richard\"] = true;\n  t[\"Rawlinson Roadway\"] = true;\n  t[\"Renault\"] = true;\n  t[\"Requiem\"] = true;\n  t[\"Rockwell\"] = true;\n  t[\"Roman\"] = true;\n  t[\"Rotis Serif\"] = true;\n  t[\"Sabon\"] = true;\n  t[\"Scala\"] = true;\n  t[\"Seagull\"] = true;\n  t[\"Sistina\"] = true;\n  t[\"Souvenir\"] = true;\n  t[\"STIX\"] = true;\n  t[\"Stone Informal\"] = true;\n  t[\"Stone Serif\"] = true;\n  t[\"Sylfaen\"] = true;\n  t[\"Times\"] = true;\n  t[\"Trajan\"] = true;\n  t[\"Trinité\"] = true;\n  t[\"Trump Mediaeval\"] = true;\n  t[\"Utopia\"] = true;\n  t[\"Vale Type\"] = true;\n  t[\"Bitstream Vera\"] = true;\n  t[\"Vera Serif\"] = true;\n  t[\"Versailles\"] = true;\n  t[\"Wanted\"] = true;\n  t[\"Weiss\"] = true;\n  t[\"Wide Latin\"] = true;\n  t[\"Windsor\"] = true;\n  t[\"XITS\"] = true;\n});\nexports.getSerifFonts = getSerifFonts;\nconst getSymbolsFonts = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t[\"Dingbats\"] = true;\n  t[\"Symbol\"] = true;\n  t[\"ZapfDingbats\"] = true;\n});\nexports.getSymbolsFonts = getSymbolsFonts;\nconst getGlyphMapForStandardFonts = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t[2] = 10;\n  t[3] = 32;\n  t[4] = 33;\n  t[5] = 34;\n  t[6] = 35;\n  t[7] = 36;\n  t[8] = 37;\n  t[9] = 38;\n  t[10] = 39;\n  t[11] = 40;\n  t[12] = 41;\n  t[13] = 42;\n  t[14] = 43;\n  t[15] = 44;\n  t[16] = 45;\n  t[17] = 46;\n  t[18] = 47;\n  t[19] = 48;\n  t[20] = 49;\n  t[21] = 50;\n  t[22] = 51;\n  t[23] = 52;\n  t[24] = 53;\n  t[25] = 54;\n  t[26] = 55;\n  t[27] = 56;\n  t[28] = 57;\n  t[29] = 58;\n  t[30] = 894;\n  t[31] = 60;\n  t[32] = 61;\n  t[33] = 62;\n  t[34] = 63;\n  t[35] = 64;\n  t[36] = 65;\n  t[37] = 66;\n  t[38] = 67;\n  t[39] = 68;\n  t[40] = 69;\n  t[41] = 70;\n  t[42] = 71;\n  t[43] = 72;\n  t[44] = 73;\n  t[45] = 74;\n  t[46] = 75;\n  t[47] = 76;\n  t[48] = 77;\n  t[49] = 78;\n  t[50] = 79;\n  t[51] = 80;\n  t[52] = 81;\n  t[53] = 82;\n  t[54] = 83;\n  t[55] = 84;\n  t[56] = 85;\n  t[57] = 86;\n  t[58] = 87;\n  t[59] = 88;\n  t[60] = 89;\n  t[61] = 90;\n  t[62] = 91;\n  t[63] = 92;\n  t[64] = 93;\n  t[65] = 94;\n  t[66] = 95;\n  t[67] = 96;\n  t[68] = 97;\n  t[69] = 98;\n  t[70] = 99;\n  t[71] = 100;\n  t[72] = 101;\n  t[73] = 102;\n  t[74] = 103;\n  t[75] = 104;\n  t[76] = 105;\n  t[77] = 106;\n  t[78] = 107;\n  t[79] = 108;\n  t[80] = 109;\n  t[81] = 110;\n  t[82] = 111;\n  t[83] = 112;\n  t[84] = 113;\n  t[85] = 114;\n  t[86] = 115;\n  t[87] = 116;\n  t[88] = 117;\n  t[89] = 118;\n  t[90] = 119;\n  t[91] = 120;\n  t[92] = 121;\n  t[93] = 122;\n  t[94] = 123;\n  t[95] = 124;\n  t[96] = 125;\n  t[97] = 126;\n  t[98] = 196;\n  t[99] = 197;\n  t[100] = 199;\n  t[101] = 201;\n  t[102] = 209;\n  t[103] = 214;\n  t[104] = 220;\n  t[105] = 225;\n  t[106] = 224;\n  t[107] = 226;\n  t[108] = 228;\n  t[109] = 227;\n  t[110] = 229;\n  t[111] = 231;\n  t[112] = 233;\n  t[113] = 232;\n  t[114] = 234;\n  t[115] = 235;\n  t[116] = 237;\n  t[117] = 236;\n  t[118] = 238;\n  t[119] = 239;\n  t[120] = 241;\n  t[121] = 243;\n  t[122] = 242;\n  t[123] = 244;\n  t[124] = 246;\n  t[125] = 245;\n  t[126] = 250;\n  t[127] = 249;\n  t[128] = 251;\n  t[129] = 252;\n  t[130] = 8224;\n  t[131] = 176;\n  t[132] = 162;\n  t[133] = 163;\n  t[134] = 167;\n  t[135] = 8226;\n  t[136] = 182;\n  t[137] = 223;\n  t[138] = 174;\n  t[139] = 169;\n  t[140] = 8482;\n  t[141] = 180;\n  t[142] = 168;\n  t[143] = 8800;\n  t[144] = 198;\n  t[145] = 216;\n  t[146] = 8734;\n  t[147] = 177;\n  t[148] = 8804;\n  t[149] = 8805;\n  t[150] = 165;\n  t[151] = 181;\n  t[152] = 8706;\n  t[153] = 8721;\n  t[154] = 8719;\n  t[156] = 8747;\n  t[157] = 170;\n  t[158] = 186;\n  t[159] = 8486;\n  t[160] = 230;\n  t[161] = 248;\n  t[162] = 191;\n  t[163] = 161;\n  t[164] = 172;\n  t[165] = 8730;\n  t[166] = 402;\n  t[167] = 8776;\n  t[168] = 8710;\n  t[169] = 171;\n  t[170] = 187;\n  t[171] = 8230;\n  t[210] = 218;\n  t[223] = 711;\n  t[224] = 321;\n  t[225] = 322;\n  t[227] = 353;\n  t[229] = 382;\n  t[234] = 253;\n  t[252] = 263;\n  t[253] = 268;\n  t[254] = 269;\n  t[258] = 258;\n  t[260] = 260;\n  t[261] = 261;\n  t[265] = 280;\n  t[266] = 281;\n  t[268] = 283;\n  t[269] = 313;\n  t[275] = 323;\n  t[276] = 324;\n  t[278] = 328;\n  t[284] = 345;\n  t[285] = 346;\n  t[286] = 347;\n  t[292] = 367;\n  t[295] = 377;\n  t[296] = 378;\n  t[298] = 380;\n  t[305] = 963;\n  t[306] = 964;\n  t[307] = 966;\n  t[308] = 8215;\n  t[309] = 8252;\n  t[310] = 8319;\n  t[311] = 8359;\n  t[312] = 8592;\n  t[313] = 8593;\n  t[337] = 9552;\n  t[493] = 1039;\n  t[494] = 1040;\n  t[705] = 1524;\n  t[706] = 8362;\n  t[710] = 64288;\n  t[711] = 64298;\n  t[759] = 1617;\n  t[761] = 1776;\n  t[763] = 1778;\n  t[775] = 1652;\n  t[777] = 1764;\n  t[778] = 1780;\n  t[779] = 1781;\n  t[780] = 1782;\n  t[782] = 771;\n  t[783] = 64726;\n  t[786] = 8363;\n  t[788] = 8532;\n  t[790] = 768;\n  t[791] = 769;\n  t[792] = 768;\n  t[795] = 803;\n  t[797] = 64336;\n  t[798] = 64337;\n  t[799] = 64342;\n  t[800] = 64343;\n  t[801] = 64344;\n  t[802] = 64345;\n  t[803] = 64362;\n  t[804] = 64363;\n  t[805] = 64364;\n  t[2424] = 7821;\n  t[2425] = 7822;\n  t[2426] = 7823;\n  t[2427] = 7824;\n  t[2428] = 7825;\n  t[2429] = 7826;\n  t[2430] = 7827;\n  t[2433] = 7682;\n  t[2678] = 8045;\n  t[2679] = 8046;\n  t[2830] = 1552;\n  t[2838] = 686;\n  t[2840] = 751;\n  t[2842] = 753;\n  t[2843] = 754;\n  t[2844] = 755;\n  t[2846] = 757;\n  t[2856] = 767;\n  t[2857] = 848;\n  t[2858] = 849;\n  t[2862] = 853;\n  t[2863] = 854;\n  t[2864] = 855;\n  t[2865] = 861;\n  t[2866] = 862;\n  t[2906] = 7460;\n  t[2908] = 7462;\n  t[2909] = 7463;\n  t[2910] = 7464;\n  t[2912] = 7466;\n  t[2913] = 7467;\n  t[2914] = 7468;\n  t[2916] = 7470;\n  t[2917] = 7471;\n  t[2918] = 7472;\n  t[2920] = 7474;\n  t[2921] = 7475;\n  t[2922] = 7476;\n  t[2924] = 7478;\n  t[2925] = 7479;\n  t[2926] = 7480;\n  t[2928] = 7482;\n  t[2929] = 7483;\n  t[2930] = 7484;\n  t[2932] = 7486;\n  t[2933] = 7487;\n  t[2934] = 7488;\n  t[2936] = 7490;\n  t[2937] = 7491;\n  t[2938] = 7492;\n  t[2940] = 7494;\n  t[2941] = 7495;\n  t[2942] = 7496;\n  t[2944] = 7498;\n  t[2946] = 7500;\n  t[2948] = 7502;\n  t[2950] = 7504;\n  t[2951] = 7505;\n  t[2952] = 7506;\n  t[2954] = 7508;\n  t[2955] = 7509;\n  t[2956] = 7510;\n  t[2958] = 7512;\n  t[2959] = 7513;\n  t[2960] = 7514;\n  t[2962] = 7516;\n  t[2963] = 7517;\n  t[2964] = 7518;\n  t[2966] = 7520;\n  t[2967] = 7521;\n  t[2968] = 7522;\n  t[2970] = 7524;\n  t[2971] = 7525;\n  t[2972] = 7526;\n  t[2974] = 7528;\n  t[2975] = 7529;\n  t[2976] = 7530;\n  t[2978] = 1537;\n  t[2979] = 1538;\n  t[2980] = 1539;\n  t[2982] = 1549;\n  t[2983] = 1551;\n  t[2984] = 1552;\n  t[2986] = 1554;\n  t[2987] = 1555;\n  t[2988] = 1556;\n  t[2990] = 1623;\n  t[2991] = 1624;\n  t[2995] = 1775;\n  t[2999] = 1791;\n  t[3002] = 64290;\n  t[3003] = 64291;\n  t[3004] = 64292;\n  t[3006] = 64294;\n  t[3007] = 64295;\n  t[3008] = 64296;\n  t[3011] = 1900;\n  t[3014] = 8223;\n  t[3015] = 8244;\n  t[3017] = 7532;\n  t[3018] = 7533;\n  t[3019] = 7534;\n  t[3075] = 7590;\n  t[3076] = 7591;\n  t[3079] = 7594;\n  t[3080] = 7595;\n  t[3083] = 7598;\n  t[3084] = 7599;\n  t[3087] = 7602;\n  t[3088] = 7603;\n  t[3091] = 7606;\n  t[3092] = 7607;\n  t[3095] = 7610;\n  t[3096] = 7611;\n  t[3099] = 7614;\n  t[3100] = 7615;\n  t[3103] = 7618;\n  t[3104] = 7619;\n  t[3107] = 8337;\n  t[3108] = 8338;\n  t[3116] = 1884;\n  t[3119] = 1885;\n  t[3120] = 1885;\n  t[3123] = 1886;\n  t[3124] = 1886;\n  t[3127] = 1887;\n  t[3128] = 1887;\n  t[3131] = 1888;\n  t[3132] = 1888;\n  t[3135] = 1889;\n  t[3136] = 1889;\n  t[3139] = 1890;\n  t[3140] = 1890;\n  t[3143] = 1891;\n  t[3144] = 1891;\n  t[3147] = 1892;\n  t[3148] = 1892;\n  t[3153] = 580;\n  t[3154] = 581;\n  t[3157] = 584;\n  t[3158] = 585;\n  t[3161] = 588;\n  t[3162] = 589;\n  t[3165] = 891;\n  t[3166] = 892;\n  t[3169] = 1274;\n  t[3170] = 1275;\n  t[3173] = 1278;\n  t[3174] = 1279;\n  t[3181] = 7622;\n  t[3182] = 7623;\n  t[3282] = 11799;\n  t[3316] = 578;\n  t[3379] = 42785;\n  t[3393] = 1159;\n  t[3416] = 8377;\n});\nexports.getGlyphMapForStandardFonts = getGlyphMapForStandardFonts;\nconst getSupplementalGlyphMapForArialBlack = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t[227] = 322;\n  t[264] = 261;\n  t[291] = 346;\n});\nexports.getSupplementalGlyphMapForArialBlack = getSupplementalGlyphMapForArialBlack;\nconst getSupplementalGlyphMapForCalibri = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t[1] = 32;\n  t[4] = 65;\n  t[17] = 66;\n  t[18] = 67;\n  t[24] = 68;\n  t[28] = 69;\n  t[38] = 70;\n  t[39] = 71;\n  t[44] = 72;\n  t[47] = 73;\n  t[58] = 74;\n  t[60] = 75;\n  t[62] = 76;\n  t[68] = 77;\n  t[69] = 78;\n  t[75] = 79;\n  t[87] = 80;\n  t[89] = 81;\n  t[90] = 82;\n  t[94] = 83;\n  t[100] = 84;\n  t[104] = 85;\n  t[115] = 86;\n  t[116] = 87;\n  t[121] = 88;\n  t[122] = 89;\n  t[127] = 90;\n  t[258] = 97;\n  t[268] = 261;\n  t[271] = 98;\n  t[272] = 99;\n  t[273] = 263;\n  t[282] = 100;\n  t[286] = 101;\n  t[295] = 281;\n  t[296] = 102;\n  t[336] = 103;\n  t[346] = 104;\n  t[349] = 105;\n  t[361] = 106;\n  t[364] = 107;\n  t[367] = 108;\n  t[371] = 322;\n  t[373] = 109;\n  t[374] = 110;\n  t[381] = 111;\n  t[383] = 243;\n  t[393] = 112;\n  t[395] = 113;\n  t[396] = 114;\n  t[400] = 115;\n  t[401] = 347;\n  t[410] = 116;\n  t[437] = 117;\n  t[448] = 118;\n  t[449] = 119;\n  t[454] = 120;\n  t[455] = 121;\n  t[460] = 122;\n  t[463] = 380;\n  t[853] = 44;\n  t[855] = 58;\n  t[856] = 46;\n  t[876] = 47;\n  t[878] = 45;\n  t[882] = 45;\n  t[894] = 40;\n  t[895] = 41;\n  t[896] = 91;\n  t[897] = 93;\n  t[923] = 64;\n  t[1004] = 48;\n  t[1005] = 49;\n  t[1006] = 50;\n  t[1007] = 51;\n  t[1008] = 52;\n  t[1009] = 53;\n  t[1010] = 54;\n  t[1011] = 55;\n  t[1012] = 56;\n  t[1013] = 57;\n  t[1081] = 37;\n  t[1085] = 43;\n  t[1086] = 45;\n});\nexports.getSupplementalGlyphMapForCalibri = getSupplementalGlyphMapForCalibri;\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\nvar getLookupTableFactory = __w_pdfjs_require__(7).getLookupTableFactory;\nvar getSpecialPUASymbols = getLookupTableFactory(function (t) {\n t[63721] = 0x00a9;\n t[63193] = 0x00a9;\n t[63720] = 0x00ae;\n t[63194] = 0x00ae;\n t[63722] = 0x2122;\n t[63195] = 0x2122;\n t[63729] = 0x23a7;\n t[63730] = 0x23a8;\n t[63731] = 0x23a9;\n t[63740] = 0x23ab;\n t[63741] = 0x23ac;\n t[63742] = 0x23ad;\n t[63726] = 0x23a1;\n t[63727] = 0x23a2;\n t[63728] = 0x23a3;\n t[63737] = 0x23a4;\n t[63738] = 0x23a5;\n t[63739] = 0x23a6;\n t[63723] = 0x239b;\n t[63724] = 0x239c;\n t[63725] = 0x239d;\n t[63734] = 0x239e;\n t[63735] = 0x239f;\n t[63736] = 0x23a0;\n});\nfunction mapSpecialUnicodeValues(code) {\n if (code >= 0xfff0 && code <= 0xffff) {\n  return 0;\n } else if (code >= 0xf600 && code <= 0xf8ff) {\n  return getSpecialPUASymbols()[code] || code;\n } else if (code === 0x00ad) {\n  return 0x002d;\n }\n return code;\n}\nfunction getUnicodeForGlyph(name, glyphsUnicodeMap) {\n var unicode = glyphsUnicodeMap[name];\n if (unicode !== undefined) {\n  return unicode;\n }\n if (!name) {\n  return -1;\n }\n if (name[0] === \"u\") {\n  var nameLen = name.length, hexStr;\n  if (nameLen === 7 && name[1] === \"n\" && name[2] === \"i\") {\n   hexStr = name.substring(3);\n  } else if (nameLen >= 5 && nameLen <= 7) {\n   hexStr = name.substring(1);\n  } else {\n   return -1;\n  }\n  if (hexStr === hexStr.toUpperCase()) {\n   unicode = parseInt(hexStr, 16);\n   if (unicode >= 0) {\n    return unicode;\n   }\n  }\n }\n return -1;\n}\nvar UnicodeRanges = [\n {\n  begin: 0x0000,\n  end: 0x007f\n },\n {\n  begin: 0x0080,\n  end: 0x00ff\n },\n {\n  begin: 0x0100,\n  end: 0x017f\n },\n {\n  begin: 0x0180,\n  end: 0x024f\n },\n {\n  begin: 0x0250,\n  end: 0x02af\n },\n {\n  begin: 0x02b0,\n  end: 0x02ff\n },\n {\n  begin: 0x0300,\n  end: 0x036f\n },\n {\n  begin: 0x0370,\n  end: 0x03ff\n },\n {\n  begin: 0x2c80,\n  end: 0x2cff\n },\n {\n  begin: 0x0400,\n  end: 0x04ff\n },\n {\n  begin: 0x0530,\n  end: 0x058f\n },\n {\n  begin: 0x0590,\n  end: 0x05ff\n },\n {\n  begin: 0xa500,\n  end: 0xa63f\n },\n {\n  begin: 0x0600,\n  end: 0x06ff\n },\n {\n  begin: 0x07c0,\n  end: 0x07ff\n },\n {\n  begin: 0x0900,\n  end: 0x097f\n },\n {\n  begin: 0x0980,\n  end: 0x09ff\n },\n {\n  begin: 0x0a00,\n  end: 0x0a7f\n },\n {\n  begin: 0x0a80,\n  end: 0x0aff\n },\n {\n  begin: 0x0b00,\n  end: 0x0b7f\n },\n {\n  begin: 0x0b80,\n  end: 0x0bff\n },\n {\n  begin: 0x0c00,\n  end: 0x0c7f\n },\n {\n  begin: 0x0c80,\n  end: 0x0cff\n },\n {\n  begin: 0x0d00,\n  end: 0x0d7f\n },\n {\n  begin: 0x0e00,\n  end: 0x0e7f\n },\n {\n  begin: 0x0e80,\n  end: 0x0eff\n },\n {\n  begin: 0x10a0,\n  end: 0x10ff\n },\n {\n  begin: 0x1b00,\n  end: 0x1b7f\n },\n {\n  begin: 0x1100,\n  end: 0x11ff\n },\n {\n  begin: 0x1e00,\n  end: 0x1eff\n },\n {\n  begin: 0x1f00,\n  end: 0x1fff\n },\n {\n  begin: 0x2000,\n  end: 0x206f\n },\n {\n  begin: 0x2070,\n  end: 0x209f\n },\n {\n  begin: 0x20a0,\n  end: 0x20cf\n },\n {\n  begin: 0x20d0,\n  end: 0x20ff\n },\n {\n  begin: 0x2100,\n  end: 0x214f\n },\n {\n  begin: 0x2150,\n  end: 0x218f\n },\n {\n  begin: 0x2190,\n  end: 0x21ff\n },\n {\n  begin: 0x2200,\n  end: 0x22ff\n },\n {\n  begin: 0x2300,\n  end: 0x23ff\n },\n {\n  begin: 0x2400,\n  end: 0x243f\n },\n {\n  begin: 0x2440,\n  end: 0x245f\n },\n {\n  begin: 0x2460,\n  end: 0x24ff\n },\n {\n  begin: 0x2500,\n  end: 0x257f\n },\n {\n  begin: 0x2580,\n  end: 0x259f\n },\n {\n  begin: 0x25a0,\n  end: 0x25ff\n },\n {\n  begin: 0x2600,\n  end: 0x26ff\n },\n {\n  begin: 0x2700,\n  end: 0x27bf\n },\n {\n  begin: 0x3000,\n  end: 0x303f\n },\n {\n  begin: 0x3040,\n  end: 0x309f\n },\n {\n  begin: 0x30a0,\n  end: 0x30ff\n },\n {\n  begin: 0x3100,\n  end: 0x312f\n },\n {\n  begin: 0x3130,\n  end: 0x318f\n },\n {\n  begin: 0xa840,\n  end: 0xa87f\n },\n {\n  begin: 0x3200,\n  end: 0x32ff\n },\n {\n  begin: 0x3300,\n  end: 0x33ff\n },\n {\n  begin: 0xac00,\n  end: 0xd7af\n },\n {\n  begin: 0xd800,\n  end: 0xdfff\n },\n {\n  begin: 0x10900,\n  end: 0x1091f\n },\n {\n  begin: 0x4e00,\n  end: 0x9fff\n },\n {\n  begin: 0xe000,\n  end: 0xf8ff\n },\n {\n  begin: 0x31c0,\n  end: 0x31ef\n },\n {\n  begin: 0xfb00,\n  end: 0xfb4f\n },\n {\n  begin: 0xfb50,\n  end: 0xfdff\n },\n {\n  begin: 0xfe20,\n  end: 0xfe2f\n },\n {\n  begin: 0xfe10,\n  end: 0xfe1f\n },\n {\n  begin: 0xfe50,\n  end: 0xfe6f\n },\n {\n  begin: 0xfe70,\n  end: 0xfeff\n },\n {\n  begin: 0xff00,\n  end: 0xffef\n },\n {\n  begin: 0xfff0,\n  end: 0xffff\n },\n {\n  begin: 0x0f00,\n  end: 0x0fff\n },\n {\n  begin: 0x0700,\n  end: 0x074f\n },\n {\n  begin: 0x0780,\n  end: 0x07bf\n },\n {\n  begin: 0x0d80,\n  end: 0x0dff\n },\n {\n  begin: 0x1000,\n  end: 0x109f\n },\n {\n  begin: 0x1200,\n  end: 0x137f\n },\n {\n  begin: 0x13a0,\n  end: 0x13ff\n },\n {\n  begin: 0x1400,\n  end: 0x167f\n },\n {\n  begin: 0x1680,\n  end: 0x169f\n },\n {\n  begin: 0x16a0,\n  end: 0x16ff\n },\n {\n  begin: 0x1780,\n  end: 0x17ff\n },\n {\n  begin: 0x1800,\n  end: 0x18af\n },\n {\n  begin: 0x2800,\n  end: 0x28ff\n },\n {\n  begin: 0xa000,\n  end: 0xa48f\n },\n {\n  begin: 0x1700,\n  end: 0x171f\n },\n {\n  begin: 0x10300,\n  end: 0x1032f\n },\n {\n  begin: 0x10330,\n  end: 0x1034f\n },\n {\n  begin: 0x10400,\n  end: 0x1044f\n },\n {\n  begin: 0x1d000,\n  end: 0x1d0ff\n },\n {\n  begin: 0x1d400,\n  end: 0x1d7ff\n },\n {\n  begin: 0xff000,\n  end: 0xffffd\n },\n {\n  begin: 0xfe00,\n  end: 0xfe0f\n },\n {\n  begin: 0xe0000,\n  end: 0xe007f\n },\n {\n  begin: 0x1900,\n  end: 0x194f\n },\n {\n  begin: 0x1950,\n  end: 0x197f\n },\n {\n  begin: 0x1980,\n  end: 0x19df\n },\n {\n  begin: 0x1a00,\n  end: 0x1a1f\n },\n {\n  begin: 0x2c00,\n  end: 0x2c5f\n },\n {\n  begin: 0x2d30,\n  end: 0x2d7f\n },\n {\n  begin: 0x4dc0,\n  end: 0x4dff\n },\n {\n  begin: 0xa800,\n  end: 0xa82f\n },\n {\n  begin: 0x10000,\n  end: 0x1007f\n },\n {\n  begin: 0x10140,\n  end: 0x1018f\n },\n {\n  begin: 0x10380,\n  end: 0x1039f\n },\n {\n  begin: 0x103a0,\n  end: 0x103df\n },\n {\n  begin: 0x10450,\n  end: 0x1047f\n },\n {\n  begin: 0x10480,\n  end: 0x104af\n },\n {\n  begin: 0x10800,\n  end: 0x1083f\n },\n {\n  begin: 0x10a00,\n  end: 0x10a5f\n },\n {\n  begin: 0x1d300,\n  end: 0x1d35f\n },\n {\n  begin: 0x12000,\n  end: 0x123ff\n },\n {\n  begin: 0x1d360,\n  end: 0x1d37f\n },\n {\n  begin: 0x1b80,\n  end: 0x1bbf\n },\n {\n  begin: 0x1c00,\n  end: 0x1c4f\n },\n {\n  begin: 0x1c50,\n  end: 0x1c7f\n },\n {\n  begin: 0xa880,\n  end: 0xa8df\n },\n {\n  begin: 0xa900,\n  end: 0xa92f\n },\n {\n  begin: 0xa930,\n  end: 0xa95f\n },\n {\n  begin: 0xaa00,\n  end: 0xaa5f\n },\n {\n  begin: 0x10190,\n  end: 0x101cf\n },\n {\n  begin: 0x101d0,\n  end: 0x101ff\n },\n {\n  begin: 0x102a0,\n  end: 0x102df\n },\n {\n  begin: 0x1f030,\n  end: 0x1f09f\n }\n];\nfunction getUnicodeRangeFor(value) {\n for (var i = 0, ii = UnicodeRanges.length; i < ii; i++) {\n  var range = UnicodeRanges[i];\n  if (value >= range.begin && value < range.end) {\n   return i;\n  }\n }\n return -1;\n}\nfunction isRTLRangeFor(value) {\n var range = UnicodeRanges[13];\n if (value >= range.begin && value < range.end) {\n  return true;\n }\n range = UnicodeRanges[11];\n if (value >= range.begin && value < range.end) {\n  return true;\n }\n return false;\n}\nvar getNormalizedUnicodes = getLookupTableFactory(function (t) {\n t[\"\\u00A8\"] = \"\\u0020\\u0308\";\n t[\"\\u00AF\"] = \"\\u0020\\u0304\";\n t[\"\\u00B4\"] = \"\\u0020\\u0301\";\n t[\"\\u00B5\"] = \"\\u03BC\";\n t[\"\\u00B8\"] = \"\\u0020\\u0327\";\n t[\"\\u0132\"] = \"\\u0049\\u004A\";\n t[\"\\u0133\"] = \"\\u0069\\u006A\";\n t[\"\\u013F\"] = \"\\u004C\\u00B7\";\n t[\"\\u0140\"] = \"\\u006C\\u00B7\";\n t[\"\\u0149\"] = \"\\u02BC\\u006E\";\n t[\"\\u017F\"] = \"\\u0073\";\n t[\"\\u01C4\"] = \"\\u0044\\u017D\";\n t[\"\\u01C5\"] = \"\\u0044\\u017E\";\n t[\"\\u01C6\"] = \"\\u0064\\u017E\";\n t[\"\\u01C7\"] = \"\\u004C\\u004A\";\n t[\"\\u01C8\"] = \"\\u004C\\u006A\";\n t[\"\\u01C9\"] = \"\\u006C\\u006A\";\n t[\"\\u01CA\"] = \"\\u004E\\u004A\";\n t[\"\\u01CB\"] = \"\\u004E\\u006A\";\n t[\"\\u01CC\"] = \"\\u006E\\u006A\";\n t[\"\\u01F1\"] = \"\\u0044\\u005A\";\n t[\"\\u01F2\"] = \"\\u0044\\u007A\";\n t[\"\\u01F3\"] = \"\\u0064\\u007A\";\n t[\"\\u02D8\"] = \"\\u0020\\u0306\";\n t[\"\\u02D9\"] = \"\\u0020\\u0307\";\n t[\"\\u02DA\"] = \"\\u0020\\u030A\";\n t[\"\\u02DB\"] = \"\\u0020\\u0328\";\n t[\"\\u02DC\"] = \"\\u0020\\u0303\";\n t[\"\\u02DD\"] = \"\\u0020\\u030B\";\n t[\"\\u037A\"] = \"\\u0020\\u0345\";\n t[\"\\u0384\"] = \"\\u0020\\u0301\";\n t[\"\\u03D0\"] = \"\\u03B2\";\n t[\"\\u03D1\"] = \"\\u03B8\";\n t[\"\\u03D2\"] = \"\\u03A5\";\n t[\"\\u03D5\"] = \"\\u03C6\";\n t[\"\\u03D6\"] = \"\\u03C0\";\n t[\"\\u03F0\"] = \"\\u03BA\";\n t[\"\\u03F1\"] = \"\\u03C1\";\n t[\"\\u03F2\"] = \"\\u03C2\";\n t[\"\\u03F4\"] = \"\\u0398\";\n t[\"\\u03F5\"] = \"\\u03B5\";\n t[\"\\u03F9\"] = \"\\u03A3\";\n t[\"\\u0587\"] = \"\\u0565\\u0582\";\n t[\"\\u0675\"] = \"\\u0627\\u0674\";\n t[\"\\u0676\"] = \"\\u0648\\u0674\";\n t[\"\\u0677\"] = \"\\u06C7\\u0674\";\n t[\"\\u0678\"] = \"\\u064A\\u0674\";\n t[\"\\u0E33\"] = \"\\u0E4D\\u0E32\";\n t[\"\\u0EB3\"] = \"\\u0ECD\\u0EB2\";\n t[\"\\u0EDC\"] = \"\\u0EAB\\u0E99\";\n t[\"\\u0EDD\"] = \"\\u0EAB\\u0EA1\";\n t[\"\\u0F77\"] = \"\\u0FB2\\u0F81\";\n t[\"\\u0F79\"] = \"\\u0FB3\\u0F81\";\n t[\"\\u1E9A\"] = \"\\u0061\\u02BE\";\n t[\"\\u1FBD\"] = \"\\u0020\\u0313\";\n t[\"\\u1FBF\"] = \"\\u0020\\u0313\";\n t[\"\\u1FC0\"] = \"\\u0020\\u0342\";\n t[\"\\u1FFE\"] = \"\\u0020\\u0314\";\n t[\"\\u2002\"] = \"\\u0020\";\n t[\"\\u2003\"] = \"\\u0020\";\n t[\"\\u2004\"] = \"\\u0020\";\n t[\"\\u2005\"] = \"\\u0020\";\n t[\"\\u2006\"] = \"\\u0020\";\n t[\"\\u2008\"] = \"\\u0020\";\n t[\"\\u2009\"] = \"\\u0020\";\n t[\"\\u200A\"] = \"\\u0020\";\n t[\"\\u2017\"] = \"\\u0020\\u0333\";\n t[\"\\u2024\"] = \"\\u002E\";\n t[\"\\u2025\"] = \"\\u002E\\u002E\";\n t[\"\\u2026\"] = \"\\u002E\\u002E\\u002E\";\n t[\"\\u2033\"] = \"\\u2032\\u2032\";\n t[\"\\u2034\"] = \"\\u2032\\u2032\\u2032\";\n t[\"\\u2036\"] = \"\\u2035\\u2035\";\n t[\"\\u2037\"] = \"\\u2035\\u2035\\u2035\";\n t[\"\\u203C\"] = \"\\u0021\\u0021\";\n t[\"\\u203E\"] = \"\\u0020\\u0305\";\n t[\"\\u2047\"] = \"\\u003F\\u003F\";\n t[\"\\u2048\"] = \"\\u003F\\u0021\";\n t[\"\\u2049\"] = \"\\u0021\\u003F\";\n t[\"\\u2057\"] = \"\\u2032\\u2032\\u2032\\u2032\";\n t[\"\\u205F\"] = \"\\u0020\";\n t[\"\\u20A8\"] = \"\\u0052\\u0073\";\n t[\"\\u2100\"] = \"\\u0061\\u002F\\u0063\";\n t[\"\\u2101\"] = \"\\u0061\\u002F\\u0073\";\n t[\"\\u2103\"] = \"\\u00B0\\u0043\";\n t[\"\\u2105\"] = \"\\u0063\\u002F\\u006F\";\n t[\"\\u2106\"] = \"\\u0063\\u002F\\u0075\";\n t[\"\\u2107\"] = \"\\u0190\";\n t[\"\\u2109\"] = \"\\u00B0\\u0046\";\n t[\"\\u2116\"] = \"\\u004E\\u006F\";\n t[\"\\u2121\"] = \"\\u0054\\u0045\\u004C\";\n t[\"\\u2135\"] = \"\\u05D0\";\n t[\"\\u2136\"] = \"\\u05D1\";\n t[\"\\u2137\"] = \"\\u05D2\";\n t[\"\\u2138\"] = \"\\u05D3\";\n t[\"\\u213B\"] = \"\\u0046\\u0041\\u0058\";\n t[\"\\u2160\"] = \"\\u0049\";\n t[\"\\u2161\"] = \"\\u0049\\u0049\";\n t[\"\\u2162\"] = \"\\u0049\\u0049\\u0049\";\n t[\"\\u2163\"] = \"\\u0049\\u0056\";\n t[\"\\u2164\"] = \"\\u0056\";\n t[\"\\u2165\"] = \"\\u0056\\u0049\";\n t[\"\\u2166\"] = \"\\u0056\\u0049\\u0049\";\n t[\"\\u2167\"] = \"\\u0056\\u0049\\u0049\\u0049\";\n t[\"\\u2168\"] = \"\\u0049\\u0058\";\n t[\"\\u2169\"] = \"\\u0058\";\n t[\"\\u216A\"] = \"\\u0058\\u0049\";\n t[\"\\u216B\"] = \"\\u0058\\u0049\\u0049\";\n t[\"\\u216C\"] = \"\\u004C\";\n t[\"\\u216D\"] = \"\\u0043\";\n t[\"\\u216E\"] = \"\\u0044\";\n t[\"\\u216F\"] = \"\\u004D\";\n t[\"\\u2170\"] = \"\\u0069\";\n t[\"\\u2171\"] = \"\\u0069\\u0069\";\n t[\"\\u2172\"] = \"\\u0069\\u0069\\u0069\";\n t[\"\\u2173\"] = \"\\u0069\\u0076\";\n t[\"\\u2174\"] = \"\\u0076\";\n t[\"\\u2175\"] = \"\\u0076\\u0069\";\n t[\"\\u2176\"] = \"\\u0076\\u0069\\u0069\";\n t[\"\\u2177\"] = \"\\u0076\\u0069\\u0069\\u0069\";\n t[\"\\u2178\"] = \"\\u0069\\u0078\";\n t[\"\\u2179\"] = \"\\u0078\";\n t[\"\\u217A\"] = \"\\u0078\\u0069\";\n t[\"\\u217B\"] = \"\\u0078\\u0069\\u0069\";\n t[\"\\u217C\"] = \"\\u006C\";\n t[\"\\u217D\"] = \"\\u0063\";\n t[\"\\u217E\"] = \"\\u0064\";\n t[\"\\u217F\"] = \"\\u006D\";\n t[\"\\u222C\"] = \"\\u222B\\u222B\";\n t[\"\\u222D\"] = \"\\u222B\\u222B\\u222B\";\n t[\"\\u222F\"] = \"\\u222E\\u222E\";\n t[\"\\u2230\"] = \"\\u222E\\u222E\\u222E\";\n t[\"\\u2474\"] = \"\\u0028\\u0031\\u0029\";\n t[\"\\u2475\"] = \"\\u0028\\u0032\\u0029\";\n t[\"\\u2476\"] = \"\\u0028\\u0033\\u0029\";\n t[\"\\u2477\"] = \"\\u0028\\u0034\\u0029\";\n t[\"\\u2478\"] = \"\\u0028\\u0035\\u0029\";\n t[\"\\u2479\"] = \"\\u0028\\u0036\\u0029\";\n t[\"\\u247A\"] = \"\\u0028\\u0037\\u0029\";\n t[\"\\u247B\"] = \"\\u0028\\u0038\\u0029\";\n t[\"\\u247C\"] = \"\\u0028\\u0039\\u0029\";\n t[\"\\u247D\"] = \"\\u0028\\u0031\\u0030\\u0029\";\n t[\"\\u247E\"] = \"\\u0028\\u0031\\u0031\\u0029\";\n t[\"\\u247F\"] = \"\\u0028\\u0031\\u0032\\u0029\";\n t[\"\\u2480\"] = \"\\u0028\\u0031\\u0033\\u0029\";\n t[\"\\u2481\"] = \"\\u0028\\u0031\\u0034\\u0029\";\n t[\"\\u2482\"] = \"\\u0028\\u0031\\u0035\\u0029\";\n t[\"\\u2483\"] = \"\\u0028\\u0031\\u0036\\u0029\";\n t[\"\\u2484\"] = \"\\u0028\\u0031\\u0037\\u0029\";\n t[\"\\u2485\"] = \"\\u0028\\u0031\\u0038\\u0029\";\n t[\"\\u2486\"] = \"\\u0028\\u0031\\u0039\\u0029\";\n t[\"\\u2487\"] = \"\\u0028\\u0032\\u0030\\u0029\";\n t[\"\\u2488\"] = \"\\u0031\\u002E\";\n t[\"\\u2489\"] = \"\\u0032\\u002E\";\n t[\"\\u248A\"] = \"\\u0033\\u002E\";\n t[\"\\u248B\"] = \"\\u0034\\u002E\";\n t[\"\\u248C\"] = \"\\u0035\\u002E\";\n t[\"\\u248D\"] = \"\\u0036\\u002E\";\n t[\"\\u248E\"] = \"\\u0037\\u002E\";\n t[\"\\u248F\"] = \"\\u0038\\u002E\";\n t[\"\\u2490\"] = \"\\u0039\\u002E\";\n t[\"\\u2491\"] = \"\\u0031\\u0030\\u002E\";\n t[\"\\u2492\"] = \"\\u0031\\u0031\\u002E\";\n t[\"\\u2493\"] = \"\\u0031\\u0032\\u002E\";\n t[\"\\u2494\"] = \"\\u0031\\u0033\\u002E\";\n t[\"\\u2495\"] = \"\\u0031\\u0034\\u002E\";\n t[\"\\u2496\"] = \"\\u0031\\u0035\\u002E\";\n t[\"\\u2497\"] = \"\\u0031\\u0036\\u002E\";\n t[\"\\u2498\"] = \"\\u0031\\u0037\\u002E\";\n t[\"\\u2499\"] = \"\\u0031\\u0038\\u002E\";\n t[\"\\u249A\"] = \"\\u0031\\u0039\\u002E\";\n t[\"\\u249B\"] = \"\\u0032\\u0030\\u002E\";\n t[\"\\u249C\"] = \"\\u0028\\u0061\\u0029\";\n t[\"\\u249D\"] = \"\\u0028\\u0062\\u0029\";\n t[\"\\u249E\"] = \"\\u0028\\u0063\\u0029\";\n t[\"\\u249F\"] = \"\\u0028\\u0064\\u0029\";\n t[\"\\u24A0\"] = \"\\u0028\\u0065\\u0029\";\n t[\"\\u24A1\"] = \"\\u0028\\u0066\\u0029\";\n t[\"\\u24A2\"] = \"\\u0028\\u0067\\u0029\";\n t[\"\\u24A3\"] = \"\\u0028\\u0068\\u0029\";\n t[\"\\u24A4\"] = \"\\u0028\\u0069\\u0029\";\n t[\"\\u24A5\"] = \"\\u0028\\u006A\\u0029\";\n t[\"\\u24A6\"] = \"\\u0028\\u006B\\u0029\";\n t[\"\\u24A7\"] = \"\\u0028\\u006C\\u0029\";\n t[\"\\u24A8\"] = \"\\u0028\\u006D\\u0029\";\n t[\"\\u24A9\"] = \"\\u0028\\u006E\\u0029\";\n t[\"\\u24AA\"] = \"\\u0028\\u006F\\u0029\";\n t[\"\\u24AB\"] = \"\\u0028\\u0070\\u0029\";\n t[\"\\u24AC\"] = \"\\u0028\\u0071\\u0029\";\n t[\"\\u24AD\"] = \"\\u0028\\u0072\\u0029\";\n t[\"\\u24AE\"] = \"\\u0028\\u0073\\u0029\";\n t[\"\\u24AF\"] = \"\\u0028\\u0074\\u0029\";\n t[\"\\u24B0\"] = \"\\u0028\\u0075\\u0029\";\n t[\"\\u24B1\"] = \"\\u0028\\u0076\\u0029\";\n t[\"\\u24B2\"] = \"\\u0028\\u0077\\u0029\";\n t[\"\\u24B3\"] = \"\\u0028\\u0078\\u0029\";\n t[\"\\u24B4\"] = \"\\u0028\\u0079\\u0029\";\n t[\"\\u24B5\"] = \"\\u0028\\u007A\\u0029\";\n t[\"\\u2A0C\"] = \"\\u222B\\u222B\\u222B\\u222B\";\n t[\"\\u2A74\"] = \"\\u003A\\u003A\\u003D\";\n t[\"\\u2A75\"] = \"\\u003D\\u003D\";\n t[\"\\u2A76\"] = \"\\u003D\\u003D\\u003D\";\n t[\"\\u2E9F\"] = \"\\u6BCD\";\n t[\"\\u2EF3\"] = \"\\u9F9F\";\n t[\"\\u2F00\"] = \"\\u4E00\";\n t[\"\\u2F01\"] = \"\\u4E28\";\n t[\"\\u2F02\"] = \"\\u4E36\";\n t[\"\\u2F03\"] = \"\\u4E3F\";\n t[\"\\u2F04\"] = \"\\u4E59\";\n t[\"\\u2F05\"] = \"\\u4E85\";\n t[\"\\u2F06\"] = \"\\u4E8C\";\n t[\"\\u2F07\"] = \"\\u4EA0\";\n t[\"\\u2F08\"] = \"\\u4EBA\";\n t[\"\\u2F09\"] = \"\\u513F\";\n t[\"\\u2F0A\"] = \"\\u5165\";\n t[\"\\u2F0B\"] = \"\\u516B\";\n t[\"\\u2F0C\"] = \"\\u5182\";\n t[\"\\u2F0D\"] = \"\\u5196\";\n t[\"\\u2F0E\"] = \"\\u51AB\";\n t[\"\\u2F0F\"] = \"\\u51E0\";\n t[\"\\u2F10\"] = \"\\u51F5\";\n t[\"\\u2F11\"] = \"\\u5200\";\n t[\"\\u2F12\"] = \"\\u529B\";\n t[\"\\u2F13\"] = \"\\u52F9\";\n t[\"\\u2F14\"] = \"\\u5315\";\n t[\"\\u2F15\"] = \"\\u531A\";\n t[\"\\u2F16\"] = \"\\u5338\";\n t[\"\\u2F17\"] = \"\\u5341\";\n t[\"\\u2F18\"] = \"\\u535C\";\n t[\"\\u2F19\"] = \"\\u5369\";\n t[\"\\u2F1A\"] = \"\\u5382\";\n t[\"\\u2F1B\"] = \"\\u53B6\";\n t[\"\\u2F1C\"] = \"\\u53C8\";\n t[\"\\u2F1D\"] = \"\\u53E3\";\n t[\"\\u2F1E\"] = \"\\u56D7\";\n t[\"\\u2F1F\"] = \"\\u571F\";\n t[\"\\u2F20\"] = \"\\u58EB\";\n t[\"\\u2F21\"] = \"\\u5902\";\n t[\"\\u2F22\"] = \"\\u590A\";\n t[\"\\u2F23\"] = \"\\u5915\";\n t[\"\\u2F24\"] = \"\\u5927\";\n t[\"\\u2F25\"] = \"\\u5973\";\n t[\"\\u2F26\"] = \"\\u5B50\";\n t[\"\\u2F27\"] = \"\\u5B80\";\n t[\"\\u2F28\"] = \"\\u5BF8\";\n t[\"\\u2F29\"] = \"\\u5C0F\";\n t[\"\\u2F2A\"] = \"\\u5C22\";\n t[\"\\u2F2B\"] = \"\\u5C38\";\n t[\"\\u2F2C\"] = \"\\u5C6E\";\n t[\"\\u2F2D\"] = \"\\u5C71\";\n t[\"\\u2F2E\"] = \"\\u5DDB\";\n t[\"\\u2F2F\"] = \"\\u5DE5\";\n t[\"\\u2F30\"] = \"\\u5DF1\";\n t[\"\\u2F31\"] = \"\\u5DFE\";\n t[\"\\u2F32\"] = \"\\u5E72\";\n t[\"\\u2F33\"] = \"\\u5E7A\";\n t[\"\\u2F34\"] = \"\\u5E7F\";\n t[\"\\u2F35\"] = \"\\u5EF4\";\n t[\"\\u2F36\"] = \"\\u5EFE\";\n t[\"\\u2F37\"] = \"\\u5F0B\";\n t[\"\\u2F38\"] = \"\\u5F13\";\n t[\"\\u2F39\"] = \"\\u5F50\";\n t[\"\\u2F3A\"] = \"\\u5F61\";\n t[\"\\u2F3B\"] = \"\\u5F73\";\n t[\"\\u2F3C\"] = \"\\u5FC3\";\n t[\"\\u2F3D\"] = \"\\u6208\";\n t[\"\\u2F3E\"] = \"\\u6236\";\n t[\"\\u2F3F\"] = \"\\u624B\";\n t[\"\\u2F40\"] = \"\\u652F\";\n t[\"\\u2F41\"] = \"\\u6534\";\n t[\"\\u2F42\"] = \"\\u6587\";\n t[\"\\u2F43\"] = \"\\u6597\";\n t[\"\\u2F44\"] = \"\\u65A4\";\n t[\"\\u2F45\"] = \"\\u65B9\";\n t[\"\\u2F46\"] = \"\\u65E0\";\n t[\"\\u2F47\"] = \"\\u65E5\";\n t[\"\\u2F48\"] = \"\\u66F0\";\n t[\"\\u2F49\"] = \"\\u6708\";\n t[\"\\u2F4A\"] = \"\\u6728\";\n t[\"\\u2F4B\"] = \"\\u6B20\";\n t[\"\\u2F4C\"] = \"\\u6B62\";\n t[\"\\u2F4D\"] = \"\\u6B79\";\n t[\"\\u2F4E\"] = \"\\u6BB3\";\n t[\"\\u2F4F\"] = \"\\u6BCB\";\n t[\"\\u2F50\"] = \"\\u6BD4\";\n t[\"\\u2F51\"] = \"\\u6BDB\";\n t[\"\\u2F52\"] = \"\\u6C0F\";\n t[\"\\u2F53\"] = \"\\u6C14\";\n t[\"\\u2F54\"] = \"\\u6C34\";\n t[\"\\u2F55\"] = \"\\u706B\";\n t[\"\\u2F56\"] = \"\\u722A\";\n t[\"\\u2F57\"] = \"\\u7236\";\n t[\"\\u2F58\"] = \"\\u723B\";\n t[\"\\u2F59\"] = \"\\u723F\";\n t[\"\\u2F5A\"] = \"\\u7247\";\n t[\"\\u2F5B\"] = \"\\u7259\";\n t[\"\\u2F5C\"] = \"\\u725B\";\n t[\"\\u2F5D\"] = \"\\u72AC\";\n t[\"\\u2F5E\"] = \"\\u7384\";\n t[\"\\u2F5F\"] = \"\\u7389\";\n t[\"\\u2F60\"] = \"\\u74DC\";\n t[\"\\u2F61\"] = \"\\u74E6\";\n t[\"\\u2F62\"] = \"\\u7518\";\n t[\"\\u2F63\"] = \"\\u751F\";\n t[\"\\u2F64\"] = \"\\u7528\";\n t[\"\\u2F65\"] = \"\\u7530\";\n t[\"\\u2F66\"] = \"\\u758B\";\n t[\"\\u2F67\"] = \"\\u7592\";\n t[\"\\u2F68\"] = \"\\u7676\";\n t[\"\\u2F69\"] = \"\\u767D\";\n t[\"\\u2F6A\"] = \"\\u76AE\";\n t[\"\\u2F6B\"] = \"\\u76BF\";\n t[\"\\u2F6C\"] = \"\\u76EE\";\n t[\"\\u2F6D\"] = \"\\u77DB\";\n t[\"\\u2F6E\"] = \"\\u77E2\";\n t[\"\\u2F6F\"] = \"\\u77F3\";\n t[\"\\u2F70\"] = \"\\u793A\";\n t[\"\\u2F71\"] = \"\\u79B8\";\n t[\"\\u2F72\"] = \"\\u79BE\";\n t[\"\\u2F73\"] = \"\\u7A74\";\n t[\"\\u2F74\"] = \"\\u7ACB\";\n t[\"\\u2F75\"] = \"\\u7AF9\";\n t[\"\\u2F76\"] = \"\\u7C73\";\n t[\"\\u2F77\"] = \"\\u7CF8\";\n t[\"\\u2F78\"] = \"\\u7F36\";\n t[\"\\u2F79\"] = \"\\u7F51\";\n t[\"\\u2F7A\"] = \"\\u7F8A\";\n t[\"\\u2F7B\"] = \"\\u7FBD\";\n t[\"\\u2F7C\"] = \"\\u8001\";\n t[\"\\u2F7D\"] = \"\\u800C\";\n t[\"\\u2F7E\"] = \"\\u8012\";\n t[\"\\u2F7F\"] = \"\\u8033\";\n t[\"\\u2F80\"] = \"\\u807F\";\n t[\"\\u2F81\"] = \"\\u8089\";\n t[\"\\u2F82\"] = \"\\u81E3\";\n t[\"\\u2F83\"] = \"\\u81EA\";\n t[\"\\u2F84\"] = \"\\u81F3\";\n t[\"\\u2F85\"] = \"\\u81FC\";\n t[\"\\u2F86\"] = \"\\u820C\";\n t[\"\\u2F87\"] = \"\\u821B\";\n t[\"\\u2F88\"] = \"\\u821F\";\n t[\"\\u2F89\"] = \"\\u826E\";\n t[\"\\u2F8A\"] = \"\\u8272\";\n t[\"\\u2F8B\"] = \"\\u8278\";\n t[\"\\u2F8C\"] = \"\\u864D\";\n t[\"\\u2F8D\"] = \"\\u866B\";\n t[\"\\u2F8E\"] = \"\\u8840\";\n t[\"\\u2F8F\"] = \"\\u884C\";\n t[\"\\u2F90\"] = \"\\u8863\";\n t[\"\\u2F91\"] = \"\\u897E\";\n t[\"\\u2F92\"] = \"\\u898B\";\n t[\"\\u2F93\"] = \"\\u89D2\";\n t[\"\\u2F94\"] = \"\\u8A00\";\n t[\"\\u2F95\"] = \"\\u8C37\";\n t[\"\\u2F96\"] = \"\\u8C46\";\n t[\"\\u2F97\"] = \"\\u8C55\";\n t[\"\\u2F98\"] = \"\\u8C78\";\n t[\"\\u2F99\"] = \"\\u8C9D\";\n t[\"\\u2F9A\"] = \"\\u8D64\";\n t[\"\\u2F9B\"] = \"\\u8D70\";\n t[\"\\u2F9C\"] = \"\\u8DB3\";\n t[\"\\u2F9D\"] = \"\\u8EAB\";\n t[\"\\u2F9E\"] = \"\\u8ECA\";\n t[\"\\u2F9F\"] = \"\\u8F9B\";\n t[\"\\u2FA0\"] = \"\\u8FB0\";\n t[\"\\u2FA1\"] = \"\\u8FB5\";\n t[\"\\u2FA2\"] = \"\\u9091\";\n t[\"\\u2FA3\"] = \"\\u9149\";\n t[\"\\u2FA4\"] = \"\\u91C6\";\n t[\"\\u2FA5\"] = \"\\u91CC\";\n t[\"\\u2FA6\"] = \"\\u91D1\";\n t[\"\\u2FA7\"] = \"\\u9577\";\n t[\"\\u2FA8\"] = \"\\u9580\";\n t[\"\\u2FA9\"] = \"\\u961C\";\n t[\"\\u2FAA\"] = \"\\u96B6\";\n t[\"\\u2FAB\"] = \"\\u96B9\";\n t[\"\\u2FAC\"] = \"\\u96E8\";\n t[\"\\u2FAD\"] = \"\\u9751\";\n t[\"\\u2FAE\"] = \"\\u975E\";\n t[\"\\u2FAF\"] = \"\\u9762\";\n t[\"\\u2FB0\"] = \"\\u9769\";\n t[\"\\u2FB1\"] = \"\\u97CB\";\n t[\"\\u2FB2\"] = \"\\u97ED\";\n t[\"\\u2FB3\"] = \"\\u97F3\";\n t[\"\\u2FB4\"] = \"\\u9801\";\n t[\"\\u2FB5\"] = \"\\u98A8\";\n t[\"\\u2FB6\"] = \"\\u98DB\";\n t[\"\\u2FB7\"] = \"\\u98DF\";\n t[\"\\u2FB8\"] = \"\\u9996\";\n t[\"\\u2FB9\"] = \"\\u9999\";\n t[\"\\u2FBA\"] = \"\\u99AC\";\n t[\"\\u2FBB\"] = \"\\u9AA8\";\n t[\"\\u2FBC\"] = \"\\u9AD8\";\n t[\"\\u2FBD\"] = \"\\u9ADF\";\n t[\"\\u2FBE\"] = \"\\u9B25\";\n t[\"\\u2FBF\"] = \"\\u9B2F\";\n t[\"\\u2FC0\"] = \"\\u9B32\";\n t[\"\\u2FC1\"] = \"\\u9B3C\";\n t[\"\\u2FC2\"] = \"\\u9B5A\";\n t[\"\\u2FC3\"] = \"\\u9CE5\";\n t[\"\\u2FC4\"] = \"\\u9E75\";\n t[\"\\u2FC5\"] = \"\\u9E7F\";\n t[\"\\u2FC6\"] = \"\\u9EA5\";\n t[\"\\u2FC7\"] = \"\\u9EBB\";\n t[\"\\u2FC8\"] = \"\\u9EC3\";\n t[\"\\u2FC9\"] = \"\\u9ECD\";\n t[\"\\u2FCA\"] = \"\\u9ED1\";\n t[\"\\u2FCB\"] = \"\\u9EF9\";\n t[\"\\u2FCC\"] = \"\\u9EFD\";\n t[\"\\u2FCD\"] = \"\\u9F0E\";\n t[\"\\u2FCE\"] = \"\\u9F13\";\n t[\"\\u2FCF\"] = \"\\u9F20\";\n t[\"\\u2FD0\"] = \"\\u9F3B\";\n t[\"\\u2FD1\"] = \"\\u9F4A\";\n t[\"\\u2FD2\"] = \"\\u9F52\";\n t[\"\\u2FD3\"] = \"\\u9F8D\";\n t[\"\\u2FD4\"] = \"\\u9F9C\";\n t[\"\\u2FD5\"] = \"\\u9FA0\";\n t[\"\\u3036\"] = \"\\u3012\";\n t[\"\\u3038\"] = \"\\u5341\";\n t[\"\\u3039\"] = \"\\u5344\";\n t[\"\\u303A\"] = \"\\u5345\";\n t[\"\\u309B\"] = \"\\u0020\\u3099\";\n t[\"\\u309C\"] = \"\\u0020\\u309A\";\n t[\"\\u3131\"] = \"\\u1100\";\n t[\"\\u3132\"] = \"\\u1101\";\n t[\"\\u3133\"] = \"\\u11AA\";\n t[\"\\u3134\"] = \"\\u1102\";\n t[\"\\u3135\"] = \"\\u11AC\";\n t[\"\\u3136\"] = \"\\u11AD\";\n t[\"\\u3137\"] = \"\\u1103\";\n t[\"\\u3138\"] = \"\\u1104\";\n t[\"\\u3139\"] = \"\\u1105\";\n t[\"\\u313A\"] = \"\\u11B0\";\n t[\"\\u313B\"] = \"\\u11B1\";\n t[\"\\u313C\"] = \"\\u11B2\";\n t[\"\\u313D\"] = \"\\u11B3\";\n t[\"\\u313E\"] = \"\\u11B4\";\n t[\"\\u313F\"] = \"\\u11B5\";\n t[\"\\u3140\"] = \"\\u111A\";\n t[\"\\u3141\"] = \"\\u1106\";\n t[\"\\u3142\"] = \"\\u1107\";\n t[\"\\u3143\"] = \"\\u1108\";\n t[\"\\u3144\"] = \"\\u1121\";\n t[\"\\u3145\"] = \"\\u1109\";\n t[\"\\u3146\"] = \"\\u110A\";\n t[\"\\u3147\"] = \"\\u110B\";\n t[\"\\u3148\"] = \"\\u110C\";\n t[\"\\u3149\"] = \"\\u110D\";\n t[\"\\u314A\"] = \"\\u110E\";\n t[\"\\u314B\"] = \"\\u110F\";\n t[\"\\u314C\"] = \"\\u1110\";\n t[\"\\u314D\"] = \"\\u1111\";\n t[\"\\u314E\"] = \"\\u1112\";\n t[\"\\u314F\"] = \"\\u1161\";\n t[\"\\u3150\"] = \"\\u1162\";\n t[\"\\u3151\"] = \"\\u1163\";\n t[\"\\u3152\"] = \"\\u1164\";\n t[\"\\u3153\"] = \"\\u1165\";\n t[\"\\u3154\"] = \"\\u1166\";\n t[\"\\u3155\"] = \"\\u1167\";\n t[\"\\u3156\"] = \"\\u1168\";\n t[\"\\u3157\"] = \"\\u1169\";\n t[\"\\u3158\"] = \"\\u116A\";\n t[\"\\u3159\"] = \"\\u116B\";\n t[\"\\u315A\"] = \"\\u116C\";\n t[\"\\u315B\"] = \"\\u116D\";\n t[\"\\u315C\"] = \"\\u116E\";\n t[\"\\u315D\"] = \"\\u116F\";\n t[\"\\u315E\"] = \"\\u1170\";\n t[\"\\u315F\"] = \"\\u1171\";\n t[\"\\u3160\"] = \"\\u1172\";\n t[\"\\u3161\"] = \"\\u1173\";\n t[\"\\u3162\"] = \"\\u1174\";\n t[\"\\u3163\"] = \"\\u1175\";\n t[\"\\u3164\"] = \"\\u1160\";\n t[\"\\u3165\"] = \"\\u1114\";\n t[\"\\u3166\"] = \"\\u1115\";\n t[\"\\u3167\"] = \"\\u11C7\";\n t[\"\\u3168\"] = \"\\u11C8\";\n t[\"\\u3169\"] = \"\\u11CC\";\n t[\"\\u316A\"] = \"\\u11CE\";\n t[\"\\u316B\"] = \"\\u11D3\";\n t[\"\\u316C\"] = \"\\u11D7\";\n t[\"\\u316D\"] = \"\\u11D9\";\n t[\"\\u316E\"] = \"\\u111C\";\n t[\"\\u316F\"] = \"\\u11DD\";\n t[\"\\u3170\"] = \"\\u11DF\";\n t[\"\\u3171\"] = \"\\u111D\";\n t[\"\\u3172\"] = \"\\u111E\";\n t[\"\\u3173\"] = \"\\u1120\";\n t[\"\\u3174\"] = \"\\u1122\";\n t[\"\\u3175\"] = \"\\u1123\";\n t[\"\\u3176\"] = \"\\u1127\";\n t[\"\\u3177\"] = \"\\u1129\";\n t[\"\\u3178\"] = \"\\u112B\";\n t[\"\\u3179\"] = \"\\u112C\";\n t[\"\\u317A\"] = \"\\u112D\";\n t[\"\\u317B\"] = \"\\u112E\";\n t[\"\\u317C\"] = \"\\u112F\";\n t[\"\\u317D\"] = \"\\u1132\";\n t[\"\\u317E\"] = \"\\u1136\";\n t[\"\\u317F\"] = \"\\u1140\";\n t[\"\\u3180\"] = \"\\u1147\";\n t[\"\\u3181\"] = \"\\u114C\";\n t[\"\\u3182\"] = \"\\u11F1\";\n t[\"\\u3183\"] = \"\\u11F2\";\n t[\"\\u3184\"] = \"\\u1157\";\n t[\"\\u3185\"] = \"\\u1158\";\n t[\"\\u3186\"] = \"\\u1159\";\n t[\"\\u3187\"] = \"\\u1184\";\n t[\"\\u3188\"] = \"\\u1185\";\n t[\"\\u3189\"] = \"\\u1188\";\n t[\"\\u318A\"] = \"\\u1191\";\n t[\"\\u318B\"] = \"\\u1192\";\n t[\"\\u318C\"] = \"\\u1194\";\n t[\"\\u318D\"] = \"\\u119E\";\n t[\"\\u318E\"] = \"\\u11A1\";\n t[\"\\u3200\"] = \"\\u0028\\u1100\\u0029\";\n t[\"\\u3201\"] = \"\\u0028\\u1102\\u0029\";\n t[\"\\u3202\"] = \"\\u0028\\u1103\\u0029\";\n t[\"\\u3203\"] = \"\\u0028\\u1105\\u0029\";\n t[\"\\u3204\"] = \"\\u0028\\u1106\\u0029\";\n t[\"\\u3205\"] = \"\\u0028\\u1107\\u0029\";\n t[\"\\u3206\"] = \"\\u0028\\u1109\\u0029\";\n t[\"\\u3207\"] = \"\\u0028\\u110B\\u0029\";\n t[\"\\u3208\"] = \"\\u0028\\u110C\\u0029\";\n t[\"\\u3209\"] = \"\\u0028\\u110E\\u0029\";\n t[\"\\u320A\"] = \"\\u0028\\u110F\\u0029\";\n t[\"\\u320B\"] = \"\\u0028\\u1110\\u0029\";\n t[\"\\u320C\"] = \"\\u0028\\u1111\\u0029\";\n t[\"\\u320D\"] = \"\\u0028\\u1112\\u0029\";\n t[\"\\u320E\"] = \"\\u0028\\u1100\\u1161\\u0029\";\n t[\"\\u320F\"] = \"\\u0028\\u1102\\u1161\\u0029\";\n t[\"\\u3210\"] = \"\\u0028\\u1103\\u1161\\u0029\";\n t[\"\\u3211\"] = \"\\u0028\\u1105\\u1161\\u0029\";\n t[\"\\u3212\"] = \"\\u0028\\u1106\\u1161\\u0029\";\n t[\"\\u3213\"] = \"\\u0028\\u1107\\u1161\\u0029\";\n t[\"\\u3214\"] = \"\\u0028\\u1109\\u1161\\u0029\";\n t[\"\\u3215\"] = \"\\u0028\\u110B\\u1161\\u0029\";\n t[\"\\u3216\"] = \"\\u0028\\u110C\\u1161\\u0029\";\n t[\"\\u3217\"] = \"\\u0028\\u110E\\u1161\\u0029\";\n t[\"\\u3218\"] = \"\\u0028\\u110F\\u1161\\u0029\";\n t[\"\\u3219\"] = \"\\u0028\\u1110\\u1161\\u0029\";\n t[\"\\u321A\"] = \"\\u0028\\u1111\\u1161\\u0029\";\n t[\"\\u321B\"] = \"\\u0028\\u1112\\u1161\\u0029\";\n t[\"\\u321C\"] = \"\\u0028\\u110C\\u116E\\u0029\";\n t[\"\\u321D\"] = \"\\u0028\\u110B\\u1169\\u110C\\u1165\\u11AB\\u0029\";\n t[\"\\u321E\"] = \"\\u0028\\u110B\\u1169\\u1112\\u116E\\u0029\";\n t[\"\\u3220\"] = \"\\u0028\\u4E00\\u0029\";\n t[\"\\u3221\"] = \"\\u0028\\u4E8C\\u0029\";\n t[\"\\u3222\"] = \"\\u0028\\u4E09\\u0029\";\n t[\"\\u3223\"] = \"\\u0028\\u56DB\\u0029\";\n t[\"\\u3224\"] = \"\\u0028\\u4E94\\u0029\";\n t[\"\\u3225\"] = \"\\u0028\\u516D\\u0029\";\n t[\"\\u3226\"] = \"\\u0028\\u4E03\\u0029\";\n t[\"\\u3227\"] = \"\\u0028\\u516B\\u0029\";\n t[\"\\u3228\"] = \"\\u0028\\u4E5D\\u0029\";\n t[\"\\u3229\"] = \"\\u0028\\u5341\\u0029\";\n t[\"\\u322A\"] = \"\\u0028\\u6708\\u0029\";\n t[\"\\u322B\"] = \"\\u0028\\u706B\\u0029\";\n t[\"\\u322C\"] = \"\\u0028\\u6C34\\u0029\";\n t[\"\\u322D\"] = \"\\u0028\\u6728\\u0029\";\n t[\"\\u322E\"] = \"\\u0028\\u91D1\\u0029\";\n t[\"\\u322F\"] = \"\\u0028\\u571F\\u0029\";\n t[\"\\u3230\"] = \"\\u0028\\u65E5\\u0029\";\n t[\"\\u3231\"] = \"\\u0028\\u682A\\u0029\";\n t[\"\\u3232\"] = \"\\u0028\\u6709\\u0029\";\n t[\"\\u3233\"] = \"\\u0028\\u793E\\u0029\";\n t[\"\\u3234\"] = \"\\u0028\\u540D\\u0029\";\n t[\"\\u3235\"] = \"\\u0028\\u7279\\u0029\";\n t[\"\\u3236\"] = \"\\u0028\\u8CA1\\u0029\";\n t[\"\\u3237\"] = \"\\u0028\\u795D\\u0029\";\n t[\"\\u3238\"] = \"\\u0028\\u52B4\\u0029\";\n t[\"\\u3239\"] = \"\\u0028\\u4EE3\\u0029\";\n t[\"\\u323A\"] = \"\\u0028\\u547C\\u0029\";\n t[\"\\u323B\"] = \"\\u0028\\u5B66\\u0029\";\n t[\"\\u323C\"] = \"\\u0028\\u76E3\\u0029\";\n t[\"\\u323D\"] = \"\\u0028\\u4F01\\u0029\";\n t[\"\\u323E\"] = \"\\u0028\\u8CC7\\u0029\";\n t[\"\\u323F\"] = \"\\u0028\\u5354\\u0029\";\n t[\"\\u3240\"] = \"\\u0028\\u796D\\u0029\";\n t[\"\\u3241\"] = \"\\u0028\\u4F11\\u0029\";\n t[\"\\u3242\"] = \"\\u0028\\u81EA\\u0029\";\n t[\"\\u3243\"] = \"\\u0028\\u81F3\\u0029\";\n t[\"\\u32C0\"] = \"\\u0031\\u6708\";\n t[\"\\u32C1\"] = \"\\u0032\\u6708\";\n t[\"\\u32C2\"] = \"\\u0033\\u6708\";\n t[\"\\u32C3\"] = \"\\u0034\\u6708\";\n t[\"\\u32C4\"] = \"\\u0035\\u6708\";\n t[\"\\u32C5\"] = \"\\u0036\\u6708\";\n t[\"\\u32C6\"] = \"\\u0037\\u6708\";\n t[\"\\u32C7\"] = \"\\u0038\\u6708\";\n t[\"\\u32C8\"] = \"\\u0039\\u6708\";\n t[\"\\u32C9\"] = \"\\u0031\\u0030\\u6708\";\n t[\"\\u32CA\"] = \"\\u0031\\u0031\\u6708\";\n t[\"\\u32CB\"] = \"\\u0031\\u0032\\u6708\";\n t[\"\\u3358\"] = \"\\u0030\\u70B9\";\n t[\"\\u3359\"] = \"\\u0031\\u70B9\";\n t[\"\\u335A\"] = \"\\u0032\\u70B9\";\n t[\"\\u335B\"] = \"\\u0033\\u70B9\";\n t[\"\\u335C\"] = \"\\u0034\\u70B9\";\n t[\"\\u335D\"] = \"\\u0035\\u70B9\";\n t[\"\\u335E\"] = \"\\u0036\\u70B9\";\n t[\"\\u335F\"] = \"\\u0037\\u70B9\";\n t[\"\\u3360\"] = \"\\u0038\\u70B9\";\n t[\"\\u3361\"] = \"\\u0039\\u70B9\";\n t[\"\\u3362\"] = \"\\u0031\\u0030\\u70B9\";\n t[\"\\u3363\"] = \"\\u0031\\u0031\\u70B9\";\n t[\"\\u3364\"] = \"\\u0031\\u0032\\u70B9\";\n t[\"\\u3365\"] = \"\\u0031\\u0033\\u70B9\";\n t[\"\\u3366\"] = \"\\u0031\\u0034\\u70B9\";\n t[\"\\u3367\"] = \"\\u0031\\u0035\\u70B9\";\n t[\"\\u3368\"] = \"\\u0031\\u0036\\u70B9\";\n t[\"\\u3369\"] = \"\\u0031\\u0037\\u70B9\";\n t[\"\\u336A\"] = \"\\u0031\\u0038\\u70B9\";\n t[\"\\u336B\"] = \"\\u0031\\u0039\\u70B9\";\n t[\"\\u336C\"] = \"\\u0032\\u0030\\u70B9\";\n t[\"\\u336D\"] = \"\\u0032\\u0031\\u70B9\";\n t[\"\\u336E\"] = \"\\u0032\\u0032\\u70B9\";\n t[\"\\u336F\"] = \"\\u0032\\u0033\\u70B9\";\n t[\"\\u3370\"] = \"\\u0032\\u0034\\u70B9\";\n t[\"\\u33E0\"] = \"\\u0031\\u65E5\";\n t[\"\\u33E1\"] = \"\\u0032\\u65E5\";\n t[\"\\u33E2\"] = \"\\u0033\\u65E5\";\n t[\"\\u33E3\"] = \"\\u0034\\u65E5\";\n t[\"\\u33E4\"] = \"\\u0035\\u65E5\";\n t[\"\\u33E5\"] = \"\\u0036\\u65E5\";\n t[\"\\u33E6\"] = \"\\u0037\\u65E5\";\n t[\"\\u33E7\"] = \"\\u0038\\u65E5\";\n t[\"\\u33E8\"] = \"\\u0039\\u65E5\";\n t[\"\\u33E9\"] = \"\\u0031\\u0030\\u65E5\";\n t[\"\\u33EA\"] = \"\\u0031\\u0031\\u65E5\";\n t[\"\\u33EB\"] = \"\\u0031\\u0032\\u65E5\";\n t[\"\\u33EC\"] = \"\\u0031\\u0033\\u65E5\";\n t[\"\\u33ED\"] = \"\\u0031\\u0034\\u65E5\";\n t[\"\\u33EE\"] = \"\\u0031\\u0035\\u65E5\";\n t[\"\\u33EF\"] = \"\\u0031\\u0036\\u65E5\";\n t[\"\\u33F0\"] = \"\\u0031\\u0037\\u65E5\";\n t[\"\\u33F1\"] = \"\\u0031\\u0038\\u65E5\";\n t[\"\\u33F2\"] = \"\\u0031\\u0039\\u65E5\";\n t[\"\\u33F3\"] = \"\\u0032\\u0030\\u65E5\";\n t[\"\\u33F4\"] = \"\\u0032\\u0031\\u65E5\";\n t[\"\\u33F5\"] = \"\\u0032\\u0032\\u65E5\";\n t[\"\\u33F6\"] = \"\\u0032\\u0033\\u65E5\";\n t[\"\\u33F7\"] = \"\\u0032\\u0034\\u65E5\";\n t[\"\\u33F8\"] = \"\\u0032\\u0035\\u65E5\";\n t[\"\\u33F9\"] = \"\\u0032\\u0036\\u65E5\";\n t[\"\\u33FA\"] = \"\\u0032\\u0037\\u65E5\";\n t[\"\\u33FB\"] = \"\\u0032\\u0038\\u65E5\";\n t[\"\\u33FC\"] = \"\\u0032\\u0039\\u65E5\";\n t[\"\\u33FD\"] = \"\\u0033\\u0030\\u65E5\";\n t[\"\\u33FE\"] = \"\\u0033\\u0031\\u65E5\";\n t[\"\\uFB00\"] = \"\\u0066\\u0066\";\n t[\"\\uFB01\"] = \"\\u0066\\u0069\";\n t[\"\\uFB02\"] = \"\\u0066\\u006C\";\n t[\"\\uFB03\"] = \"\\u0066\\u0066\\u0069\";\n t[\"\\uFB04\"] = \"\\u0066\\u0066\\u006C\";\n t[\"\\uFB05\"] = \"\\u017F\\u0074\";\n t[\"\\uFB06\"] = \"\\u0073\\u0074\";\n t[\"\\uFB13\"] = \"\\u0574\\u0576\";\n t[\"\\uFB14\"] = \"\\u0574\\u0565\";\n t[\"\\uFB15\"] = \"\\u0574\\u056B\";\n t[\"\\uFB16\"] = \"\\u057E\\u0576\";\n t[\"\\uFB17\"] = \"\\u0574\\u056D\";\n t[\"\\uFB4F\"] = \"\\u05D0\\u05DC\";\n t[\"\\uFB50\"] = \"\\u0671\";\n t[\"\\uFB51\"] = \"\\u0671\";\n t[\"\\uFB52\"] = \"\\u067B\";\n t[\"\\uFB53\"] = \"\\u067B\";\n t[\"\\uFB54\"] = \"\\u067B\";\n t[\"\\uFB55\"] = \"\\u067B\";\n t[\"\\uFB56\"] = \"\\u067E\";\n t[\"\\uFB57\"] = \"\\u067E\";\n t[\"\\uFB58\"] = \"\\u067E\";\n t[\"\\uFB59\"] = \"\\u067E\";\n t[\"\\uFB5A\"] = \"\\u0680\";\n t[\"\\uFB5B\"] = \"\\u0680\";\n t[\"\\uFB5C\"] = \"\\u0680\";\n t[\"\\uFB5D\"] = \"\\u0680\";\n t[\"\\uFB5E\"] = \"\\u067A\";\n t[\"\\uFB5F\"] = \"\\u067A\";\n t[\"\\uFB60\"] = \"\\u067A\";\n t[\"\\uFB61\"] = \"\\u067A\";\n t[\"\\uFB62\"] = \"\\u067F\";\n t[\"\\uFB63\"] = \"\\u067F\";\n t[\"\\uFB64\"] = \"\\u067F\";\n t[\"\\uFB65\"] = \"\\u067F\";\n t[\"\\uFB66\"] = \"\\u0679\";\n t[\"\\uFB67\"] = \"\\u0679\";\n t[\"\\uFB68\"] = \"\\u0679\";\n t[\"\\uFB69\"] = \"\\u0679\";\n t[\"\\uFB6A\"] = \"\\u06A4\";\n t[\"\\uFB6B\"] = \"\\u06A4\";\n t[\"\\uFB6C\"] = \"\\u06A4\";\n t[\"\\uFB6D\"] = \"\\u06A4\";\n t[\"\\uFB6E\"] = \"\\u06A6\";\n t[\"\\uFB6F\"] = \"\\u06A6\";\n t[\"\\uFB70\"] = \"\\u06A6\";\n t[\"\\uFB71\"] = \"\\u06A6\";\n t[\"\\uFB72\"] = \"\\u0684\";\n t[\"\\uFB73\"] = \"\\u0684\";\n t[\"\\uFB74\"] = \"\\u0684\";\n t[\"\\uFB75\"] = \"\\u0684\";\n t[\"\\uFB76\"] = \"\\u0683\";\n t[\"\\uFB77\"] = \"\\u0683\";\n t[\"\\uFB78\"] = \"\\u0683\";\n t[\"\\uFB79\"] = \"\\u0683\";\n t[\"\\uFB7A\"] = \"\\u0686\";\n t[\"\\uFB7B\"] = \"\\u0686\";\n t[\"\\uFB7C\"] = \"\\u0686\";\n t[\"\\uFB7D\"] = \"\\u0686\";\n t[\"\\uFB7E\"] = \"\\u0687\";\n t[\"\\uFB7F\"] = \"\\u0687\";\n t[\"\\uFB80\"] = \"\\u0687\";\n t[\"\\uFB81\"] = \"\\u0687\";\n t[\"\\uFB82\"] = \"\\u068D\";\n t[\"\\uFB83\"] = \"\\u068D\";\n t[\"\\uFB84\"] = \"\\u068C\";\n t[\"\\uFB85\"] = \"\\u068C\";\n t[\"\\uFB86\"] = \"\\u068E\";\n t[\"\\uFB87\"] = \"\\u068E\";\n t[\"\\uFB88\"] = \"\\u0688\";\n t[\"\\uFB89\"] = \"\\u0688\";\n t[\"\\uFB8A\"] = \"\\u0698\";\n t[\"\\uFB8B\"] = \"\\u0698\";\n t[\"\\uFB8C\"] = \"\\u0691\";\n t[\"\\uFB8D\"] = \"\\u0691\";\n t[\"\\uFB8E\"] = \"\\u06A9\";\n t[\"\\uFB8F\"] = \"\\u06A9\";\n t[\"\\uFB90\"] = \"\\u06A9\";\n t[\"\\uFB91\"] = \"\\u06A9\";\n t[\"\\uFB92\"] = \"\\u06AF\";\n t[\"\\uFB93\"] = \"\\u06AF\";\n t[\"\\uFB94\"] = \"\\u06AF\";\n t[\"\\uFB95\"] = \"\\u06AF\";\n t[\"\\uFB96\"] = \"\\u06B3\";\n t[\"\\uFB97\"] = \"\\u06B3\";\n t[\"\\uFB98\"] = \"\\u06B3\";\n t[\"\\uFB99\"] = \"\\u06B3\";\n t[\"\\uFB9A\"] = \"\\u06B1\";\n t[\"\\uFB9B\"] = \"\\u06B1\";\n t[\"\\uFB9C\"] = \"\\u06B1\";\n t[\"\\uFB9D\"] = \"\\u06B1\";\n t[\"\\uFB9E\"] = \"\\u06BA\";\n t[\"\\uFB9F\"] = \"\\u06BA\";\n t[\"\\uFBA0\"] = \"\\u06BB\";\n t[\"\\uFBA1\"] = \"\\u06BB\";\n t[\"\\uFBA2\"] = \"\\u06BB\";\n t[\"\\uFBA3\"] = \"\\u06BB\";\n t[\"\\uFBA4\"] = \"\\u06C0\";\n t[\"\\uFBA5\"] = \"\\u06C0\";\n t[\"\\uFBA6\"] = \"\\u06C1\";\n t[\"\\uFBA7\"] = \"\\u06C1\";\n t[\"\\uFBA8\"] = \"\\u06C1\";\n t[\"\\uFBA9\"] = \"\\u06C1\";\n t[\"\\uFBAA\"] = \"\\u06BE\";\n t[\"\\uFBAB\"] = \"\\u06BE\";\n t[\"\\uFBAC\"] = \"\\u06BE\";\n t[\"\\uFBAD\"] = \"\\u06BE\";\n t[\"\\uFBAE\"] = \"\\u06D2\";\n t[\"\\uFBAF\"] = \"\\u06D2\";\n t[\"\\uFBB0\"] = \"\\u06D3\";\n t[\"\\uFBB1\"] = \"\\u06D3\";\n t[\"\\uFBD3\"] = \"\\u06AD\";\n t[\"\\uFBD4\"] = \"\\u06AD\";\n t[\"\\uFBD5\"] = \"\\u06AD\";\n t[\"\\uFBD6\"] = \"\\u06AD\";\n t[\"\\uFBD7\"] = \"\\u06C7\";\n t[\"\\uFBD8\"] = \"\\u06C7\";\n t[\"\\uFBD9\"] = \"\\u06C6\";\n t[\"\\uFBDA\"] = \"\\u06C6\";\n t[\"\\uFBDB\"] = \"\\u06C8\";\n t[\"\\uFBDC\"] = \"\\u06C8\";\n t[\"\\uFBDD\"] = \"\\u0677\";\n t[\"\\uFBDE\"] = \"\\u06CB\";\n t[\"\\uFBDF\"] = \"\\u06CB\";\n t[\"\\uFBE0\"] = \"\\u06C5\";\n t[\"\\uFBE1\"] = \"\\u06C5\";\n t[\"\\uFBE2\"] = \"\\u06C9\";\n t[\"\\uFBE3\"] = \"\\u06C9\";\n t[\"\\uFBE4\"] = \"\\u06D0\";\n t[\"\\uFBE5\"] = \"\\u06D0\";\n t[\"\\uFBE6\"] = \"\\u06D0\";\n t[\"\\uFBE7\"] = \"\\u06D0\";\n t[\"\\uFBE8\"] = \"\\u0649\";\n t[\"\\uFBE9\"] = \"\\u0649\";\n t[\"\\uFBEA\"] = \"\\u0626\\u0627\";\n t[\"\\uFBEB\"] = \"\\u0626\\u0627\";\n t[\"\\uFBEC\"] = \"\\u0626\\u06D5\";\n t[\"\\uFBED\"] = \"\\u0626\\u06D5\";\n t[\"\\uFBEE\"] = \"\\u0626\\u0648\";\n t[\"\\uFBEF\"] = \"\\u0626\\u0648\";\n t[\"\\uFBF0\"] = \"\\u0626\\u06C7\";\n t[\"\\uFBF1\"] = \"\\u0626\\u06C7\";\n t[\"\\uFBF2\"] = \"\\u0626\\u06C6\";\n t[\"\\uFBF3\"] = \"\\u0626\\u06C6\";\n t[\"\\uFBF4\"] = \"\\u0626\\u06C8\";\n t[\"\\uFBF5\"] = \"\\u0626\\u06C8\";\n t[\"\\uFBF6\"] = \"\\u0626\\u06D0\";\n t[\"\\uFBF7\"] = \"\\u0626\\u06D0\";\n t[\"\\uFBF8\"] = \"\\u0626\\u06D0\";\n t[\"\\uFBF9\"] = \"\\u0626\\u0649\";\n t[\"\\uFBFA\"] = \"\\u0626\\u0649\";\n t[\"\\uFBFB\"] = \"\\u0626\\u0649\";\n t[\"\\uFBFC\"] = \"\\u06CC\";\n t[\"\\uFBFD\"] = \"\\u06CC\";\n t[\"\\uFBFE\"] = \"\\u06CC\";\n t[\"\\uFBFF\"] = \"\\u06CC\";\n t[\"\\uFC00\"] = \"\\u0626\\u062C\";\n t[\"\\uFC01\"] = \"\\u0626\\u062D\";\n t[\"\\uFC02\"] = \"\\u0626\\u0645\";\n t[\"\\uFC03\"] = \"\\u0626\\u0649\";\n t[\"\\uFC04\"] = \"\\u0626\\u064A\";\n t[\"\\uFC05\"] = \"\\u0628\\u062C\";\n t[\"\\uFC06\"] = \"\\u0628\\u062D\";\n t[\"\\uFC07\"] = \"\\u0628\\u062E\";\n t[\"\\uFC08\"] = \"\\u0628\\u0645\";\n t[\"\\uFC09\"] = \"\\u0628\\u0649\";\n t[\"\\uFC0A\"] = \"\\u0628\\u064A\";\n t[\"\\uFC0B\"] = \"\\u062A\\u062C\";\n t[\"\\uFC0C\"] = \"\\u062A\\u062D\";\n t[\"\\uFC0D\"] = \"\\u062A\\u062E\";\n t[\"\\uFC0E\"] = \"\\u062A\\u0645\";\n t[\"\\uFC0F\"] = \"\\u062A\\u0649\";\n t[\"\\uFC10\"] = \"\\u062A\\u064A\";\n t[\"\\uFC11\"] = \"\\u062B\\u062C\";\n t[\"\\uFC12\"] = \"\\u062B\\u0645\";\n t[\"\\uFC13\"] = \"\\u062B\\u0649\";\n t[\"\\uFC14\"] = \"\\u062B\\u064A\";\n t[\"\\uFC15\"] = \"\\u062C\\u062D\";\n t[\"\\uFC16\"] = \"\\u062C\\u0645\";\n t[\"\\uFC17\"] = \"\\u062D\\u062C\";\n t[\"\\uFC18\"] = \"\\u062D\\u0645\";\n t[\"\\uFC19\"] = \"\\u062E\\u062C\";\n t[\"\\uFC1A\"] = \"\\u062E\\u062D\";\n t[\"\\uFC1B\"] = \"\\u062E\\u0645\";\n t[\"\\uFC1C\"] = \"\\u0633\\u062C\";\n t[\"\\uFC1D\"] = \"\\u0633\\u062D\";\n t[\"\\uFC1E\"] = \"\\u0633\\u062E\";\n t[\"\\uFC1F\"] = \"\\u0633\\u0645\";\n t[\"\\uFC20\"] = \"\\u0635\\u062D\";\n t[\"\\uFC21\"] = \"\\u0635\\u0645\";\n t[\"\\uFC22\"] = \"\\u0636\\u062C\";\n t[\"\\uFC23\"] = \"\\u0636\\u062D\";\n t[\"\\uFC24\"] = \"\\u0636\\u062E\";\n t[\"\\uFC25\"] = \"\\u0636\\u0645\";\n t[\"\\uFC26\"] = \"\\u0637\\u062D\";\n t[\"\\uFC27\"] = \"\\u0637\\u0645\";\n t[\"\\uFC28\"] = \"\\u0638\\u0645\";\n t[\"\\uFC29\"] = \"\\u0639\\u062C\";\n t[\"\\uFC2A\"] = \"\\u0639\\u0645\";\n t[\"\\uFC2B\"] = \"\\u063A\\u062C\";\n t[\"\\uFC2C\"] = \"\\u063A\\u0645\";\n t[\"\\uFC2D\"] = \"\\u0641\\u062C\";\n t[\"\\uFC2E\"] = \"\\u0641\\u062D\";\n t[\"\\uFC2F\"] = \"\\u0641\\u062E\";\n t[\"\\uFC30\"] = \"\\u0641\\u0645\";\n t[\"\\uFC31\"] = \"\\u0641\\u0649\";\n t[\"\\uFC32\"] = \"\\u0641\\u064A\";\n t[\"\\uFC33\"] = \"\\u0642\\u062D\";\n t[\"\\uFC34\"] = \"\\u0642\\u0645\";\n t[\"\\uFC35\"] = \"\\u0642\\u0649\";\n t[\"\\uFC36\"] = \"\\u0642\\u064A\";\n t[\"\\uFC37\"] = \"\\u0643\\u0627\";\n t[\"\\uFC38\"] = \"\\u0643\\u062C\";\n t[\"\\uFC39\"] = \"\\u0643\\u062D\";\n t[\"\\uFC3A\"] = \"\\u0643\\u062E\";\n t[\"\\uFC3B\"] = \"\\u0643\\u0644\";\n t[\"\\uFC3C\"] = \"\\u0643\\u0645\";\n t[\"\\uFC3D\"] = \"\\u0643\\u0649\";\n t[\"\\uFC3E\"] = \"\\u0643\\u064A\";\n t[\"\\uFC3F\"] = \"\\u0644\\u062C\";\n t[\"\\uFC40\"] = \"\\u0644\\u062D\";\n t[\"\\uFC41\"] = \"\\u0644\\u062E\";\n t[\"\\uFC42\"] = \"\\u0644\\u0645\";\n t[\"\\uFC43\"] = \"\\u0644\\u0649\";\n t[\"\\uFC44\"] = \"\\u0644\\u064A\";\n t[\"\\uFC45\"] = \"\\u0645\\u062C\";\n t[\"\\uFC46\"] = \"\\u0645\\u062D\";\n t[\"\\uFC47\"] = \"\\u0645\\u062E\";\n t[\"\\uFC48\"] = \"\\u0645\\u0645\";\n t[\"\\uFC49\"] = \"\\u0645\\u0649\";\n t[\"\\uFC4A\"] = \"\\u0645\\u064A\";\n t[\"\\uFC4B\"] = \"\\u0646\\u062C\";\n t[\"\\uFC4C\"] = \"\\u0646\\u062D\";\n t[\"\\uFC4D\"] = \"\\u0646\\u062E\";\n t[\"\\uFC4E\"] = \"\\u0646\\u0645\";\n t[\"\\uFC4F\"] = \"\\u0646\\u0649\";\n t[\"\\uFC50\"] = \"\\u0646\\u064A\";\n t[\"\\uFC51\"] = \"\\u0647\\u062C\";\n t[\"\\uFC52\"] = \"\\u0647\\u0645\";\n t[\"\\uFC53\"] = \"\\u0647\\u0649\";\n t[\"\\uFC54\"] = \"\\u0647\\u064A\";\n t[\"\\uFC55\"] = \"\\u064A\\u062C\";\n t[\"\\uFC56\"] = \"\\u064A\\u062D\";\n t[\"\\uFC57\"] = \"\\u064A\\u062E\";\n t[\"\\uFC58\"] = \"\\u064A\\u0645\";\n t[\"\\uFC59\"] = \"\\u064A\\u0649\";\n t[\"\\uFC5A\"] = \"\\u064A\\u064A\";\n t[\"\\uFC5B\"] = \"\\u0630\\u0670\";\n t[\"\\uFC5C\"] = \"\\u0631\\u0670\";\n t[\"\\uFC5D\"] = \"\\u0649\\u0670\";\n t[\"\\uFC5E\"] = \"\\u0020\\u064C\\u0651\";\n t[\"\\uFC5F\"] = \"\\u0020\\u064D\\u0651\";\n t[\"\\uFC60\"] = \"\\u0020\\u064E\\u0651\";\n t[\"\\uFC61\"] = \"\\u0020\\u064F\\u0651\";\n t[\"\\uFC62\"] = \"\\u0020\\u0650\\u0651\";\n t[\"\\uFC63\"] = \"\\u0020\\u0651\\u0670\";\n t[\"\\uFC64\"] = \"\\u0626\\u0631\";\n t[\"\\uFC65\"] = \"\\u0626\\u0632\";\n t[\"\\uFC66\"] = \"\\u0626\\u0645\";\n t[\"\\uFC67\"] = \"\\u0626\\u0646\";\n t[\"\\uFC68\"] = \"\\u0626\\u0649\";\n t[\"\\uFC69\"] = \"\\u0626\\u064A\";\n t[\"\\uFC6A\"] = \"\\u0628\\u0631\";\n t[\"\\uFC6B\"] = \"\\u0628\\u0632\";\n t[\"\\uFC6C\"] = \"\\u0628\\u0645\";\n t[\"\\uFC6D\"] = \"\\u0628\\u0646\";\n t[\"\\uFC6E\"] = \"\\u0628\\u0649\";\n t[\"\\uFC6F\"] = \"\\u0628\\u064A\";\n t[\"\\uFC70\"] = \"\\u062A\\u0631\";\n t[\"\\uFC71\"] = \"\\u062A\\u0632\";\n t[\"\\uFC72\"] = \"\\u062A\\u0645\";\n t[\"\\uFC73\"] = \"\\u062A\\u0646\";\n t[\"\\uFC74\"] = \"\\u062A\\u0649\";\n t[\"\\uFC75\"] = \"\\u062A\\u064A\";\n t[\"\\uFC76\"] = \"\\u062B\\u0631\";\n t[\"\\uFC77\"] = \"\\u062B\\u0632\";\n t[\"\\uFC78\"] = \"\\u062B\\u0645\";\n t[\"\\uFC79\"] = \"\\u062B\\u0646\";\n t[\"\\uFC7A\"] = \"\\u062B\\u0649\";\n t[\"\\uFC7B\"] = \"\\u062B\\u064A\";\n t[\"\\uFC7C\"] = \"\\u0641\\u0649\";\n t[\"\\uFC7D\"] = \"\\u0641\\u064A\";\n t[\"\\uFC7E\"] = \"\\u0642\\u0649\";\n t[\"\\uFC7F\"] = \"\\u0642\\u064A\";\n t[\"\\uFC80\"] = \"\\u0643\\u0627\";\n t[\"\\uFC81\"] = \"\\u0643\\u0644\";\n t[\"\\uFC82\"] = \"\\u0643\\u0645\";\n t[\"\\uFC83\"] = \"\\u0643\\u0649\";\n t[\"\\uFC84\"] = \"\\u0643\\u064A\";\n t[\"\\uFC85\"] = \"\\u0644\\u0645\";\n t[\"\\uFC86\"] = \"\\u0644\\u0649\";\n t[\"\\uFC87\"] = \"\\u0644\\u064A\";\n t[\"\\uFC88\"] = \"\\u0645\\u0627\";\n t[\"\\uFC89\"] = \"\\u0645\\u0645\";\n t[\"\\uFC8A\"] = \"\\u0646\\u0631\";\n t[\"\\uFC8B\"] = \"\\u0646\\u0632\";\n t[\"\\uFC8C\"] = \"\\u0646\\u0645\";\n t[\"\\uFC8D\"] = \"\\u0646\\u0646\";\n t[\"\\uFC8E\"] = \"\\u0646\\u0649\";\n t[\"\\uFC8F\"] = \"\\u0646\\u064A\";\n t[\"\\uFC90\"] = \"\\u0649\\u0670\";\n t[\"\\uFC91\"] = \"\\u064A\\u0631\";\n t[\"\\uFC92\"] = \"\\u064A\\u0632\";\n t[\"\\uFC93\"] = \"\\u064A\\u0645\";\n t[\"\\uFC94\"] = \"\\u064A\\u0646\";\n t[\"\\uFC95\"] = \"\\u064A\\u0649\";\n t[\"\\uFC96\"] = \"\\u064A\\u064A\";\n t[\"\\uFC97\"] = \"\\u0626\\u062C\";\n t[\"\\uFC98\"] = \"\\u0626\\u062D\";\n t[\"\\uFC99\"] = \"\\u0626\\u062E\";\n t[\"\\uFC9A\"] = \"\\u0626\\u0645\";\n t[\"\\uFC9B\"] = \"\\u0626\\u0647\";\n t[\"\\uFC9C\"] = \"\\u0628\\u062C\";\n t[\"\\uFC9D\"] = \"\\u0628\\u062D\";\n t[\"\\uFC9E\"] = \"\\u0628\\u062E\";\n t[\"\\uFC9F\"] = \"\\u0628\\u0645\";\n t[\"\\uFCA0\"] = \"\\u0628\\u0647\";\n t[\"\\uFCA1\"] = \"\\u062A\\u062C\";\n t[\"\\uFCA2\"] = \"\\u062A\\u062D\";\n t[\"\\uFCA3\"] = \"\\u062A\\u062E\";\n t[\"\\uFCA4\"] = \"\\u062A\\u0645\";\n t[\"\\uFCA5\"] = \"\\u062A\\u0647\";\n t[\"\\uFCA6\"] = \"\\u062B\\u0645\";\n t[\"\\uFCA7\"] = \"\\u062C\\u062D\";\n t[\"\\uFCA8\"] = \"\\u062C\\u0645\";\n t[\"\\uFCA9\"] = \"\\u062D\\u062C\";\n t[\"\\uFCAA\"] = \"\\u062D\\u0645\";\n t[\"\\uFCAB\"] = \"\\u062E\\u062C\";\n t[\"\\uFCAC\"] = \"\\u062E\\u0645\";\n t[\"\\uFCAD\"] = \"\\u0633\\u062C\";\n t[\"\\uFCAE\"] = \"\\u0633\\u062D\";\n t[\"\\uFCAF\"] = \"\\u0633\\u062E\";\n t[\"\\uFCB0\"] = \"\\u0633\\u0645\";\n t[\"\\uFCB1\"] = \"\\u0635\\u062D\";\n t[\"\\uFCB2\"] = \"\\u0635\\u062E\";\n t[\"\\uFCB3\"] = \"\\u0635\\u0645\";\n t[\"\\uFCB4\"] = \"\\u0636\\u062C\";\n t[\"\\uFCB5\"] = \"\\u0636\\u062D\";\n t[\"\\uFCB6\"] = \"\\u0636\\u062E\";\n t[\"\\uFCB7\"] = \"\\u0636\\u0645\";\n t[\"\\uFCB8\"] = \"\\u0637\\u062D\";\n t[\"\\uFCB9\"] = \"\\u0638\\u0645\";\n t[\"\\uFCBA\"] = \"\\u0639\\u062C\";\n t[\"\\uFCBB\"] = \"\\u0639\\u0645\";\n t[\"\\uFCBC\"] = \"\\u063A\\u062C\";\n t[\"\\uFCBD\"] = \"\\u063A\\u0645\";\n t[\"\\uFCBE\"] = \"\\u0641\\u062C\";\n t[\"\\uFCBF\"] = \"\\u0641\\u062D\";\n t[\"\\uFCC0\"] = \"\\u0641\\u062E\";\n t[\"\\uFCC1\"] = \"\\u0641\\u0645\";\n t[\"\\uFCC2\"] = \"\\u0642\\u062D\";\n t[\"\\uFCC3\"] = \"\\u0642\\u0645\";\n t[\"\\uFCC4\"] = \"\\u0643\\u062C\";\n t[\"\\uFCC5\"] = \"\\u0643\\u062D\";\n t[\"\\uFCC6\"] = \"\\u0643\\u062E\";\n t[\"\\uFCC7\"] = \"\\u0643\\u0644\";\n t[\"\\uFCC8\"] = \"\\u0643\\u0645\";\n t[\"\\uFCC9\"] = \"\\u0644\\u062C\";\n t[\"\\uFCCA\"] = \"\\u0644\\u062D\";\n t[\"\\uFCCB\"] = \"\\u0644\\u062E\";\n t[\"\\uFCCC\"] = \"\\u0644\\u0645\";\n t[\"\\uFCCD\"] = \"\\u0644\\u0647\";\n t[\"\\uFCCE\"] = \"\\u0645\\u062C\";\n t[\"\\uFCCF\"] = \"\\u0645\\u062D\";\n t[\"\\uFCD0\"] = \"\\u0645\\u062E\";\n t[\"\\uFCD1\"] = \"\\u0645\\u0645\";\n t[\"\\uFCD2\"] = \"\\u0646\\u062C\";\n t[\"\\uFCD3\"] = \"\\u0646\\u062D\";\n t[\"\\uFCD4\"] = \"\\u0646\\u062E\";\n t[\"\\uFCD5\"] = \"\\u0646\\u0645\";\n t[\"\\uFCD6\"] = \"\\u0646\\u0647\";\n t[\"\\uFCD7\"] = \"\\u0647\\u062C\";\n t[\"\\uFCD8\"] = \"\\u0647\\u0645\";\n t[\"\\uFCD9\"] = \"\\u0647\\u0670\";\n t[\"\\uFCDA\"] = \"\\u064A\\u062C\";\n t[\"\\uFCDB\"] = \"\\u064A\\u062D\";\n t[\"\\uFCDC\"] = \"\\u064A\\u062E\";\n t[\"\\uFCDD\"] = \"\\u064A\\u0645\";\n t[\"\\uFCDE\"] = \"\\u064A\\u0647\";\n t[\"\\uFCDF\"] = \"\\u0626\\u0645\";\n t[\"\\uFCE0\"] = \"\\u0626\\u0647\";\n t[\"\\uFCE1\"] = \"\\u0628\\u0645\";\n t[\"\\uFCE2\"] = \"\\u0628\\u0647\";\n t[\"\\uFCE3\"] = \"\\u062A\\u0645\";\n t[\"\\uFCE4\"] = \"\\u062A\\u0647\";\n t[\"\\uFCE5\"] = \"\\u062B\\u0645\";\n t[\"\\uFCE6\"] = \"\\u062B\\u0647\";\n t[\"\\uFCE7\"] = \"\\u0633\\u0645\";\n t[\"\\uFCE8\"] = \"\\u0633\\u0647\";\n t[\"\\uFCE9\"] = \"\\u0634\\u0645\";\n t[\"\\uFCEA\"] = \"\\u0634\\u0647\";\n t[\"\\uFCEB\"] = \"\\u0643\\u0644\";\n t[\"\\uFCEC\"] = \"\\u0643\\u0645\";\n t[\"\\uFCED\"] = \"\\u0644\\u0645\";\n t[\"\\uFCEE\"] = \"\\u0646\\u0645\";\n t[\"\\uFCEF\"] = \"\\u0646\\u0647\";\n t[\"\\uFCF0\"] = \"\\u064A\\u0645\";\n t[\"\\uFCF1\"] = \"\\u064A\\u0647\";\n t[\"\\uFCF2\"] = \"\\u0640\\u064E\\u0651\";\n t[\"\\uFCF3\"] = \"\\u0640\\u064F\\u0651\";\n t[\"\\uFCF4\"] = \"\\u0640\\u0650\\u0651\";\n t[\"\\uFCF5\"] = \"\\u0637\\u0649\";\n t[\"\\uFCF6\"] = \"\\u0637\\u064A\";\n t[\"\\uFCF7\"] = \"\\u0639\\u0649\";\n t[\"\\uFCF8\"] = \"\\u0639\\u064A\";\n t[\"\\uFCF9\"] = \"\\u063A\\u0649\";\n t[\"\\uFCFA\"] = \"\\u063A\\u064A\";\n t[\"\\uFCFB\"] = \"\\u0633\\u0649\";\n t[\"\\uFCFC\"] = \"\\u0633\\u064A\";\n t[\"\\uFCFD\"] = \"\\u0634\\u0649\";\n t[\"\\uFCFE\"] = \"\\u0634\\u064A\";\n t[\"\\uFCFF\"] = \"\\u062D\\u0649\";\n t[\"\\uFD00\"] = \"\\u062D\\u064A\";\n t[\"\\uFD01\"] = \"\\u062C\\u0649\";\n t[\"\\uFD02\"] = \"\\u062C\\u064A\";\n t[\"\\uFD03\"] = \"\\u062E\\u0649\";\n t[\"\\uFD04\"] = \"\\u062E\\u064A\";\n t[\"\\uFD05\"] = \"\\u0635\\u0649\";\n t[\"\\uFD06\"] = \"\\u0635\\u064A\";\n t[\"\\uFD07\"] = \"\\u0636\\u0649\";\n t[\"\\uFD08\"] = \"\\u0636\\u064A\";\n t[\"\\uFD09\"] = \"\\u0634\\u062C\";\n t[\"\\uFD0A\"] = \"\\u0634\\u062D\";\n t[\"\\uFD0B\"] = \"\\u0634\\u062E\";\n t[\"\\uFD0C\"] = \"\\u0634\\u0645\";\n t[\"\\uFD0D\"] = \"\\u0634\\u0631\";\n t[\"\\uFD0E\"] = \"\\u0633\\u0631\";\n t[\"\\uFD0F\"] = \"\\u0635\\u0631\";\n t[\"\\uFD10\"] = \"\\u0636\\u0631\";\n t[\"\\uFD11\"] = \"\\u0637\\u0649\";\n t[\"\\uFD12\"] = \"\\u0637\\u064A\";\n t[\"\\uFD13\"] = \"\\u0639\\u0649\";\n t[\"\\uFD14\"] = \"\\u0639\\u064A\";\n t[\"\\uFD15\"] = \"\\u063A\\u0649\";\n t[\"\\uFD16\"] = \"\\u063A\\u064A\";\n t[\"\\uFD17\"] = \"\\u0633\\u0649\";\n t[\"\\uFD18\"] = \"\\u0633\\u064A\";\n t[\"\\uFD19\"] = \"\\u0634\\u0649\";\n t[\"\\uFD1A\"] = \"\\u0634\\u064A\";\n t[\"\\uFD1B\"] = \"\\u062D\\u0649\";\n t[\"\\uFD1C\"] = \"\\u062D\\u064A\";\n t[\"\\uFD1D\"] = \"\\u062C\\u0649\";\n t[\"\\uFD1E\"] = \"\\u062C\\u064A\";\n t[\"\\uFD1F\"] = \"\\u062E\\u0649\";\n t[\"\\uFD20\"] = \"\\u062E\\u064A\";\n t[\"\\uFD21\"] = \"\\u0635\\u0649\";\n t[\"\\uFD22\"] = \"\\u0635\\u064A\";\n t[\"\\uFD23\"] = \"\\u0636\\u0649\";\n t[\"\\uFD24\"] = \"\\u0636\\u064A\";\n t[\"\\uFD25\"] = \"\\u0634\\u062C\";\n t[\"\\uFD26\"] = \"\\u0634\\u062D\";\n t[\"\\uFD27\"] = \"\\u0634\\u062E\";\n t[\"\\uFD28\"] = \"\\u0634\\u0645\";\n t[\"\\uFD29\"] = \"\\u0634\\u0631\";\n t[\"\\uFD2A\"] = \"\\u0633\\u0631\";\n t[\"\\uFD2B\"] = \"\\u0635\\u0631\";\n t[\"\\uFD2C\"] = \"\\u0636\\u0631\";\n t[\"\\uFD2D\"] = \"\\u0634\\u062C\";\n t[\"\\uFD2E\"] = \"\\u0634\\u062D\";\n t[\"\\uFD2F\"] = \"\\u0634\\u062E\";\n t[\"\\uFD30\"] = \"\\u0634\\u0645\";\n t[\"\\uFD31\"] = \"\\u0633\\u0647\";\n t[\"\\uFD32\"] = \"\\u0634\\u0647\";\n t[\"\\uFD33\"] = \"\\u0637\\u0645\";\n t[\"\\uFD34\"] = \"\\u0633\\u062C\";\n t[\"\\uFD35\"] = \"\\u0633\\u062D\";\n t[\"\\uFD36\"] = \"\\u0633\\u062E\";\n t[\"\\uFD37\"] = \"\\u0634\\u062C\";\n t[\"\\uFD38\"] = \"\\u0634\\u062D\";\n t[\"\\uFD39\"] = \"\\u0634\\u062E\";\n t[\"\\uFD3A\"] = \"\\u0637\\u0645\";\n t[\"\\uFD3B\"] = \"\\u0638\\u0645\";\n t[\"\\uFD3C\"] = \"\\u0627\\u064B\";\n t[\"\\uFD3D\"] = \"\\u0627\\u064B\";\n t[\"\\uFD50\"] = \"\\u062A\\u062C\\u0645\";\n t[\"\\uFD51\"] = \"\\u062A\\u062D\\u062C\";\n t[\"\\uFD52\"] = \"\\u062A\\u062D\\u062C\";\n t[\"\\uFD53\"] = \"\\u062A\\u062D\\u0645\";\n t[\"\\uFD54\"] = \"\\u062A\\u062E\\u0645\";\n t[\"\\uFD55\"] = \"\\u062A\\u0645\\u062C\";\n t[\"\\uFD56\"] = \"\\u062A\\u0645\\u062D\";\n t[\"\\uFD57\"] = \"\\u062A\\u0645\\u062E\";\n t[\"\\uFD58\"] = \"\\u062C\\u0645\\u062D\";\n t[\"\\uFD59\"] = \"\\u062C\\u0645\\u062D\";\n t[\"\\uFD5A\"] = \"\\u062D\\u0645\\u064A\";\n t[\"\\uFD5B\"] = \"\\u062D\\u0645\\u0649\";\n t[\"\\uFD5C\"] = \"\\u0633\\u062D\\u062C\";\n t[\"\\uFD5D\"] = \"\\u0633\\u062C\\u062D\";\n t[\"\\uFD5E\"] = \"\\u0633\\u062C\\u0649\";\n t[\"\\uFD5F\"] = \"\\u0633\\u0645\\u062D\";\n t[\"\\uFD60\"] = \"\\u0633\\u0645\\u062D\";\n t[\"\\uFD61\"] = \"\\u0633\\u0645\\u062C\";\n t[\"\\uFD62\"] = \"\\u0633\\u0645\\u0645\";\n t[\"\\uFD63\"] = \"\\u0633\\u0645\\u0645\";\n t[\"\\uFD64\"] = \"\\u0635\\u062D\\u062D\";\n t[\"\\uFD65\"] = \"\\u0635\\u062D\\u062D\";\n t[\"\\uFD66\"] = \"\\u0635\\u0645\\u0645\";\n t[\"\\uFD67\"] = \"\\u0634\\u062D\\u0645\";\n t[\"\\uFD68\"] = \"\\u0634\\u062D\\u0645\";\n t[\"\\uFD69\"] = \"\\u0634\\u062C\\u064A\";\n t[\"\\uFD6A\"] = \"\\u0634\\u0645\\u062E\";\n t[\"\\uFD6B\"] = \"\\u0634\\u0645\\u062E\";\n t[\"\\uFD6C\"] = \"\\u0634\\u0645\\u0645\";\n t[\"\\uFD6D\"] = \"\\u0634\\u0645\\u0645\";\n t[\"\\uFD6E\"] = \"\\u0636\\u062D\\u0649\";\n t[\"\\uFD6F\"] = \"\\u0636\\u062E\\u0645\";\n t[\"\\uFD70\"] = \"\\u0636\\u062E\\u0645\";\n t[\"\\uFD71\"] = \"\\u0637\\u0645\\u062D\";\n t[\"\\uFD72\"] = \"\\u0637\\u0645\\u062D\";\n t[\"\\uFD73\"] = \"\\u0637\\u0645\\u0645\";\n t[\"\\uFD74\"] = \"\\u0637\\u0645\\u064A\";\n t[\"\\uFD75\"] = \"\\u0639\\u062C\\u0645\";\n t[\"\\uFD76\"] = \"\\u0639\\u0645\\u0645\";\n t[\"\\uFD77\"] = \"\\u0639\\u0645\\u0645\";\n t[\"\\uFD78\"] = \"\\u0639\\u0645\\u0649\";\n t[\"\\uFD79\"] = \"\\u063A\\u0645\\u0645\";\n t[\"\\uFD7A\"] = \"\\u063A\\u0645\\u064A\";\n t[\"\\uFD7B\"] = \"\\u063A\\u0645\\u0649\";\n t[\"\\uFD7C\"] = \"\\u0641\\u062E\\u0645\";\n t[\"\\uFD7D\"] = \"\\u0641\\u062E\\u0645\";\n t[\"\\uFD7E\"] = \"\\u0642\\u0645\\u062D\";\n t[\"\\uFD7F\"] = \"\\u0642\\u0645\\u0645\";\n t[\"\\uFD80\"] = \"\\u0644\\u062D\\u0645\";\n t[\"\\uFD81\"] = \"\\u0644\\u062D\\u064A\";\n t[\"\\uFD82\"] = \"\\u0644\\u062D\\u0649\";\n t[\"\\uFD83\"] = \"\\u0644\\u062C\\u062C\";\n t[\"\\uFD84\"] = \"\\u0644\\u062C\\u062C\";\n t[\"\\uFD85\"] = \"\\u0644\\u062E\\u0645\";\n t[\"\\uFD86\"] = \"\\u0644\\u062E\\u0645\";\n t[\"\\uFD87\"] = \"\\u0644\\u0645\\u062D\";\n t[\"\\uFD88\"] = \"\\u0644\\u0645\\u062D\";\n t[\"\\uFD89\"] = \"\\u0645\\u062D\\u062C\";\n t[\"\\uFD8A\"] = \"\\u0645\\u062D\\u0645\";\n t[\"\\uFD8B\"] = \"\\u0645\\u062D\\u064A\";\n t[\"\\uFD8C\"] = \"\\u0645\\u062C\\u062D\";\n t[\"\\uFD8D\"] = \"\\u0645\\u062C\\u0645\";\n t[\"\\uFD8E\"] = \"\\u0645\\u062E\\u062C\";\n t[\"\\uFD8F\"] = \"\\u0645\\u062E\\u0645\";\n t[\"\\uFD92\"] = \"\\u0645\\u062C\\u062E\";\n t[\"\\uFD93\"] = \"\\u0647\\u0645\\u062C\";\n t[\"\\uFD94\"] = \"\\u0647\\u0645\\u0645\";\n t[\"\\uFD95\"] = \"\\u0646\\u062D\\u0645\";\n t[\"\\uFD96\"] = \"\\u0646\\u062D\\u0649\";\n t[\"\\uFD97\"] = \"\\u0646\\u062C\\u0645\";\n t[\"\\uFD98\"] = \"\\u0646\\u062C\\u0645\";\n t[\"\\uFD99\"] = \"\\u0646\\u062C\\u0649\";\n t[\"\\uFD9A\"] = \"\\u0646\\u0645\\u064A\";\n t[\"\\uFD9B\"] = \"\\u0646\\u0645\\u0649\";\n t[\"\\uFD9C\"] = \"\\u064A\\u0645\\u0645\";\n t[\"\\uFD9D\"] = \"\\u064A\\u0645\\u0645\";\n t[\"\\uFD9E\"] = \"\\u0628\\u062E\\u064A\";\n t[\"\\uFD9F\"] = \"\\u062A\\u062C\\u064A\";\n t[\"\\uFDA0\"] = \"\\u062A\\u062C\\u0649\";\n t[\"\\uFDA1\"] = \"\\u062A\\u062E\\u064A\";\n t[\"\\uFDA2\"] = \"\\u062A\\u062E\\u0649\";\n t[\"\\uFDA3\"] = \"\\u062A\\u0645\\u064A\";\n t[\"\\uFDA4\"] = \"\\u062A\\u0645\\u0649\";\n t[\"\\uFDA5\"] = \"\\u062C\\u0645\\u064A\";\n t[\"\\uFDA6\"] = \"\\u062C\\u062D\\u0649\";\n t[\"\\uFDA7\"] = \"\\u062C\\u0645\\u0649\";\n t[\"\\uFDA8\"] = \"\\u0633\\u062E\\u0649\";\n t[\"\\uFDA9\"] = \"\\u0635\\u062D\\u064A\";\n t[\"\\uFDAA\"] = \"\\u0634\\u062D\\u064A\";\n t[\"\\uFDAB\"] = \"\\u0636\\u062D\\u064A\";\n t[\"\\uFDAC\"] = \"\\u0644\\u062C\\u064A\";\n t[\"\\uFDAD\"] = \"\\u0644\\u0645\\u064A\";\n t[\"\\uFDAE\"] = \"\\u064A\\u062D\\u064A\";\n t[\"\\uFDAF\"] = \"\\u064A\\u062C\\u064A\";\n t[\"\\uFDB0\"] = \"\\u064A\\u0645\\u064A\";\n t[\"\\uFDB1\"] = \"\\u0645\\u0645\\u064A\";\n t[\"\\uFDB2\"] = \"\\u0642\\u0645\\u064A\";\n t[\"\\uFDB3\"] = \"\\u0646\\u062D\\u064A\";\n t[\"\\uFDB4\"] = \"\\u0642\\u0645\\u062D\";\n t[\"\\uFDB5\"] = \"\\u0644\\u062D\\u0645\";\n t[\"\\uFDB6\"] = \"\\u0639\\u0645\\u064A\";\n t[\"\\uFDB7\"] = \"\\u0643\\u0645\\u064A\";\n t[\"\\uFDB8\"] = \"\\u0646\\u062C\\u062D\";\n t[\"\\uFDB9\"] = \"\\u0645\\u062E\\u064A\";\n t[\"\\uFDBA\"] = \"\\u0644\\u062C\\u0645\";\n t[\"\\uFDBB\"] = \"\\u0643\\u0645\\u0645\";\n t[\"\\uFDBC\"] = \"\\u0644\\u062C\\u0645\";\n t[\"\\uFDBD\"] = \"\\u0646\\u062C\\u062D\";\n t[\"\\uFDBE\"] = \"\\u062C\\u062D\\u064A\";\n t[\"\\uFDBF\"] = \"\\u062D\\u062C\\u064A\";\n t[\"\\uFDC0\"] = \"\\u0645\\u062C\\u064A\";\n t[\"\\uFDC1\"] = \"\\u0641\\u0645\\u064A\";\n t[\"\\uFDC2\"] = \"\\u0628\\u062D\\u064A\";\n t[\"\\uFDC3\"] = \"\\u0643\\u0645\\u0645\";\n t[\"\\uFDC4\"] = \"\\u0639\\u062C\\u0645\";\n t[\"\\uFDC5\"] = \"\\u0635\\u0645\\u0645\";\n t[\"\\uFDC6\"] = \"\\u0633\\u062E\\u064A\";\n t[\"\\uFDC7\"] = \"\\u0646\\u062C\\u064A\";\n t[\"\\uFE49\"] = \"\\u203E\";\n t[\"\\uFE4A\"] = \"\\u203E\";\n t[\"\\uFE4B\"] = \"\\u203E\";\n t[\"\\uFE4C\"] = \"\\u203E\";\n t[\"\\uFE4D\"] = \"\\u005F\";\n t[\"\\uFE4E\"] = \"\\u005F\";\n t[\"\\uFE4F\"] = \"\\u005F\";\n t[\"\\uFE80\"] = \"\\u0621\";\n t[\"\\uFE81\"] = \"\\u0622\";\n t[\"\\uFE82\"] = \"\\u0622\";\n t[\"\\uFE83\"] = \"\\u0623\";\n t[\"\\uFE84\"] = \"\\u0623\";\n t[\"\\uFE85\"] = \"\\u0624\";\n t[\"\\uFE86\"] = \"\\u0624\";\n t[\"\\uFE87\"] = \"\\u0625\";\n t[\"\\uFE88\"] = \"\\u0625\";\n t[\"\\uFE89\"] = \"\\u0626\";\n t[\"\\uFE8A\"] = \"\\u0626\";\n t[\"\\uFE8B\"] = \"\\u0626\";\n t[\"\\uFE8C\"] = \"\\u0626\";\n t[\"\\uFE8D\"] = \"\\u0627\";\n t[\"\\uFE8E\"] = \"\\u0627\";\n t[\"\\uFE8F\"] = \"\\u0628\";\n t[\"\\uFE90\"] = \"\\u0628\";\n t[\"\\uFE91\"] = \"\\u0628\";\n t[\"\\uFE92\"] = \"\\u0628\";\n t[\"\\uFE93\"] = \"\\u0629\";\n t[\"\\uFE94\"] = \"\\u0629\";\n t[\"\\uFE95\"] = \"\\u062A\";\n t[\"\\uFE96\"] = \"\\u062A\";\n t[\"\\uFE97\"] = \"\\u062A\";\n t[\"\\uFE98\"] = \"\\u062A\";\n t[\"\\uFE99\"] = \"\\u062B\";\n t[\"\\uFE9A\"] = \"\\u062B\";\n t[\"\\uFE9B\"] = \"\\u062B\";\n t[\"\\uFE9C\"] = \"\\u062B\";\n t[\"\\uFE9D\"] = \"\\u062C\";\n t[\"\\uFE9E\"] = \"\\u062C\";\n t[\"\\uFE9F\"] = \"\\u062C\";\n t[\"\\uFEA0\"] = \"\\u062C\";\n t[\"\\uFEA1\"] = \"\\u062D\";\n t[\"\\uFEA2\"] = \"\\u062D\";\n t[\"\\uFEA3\"] = \"\\u062D\";\n t[\"\\uFEA4\"] = \"\\u062D\";\n t[\"\\uFEA5\"] = \"\\u062E\";\n t[\"\\uFEA6\"] = \"\\u062E\";\n t[\"\\uFEA7\"] = \"\\u062E\";\n t[\"\\uFEA8\"] = \"\\u062E\";\n t[\"\\uFEA9\"] = \"\\u062F\";\n t[\"\\uFEAA\"] = \"\\u062F\";\n t[\"\\uFEAB\"] = \"\\u0630\";\n t[\"\\uFEAC\"] = \"\\u0630\";\n t[\"\\uFEAD\"] = \"\\u0631\";\n t[\"\\uFEAE\"] = \"\\u0631\";\n t[\"\\uFEAF\"] = \"\\u0632\";\n t[\"\\uFEB0\"] = \"\\u0632\";\n t[\"\\uFEB1\"] = \"\\u0633\";\n t[\"\\uFEB2\"] = \"\\u0633\";\n t[\"\\uFEB3\"] = \"\\u0633\";\n t[\"\\uFEB4\"] = \"\\u0633\";\n t[\"\\uFEB5\"] = \"\\u0634\";\n t[\"\\uFEB6\"] = \"\\u0634\";\n t[\"\\uFEB7\"] = \"\\u0634\";\n t[\"\\uFEB8\"] = \"\\u0634\";\n t[\"\\uFEB9\"] = \"\\u0635\";\n t[\"\\uFEBA\"] = \"\\u0635\";\n t[\"\\uFEBB\"] = \"\\u0635\";\n t[\"\\uFEBC\"] = \"\\u0635\";\n t[\"\\uFEBD\"] = \"\\u0636\";\n t[\"\\uFEBE\"] = \"\\u0636\";\n t[\"\\uFEBF\"] = \"\\u0636\";\n t[\"\\uFEC0\"] = \"\\u0636\";\n t[\"\\uFEC1\"] = \"\\u0637\";\n t[\"\\uFEC2\"] = \"\\u0637\";\n t[\"\\uFEC3\"] = \"\\u0637\";\n t[\"\\uFEC4\"] = \"\\u0637\";\n t[\"\\uFEC5\"] = \"\\u0638\";\n t[\"\\uFEC6\"] = \"\\u0638\";\n t[\"\\uFEC7\"] = \"\\u0638\";\n t[\"\\uFEC8\"] = \"\\u0638\";\n t[\"\\uFEC9\"] = \"\\u0639\";\n t[\"\\uFECA\"] = \"\\u0639\";\n t[\"\\uFECB\"] = \"\\u0639\";\n t[\"\\uFECC\"] = \"\\u0639\";\n t[\"\\uFECD\"] = \"\\u063A\";\n t[\"\\uFECE\"] = \"\\u063A\";\n t[\"\\uFECF\"] = \"\\u063A\";\n t[\"\\uFED0\"] = \"\\u063A\";\n t[\"\\uFED1\"] = \"\\u0641\";\n t[\"\\uFED2\"] = \"\\u0641\";\n t[\"\\uFED3\"] = \"\\u0641\";\n t[\"\\uFED4\"] = \"\\u0641\";\n t[\"\\uFED5\"] = \"\\u0642\";\n t[\"\\uFED6\"] = \"\\u0642\";\n t[\"\\uFED7\"] = \"\\u0642\";\n t[\"\\uFED8\"] = \"\\u0642\";\n t[\"\\uFED9\"] = \"\\u0643\";\n t[\"\\uFEDA\"] = \"\\u0643\";\n t[\"\\uFEDB\"] = \"\\u0643\";\n t[\"\\uFEDC\"] = \"\\u0643\";\n t[\"\\uFEDD\"] = \"\\u0644\";\n t[\"\\uFEDE\"] = \"\\u0644\";\n t[\"\\uFEDF\"] = \"\\u0644\";\n t[\"\\uFEE0\"] = \"\\u0644\";\n t[\"\\uFEE1\"] = \"\\u0645\";\n t[\"\\uFEE2\"] = \"\\u0645\";\n t[\"\\uFEE3\"] = \"\\u0645\";\n t[\"\\uFEE4\"] = \"\\u0645\";\n t[\"\\uFEE5\"] = \"\\u0646\";\n t[\"\\uFEE6\"] = \"\\u0646\";\n t[\"\\uFEE7\"] = \"\\u0646\";\n t[\"\\uFEE8\"] = \"\\u0646\";\n t[\"\\uFEE9\"] = \"\\u0647\";\n t[\"\\uFEEA\"] = \"\\u0647\";\n t[\"\\uFEEB\"] = \"\\u0647\";\n t[\"\\uFEEC\"] = \"\\u0647\";\n t[\"\\uFEED\"] = \"\\u0648\";\n t[\"\\uFEEE\"] = \"\\u0648\";\n t[\"\\uFEEF\"] = \"\\u0649\";\n t[\"\\uFEF0\"] = \"\\u0649\";\n t[\"\\uFEF1\"] = \"\\u064A\";\n t[\"\\uFEF2\"] = \"\\u064A\";\n t[\"\\uFEF3\"] = \"\\u064A\";\n t[\"\\uFEF4\"] = \"\\u064A\";\n t[\"\\uFEF5\"] = \"\\u0644\\u0622\";\n t[\"\\uFEF6\"] = \"\\u0644\\u0622\";\n t[\"\\uFEF7\"] = \"\\u0644\\u0623\";\n t[\"\\uFEF8\"] = \"\\u0644\\u0623\";\n t[\"\\uFEF9\"] = \"\\u0644\\u0625\";\n t[\"\\uFEFA\"] = \"\\u0644\\u0625\";\n t[\"\\uFEFB\"] = \"\\u0644\\u0627\";\n t[\"\\uFEFC\"] = \"\\u0644\\u0627\";\n});\nfunction reverseIfRtl(chars) {\n var charsLength = chars.length;\n if (charsLength <= 1 || !isRTLRangeFor(chars.charCodeAt(0))) {\n  return chars;\n }\n var s = \"\";\n for (var ii = charsLength - 1; ii >= 0; ii--) {\n  s += chars[ii];\n }\n return s;\n}\nexports.mapSpecialUnicodeValues = mapSpecialUnicodeValues;\nexports.reverseIfRtl = reverseIfRtl;\nexports.getUnicodeRangeFor = getUnicodeRangeFor;\nexports.getNormalizedUnicodes = getNormalizedUnicodes;\nexports.getUnicodeForGlyph = getUnicodeForGlyph;\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FontRendererFactory = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _cff_parser = __w_pdfjs_require__(28);\n\nvar _glyphlist = __w_pdfjs_require__(31);\n\nvar _encodings = __w_pdfjs_require__(30);\n\nvar _stream = __w_pdfjs_require__(11);\n\nvar FontRendererFactory = function FontRendererFactoryClosure() {\n  function getLong(data, offset) {\n    return data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3];\n  }\n\n  function getUshort(data, offset) {\n    return data[offset] << 8 | data[offset + 1];\n  }\n\n  function getSubroutineBias(subrs) {\n    const numSubrs = subrs.length;\n    let bias = 32768;\n\n    if (numSubrs < 1240) {\n      bias = 107;\n    } else if (numSubrs < 33900) {\n      bias = 1131;\n    }\n\n    return bias;\n  }\n\n  function parseCmap(data, start, end) {\n    var offset = getUshort(data, start + 2) === 1 ? getLong(data, start + 8) : getLong(data, start + 16);\n    var format = getUshort(data, start + offset);\n    var ranges, p, i;\n\n    if (format === 4) {\n      getUshort(data, start + offset + 2);\n      var segCount = getUshort(data, start + offset + 6) >> 1;\n      p = start + offset + 14;\n      ranges = [];\n\n      for (i = 0; i < segCount; i++, p += 2) {\n        ranges[i] = {\n          end: getUshort(data, p)\n        };\n      }\n\n      p += 2;\n\n      for (i = 0; i < segCount; i++, p += 2) {\n        ranges[i].start = getUshort(data, p);\n      }\n\n      for (i = 0; i < segCount; i++, p += 2) {\n        ranges[i].idDelta = getUshort(data, p);\n      }\n\n      for (i = 0; i < segCount; i++, p += 2) {\n        var idOffset = getUshort(data, p);\n\n        if (idOffset === 0) {\n          continue;\n        }\n\n        ranges[i].ids = [];\n\n        for (var j = 0, jj = ranges[i].end - ranges[i].start + 1; j < jj; j++) {\n          ranges[i].ids[j] = getUshort(data, p + idOffset);\n          idOffset += 2;\n        }\n      }\n\n      return ranges;\n    } else if (format === 12) {\n      getLong(data, start + offset + 4);\n      var groups = getLong(data, start + offset + 12);\n      p = start + offset + 16;\n      ranges = [];\n\n      for (i = 0; i < groups; i++) {\n        ranges.push({\n          start: getLong(data, p),\n          end: getLong(data, p + 4),\n          idDelta: getLong(data, p + 8) - getLong(data, p)\n        });\n        p += 12;\n      }\n\n      return ranges;\n    }\n\n    throw new _util.FormatError(`unsupported cmap: ${format}`);\n  }\n\n  function parseCff(data, start, end, seacAnalysisEnabled) {\n    var properties = {};\n    var parser = new _cff_parser.CFFParser(new _stream.Stream(data, start, end - start), properties, seacAnalysisEnabled);\n    var cff = parser.parse();\n    return {\n      glyphs: cff.charStrings.objects,\n      subrs: cff.topDict.privateDict && cff.topDict.privateDict.subrsIndex && cff.topDict.privateDict.subrsIndex.objects,\n      gsubrs: cff.globalSubrIndex && cff.globalSubrIndex.objects,\n      isCFFCIDFont: cff.isCIDFont,\n      fdSelect: cff.fdSelect,\n      fdArray: cff.fdArray\n    };\n  }\n\n  function parseGlyfTable(glyf, loca, isGlyphLocationsLong) {\n    var itemSize, itemDecode;\n\n    if (isGlyphLocationsLong) {\n      itemSize = 4;\n\n      itemDecode = function fontItemDecodeLong(data, offset) {\n        return data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3];\n      };\n    } else {\n      itemSize = 2;\n\n      itemDecode = function fontItemDecode(data, offset) {\n        return data[offset] << 9 | data[offset + 1] << 1;\n      };\n    }\n\n    var glyphs = [];\n    var startOffset = itemDecode(loca, 0);\n\n    for (var j = itemSize; j < loca.length; j += itemSize) {\n      var endOffset = itemDecode(loca, j);\n      glyphs.push(glyf.subarray(startOffset, endOffset));\n      startOffset = endOffset;\n    }\n\n    return glyphs;\n  }\n\n  function lookupCmap(ranges, unicode) {\n    var code = unicode.codePointAt(0),\n        gid = 0;\n    var l = 0,\n        r = ranges.length - 1;\n\n    while (l < r) {\n      var c = l + r + 1 >> 1;\n\n      if (code < ranges[c].start) {\n        r = c - 1;\n      } else {\n        l = c;\n      }\n    }\n\n    if (ranges[l].start <= code && code <= ranges[l].end) {\n      gid = ranges[l].idDelta + (ranges[l].ids ? ranges[l].ids[code - ranges[l].start] : code) & 0xffff;\n    }\n\n    return {\n      charCode: code,\n      glyphId: gid\n    };\n  }\n\n  function compileGlyf(code, cmds, font) {\n    function moveTo(x, y) {\n      cmds.push({\n        cmd: \"moveTo\",\n        args: [x, y]\n      });\n    }\n\n    function lineTo(x, y) {\n      cmds.push({\n        cmd: \"lineTo\",\n        args: [x, y]\n      });\n    }\n\n    function quadraticCurveTo(xa, ya, x, y) {\n      cmds.push({\n        cmd: \"quadraticCurveTo\",\n        args: [xa, ya, x, y]\n      });\n    }\n\n    var i = 0;\n    var numberOfContours = (code[i] << 24 | code[i + 1] << 16) >> 16;\n    var flags;\n    var x = 0,\n        y = 0;\n    i += 10;\n\n    if (numberOfContours < 0) {\n      do {\n        flags = code[i] << 8 | code[i + 1];\n        var glyphIndex = code[i + 2] << 8 | code[i + 3];\n        i += 4;\n        var arg1, arg2;\n\n        if (flags & 0x01) {\n          arg1 = (code[i] << 24 | code[i + 1] << 16) >> 16;\n          arg2 = (code[i + 2] << 24 | code[i + 3] << 16) >> 16;\n          i += 4;\n        } else {\n          arg1 = code[i++];\n          arg2 = code[i++];\n        }\n\n        if (flags & 0x02) {\n          x = arg1;\n          y = arg2;\n        } else {\n          x = 0;\n          y = 0;\n        }\n\n        var scaleX = 1,\n            scaleY = 1,\n            scale01 = 0,\n            scale10 = 0;\n\n        if (flags & 0x08) {\n          scaleX = scaleY = (code[i] << 24 | code[i + 1] << 16) / 1073741824;\n          i += 2;\n        } else if (flags & 0x40) {\n          scaleX = (code[i] << 24 | code[i + 1] << 16) / 1073741824;\n          scaleY = (code[i + 2] << 24 | code[i + 3] << 16) / 1073741824;\n          i += 4;\n        } else if (flags & 0x80) {\n          scaleX = (code[i] << 24 | code[i + 1] << 16) / 1073741824;\n          scale01 = (code[i + 2] << 24 | code[i + 3] << 16) / 1073741824;\n          scale10 = (code[i + 4] << 24 | code[i + 5] << 16) / 1073741824;\n          scaleY = (code[i + 6] << 24 | code[i + 7] << 16) / 1073741824;\n          i += 8;\n        }\n\n        var subglyph = font.glyphs[glyphIndex];\n\n        if (subglyph) {\n          cmds.push({\n            cmd: \"save\"\n          });\n          cmds.push({\n            cmd: \"transform\",\n            args: [scaleX, scale01, scale10, scaleY, x, y]\n          });\n          compileGlyf(subglyph, cmds, font);\n          cmds.push({\n            cmd: \"restore\"\n          });\n        }\n      } while (flags & 0x20);\n    } else {\n      var endPtsOfContours = [];\n      var j, jj;\n\n      for (j = 0; j < numberOfContours; j++) {\n        endPtsOfContours.push(code[i] << 8 | code[i + 1]);\n        i += 2;\n      }\n\n      var instructionLength = code[i] << 8 | code[i + 1];\n      i += 2 + instructionLength;\n      var numberOfPoints = endPtsOfContours[endPtsOfContours.length - 1] + 1;\n      var points = [];\n\n      while (points.length < numberOfPoints) {\n        flags = code[i++];\n        var repeat = 1;\n\n        if (flags & 0x08) {\n          repeat += code[i++];\n        }\n\n        while (repeat-- > 0) {\n          points.push({\n            flags\n          });\n        }\n      }\n\n      for (j = 0; j < numberOfPoints; j++) {\n        switch (points[j].flags & 0x12) {\n          case 0x00:\n            x += (code[i] << 24 | code[i + 1] << 16) >> 16;\n            i += 2;\n            break;\n\n          case 0x02:\n            x -= code[i++];\n            break;\n\n          case 0x12:\n            x += code[i++];\n            break;\n        }\n\n        points[j].x = x;\n      }\n\n      for (j = 0; j < numberOfPoints; j++) {\n        switch (points[j].flags & 0x24) {\n          case 0x00:\n            y += (code[i] << 24 | code[i + 1] << 16) >> 16;\n            i += 2;\n            break;\n\n          case 0x04:\n            y -= code[i++];\n            break;\n\n          case 0x24:\n            y += code[i++];\n            break;\n        }\n\n        points[j].y = y;\n      }\n\n      var startPoint = 0;\n\n      for (i = 0; i < numberOfContours; i++) {\n        var endPoint = endPtsOfContours[i];\n        var contour = points.slice(startPoint, endPoint + 1);\n\n        if (contour[0].flags & 1) {\n          contour.push(contour[0]);\n        } else if (contour[contour.length - 1].flags & 1) {\n          contour.unshift(contour[contour.length - 1]);\n        } else {\n          var p = {\n            flags: 1,\n            x: (contour[0].x + contour[contour.length - 1].x) / 2,\n            y: (contour[0].y + contour[contour.length - 1].y) / 2\n          };\n          contour.unshift(p);\n          contour.push(p);\n        }\n\n        moveTo(contour[0].x, contour[0].y);\n\n        for (j = 1, jj = contour.length; j < jj; j++) {\n          if (contour[j].flags & 1) {\n            lineTo(contour[j].x, contour[j].y);\n          } else if (contour[j + 1].flags & 1) {\n            quadraticCurveTo(contour[j].x, contour[j].y, contour[j + 1].x, contour[j + 1].y);\n            j++;\n          } else {\n            quadraticCurveTo(contour[j].x, contour[j].y, (contour[j].x + contour[j + 1].x) / 2, (contour[j].y + contour[j + 1].y) / 2);\n          }\n        }\n\n        startPoint = endPoint + 1;\n      }\n    }\n  }\n\n  function compileCharString(code, cmds, font, glyphId) {\n    var stack = [];\n    var x = 0,\n        y = 0;\n    var stems = 0;\n\n    function moveTo(x, y) {\n      cmds.push({\n        cmd: \"moveTo\",\n        args: [x, y]\n      });\n    }\n\n    function lineTo(x, y) {\n      cmds.push({\n        cmd: \"lineTo\",\n        args: [x, y]\n      });\n    }\n\n    function bezierCurveTo(x1, y1, x2, y2, x, y) {\n      cmds.push({\n        cmd: \"bezierCurveTo\",\n        args: [x1, y1, x2, y2, x, y]\n      });\n    }\n\n    function parse(code) {\n      var i = 0;\n\n      while (i < code.length) {\n        var stackClean = false;\n        var v = code[i++];\n        var xa, xb, ya, yb, y1, y2, y3, n, subrCode;\n\n        switch (v) {\n          case 1:\n            stems += stack.length >> 1;\n            stackClean = true;\n            break;\n\n          case 3:\n            stems += stack.length >> 1;\n            stackClean = true;\n            break;\n\n          case 4:\n            y += stack.pop();\n            moveTo(x, y);\n            stackClean = true;\n            break;\n\n          case 5:\n            while (stack.length > 0) {\n              x += stack.shift();\n              y += stack.shift();\n              lineTo(x, y);\n            }\n\n            break;\n\n          case 6:\n            while (stack.length > 0) {\n              x += stack.shift();\n              lineTo(x, y);\n\n              if (stack.length === 0) {\n                break;\n              }\n\n              y += stack.shift();\n              lineTo(x, y);\n            }\n\n            break;\n\n          case 7:\n            while (stack.length > 0) {\n              y += stack.shift();\n              lineTo(x, y);\n\n              if (stack.length === 0) {\n                break;\n              }\n\n              x += stack.shift();\n              lineTo(x, y);\n            }\n\n            break;\n\n          case 8:\n            while (stack.length > 0) {\n              xa = x + stack.shift();\n              ya = y + stack.shift();\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb + stack.shift();\n              y = yb + stack.shift();\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n\n            break;\n\n          case 10:\n            n = stack.pop();\n            subrCode = null;\n\n            if (font.isCFFCIDFont) {\n              const fdIndex = font.fdSelect.getFDIndex(glyphId);\n\n              if (fdIndex >= 0 && fdIndex < font.fdArray.length) {\n                const fontDict = font.fdArray[fdIndex];\n                let subrs;\n\n                if (fontDict.privateDict && fontDict.privateDict.subrsIndex) {\n                  subrs = fontDict.privateDict.subrsIndex.objects;\n                }\n\n                if (subrs) {\n                  n += getSubroutineBias(subrs);\n                  subrCode = subrs[n];\n                }\n              } else {\n                (0, _util.warn)(\"Invalid fd index for glyph index.\");\n              }\n            } else {\n              subrCode = font.subrs[n + font.subrsBias];\n            }\n\n            if (subrCode) {\n              parse(subrCode);\n            }\n\n            break;\n\n          case 11:\n            return;\n\n          case 12:\n            v = code[i++];\n\n            switch (v) {\n              case 34:\n                xa = x + stack.shift();\n                xb = xa + stack.shift();\n                y1 = y + stack.shift();\n                x = xb + stack.shift();\n                bezierCurveTo(xa, y, xb, y1, x, y1);\n                xa = x + stack.shift();\n                xb = xa + stack.shift();\n                x = xb + stack.shift();\n                bezierCurveTo(xa, y1, xb, y, x, y);\n                break;\n\n              case 35:\n                xa = x + stack.shift();\n                ya = y + stack.shift();\n                xb = xa + stack.shift();\n                yb = ya + stack.shift();\n                x = xb + stack.shift();\n                y = yb + stack.shift();\n                bezierCurveTo(xa, ya, xb, yb, x, y);\n                xa = x + stack.shift();\n                ya = y + stack.shift();\n                xb = xa + stack.shift();\n                yb = ya + stack.shift();\n                x = xb + stack.shift();\n                y = yb + stack.shift();\n                bezierCurveTo(xa, ya, xb, yb, x, y);\n                stack.pop();\n                break;\n\n              case 36:\n                xa = x + stack.shift();\n                y1 = y + stack.shift();\n                xb = xa + stack.shift();\n                y2 = y1 + stack.shift();\n                x = xb + stack.shift();\n                bezierCurveTo(xa, y1, xb, y2, x, y2);\n                xa = x + stack.shift();\n                xb = xa + stack.shift();\n                y3 = y2 + stack.shift();\n                x = xb + stack.shift();\n                bezierCurveTo(xa, y2, xb, y3, x, y);\n                break;\n\n              case 37:\n                var x0 = x,\n                    y0 = y;\n                xa = x + stack.shift();\n                ya = y + stack.shift();\n                xb = xa + stack.shift();\n                yb = ya + stack.shift();\n                x = xb + stack.shift();\n                y = yb + stack.shift();\n                bezierCurveTo(xa, ya, xb, yb, x, y);\n                xa = x + stack.shift();\n                ya = y + stack.shift();\n                xb = xa + stack.shift();\n                yb = ya + stack.shift();\n                x = xb;\n                y = yb;\n\n                if (Math.abs(x - x0) > Math.abs(y - y0)) {\n                  x += stack.shift();\n                } else {\n                  y += stack.shift();\n                }\n\n                bezierCurveTo(xa, ya, xb, yb, x, y);\n                break;\n\n              default:\n                throw new _util.FormatError(`unknown operator: 12 ${v}`);\n            }\n\n            break;\n\n          case 14:\n            if (stack.length >= 4) {\n              var achar = stack.pop();\n              var bchar = stack.pop();\n              y = stack.pop();\n              x = stack.pop();\n              cmds.push({\n                cmd: \"save\"\n              });\n              cmds.push({\n                cmd: \"translate\",\n                args: [x, y]\n              });\n              var cmap = lookupCmap(font.cmap, String.fromCharCode(font.glyphNameMap[_encodings.StandardEncoding[achar]]));\n              compileCharString(font.glyphs[cmap.glyphId], cmds, font, cmap.glyphId);\n              cmds.push({\n                cmd: \"restore\"\n              });\n              cmap = lookupCmap(font.cmap, String.fromCharCode(font.glyphNameMap[_encodings.StandardEncoding[bchar]]));\n              compileCharString(font.glyphs[cmap.glyphId], cmds, font, cmap.glyphId);\n            }\n\n            return;\n\n          case 18:\n            stems += stack.length >> 1;\n            stackClean = true;\n            break;\n\n          case 19:\n            stems += stack.length >> 1;\n            i += stems + 7 >> 3;\n            stackClean = true;\n            break;\n\n          case 20:\n            stems += stack.length >> 1;\n            i += stems + 7 >> 3;\n            stackClean = true;\n            break;\n\n          case 21:\n            y += stack.pop();\n            x += stack.pop();\n            moveTo(x, y);\n            stackClean = true;\n            break;\n\n          case 22:\n            x += stack.pop();\n            moveTo(x, y);\n            stackClean = true;\n            break;\n\n          case 23:\n            stems += stack.length >> 1;\n            stackClean = true;\n            break;\n\n          case 24:\n            while (stack.length > 2) {\n              xa = x + stack.shift();\n              ya = y + stack.shift();\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb + stack.shift();\n              y = yb + stack.shift();\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n\n            x += stack.shift();\n            y += stack.shift();\n            lineTo(x, y);\n            break;\n\n          case 25:\n            while (stack.length > 6) {\n              x += stack.shift();\n              y += stack.shift();\n              lineTo(x, y);\n            }\n\n            xa = x + stack.shift();\n            ya = y + stack.shift();\n            xb = xa + stack.shift();\n            yb = ya + stack.shift();\n            x = xb + stack.shift();\n            y = yb + stack.shift();\n            bezierCurveTo(xa, ya, xb, yb, x, y);\n            break;\n\n          case 26:\n            if (stack.length % 2) {\n              x += stack.shift();\n            }\n\n            while (stack.length > 0) {\n              xa = x;\n              ya = y + stack.shift();\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb;\n              y = yb + stack.shift();\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n\n            break;\n\n          case 27:\n            if (stack.length % 2) {\n              y += stack.shift();\n            }\n\n            while (stack.length > 0) {\n              xa = x + stack.shift();\n              ya = y;\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb + stack.shift();\n              y = yb;\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n\n            break;\n\n          case 28:\n            stack.push((code[i] << 24 | code[i + 1] << 16) >> 16);\n            i += 2;\n            break;\n\n          case 29:\n            n = stack.pop() + font.gsubrsBias;\n            subrCode = font.gsubrs[n];\n\n            if (subrCode) {\n              parse(subrCode);\n            }\n\n            break;\n\n          case 30:\n            while (stack.length > 0) {\n              xa = x;\n              ya = y + stack.shift();\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb + stack.shift();\n              y = yb + (stack.length === 1 ? stack.shift() : 0);\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n\n              if (stack.length === 0) {\n                break;\n              }\n\n              xa = x + stack.shift();\n              ya = y;\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              y = yb + stack.shift();\n              x = xb + (stack.length === 1 ? stack.shift() : 0);\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n\n            break;\n\n          case 31:\n            while (stack.length > 0) {\n              xa = x + stack.shift();\n              ya = y;\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              y = yb + stack.shift();\n              x = xb + (stack.length === 1 ? stack.shift() : 0);\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n\n              if (stack.length === 0) {\n                break;\n              }\n\n              xa = x;\n              ya = y + stack.shift();\n              xb = xa + stack.shift();\n              yb = ya + stack.shift();\n              x = xb + stack.shift();\n              y = yb + (stack.length === 1 ? stack.shift() : 0);\n              bezierCurveTo(xa, ya, xb, yb, x, y);\n            }\n\n            break;\n\n          default:\n            if (v < 32) {\n              throw new _util.FormatError(`unknown operator: ${v}`);\n            }\n\n            if (v < 247) {\n              stack.push(v - 139);\n            } else if (v < 251) {\n              stack.push((v - 247) * 256 + code[i++] + 108);\n            } else if (v < 255) {\n              stack.push(-(v - 251) * 256 - code[i++] - 108);\n            } else {\n              stack.push((code[i] << 24 | code[i + 1] << 16 | code[i + 2] << 8 | code[i + 3]) / 65536);\n              i += 4;\n            }\n\n            break;\n        }\n\n        if (stackClean) {\n          stack.length = 0;\n        }\n      }\n    }\n\n    parse(code);\n  }\n\n  const NOOP = [];\n\n  class CompiledFont {\n    constructor(fontMatrix) {\n      if (this.constructor === CompiledFont) {\n        (0, _util.unreachable)(\"Cannot initialize CompiledFont.\");\n      }\n\n      this.fontMatrix = fontMatrix;\n      this.compiledGlyphs = Object.create(null);\n      this.compiledCharCodeToGlyphId = Object.create(null);\n    }\n\n    getPathJs(unicode) {\n      const cmap = lookupCmap(this.cmap, unicode);\n      let fn = this.compiledGlyphs[cmap.glyphId];\n\n      if (!fn) {\n        fn = this.compileGlyph(this.glyphs[cmap.glyphId], cmap.glyphId);\n        this.compiledGlyphs[cmap.glyphId] = fn;\n      }\n\n      if (this.compiledCharCodeToGlyphId[cmap.charCode] === undefined) {\n        this.compiledCharCodeToGlyphId[cmap.charCode] = cmap.glyphId;\n      }\n\n      return fn;\n    }\n\n    compileGlyph(code, glyphId) {\n      if (!code || code.length === 0 || code[0] === 14) {\n        return NOOP;\n      }\n\n      let fontMatrix = this.fontMatrix;\n\n      if (this.isCFFCIDFont) {\n        const fdIndex = this.fdSelect.getFDIndex(glyphId);\n\n        if (fdIndex >= 0 && fdIndex < this.fdArray.length) {\n          const fontDict = this.fdArray[fdIndex];\n          fontMatrix = fontDict.getByName(\"FontMatrix\") || _util.FONT_IDENTITY_MATRIX;\n        } else {\n          (0, _util.warn)(\"Invalid fd index for glyph index.\");\n        }\n      }\n\n      const cmds = [];\n      cmds.push({\n        cmd: \"save\"\n      });\n      cmds.push({\n        cmd: \"transform\",\n        args: fontMatrix.slice()\n      });\n      cmds.push({\n        cmd: \"scale\",\n        args: [\"size\", \"-size\"]\n      });\n      this.compileGlyphImpl(code, cmds, glyphId);\n      cmds.push({\n        cmd: \"restore\"\n      });\n      return cmds;\n    }\n\n    compileGlyphImpl() {\n      (0, _util.unreachable)(\"Children classes should implement this.\");\n    }\n\n    hasBuiltPath(unicode) {\n      const cmap = lookupCmap(this.cmap, unicode);\n      return this.compiledGlyphs[cmap.glyphId] !== undefined && this.compiledCharCodeToGlyphId[cmap.charCode] !== undefined;\n    }\n\n  }\n\n  class TrueTypeCompiled extends CompiledFont {\n    constructor(glyphs, cmap, fontMatrix) {\n      super(fontMatrix || [0.000488, 0, 0, 0.000488, 0, 0]);\n      this.glyphs = glyphs;\n      this.cmap = cmap;\n    }\n\n    compileGlyphImpl(code, cmds) {\n      compileGlyf(code, cmds, this);\n    }\n\n  }\n\n  class Type2Compiled extends CompiledFont {\n    constructor(cffInfo, cmap, fontMatrix, glyphNameMap) {\n      super(fontMatrix || [0.001, 0, 0, 0.001, 0, 0]);\n      this.glyphs = cffInfo.glyphs;\n      this.gsubrs = cffInfo.gsubrs || [];\n      this.subrs = cffInfo.subrs || [];\n      this.cmap = cmap;\n      this.glyphNameMap = glyphNameMap || (0, _glyphlist.getGlyphsUnicode)();\n      this.gsubrsBias = getSubroutineBias(this.gsubrs);\n      this.subrsBias = getSubroutineBias(this.subrs);\n      this.isCFFCIDFont = cffInfo.isCFFCIDFont;\n      this.fdSelect = cffInfo.fdSelect;\n      this.fdArray = cffInfo.fdArray;\n    }\n\n    compileGlyphImpl(code, cmds, glyphId) {\n      compileCharString(code, cmds, this, glyphId);\n    }\n\n  }\n\n  return {\n    create: function FontRendererFactory_create(font, seacAnalysisEnabled) {\n      var data = new Uint8Array(font.data);\n      var cmap, glyf, loca, cff, indexToLocFormat, unitsPerEm;\n      var numTables = getUshort(data, 4);\n\n      for (var i = 0, p = 12; i < numTables; i++, p += 16) {\n        var tag = (0, _util.bytesToString)(data.subarray(p, p + 4));\n        var offset = getLong(data, p + 8);\n        var length = getLong(data, p + 12);\n\n        switch (tag) {\n          case \"cmap\":\n            cmap = parseCmap(data, offset, offset + length);\n            break;\n\n          case \"glyf\":\n            glyf = data.subarray(offset, offset + length);\n            break;\n\n          case \"loca\":\n            loca = data.subarray(offset, offset + length);\n            break;\n\n          case \"head\":\n            unitsPerEm = getUshort(data, offset + 18);\n            indexToLocFormat = getUshort(data, offset + 50);\n            break;\n\n          case \"CFF \":\n            cff = parseCff(data, offset, offset + length, seacAnalysisEnabled);\n            break;\n        }\n      }\n\n      if (glyf) {\n        var fontMatrix = !unitsPerEm ? font.fontMatrix : [1 / unitsPerEm, 0, 0, 1 / unitsPerEm, 0, 0];\n        return new TrueTypeCompiled(parseGlyfTable(glyf, loca, indexToLocFormat), cmap, fontMatrix);\n      }\n\n      return new Type2Compiled(cff, cmap, font.fontMatrix, font.glyphNameMap);\n    }\n  };\n}();\n\nexports.FontRendererFactory = FontRendererFactory;\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Type1Parser = void 0;\n\nvar _encodings = __w_pdfjs_require__(30);\n\nvar _core_utils = __w_pdfjs_require__(7);\n\nvar _stream = __w_pdfjs_require__(11);\n\nvar _util = __w_pdfjs_require__(2);\n\nvar HINTING_ENABLED = false;\n\nvar Type1CharString = function Type1CharStringClosure() {\n  var COMMAND_MAP = {\n    hstem: [1],\n    vstem: [3],\n    vmoveto: [4],\n    rlineto: [5],\n    hlineto: [6],\n    vlineto: [7],\n    rrcurveto: [8],\n    callsubr: [10],\n    flex: [12, 35],\n    drop: [12, 18],\n    endchar: [14],\n    rmoveto: [21],\n    hmoveto: [22],\n    vhcurveto: [30],\n    hvcurveto: [31]\n  };\n\n  function Type1CharString() {\n    this.width = 0;\n    this.lsb = 0;\n    this.flexing = false;\n    this.output = [];\n    this.stack = [];\n  }\n\n  Type1CharString.prototype = {\n    convert: function Type1CharString_convert(encoded, subrs, seacAnalysisEnabled) {\n      var count = encoded.length;\n      var error = false;\n      var wx, sbx, subrNumber;\n\n      for (var i = 0; i < count; i++) {\n        var value = encoded[i];\n\n        if (value < 32) {\n          if (value === 12) {\n            value = (value << 8) + encoded[++i];\n          }\n\n          switch (value) {\n            case 1:\n              if (!HINTING_ENABLED) {\n                this.stack = [];\n                break;\n              }\n\n              error = this.executeCommand(2, COMMAND_MAP.hstem);\n              break;\n\n            case 3:\n              if (!HINTING_ENABLED) {\n                this.stack = [];\n                break;\n              }\n\n              error = this.executeCommand(2, COMMAND_MAP.vstem);\n              break;\n\n            case 4:\n              if (this.flexing) {\n                if (this.stack.length < 1) {\n                  error = true;\n                  break;\n                }\n\n                var dy = this.stack.pop();\n                this.stack.push(0, dy);\n                break;\n              }\n\n              error = this.executeCommand(1, COMMAND_MAP.vmoveto);\n              break;\n\n            case 5:\n              error = this.executeCommand(2, COMMAND_MAP.rlineto);\n              break;\n\n            case 6:\n              error = this.executeCommand(1, COMMAND_MAP.hlineto);\n              break;\n\n            case 7:\n              error = this.executeCommand(1, COMMAND_MAP.vlineto);\n              break;\n\n            case 8:\n              error = this.executeCommand(6, COMMAND_MAP.rrcurveto);\n              break;\n\n            case 9:\n              this.stack = [];\n              break;\n\n            case 10:\n              if (this.stack.length < 1) {\n                error = true;\n                break;\n              }\n\n              subrNumber = this.stack.pop();\n\n              if (!subrs[subrNumber]) {\n                error = true;\n                break;\n              }\n\n              error = this.convert(subrs[subrNumber], subrs, seacAnalysisEnabled);\n              break;\n\n            case 11:\n              return error;\n\n            case 13:\n              if (this.stack.length < 2) {\n                error = true;\n                break;\n              }\n\n              wx = this.stack.pop();\n              sbx = this.stack.pop();\n              this.lsb = sbx;\n              this.width = wx;\n              this.stack.push(wx, sbx);\n              error = this.executeCommand(2, COMMAND_MAP.hmoveto);\n              break;\n\n            case 14:\n              this.output.push(COMMAND_MAP.endchar[0]);\n              break;\n\n            case 21:\n              if (this.flexing) {\n                break;\n              }\n\n              error = this.executeCommand(2, COMMAND_MAP.rmoveto);\n              break;\n\n            case 22:\n              if (this.flexing) {\n                this.stack.push(0);\n                break;\n              }\n\n              error = this.executeCommand(1, COMMAND_MAP.hmoveto);\n              break;\n\n            case 30:\n              error = this.executeCommand(4, COMMAND_MAP.vhcurveto);\n              break;\n\n            case 31:\n              error = this.executeCommand(4, COMMAND_MAP.hvcurveto);\n              break;\n\n            case (12 << 8) + 0:\n              this.stack = [];\n              break;\n\n            case (12 << 8) + 1:\n              if (!HINTING_ENABLED) {\n                this.stack = [];\n                break;\n              }\n\n              error = this.executeCommand(2, COMMAND_MAP.vstem);\n              break;\n\n            case (12 << 8) + 2:\n              if (!HINTING_ENABLED) {\n                this.stack = [];\n                break;\n              }\n\n              error = this.executeCommand(2, COMMAND_MAP.hstem);\n              break;\n\n            case (12 << 8) + 6:\n              if (seacAnalysisEnabled) {\n                this.seac = this.stack.splice(-4, 4);\n                error = this.executeCommand(0, COMMAND_MAP.endchar);\n              } else {\n                error = this.executeCommand(4, COMMAND_MAP.endchar);\n              }\n\n              break;\n\n            case (12 << 8) + 7:\n              if (this.stack.length < 4) {\n                error = true;\n                break;\n              }\n\n              this.stack.pop();\n              wx = this.stack.pop();\n              var sby = this.stack.pop();\n              sbx = this.stack.pop();\n              this.lsb = sbx;\n              this.width = wx;\n              this.stack.push(wx, sbx, sby);\n              error = this.executeCommand(3, COMMAND_MAP.rmoveto);\n              break;\n\n            case (12 << 8) + 12:\n              if (this.stack.length < 2) {\n                error = true;\n                break;\n              }\n\n              var num2 = this.stack.pop();\n              var num1 = this.stack.pop();\n              this.stack.push(num1 / num2);\n              break;\n\n            case (12 << 8) + 16:\n              if (this.stack.length < 2) {\n                error = true;\n                break;\n              }\n\n              subrNumber = this.stack.pop();\n              var numArgs = this.stack.pop();\n\n              if (subrNumber === 0 && numArgs === 3) {\n                var flexArgs = this.stack.splice(this.stack.length - 17, 17);\n                this.stack.push(flexArgs[2] + flexArgs[0], flexArgs[3] + flexArgs[1], flexArgs[4], flexArgs[5], flexArgs[6], flexArgs[7], flexArgs[8], flexArgs[9], flexArgs[10], flexArgs[11], flexArgs[12], flexArgs[13], flexArgs[14]);\n                error = this.executeCommand(13, COMMAND_MAP.flex, true);\n                this.flexing = false;\n                this.stack.push(flexArgs[15], flexArgs[16]);\n              } else if (subrNumber === 1 && numArgs === 0) {\n                this.flexing = true;\n              }\n\n              break;\n\n            case (12 << 8) + 17:\n              break;\n\n            case (12 << 8) + 33:\n              this.stack = [];\n              break;\n\n            default:\n              (0, _util.warn)('Unknown type 1 charstring command of \"' + value + '\"');\n              break;\n          }\n\n          if (error) {\n            break;\n          }\n\n          continue;\n        } else if (value <= 246) {\n          value = value - 139;\n        } else if (value <= 250) {\n          value = (value - 247) * 256 + encoded[++i] + 108;\n        } else if (value <= 254) {\n          value = -((value - 251) * 256) - encoded[++i] - 108;\n        } else {\n          value = (encoded[++i] & 0xff) << 24 | (encoded[++i] & 0xff) << 16 | (encoded[++i] & 0xff) << 8 | (encoded[++i] & 0xff) << 0;\n        }\n\n        this.stack.push(value);\n      }\n\n      return error;\n    },\n\n    executeCommand(howManyArgs, command, keepStack) {\n      var stackLength = this.stack.length;\n\n      if (howManyArgs > stackLength) {\n        return true;\n      }\n\n      var start = stackLength - howManyArgs;\n\n      for (var i = start; i < stackLength; i++) {\n        var value = this.stack[i];\n\n        if (Number.isInteger(value)) {\n          this.output.push(28, value >> 8 & 0xff, value & 0xff);\n        } else {\n          value = 65536 * value | 0;\n          this.output.push(255, value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);\n        }\n      }\n\n      this.output.push.apply(this.output, command);\n\n      if (keepStack) {\n        this.stack.splice(start, howManyArgs);\n      } else {\n        this.stack.length = 0;\n      }\n\n      return false;\n    }\n\n  };\n  return Type1CharString;\n}();\n\nvar Type1Parser = function Type1ParserClosure() {\n  var EEXEC_ENCRYPT_KEY = 55665;\n  var CHAR_STRS_ENCRYPT_KEY = 4330;\n\n  function isHexDigit(code) {\n    return code >= 48 && code <= 57 || code >= 65 && code <= 70 || code >= 97 && code <= 102;\n  }\n\n  function decrypt(data, key, discardNumber) {\n    if (discardNumber >= data.length) {\n      return new Uint8Array(0);\n    }\n\n    var r = key | 0,\n        c1 = 52845,\n        c2 = 22719,\n        i,\n        j;\n\n    for (i = 0; i < discardNumber; i++) {\n      r = (data[i] + r) * c1 + c2 & (1 << 16) - 1;\n    }\n\n    var count = data.length - discardNumber;\n    var decrypted = new Uint8Array(count);\n\n    for (i = discardNumber, j = 0; j < count; i++, j++) {\n      var value = data[i];\n      decrypted[j] = value ^ r >> 8;\n      r = (value + r) * c1 + c2 & (1 << 16) - 1;\n    }\n\n    return decrypted;\n  }\n\n  function decryptAscii(data, key, discardNumber) {\n    var r = key | 0,\n        c1 = 52845,\n        c2 = 22719;\n    var count = data.length,\n        maybeLength = count >>> 1;\n    var decrypted = new Uint8Array(maybeLength);\n    var i, j;\n\n    for (i = 0, j = 0; i < count; i++) {\n      var digit1 = data[i];\n\n      if (!isHexDigit(digit1)) {\n        continue;\n      }\n\n      i++;\n      var digit2;\n\n      while (i < count && !isHexDigit(digit2 = data[i])) {\n        i++;\n      }\n\n      if (i < count) {\n        var value = parseInt(String.fromCharCode(digit1, digit2), 16);\n        decrypted[j++] = value ^ r >> 8;\n        r = (value + r) * c1 + c2 & (1 << 16) - 1;\n      }\n    }\n\n    return Array.prototype.slice.call(decrypted, discardNumber, j);\n  }\n\n  function isSpecial(c) {\n    return c === 0x2f || c === 0x5b || c === 0x5d || c === 0x7b || c === 0x7d || c === 0x28 || c === 0x29;\n  }\n\n  function Type1Parser(stream, encrypted, seacAnalysisEnabled) {\n    if (encrypted) {\n      var data = stream.getBytes();\n      var isBinary = !(isHexDigit(data[0]) && isHexDigit(data[1]) && isHexDigit(data[2]) && isHexDigit(data[3]));\n      stream = new _stream.Stream(isBinary ? decrypt(data, EEXEC_ENCRYPT_KEY, 4) : decryptAscii(data, EEXEC_ENCRYPT_KEY, 4));\n    }\n\n    this.seacAnalysisEnabled = !!seacAnalysisEnabled;\n    this.stream = stream;\n    this.nextChar();\n  }\n\n  Type1Parser.prototype = {\n    readNumberArray: function Type1Parser_readNumberArray() {\n      this.getToken();\n      var array = [];\n\n      while (true) {\n        var token = this.getToken();\n\n        if (token === null || token === \"]\" || token === \"}\") {\n          break;\n        }\n\n        array.push(parseFloat(token || 0));\n      }\n\n      return array;\n    },\n    readNumber: function Type1Parser_readNumber() {\n      var token = this.getToken();\n      return parseFloat(token || 0);\n    },\n    readInt: function Type1Parser_readInt() {\n      var token = this.getToken();\n      return parseInt(token || 0, 10) | 0;\n    },\n    readBoolean: function Type1Parser_readBoolean() {\n      var token = this.getToken();\n      return token === \"true\" ? 1 : 0;\n    },\n    nextChar: function Type1_nextChar() {\n      return this.currentChar = this.stream.getByte();\n    },\n    getToken: function Type1Parser_getToken() {\n      var comment = false;\n      var ch = this.currentChar;\n\n      while (true) {\n        if (ch === -1) {\n          return null;\n        }\n\n        if (comment) {\n          if (ch === 0x0a || ch === 0x0d) {\n            comment = false;\n          }\n        } else if (ch === 0x25) {\n          comment = true;\n        } else if (!(0, _core_utils.isWhiteSpace)(ch)) {\n          break;\n        }\n\n        ch = this.nextChar();\n      }\n\n      if (isSpecial(ch)) {\n        this.nextChar();\n        return String.fromCharCode(ch);\n      }\n\n      var token = \"\";\n\n      do {\n        token += String.fromCharCode(ch);\n        ch = this.nextChar();\n      } while (ch >= 0 && !(0, _core_utils.isWhiteSpace)(ch) && !isSpecial(ch));\n\n      return token;\n    },\n    readCharStrings: function Type1Parser_readCharStrings(bytes, lenIV) {\n      if (lenIV === -1) {\n        return bytes;\n      }\n\n      return decrypt(bytes, CHAR_STRS_ENCRYPT_KEY, lenIV);\n    },\n    extractFontProgram: function Type1Parser_extractFontProgram(properties) {\n      var stream = this.stream;\n      var subrs = [],\n          charstrings = [];\n      var privateData = Object.create(null);\n      privateData[\"lenIV\"] = 4;\n      var program = {\n        subrs: [],\n        charstrings: [],\n        properties: {\n          privateData\n        }\n      };\n      var token, length, data, lenIV, encoded;\n\n      while ((token = this.getToken()) !== null) {\n        if (token !== \"/\") {\n          continue;\n        }\n\n        token = this.getToken();\n\n        switch (token) {\n          case \"CharStrings\":\n            this.getToken();\n            this.getToken();\n            this.getToken();\n            this.getToken();\n\n            while (true) {\n              token = this.getToken();\n\n              if (token === null || token === \"end\") {\n                break;\n              }\n\n              if (token !== \"/\") {\n                continue;\n              }\n\n              var glyph = this.getToken();\n              length = this.readInt();\n              this.getToken();\n              data = length > 0 ? stream.getBytes(length) : new Uint8Array(0);\n              lenIV = program.properties.privateData[\"lenIV\"];\n              encoded = this.readCharStrings(data, lenIV);\n              this.nextChar();\n              token = this.getToken();\n\n              if (token === \"noaccess\") {\n                this.getToken();\n              }\n\n              charstrings.push({\n                glyph,\n                encoded\n              });\n            }\n\n            break;\n\n          case \"Subrs\":\n            this.readInt();\n            this.getToken();\n\n            while (this.getToken() === \"dup\") {\n              var index = this.readInt();\n              length = this.readInt();\n              this.getToken();\n              data = length > 0 ? stream.getBytes(length) : new Uint8Array(0);\n              lenIV = program.properties.privateData[\"lenIV\"];\n              encoded = this.readCharStrings(data, lenIV);\n              this.nextChar();\n              token = this.getToken();\n\n              if (token === \"noaccess\") {\n                this.getToken();\n              }\n\n              subrs[index] = encoded;\n            }\n\n            break;\n\n          case \"BlueValues\":\n          case \"OtherBlues\":\n          case \"FamilyBlues\":\n          case \"FamilyOtherBlues\":\n            var blueArray = this.readNumberArray();\n\n            if (blueArray.length > 0 && blueArray.length % 2 === 0 && HINTING_ENABLED) {\n              program.properties.privateData[token] = blueArray;\n            }\n\n            break;\n\n          case \"StemSnapH\":\n          case \"StemSnapV\":\n            program.properties.privateData[token] = this.readNumberArray();\n            break;\n\n          case \"StdHW\":\n          case \"StdVW\":\n            program.properties.privateData[token] = this.readNumberArray()[0];\n            break;\n\n          case \"BlueShift\":\n          case \"lenIV\":\n          case \"BlueFuzz\":\n          case \"BlueScale\":\n          case \"LanguageGroup\":\n          case \"ExpansionFactor\":\n            program.properties.privateData[token] = this.readNumber();\n            break;\n\n          case \"ForceBold\":\n            program.properties.privateData[token] = this.readBoolean();\n            break;\n        }\n      }\n\n      for (var i = 0; i < charstrings.length; i++) {\n        glyph = charstrings[i].glyph;\n        encoded = charstrings[i].encoded;\n        var charString = new Type1CharString();\n        var error = charString.convert(encoded, subrs, this.seacAnalysisEnabled);\n        var output = charString.output;\n\n        if (error) {\n          output = [14];\n        }\n\n        const charStringObject = {\n          glyphName: glyph,\n          charstring: output,\n          width: charString.width,\n          lsb: charString.lsb,\n          seac: charString.seac\n        };\n\n        if (glyph === \".notdef\") {\n          program.charstrings.unshift(charStringObject);\n        } else {\n          program.charstrings.push(charStringObject);\n        }\n\n        if (properties.builtInEncoding) {\n          const index = properties.builtInEncoding.indexOf(glyph);\n\n          if (index > -1 && properties.widths[index] === undefined && index >= properties.firstChar && index <= properties.lastChar) {\n            properties.widths[index] = charString.width;\n          }\n        }\n      }\n\n      return program;\n    },\n    extractFontHeader: function Type1Parser_extractFontHeader(properties) {\n      var token;\n\n      while ((token = this.getToken()) !== null) {\n        if (token !== \"/\") {\n          continue;\n        }\n\n        token = this.getToken();\n\n        switch (token) {\n          case \"FontMatrix\":\n            var matrix = this.readNumberArray();\n            properties.fontMatrix = matrix;\n            break;\n\n          case \"Encoding\":\n            var encodingArg = this.getToken();\n            var encoding;\n\n            if (!/^\\d+$/.test(encodingArg)) {\n              encoding = (0, _encodings.getEncoding)(encodingArg);\n            } else {\n              encoding = [];\n              var size = parseInt(encodingArg, 10) | 0;\n              this.getToken();\n\n              for (var j = 0; j < size; j++) {\n                token = this.getToken();\n\n                while (token !== \"dup\" && token !== \"def\") {\n                  token = this.getToken();\n\n                  if (token === null) {\n                    return;\n                  }\n                }\n\n                if (token === \"def\") {\n                  break;\n                }\n\n                var index = this.readInt();\n                this.getToken();\n                var glyph = this.getToken();\n                encoding[index] = glyph;\n                this.getToken();\n              }\n            }\n\n            properties.builtInEncoding = encoding;\n            break;\n\n          case \"FontBBox\":\n            var fontBBox = this.readNumberArray();\n            properties.ascent = Math.max(fontBBox[3], fontBBox[1]);\n            properties.descent = Math.min(fontBBox[1], fontBBox[3]);\n            properties.ascentScaled = true;\n            break;\n        }\n      }\n    }\n  };\n  return Type1Parser;\n}();\n\nexports.Type1Parser = Type1Parser;\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTilingPatternIR = getTilingPatternIR;\nexports.Pattern = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _colorspace = __w_pdfjs_require__(22);\n\nvar _primitives = __w_pdfjs_require__(4);\n\nvar _core_utils = __w_pdfjs_require__(7);\n\nvar ShadingType = {\n  FUNCTION_BASED: 1,\n  AXIAL: 2,\n  RADIAL: 3,\n  FREE_FORM_MESH: 4,\n  LATTICE_FORM_MESH: 5,\n  COONS_PATCH_MESH: 6,\n  TENSOR_PATCH_MESH: 7\n};\n\nvar Pattern = function PatternClosure() {\n  function Pattern() {\n    (0, _util.unreachable)(\"should not call Pattern constructor\");\n  }\n\n  Pattern.prototype = {\n    getPattern: function Pattern_getPattern(ctx) {\n      (0, _util.unreachable)(`Should not call Pattern.getStyle: ${ctx}`);\n    }\n  };\n\n  Pattern.parseShading = function (shading, matrix, xref, res, handler, pdfFunctionFactory) {\n    var dict = (0, _primitives.isStream)(shading) ? shading.dict : shading;\n    var type = dict.get(\"ShadingType\");\n\n    try {\n      switch (type) {\n        case ShadingType.AXIAL:\n        case ShadingType.RADIAL:\n          return new Shadings.RadialAxial(dict, matrix, xref, res, pdfFunctionFactory);\n\n        case ShadingType.FREE_FORM_MESH:\n        case ShadingType.LATTICE_FORM_MESH:\n        case ShadingType.COONS_PATCH_MESH:\n        case ShadingType.TENSOR_PATCH_MESH:\n          return new Shadings.Mesh(shading, matrix, xref, res, pdfFunctionFactory);\n\n        default:\n          throw new _util.FormatError(\"Unsupported ShadingType: \" + type);\n      }\n    } catch (ex) {\n      if (ex instanceof _core_utils.MissingDataException) {\n        throw ex;\n      }\n\n      handler.send(\"UnsupportedFeature\", {\n        featureId: _util.UNSUPPORTED_FEATURES.shadingPattern\n      });\n      (0, _util.warn)(ex);\n      return new Shadings.Dummy();\n    }\n  };\n\n  return Pattern;\n}();\n\nexports.Pattern = Pattern;\nvar Shadings = {};\nShadings.SMALL_NUMBER = 1e-6;\n\nShadings.RadialAxial = function RadialAxialClosure() {\n  function RadialAxial(dict, matrix, xref, res, pdfFunctionFactory) {\n    this.matrix = matrix;\n    this.coordsArr = dict.getArray(\"Coords\");\n    this.shadingType = dict.get(\"ShadingType\");\n    this.type = \"Pattern\";\n    var cs = dict.get(\"ColorSpace\", \"CS\");\n    cs = _colorspace.ColorSpace.parse(cs, xref, res, pdfFunctionFactory);\n    this.cs = cs;\n    const bbox = dict.getArray(\"BBox\");\n\n    if (Array.isArray(bbox) && bbox.length === 4) {\n      this.bbox = _util.Util.normalizeRect(bbox);\n    } else {\n      this.bbox = null;\n    }\n\n    var t0 = 0.0,\n        t1 = 1.0;\n\n    if (dict.has(\"Domain\")) {\n      var domainArr = dict.getArray(\"Domain\");\n      t0 = domainArr[0];\n      t1 = domainArr[1];\n    }\n\n    var extendStart = false,\n        extendEnd = false;\n\n    if (dict.has(\"Extend\")) {\n      var extendArr = dict.getArray(\"Extend\");\n      extendStart = extendArr[0];\n      extendEnd = extendArr[1];\n    }\n\n    if (this.shadingType === ShadingType.RADIAL && (!extendStart || !extendEnd)) {\n      var x1 = this.coordsArr[0];\n      var y1 = this.coordsArr[1];\n      var r1 = this.coordsArr[2];\n      var x2 = this.coordsArr[3];\n      var y2 = this.coordsArr[4];\n      var r2 = this.coordsArr[5];\n      var distance = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n\n      if (r1 <= r2 + distance && r2 <= r1 + distance) {\n        (0, _util.warn)(\"Unsupported radial gradient.\");\n      }\n    }\n\n    this.extendStart = extendStart;\n    this.extendEnd = extendEnd;\n    var fnObj = dict.get(\"Function\");\n    var fn = pdfFunctionFactory.createFromArray(fnObj);\n    const NUMBER_OF_SAMPLES = 10;\n    const step = (t1 - t0) / NUMBER_OF_SAMPLES;\n    var colorStops = this.colorStops = [];\n\n    if (t0 >= t1 || step <= 0) {\n      (0, _util.info)(\"Bad shading domain.\");\n      return;\n    }\n\n    var color = new Float32Array(cs.numComps),\n        ratio = new Float32Array(1);\n    var rgbColor;\n\n    for (let i = 0; i <= NUMBER_OF_SAMPLES; i++) {\n      ratio[0] = t0 + i * step;\n      fn(ratio, 0, color, 0);\n      rgbColor = cs.getRgb(color, 0);\n\n      var cssColor = _util.Util.makeCssRgb(rgbColor[0], rgbColor[1], rgbColor[2]);\n\n      colorStops.push([i / NUMBER_OF_SAMPLES, cssColor]);\n    }\n\n    var background = \"transparent\";\n\n    if (dict.has(\"Background\")) {\n      rgbColor = cs.getRgb(dict.get(\"Background\"), 0);\n      background = _util.Util.makeCssRgb(rgbColor[0], rgbColor[1], rgbColor[2]);\n    }\n\n    if (!extendStart) {\n      colorStops.unshift([0, background]);\n      colorStops[1][0] += Shadings.SMALL_NUMBER;\n    }\n\n    if (!extendEnd) {\n      colorStops[colorStops.length - 1][0] -= Shadings.SMALL_NUMBER;\n      colorStops.push([1, background]);\n    }\n\n    this.colorStops = colorStops;\n  }\n\n  RadialAxial.prototype = {\n    getIR: function RadialAxial_getIR() {\n      var coordsArr = this.coordsArr;\n      var shadingType = this.shadingType;\n      var type, p0, p1, r0, r1;\n\n      if (shadingType === ShadingType.AXIAL) {\n        p0 = [coordsArr[0], coordsArr[1]];\n        p1 = [coordsArr[2], coordsArr[3]];\n        r0 = null;\n        r1 = null;\n        type = \"axial\";\n      } else if (shadingType === ShadingType.RADIAL) {\n        p0 = [coordsArr[0], coordsArr[1]];\n        p1 = [coordsArr[3], coordsArr[4]];\n        r0 = coordsArr[2];\n        r1 = coordsArr[5];\n        type = \"radial\";\n      } else {\n        (0, _util.unreachable)(`getPattern type unknown: ${shadingType}`);\n      }\n\n      var matrix = this.matrix;\n\n      if (matrix) {\n        p0 = _util.Util.applyTransform(p0, matrix);\n        p1 = _util.Util.applyTransform(p1, matrix);\n\n        if (shadingType === ShadingType.RADIAL) {\n          var scale = _util.Util.singularValueDecompose2dScale(matrix);\n\n          r0 *= scale[0];\n          r1 *= scale[1];\n        }\n      }\n\n      return [\"RadialAxial\", type, this.bbox, this.colorStops, p0, p1, r0, r1];\n    }\n  };\n  return RadialAxial;\n}();\n\nShadings.Mesh = function MeshClosure() {\n  function MeshStreamReader(stream, context) {\n    this.stream = stream;\n    this.context = context;\n    this.buffer = 0;\n    this.bufferLength = 0;\n    var numComps = context.numComps;\n    this.tmpCompsBuf = new Float32Array(numComps);\n    var csNumComps = context.colorSpace.numComps;\n    this.tmpCsCompsBuf = context.colorFn ? new Float32Array(csNumComps) : this.tmpCompsBuf;\n  }\n\n  MeshStreamReader.prototype = {\n    get hasData() {\n      if (this.stream.end) {\n        return this.stream.pos < this.stream.end;\n      }\n\n      if (this.bufferLength > 0) {\n        return true;\n      }\n\n      var nextByte = this.stream.getByte();\n\n      if (nextByte < 0) {\n        return false;\n      }\n\n      this.buffer = nextByte;\n      this.bufferLength = 8;\n      return true;\n    },\n\n    readBits: function MeshStreamReader_readBits(n) {\n      var buffer = this.buffer;\n      var bufferLength = this.bufferLength;\n\n      if (n === 32) {\n        if (bufferLength === 0) {\n          return (this.stream.getByte() << 24 | this.stream.getByte() << 16 | this.stream.getByte() << 8 | this.stream.getByte()) >>> 0;\n        }\n\n        buffer = buffer << 24 | this.stream.getByte() << 16 | this.stream.getByte() << 8 | this.stream.getByte();\n        var nextByte = this.stream.getByte();\n        this.buffer = nextByte & (1 << bufferLength) - 1;\n        return (buffer << 8 - bufferLength | (nextByte & 0xff) >> bufferLength) >>> 0;\n      }\n\n      if (n === 8 && bufferLength === 0) {\n        return this.stream.getByte();\n      }\n\n      while (bufferLength < n) {\n        buffer = buffer << 8 | this.stream.getByte();\n        bufferLength += 8;\n      }\n\n      bufferLength -= n;\n      this.bufferLength = bufferLength;\n      this.buffer = buffer & (1 << bufferLength) - 1;\n      return buffer >> bufferLength;\n    },\n    align: function MeshStreamReader_align() {\n      this.buffer = 0;\n      this.bufferLength = 0;\n    },\n    readFlag: function MeshStreamReader_readFlag() {\n      return this.readBits(this.context.bitsPerFlag);\n    },\n    readCoordinate: function MeshStreamReader_readCoordinate() {\n      var bitsPerCoordinate = this.context.bitsPerCoordinate;\n      var xi = this.readBits(bitsPerCoordinate);\n      var yi = this.readBits(bitsPerCoordinate);\n      var decode = this.context.decode;\n      var scale = bitsPerCoordinate < 32 ? 1 / ((1 << bitsPerCoordinate) - 1) : 2.3283064365386963e-10;\n      return [xi * scale * (decode[1] - decode[0]) + decode[0], yi * scale * (decode[3] - decode[2]) + decode[2]];\n    },\n    readComponents: function MeshStreamReader_readComponents() {\n      var numComps = this.context.numComps;\n      var bitsPerComponent = this.context.bitsPerComponent;\n      var scale = bitsPerComponent < 32 ? 1 / ((1 << bitsPerComponent) - 1) : 2.3283064365386963e-10;\n      var decode = this.context.decode;\n      var components = this.tmpCompsBuf;\n\n      for (var i = 0, j = 4; i < numComps; i++, j += 2) {\n        var ci = this.readBits(bitsPerComponent);\n        components[i] = ci * scale * (decode[j + 1] - decode[j]) + decode[j];\n      }\n\n      var color = this.tmpCsCompsBuf;\n\n      if (this.context.colorFn) {\n        this.context.colorFn(components, 0, color, 0);\n      }\n\n      return this.context.colorSpace.getRgb(color, 0);\n    }\n  };\n\n  function decodeType4Shading(mesh, reader) {\n    var coords = mesh.coords;\n    var colors = mesh.colors;\n    var operators = [];\n    var ps = [];\n    var verticesLeft = 0;\n\n    while (reader.hasData) {\n      var f = reader.readFlag();\n      var coord = reader.readCoordinate();\n      var color = reader.readComponents();\n\n      if (verticesLeft === 0) {\n        if (!(0 <= f && f <= 2)) {\n          throw new _util.FormatError(\"Unknown type4 flag\");\n        }\n\n        switch (f) {\n          case 0:\n            verticesLeft = 3;\n            break;\n\n          case 1:\n            ps.push(ps[ps.length - 2], ps[ps.length - 1]);\n            verticesLeft = 1;\n            break;\n\n          case 2:\n            ps.push(ps[ps.length - 3], ps[ps.length - 1]);\n            verticesLeft = 1;\n            break;\n        }\n\n        operators.push(f);\n      }\n\n      ps.push(coords.length);\n      coords.push(coord);\n      colors.push(color);\n      verticesLeft--;\n      reader.align();\n    }\n\n    mesh.figures.push({\n      type: \"triangles\",\n      coords: new Int32Array(ps),\n      colors: new Int32Array(ps)\n    });\n  }\n\n  function decodeType5Shading(mesh, reader, verticesPerRow) {\n    var coords = mesh.coords;\n    var colors = mesh.colors;\n    var ps = [];\n\n    while (reader.hasData) {\n      var coord = reader.readCoordinate();\n      var color = reader.readComponents();\n      ps.push(coords.length);\n      coords.push(coord);\n      colors.push(color);\n    }\n\n    mesh.figures.push({\n      type: \"lattice\",\n      coords: new Int32Array(ps),\n      colors: new Int32Array(ps),\n      verticesPerRow\n    });\n  }\n\n  var MIN_SPLIT_PATCH_CHUNKS_AMOUNT = 3;\n  var MAX_SPLIT_PATCH_CHUNKS_AMOUNT = 20;\n  var TRIANGLE_DENSITY = 20;\n\n  var getB = function getBClosure() {\n    function buildB(count) {\n      var lut = [];\n\n      for (var i = 0; i <= count; i++) {\n        var t = i / count,\n            t_ = 1 - t;\n        lut.push(new Float32Array([t_ * t_ * t_, 3 * t * t_ * t_, 3 * t * t * t_, t * t * t]));\n      }\n\n      return lut;\n    }\n\n    var cache = [];\n    return function getB(count) {\n      if (!cache[count]) {\n        cache[count] = buildB(count);\n      }\n\n      return cache[count];\n    };\n  }();\n\n  function buildFigureFromPatch(mesh, index) {\n    var figure = mesh.figures[index];\n    (0, _util.assert)(figure.type === \"patch\", \"Unexpected patch mesh figure\");\n    var coords = mesh.coords,\n        colors = mesh.colors;\n    var pi = figure.coords;\n    var ci = figure.colors;\n    var figureMinX = Math.min(coords[pi[0]][0], coords[pi[3]][0], coords[pi[12]][0], coords[pi[15]][0]);\n    var figureMinY = Math.min(coords[pi[0]][1], coords[pi[3]][1], coords[pi[12]][1], coords[pi[15]][1]);\n    var figureMaxX = Math.max(coords[pi[0]][0], coords[pi[3]][0], coords[pi[12]][0], coords[pi[15]][0]);\n    var figureMaxY = Math.max(coords[pi[0]][1], coords[pi[3]][1], coords[pi[12]][1], coords[pi[15]][1]);\n    var splitXBy = Math.ceil((figureMaxX - figureMinX) * TRIANGLE_DENSITY / (mesh.bounds[2] - mesh.bounds[0]));\n    splitXBy = Math.max(MIN_SPLIT_PATCH_CHUNKS_AMOUNT, Math.min(MAX_SPLIT_PATCH_CHUNKS_AMOUNT, splitXBy));\n    var splitYBy = Math.ceil((figureMaxY - figureMinY) * TRIANGLE_DENSITY / (mesh.bounds[3] - mesh.bounds[1]));\n    splitYBy = Math.max(MIN_SPLIT_PATCH_CHUNKS_AMOUNT, Math.min(MAX_SPLIT_PATCH_CHUNKS_AMOUNT, splitYBy));\n    var verticesPerRow = splitXBy + 1;\n    var figureCoords = new Int32Array((splitYBy + 1) * verticesPerRow);\n    var figureColors = new Int32Array((splitYBy + 1) * verticesPerRow);\n    var k = 0;\n    var cl = new Uint8Array(3),\n        cr = new Uint8Array(3);\n    var c0 = colors[ci[0]],\n        c1 = colors[ci[1]],\n        c2 = colors[ci[2]],\n        c3 = colors[ci[3]];\n    var bRow = getB(splitYBy),\n        bCol = getB(splitXBy);\n\n    for (var row = 0; row <= splitYBy; row++) {\n      cl[0] = (c0[0] * (splitYBy - row) + c2[0] * row) / splitYBy | 0;\n      cl[1] = (c0[1] * (splitYBy - row) + c2[1] * row) / splitYBy | 0;\n      cl[2] = (c0[2] * (splitYBy - row) + c2[2] * row) / splitYBy | 0;\n      cr[0] = (c1[0] * (splitYBy - row) + c3[0] * row) / splitYBy | 0;\n      cr[1] = (c1[1] * (splitYBy - row) + c3[1] * row) / splitYBy | 0;\n      cr[2] = (c1[2] * (splitYBy - row) + c3[2] * row) / splitYBy | 0;\n\n      for (var col = 0; col <= splitXBy; col++, k++) {\n        if ((row === 0 || row === splitYBy) && (col === 0 || col === splitXBy)) {\n          continue;\n        }\n\n        var x = 0,\n            y = 0;\n        var q = 0;\n\n        for (var i = 0; i <= 3; i++) {\n          for (var j = 0; j <= 3; j++, q++) {\n            var m = bRow[row][i] * bCol[col][j];\n            x += coords[pi[q]][0] * m;\n            y += coords[pi[q]][1] * m;\n          }\n        }\n\n        figureCoords[k] = coords.length;\n        coords.push([x, y]);\n        figureColors[k] = colors.length;\n        var newColor = new Uint8Array(3);\n        newColor[0] = (cl[0] * (splitXBy - col) + cr[0] * col) / splitXBy | 0;\n        newColor[1] = (cl[1] * (splitXBy - col) + cr[1] * col) / splitXBy | 0;\n        newColor[2] = (cl[2] * (splitXBy - col) + cr[2] * col) / splitXBy | 0;\n        colors.push(newColor);\n      }\n    }\n\n    figureCoords[0] = pi[0];\n    figureColors[0] = ci[0];\n    figureCoords[splitXBy] = pi[3];\n    figureColors[splitXBy] = ci[1];\n    figureCoords[verticesPerRow * splitYBy] = pi[12];\n    figureColors[verticesPerRow * splitYBy] = ci[2];\n    figureCoords[verticesPerRow * splitYBy + splitXBy] = pi[15];\n    figureColors[verticesPerRow * splitYBy + splitXBy] = ci[3];\n    mesh.figures[index] = {\n      type: \"lattice\",\n      coords: figureCoords,\n      colors: figureColors,\n      verticesPerRow\n    };\n  }\n\n  function decodeType6Shading(mesh, reader) {\n    var coords = mesh.coords;\n    var colors = mesh.colors;\n    var ps = new Int32Array(16);\n    var cs = new Int32Array(4);\n\n    while (reader.hasData) {\n      var f = reader.readFlag();\n\n      if (!(0 <= f && f <= 3)) {\n        throw new _util.FormatError(\"Unknown type6 flag\");\n      }\n\n      var i, ii;\n      var pi = coords.length;\n\n      for (i = 0, ii = f !== 0 ? 8 : 12; i < ii; i++) {\n        coords.push(reader.readCoordinate());\n      }\n\n      var ci = colors.length;\n\n      for (i = 0, ii = f !== 0 ? 2 : 4; i < ii; i++) {\n        colors.push(reader.readComponents());\n      }\n\n      var tmp1, tmp2, tmp3, tmp4;\n\n      switch (f) {\n        case 0:\n          ps[12] = pi + 3;\n          ps[13] = pi + 4;\n          ps[14] = pi + 5;\n          ps[15] = pi + 6;\n          ps[8] = pi + 2;\n          ps[11] = pi + 7;\n          ps[4] = pi + 1;\n          ps[7] = pi + 8;\n          ps[0] = pi;\n          ps[1] = pi + 11;\n          ps[2] = pi + 10;\n          ps[3] = pi + 9;\n          cs[2] = ci + 1;\n          cs[3] = ci + 2;\n          cs[0] = ci;\n          cs[1] = ci + 3;\n          break;\n\n        case 1:\n          tmp1 = ps[12];\n          tmp2 = ps[13];\n          tmp3 = ps[14];\n          tmp4 = ps[15];\n          ps[12] = tmp4;\n          ps[13] = pi + 0;\n          ps[14] = pi + 1;\n          ps[15] = pi + 2;\n          ps[8] = tmp3;\n          ps[11] = pi + 3;\n          ps[4] = tmp2;\n          ps[7] = pi + 4;\n          ps[0] = tmp1;\n          ps[1] = pi + 7;\n          ps[2] = pi + 6;\n          ps[3] = pi + 5;\n          tmp1 = cs[2];\n          tmp2 = cs[3];\n          cs[2] = tmp2;\n          cs[3] = ci;\n          cs[0] = tmp1;\n          cs[1] = ci + 1;\n          break;\n\n        case 2:\n          tmp1 = ps[15];\n          tmp2 = ps[11];\n          ps[12] = ps[3];\n          ps[13] = pi + 0;\n          ps[14] = pi + 1;\n          ps[15] = pi + 2;\n          ps[8] = ps[7];\n          ps[11] = pi + 3;\n          ps[4] = tmp2;\n          ps[7] = pi + 4;\n          ps[0] = tmp1;\n          ps[1] = pi + 7;\n          ps[2] = pi + 6;\n          ps[3] = pi + 5;\n          tmp1 = cs[3];\n          cs[2] = cs[1];\n          cs[3] = ci;\n          cs[0] = tmp1;\n          cs[1] = ci + 1;\n          break;\n\n        case 3:\n          ps[12] = ps[0];\n          ps[13] = pi + 0;\n          ps[14] = pi + 1;\n          ps[15] = pi + 2;\n          ps[8] = ps[1];\n          ps[11] = pi + 3;\n          ps[4] = ps[2];\n          ps[7] = pi + 4;\n          ps[0] = ps[3];\n          ps[1] = pi + 7;\n          ps[2] = pi + 6;\n          ps[3] = pi + 5;\n          cs[2] = cs[0];\n          cs[3] = ci;\n          cs[0] = cs[1];\n          cs[1] = ci + 1;\n          break;\n      }\n\n      ps[5] = coords.length;\n      coords.push([(-4 * coords[ps[0]][0] - coords[ps[15]][0] + 6 * (coords[ps[4]][0] + coords[ps[1]][0]) - 2 * (coords[ps[12]][0] + coords[ps[3]][0]) + 3 * (coords[ps[13]][0] + coords[ps[7]][0])) / 9, (-4 * coords[ps[0]][1] - coords[ps[15]][1] + 6 * (coords[ps[4]][1] + coords[ps[1]][1]) - 2 * (coords[ps[12]][1] + coords[ps[3]][1]) + 3 * (coords[ps[13]][1] + coords[ps[7]][1])) / 9]);\n      ps[6] = coords.length;\n      coords.push([(-4 * coords[ps[3]][0] - coords[ps[12]][0] + 6 * (coords[ps[2]][0] + coords[ps[7]][0]) - 2 * (coords[ps[0]][0] + coords[ps[15]][0]) + 3 * (coords[ps[4]][0] + coords[ps[14]][0])) / 9, (-4 * coords[ps[3]][1] - coords[ps[12]][1] + 6 * (coords[ps[2]][1] + coords[ps[7]][1]) - 2 * (coords[ps[0]][1] + coords[ps[15]][1]) + 3 * (coords[ps[4]][1] + coords[ps[14]][1])) / 9]);\n      ps[9] = coords.length;\n      coords.push([(-4 * coords[ps[12]][0] - coords[ps[3]][0] + 6 * (coords[ps[8]][0] + coords[ps[13]][0]) - 2 * (coords[ps[0]][0] + coords[ps[15]][0]) + 3 * (coords[ps[11]][0] + coords[ps[1]][0])) / 9, (-4 * coords[ps[12]][1] - coords[ps[3]][1] + 6 * (coords[ps[8]][1] + coords[ps[13]][1]) - 2 * (coords[ps[0]][1] + coords[ps[15]][1]) + 3 * (coords[ps[11]][1] + coords[ps[1]][1])) / 9]);\n      ps[10] = coords.length;\n      coords.push([(-4 * coords[ps[15]][0] - coords[ps[0]][0] + 6 * (coords[ps[11]][0] + coords[ps[14]][0]) - 2 * (coords[ps[12]][0] + coords[ps[3]][0]) + 3 * (coords[ps[2]][0] + coords[ps[8]][0])) / 9, (-4 * coords[ps[15]][1] - coords[ps[0]][1] + 6 * (coords[ps[11]][1] + coords[ps[14]][1]) - 2 * (coords[ps[12]][1] + coords[ps[3]][1]) + 3 * (coords[ps[2]][1] + coords[ps[8]][1])) / 9]);\n      mesh.figures.push({\n        type: \"patch\",\n        coords: new Int32Array(ps),\n        colors: new Int32Array(cs)\n      });\n    }\n  }\n\n  function decodeType7Shading(mesh, reader) {\n    var coords = mesh.coords;\n    var colors = mesh.colors;\n    var ps = new Int32Array(16);\n    var cs = new Int32Array(4);\n\n    while (reader.hasData) {\n      var f = reader.readFlag();\n\n      if (!(0 <= f && f <= 3)) {\n        throw new _util.FormatError(\"Unknown type7 flag\");\n      }\n\n      var i, ii;\n      var pi = coords.length;\n\n      for (i = 0, ii = f !== 0 ? 12 : 16; i < ii; i++) {\n        coords.push(reader.readCoordinate());\n      }\n\n      var ci = colors.length;\n\n      for (i = 0, ii = f !== 0 ? 2 : 4; i < ii; i++) {\n        colors.push(reader.readComponents());\n      }\n\n      var tmp1, tmp2, tmp3, tmp4;\n\n      switch (f) {\n        case 0:\n          ps[12] = pi + 3;\n          ps[13] = pi + 4;\n          ps[14] = pi + 5;\n          ps[15] = pi + 6;\n          ps[8] = pi + 2;\n          ps[9] = pi + 13;\n          ps[10] = pi + 14;\n          ps[11] = pi + 7;\n          ps[4] = pi + 1;\n          ps[5] = pi + 12;\n          ps[6] = pi + 15;\n          ps[7] = pi + 8;\n          ps[0] = pi;\n          ps[1] = pi + 11;\n          ps[2] = pi + 10;\n          ps[3] = pi + 9;\n          cs[2] = ci + 1;\n          cs[3] = ci + 2;\n          cs[0] = ci;\n          cs[1] = ci + 3;\n          break;\n\n        case 1:\n          tmp1 = ps[12];\n          tmp2 = ps[13];\n          tmp3 = ps[14];\n          tmp4 = ps[15];\n          ps[12] = tmp4;\n          ps[13] = pi + 0;\n          ps[14] = pi + 1;\n          ps[15] = pi + 2;\n          ps[8] = tmp3;\n          ps[9] = pi + 9;\n          ps[10] = pi + 10;\n          ps[11] = pi + 3;\n          ps[4] = tmp2;\n          ps[5] = pi + 8;\n          ps[6] = pi + 11;\n          ps[7] = pi + 4;\n          ps[0] = tmp1;\n          ps[1] = pi + 7;\n          ps[2] = pi + 6;\n          ps[3] = pi + 5;\n          tmp1 = cs[2];\n          tmp2 = cs[3];\n          cs[2] = tmp2;\n          cs[3] = ci;\n          cs[0] = tmp1;\n          cs[1] = ci + 1;\n          break;\n\n        case 2:\n          tmp1 = ps[15];\n          tmp2 = ps[11];\n          ps[12] = ps[3];\n          ps[13] = pi + 0;\n          ps[14] = pi + 1;\n          ps[15] = pi + 2;\n          ps[8] = ps[7];\n          ps[9] = pi + 9;\n          ps[10] = pi + 10;\n          ps[11] = pi + 3;\n          ps[4] = tmp2;\n          ps[5] = pi + 8;\n          ps[6] = pi + 11;\n          ps[7] = pi + 4;\n          ps[0] = tmp1;\n          ps[1] = pi + 7;\n          ps[2] = pi + 6;\n          ps[3] = pi + 5;\n          tmp1 = cs[3];\n          cs[2] = cs[1];\n          cs[3] = ci;\n          cs[0] = tmp1;\n          cs[1] = ci + 1;\n          break;\n\n        case 3:\n          ps[12] = ps[0];\n          ps[13] = pi + 0;\n          ps[14] = pi + 1;\n          ps[15] = pi + 2;\n          ps[8] = ps[1];\n          ps[9] = pi + 9;\n          ps[10] = pi + 10;\n          ps[11] = pi + 3;\n          ps[4] = ps[2];\n          ps[5] = pi + 8;\n          ps[6] = pi + 11;\n          ps[7] = pi + 4;\n          ps[0] = ps[3];\n          ps[1] = pi + 7;\n          ps[2] = pi + 6;\n          ps[3] = pi + 5;\n          cs[2] = cs[0];\n          cs[3] = ci;\n          cs[0] = cs[1];\n          cs[1] = ci + 1;\n          break;\n      }\n\n      mesh.figures.push({\n        type: \"patch\",\n        coords: new Int32Array(ps),\n        colors: new Int32Array(cs)\n      });\n    }\n  }\n\n  function updateBounds(mesh) {\n    var minX = mesh.coords[0][0],\n        minY = mesh.coords[0][1],\n        maxX = minX,\n        maxY = minY;\n\n    for (var i = 1, ii = mesh.coords.length; i < ii; i++) {\n      var x = mesh.coords[i][0],\n          y = mesh.coords[i][1];\n      minX = minX > x ? x : minX;\n      minY = minY > y ? y : minY;\n      maxX = maxX < x ? x : maxX;\n      maxY = maxY < y ? y : maxY;\n    }\n\n    mesh.bounds = [minX, minY, maxX, maxY];\n  }\n\n  function packData(mesh) {\n    var i, ii, j, jj;\n    var coords = mesh.coords;\n    var coordsPacked = new Float32Array(coords.length * 2);\n\n    for (i = 0, j = 0, ii = coords.length; i < ii; i++) {\n      var xy = coords[i];\n      coordsPacked[j++] = xy[0];\n      coordsPacked[j++] = xy[1];\n    }\n\n    mesh.coords = coordsPacked;\n    var colors = mesh.colors;\n    var colorsPacked = new Uint8Array(colors.length * 3);\n\n    for (i = 0, j = 0, ii = colors.length; i < ii; i++) {\n      var c = colors[i];\n      colorsPacked[j++] = c[0];\n      colorsPacked[j++] = c[1];\n      colorsPacked[j++] = c[2];\n    }\n\n    mesh.colors = colorsPacked;\n    var figures = mesh.figures;\n\n    for (i = 0, ii = figures.length; i < ii; i++) {\n      var figure = figures[i],\n          ps = figure.coords,\n          cs = figure.colors;\n\n      for (j = 0, jj = ps.length; j < jj; j++) {\n        ps[j] *= 2;\n        cs[j] *= 3;\n      }\n    }\n  }\n\n  function Mesh(stream, matrix, xref, res, pdfFunctionFactory) {\n    if (!(0, _primitives.isStream)(stream)) {\n      throw new _util.FormatError(\"Mesh data is not a stream\");\n    }\n\n    var dict = stream.dict;\n    this.matrix = matrix;\n    this.shadingType = dict.get(\"ShadingType\");\n    this.type = \"Pattern\";\n    const bbox = dict.getArray(\"BBox\");\n\n    if (Array.isArray(bbox) && bbox.length === 4) {\n      this.bbox = _util.Util.normalizeRect(bbox);\n    } else {\n      this.bbox = null;\n    }\n\n    var cs = dict.get(\"ColorSpace\", \"CS\");\n    cs = _colorspace.ColorSpace.parse(cs, xref, res, pdfFunctionFactory);\n    this.cs = cs;\n    this.background = dict.has(\"Background\") ? cs.getRgb(dict.get(\"Background\"), 0) : null;\n    var fnObj = dict.get(\"Function\");\n    var fn = fnObj ? pdfFunctionFactory.createFromArray(fnObj) : null;\n    this.coords = [];\n    this.colors = [];\n    this.figures = [];\n    var decodeContext = {\n      bitsPerCoordinate: dict.get(\"BitsPerCoordinate\"),\n      bitsPerComponent: dict.get(\"BitsPerComponent\"),\n      bitsPerFlag: dict.get(\"BitsPerFlag\"),\n      decode: dict.getArray(\"Decode\"),\n      colorFn: fn,\n      colorSpace: cs,\n      numComps: fn ? 1 : cs.numComps\n    };\n    var reader = new MeshStreamReader(stream, decodeContext);\n    var patchMesh = false;\n\n    switch (this.shadingType) {\n      case ShadingType.FREE_FORM_MESH:\n        decodeType4Shading(this, reader);\n        break;\n\n      case ShadingType.LATTICE_FORM_MESH:\n        var verticesPerRow = dict.get(\"VerticesPerRow\") | 0;\n\n        if (verticesPerRow < 2) {\n          throw new _util.FormatError(\"Invalid VerticesPerRow\");\n        }\n\n        decodeType5Shading(this, reader, verticesPerRow);\n        break;\n\n      case ShadingType.COONS_PATCH_MESH:\n        decodeType6Shading(this, reader);\n        patchMesh = true;\n        break;\n\n      case ShadingType.TENSOR_PATCH_MESH:\n        decodeType7Shading(this, reader);\n        patchMesh = true;\n        break;\n\n      default:\n        (0, _util.unreachable)(\"Unsupported mesh type.\");\n        break;\n    }\n\n    if (patchMesh) {\n      updateBounds(this);\n\n      for (var i = 0, ii = this.figures.length; i < ii; i++) {\n        buildFigureFromPatch(this, i);\n      }\n    }\n\n    updateBounds(this);\n    packData(this);\n  }\n\n  Mesh.prototype = {\n    getIR: function Mesh_getIR() {\n      return [\"Mesh\", this.shadingType, this.coords, this.colors, this.figures, this.bounds, this.matrix, this.bbox, this.background];\n    }\n  };\n  return Mesh;\n}();\n\nShadings.Dummy = function DummyClosure() {\n  function Dummy() {\n    this.type = \"Pattern\";\n  }\n\n  Dummy.prototype = {\n    getIR: function Dummy_getIR() {\n      return [\"Dummy\"];\n    }\n  };\n  return Dummy;\n}();\n\nfunction getTilingPatternIR(operatorList, dict, args) {\n  const matrix = dict.getArray(\"Matrix\");\n\n  const bbox = _util.Util.normalizeRect(dict.getArray(\"BBox\"));\n\n  const xstep = dict.get(\"XStep\");\n  const ystep = dict.get(\"YStep\");\n  const paintType = dict.get(\"PaintType\");\n  const tilingType = dict.get(\"TilingType\");\n\n  if (bbox[2] - bbox[0] === 0 || bbox[3] - bbox[1] === 0) {\n    throw new _util.FormatError(`Invalid getTilingPatternIR /BBox array: [${bbox}].`);\n  }\n\n  return [\"TilingPattern\", args, operatorList, matrix, bbox, xstep, ystep, paintType, tilingType];\n}\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bidi = bidi;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar baseTypesnvar arabicTypes = [\"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"ON\", \"ON\", \"AL\", \"ET\", \"ET\", \"AL\", \"CS\", \"AL\", \"ON\", \"ON\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AL\", \"AL\", \"\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"ET\", \"AN\", \"AN\", \"AL\", \"AL\", \"AL\", \"NSM\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AN\", \"ON\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AL\", \"AL\", \"NSM\", \"NSM\", \"ON\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AL\", \"AL\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\"];\n\nfunction isOdd(i) {\n  return (i & 1) !== 0;\n}\n\nfunction isEven(i) {\n  return (i & 1) === 0;\n}\n\nfunction findUnequal(arr, start, value) {\n  for (var j = start, jj = arr.length; j < jj; ++j) {\n    if (arr[j] !== value) {\n      return j;\n    }\n  }\n\n  return j;\n}\n\nfunction setValues(arr, start, end, value) {\n  for (var j = start; j < end; ++j) {\n    arr[j] = value;\n  }\n}\n\nfunction reverseValues(arr, start, end) {\n  for (var i = start, j = end - 1; i < j; ++i, --j) {\n    var temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n  }\n}\n\nfunction createBidiText(str, isLTR, vertical = false) {\n  let dir = \"ltr\";\n\n  if (vertical) {\n    dir = \"ttb\";\n  } else if (!isLTR) {\n    dir = \"rtl\";\n  }\n\n  return {\n    str,\n    dir\n  };\n}\n\nvar chars = [];\nvar types = [];\n\nfunction bidi(str, startLevel, vertical) {\n  var isLTR = true;\n  var strLength = str.length;\n\n  if (strLength === 0 || vertical) {\n    return createBidiText(str, isLTR, vertical);\n  }\n\n  chars.length = strLength;\n  types.length = strLength;\n  var numBidi = 0;\n  var i, ii;\n\n  for (i = 0; i < strLength; ++i) {\n    chars[i] = str.charAt(i);\n    var charCode = str.charCodeAt(i);\n    var charType = \"L\";\n\n    if (charCode <= 0x00ff) {\n      charType = baseTypes[charCode];\n    } else if (0x0590 <= charCode && charCode <= 0x05f4) {\n      charType = \"R\";\n    } else if (0x0600 <= charCode && charCode <= 0x06ff) {\n      charType = arabicTypes[charCode & 0xff];\n\n      if (!charType) {\n        (0, _util.warn)(\"Bidi: invalid Unicode character \" + charCode.toString(16));\n      }\n    } else if (0x0700 <= charCode && charCode <= 0x08ac) {\n      charType = \"AL\";\n    }\n\n    if (charType === \"R\" || charType === \"AL\" || charType === \"AN\") {\n      numBidi++;\n    }\n\n    types[i] = charType;\n  }\n\n  if (numBidi === 0) {\n    isLTR = true;\n    return createBidiText(str, isLTR);\n  }\n\n  if (startLevel === -1) {\n    if (numBidi / strLength < 0.3) {\n      isLTR = true;\n      startLevel = 0;\n    } else {\n      isLTR = false;\n      startLevel = 1;\n    }\n  }\n\n  var levels = [];\n\n  for (i = 0; i < strLength; ++i) {\n    levels[i] = startLevel;\n  }\n\n  var e = isOdd(startLevel) ? \"R\" : \"L\";\n  var sor = e;\n  var eor = sor;\n  var lastType = sor;\n\n  for (i = 0; i < strLength; ++i) {\n    if (types[i] === \"NSM\") {\n      types[i] = lastType;\n    } else {\n      lastType = types[i];\n    }\n  }\n\n  lastType = sor;\n  var t;\n\n  for (i = 0; i < strLength; ++i) {\n    t = types[i];\n\n    if (t === \"EN\") {\n      types[i] = lastType === \"AL\" ? \"AN\" : \"EN\";\n    } else if (t === \"R\" || t === \"L\" || t === \"AL\") {\n      lastType = t;\n    }\n  }\n\n  for (i = 0; i < strLength; ++i) {\n    t = types[i];\n\n    if (t === \"AL\") {\n      types[i] = \"R\";\n    }\n  }\n\n  for (i = 1; i < strLength - 1; ++i) {\n    if (types[i] === \"ES\" && types[i - 1] === \"EN\" && types[i + 1] === \"EN\") {\n      types[i] = \"EN\";\n    }\n\n    if (types[i] === \"CS\" && (types[i - 1] === \"EN\" || types[i - 1] === \"AN\") && types[i + 1] === types[i - 1]) {\n      types[i] = types[i - 1];\n    }\n  }\n\n  for (i = 0; i < strLength; ++i) {\n    if (types[i] === \"EN\") {\n      var j;\n\n      for (j = i - 1; j >= 0; --j) {\n        if (types[j] !== \"ET\") {\n          break;\n        }\n\n        types[j] = \"EN\";\n      }\n\n      for (j = i + 1; j < strLength; ++j) {\n        if (types[j] !== \"ET\") {\n          break;\n        }\n\n        types[j] = \"EN\";\n      }\n    }\n  }\n\n  for (i = 0; i < strLength; ++i) {\n    t = types[i];\n\n    if (t === \"WS\" || t === \"ES\" || t === \"ET\" || t === \"CS\") {\n      types[i] = \"ON\";\n    }\n  }\n\n  lastType = sor;\n\n  for (i = 0; i < strLength; ++i) {\n    t = types[i];\n\n    if (t === \"EN\") {\n      types[i] = lastType === \"L\" ? \"L\" : \"EN\";\n    } else if (t === \"R\" || t === \"L\") {\n      lastType = t;\n    }\n  }\n\n  for (i = 0; i < strLength; ++i) {\n    if (types[i] === \"ON\") {\n      var end = findUnequal(types, i + 1, \"ON\");\n      var before = sor;\n\n      if (i > 0) {\n        before = types[i - 1];\n      }\n\n      var after = eor;\n\n      if (end + 1 < strLength) {\n        after = types[end + 1];\n      }\n\n      if (before !== \"L\") {\n        before = \"R\";\n      }\n\n      if (after !== \"L\") {\n        after = \"R\";\n      }\n\n      if (before === after) {\n        setValues(types, i, end, before);\n      }\n\n      i = end - 1;\n    }\n  }\n\n  for (i = 0; i < strLength; ++i) {\n    if (types[i] === \"ON\") {\n      types[i] = e;\n    }\n  }\n\n  for (i = 0; i < strLength; ++i) {\n    t = types[i];\n\n    if (isEven(levels[i])) {\n      if (t === \"R\") {\n        levels[i] += 1;\n      } else if (t === \"AN\" || t === \"EN\") {\n        levels[i] += 2;\n      }\n    } else {\n      if (t === \"L\" || t === \"AN\" || t === \"EN\") {\n        levels[i] += 1;\n      }\n    }\n  }\n\n  var highestLevel = -1;\n  var lowestOddLevel = 99;\n  var level;\n\n  for (i = 0, ii = levels.length; i < ii; ++i) {\n    level = levels[i];\n\n    if (highestLevel < level) {\n      highestLevel = level;\n    }\n\n    if (lowestOddLevel > level && isOdd(level)) {\n      lowestOddLevel = level;\n    }\n  }\n\n  for (level = highestLevel; level >= lowestOddLevel; --level) {\n    var start = -1;\n\n    for (i = 0, ii = levels.length; i < ii; ++i) {\n      if (levels[i] < level) {\n        if (start >= 0) {\n          reverseValues(chars, start, i);\n          start = -1;\n        }\n      } else if (start < 0) {\n        start = i;\n      }\n    }\n\n    if (start >= 0) {\n      reverseValues(chars, start, levels.length);\n    }\n  }\n\n  for (i = 0, ii = chars.length; i < ii; ++i) {\n    var ch = chars[i];\n\n    if (ch === \"<\" || ch === \">\") {\n      chars[i] = \"\";\n    }\n  }\n\n  return createBidiText(chars.join(\"\"), isLTR);\n}\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMetrics = void 0;\n\nvar _core_utils = __w_pdfjs_require__(7);\n\nvar getMetrics = (0, _core_utils.getLookupTableFactory)(function (t) {\n  t[\"Courier\"] = 600;\n  t[\"Courier-Bold\"] = 600;\n  t[\"Courier-BoldOblique\"] = 600;\n  t[\"Courier-Oblique\"] = 600;\n  t[\"Helvetica\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t[\"space\"] = 278;\n    t[\"exclam\"] = 278;\n    t[\"quotedbl\"] = 355;\n    t[\"numbersign\"] = 556;\n    t[\"dollar\"] = 556;\n    t[\"percent\"] = 889;\n    t[\"ampersand\"] = 667;\n    t[\"quoteright\"] = 222;\n    t[\"parenleft\"] = 333;\n    t[\"parenright\"] = 333;\n    t[\"asterisk\"] = 389;\n    t[\"plus\"] = 584;\n    t[\"comma\"] = 278;\n    t[\"hyphen\"] = 333;\n    t[\"period\"] = 278;\n    t[\"slash\"] = 278;\n    t[\"zero\"] = 556;\n    t[\"one\"] = 556;\n    t[\"two\"] = 556;\n    t[\"three\"] = 556;\n    t[\"four\"] = 556;\n    t[\"five\"] = 556;\n    t[\"six\"] = 556;\n    t[\"seven\"] = 556;\n    t[\"eight\"] = 556;\n    t[\"nine\"] = 556;\n    t[\"colon\"] = 278;\n    t[\"semicolon\"] = 278;\n    t[\"less\"] = 584;\n    t[\"equal\"] = 584;\n    t[\"greater\"] = 584;\n    t[\"question\"] = 556;\n    t[\"at\"] = 1015;\n    t[\"A\"] = 667;\n    t[\"B\"] = 667;\n    t[\"C\"] = 722;\n    t[\"D\"] = 722;\n    t[\"E\"] = 667;\n    t[\"F\"] = 611;\n    t[\"G\"] = 778;\n    t[\"H\"] = 722;\n    t[\"I\"] = 278;\n    t[\"J\"] = 500;\n    t[\"K\"] = 667;\n    t[\"L\"] = 556;\n    t[\"M\"] = 833;\n    t[\"N\"] = 722;\n    t[\"O\"] = 778;\n    t[\"P\"] = 667;\n    t[\"Q\"] = 778;\n    t[\"R\"] = 722;\n    t[\"S\"] = 667;\n    t[\"T\"] = 611;\n    t[\"U\"] = 722;\n    t[\"V\"] = 667;\n    t[\"W\"] = 944;\n    t[\"X\"] = 667;\n    t[\"Y\"] = 667;\n    t[\"Z\"] = 611;\n    t[\"bracketleft\"] = 278;\n    t[\"backslash\"] = 278;\n    t[\"bracketright\"] = 278;\n    t[\"asciicircum\"] = 469;\n    t[\"underscore\"] = 556;\n    t[\"quoteleft\"] = 222;\n    t[\"a\"] = 556;\n    t[\"b\"] = 556;\n    t[\"c\"] = 500;\n    t[\"d\"] = 556;\n    t[\"e\"] = 556;\n    t[\"f\"] = 278;\n    t[\"g\"] = 556;\n    t[\"h\"] = 556;\n    t[\"i\"] = 222;\n    t[\"j\"] = 222;\n    t[\"k\"] = 500;\n    t[\"l\"] = 222;\n    t[\"m\"] = 833;\n    t[\"n\"] = 556;\n    t[\"o\"] = 556;\n    t[\"p\"] = 556;\n    t[\"q\"] = 556;\n    t[\"r\"] = 333;\n    t[\"s\"] = 500;\n    t[\"t\"] = 278;\n    t[\"u\"] = 556;\n    t[\"v\"] = 500;\n    t[\"w\"] = 722;\n    t[\"x\"] = 500;\n    t[\"y\"] = 500;\n    t[\"z\"] = 500;\n    t[\"braceleft\"] = 334;\n    t[\"bar\"] = 260;\n    t[\"braceright\"] = 334;\n    t[\"asciitilde\"] = 584;\n    t[\"exclamdown\"] = 333;\n    t[\"cent\"] = 556;\n    t[\"sterling\"] = 556;\n    t[\"fraction\"] = 167;\n    t[\"yen\"] = 556;\n    t[\"florin\"] = 556;\n    t[\"section\"] = 556;\n    t[\"currency\"] = 556;\n    t[\"quotesingle\"] = 191;\n    t[\"quotedblleft\"] = 333;\n    t[\"guillemotleft\"] = 556;\n    t[\"guilsinglleft\"] = 333;\n    t[\"guilsinglright\"] = 333;\n    t[\"fi\"] = 500;\n    t[\"fl\"] = 500;\n    t[\"endash\"] = 556;\n    t[\"dagger\"] = 556;\n    t[\"daggerdbl\"] = 556;\n    t[\"periodcentered\"] = 278;\n    t[\"paragraph\"] = 537;\n    t[\"bullet\"] = 350;\n    t[\"quotesinglbase\"] = 222;\n    t[\"quotedblbase\"] = 333;\n    t[\"quotedblright\"] = 333;\n    t[\"guillemotright\"] = 556;\n    t[\"ellipsis\"] = 1000;\n    t[\"perthousand\"] = 1000;\n    t[\"questiondown\"] = 611;\n    t[\"grave\"] = 333;\n    t[\"acute\"] = 333;\n    t[\"circumflex\"] = 333;\n    t[\"tilde\"] = 333;\n    t[\"macron\"] = 333;\n    t[\"breve\"] = 333;\n    t[\"dotaccent\"] = 333;\n    t[\"dieresis\"] = 333;\n    t[\"ring\"] = 333;\n    t[\"cedilla\"] = 333;\n    t[\"hungarumlaut\"] = 333;\n    t[\"ogonek\"] = 333;\n    t[\"caron\"] = 333;\n    t[\"emdash\"] = 1000;\n    t[\"AE\"] = 1000;\n    t[\"ordfeminine\"] = 370;\n    t[\"Lslash\"] = 556;\n    t[\"Oslash\"] = 778;\n    t[\"OE\"] = 1000;\n    t[\"ordmasculine\"] = 365;\n    t[\"ae\"] = 889;\n    t[\"dotlessi\"] = 278;\n    t[\"lslash\"] = 222;\n    t[\"oslash\"] = 611;\n    t[\"oe\"] = 944;\n    t[\"germandbls\"] = 611;\n    t[\"Idieresis\"] = 278;\n    t[\"eacute\"] = 556;\n    t[\"abreve\"] = 556;\n    t[\"uhungarumlaut\"] = 556;\n    t[\"ecaron\"] = 556;\n    t[\"Ydieresis\"] = 667;\n    t[\"divide\"] = 584;\n    t[\"Yacute\"] = 667;\n    t[\"Acircumflex\"] = 667;\n    t[\"aacute\"] = 556;\n    t[\"Ucircumflex\"] = 722;\n    t[\"yacute\"] = 500;\n    t[\"scommaaccent\"] = 500;\n    t[\"ecircumflex\"] = 556;\n    t[\"Uring\"] = 722;\n    t[\"Udieresis\"] = 722;\n    t[\"aogonek\"] = 556;\n    t[\"Uacute\"] = 722;\n    t[\"uogonek\"] = 556;\n    t[\"Edieresis\"] = 667;\n    t[\"Dcroat\"] = 722;\n    t[\"commaaccent\"] = 250;\n    t[\"copyright\"] = 737;\n    t[\"Emacron\"] = 667;\n    t[\"ccaron\"] = 500;\n    t[\"aring\"] = 556;\n    t[\"Ncommaaccent\"] = 722;\n    t[\"lacute\"] = 222;\n    t[\"agrave\"] = 556;\n    t[\"Tcommaaccent\"] = 611;\n    t[\"Cacute\"] = 722;\n    t[\"atilde\"] = 556;\n    t[\"Edotaccent\"] = 667;\n    t[\"scaron\"] = 500;\n    t[\"scedilla\"] = 500;\n    t[\"iacute\"] = 278;\n    t[\"lozenge\"] = 471;\n    t[\"Rcaron\"] = 722;\n    t[\"Gcommaaccent\"] = 778;\n    t[\"ucircumflex\"] = 556;\n    t[\"acircumflex\"] = 556;\n    t[\"Amacron\"] = 667;\n    t[\"rcaron\"] = 333;\n    t[\"ccedilla\"] = 500;\n    t[\"Zdotaccent\"] = 611;\n    t[\"Thorn\"] = 667;\n    t[\"Omacron\"] = 778;\n    t[\"Racute\"] = 722;\n    t[\"Sacute\"] = 667;\n    t[\"dcaron\"] = 643;\n    t[\"Umacron\"] = 722;\n    t[\"uring\"] = 556;\n    t[\"threesuperior\"] = 333;\n    t[\"Ograve\"] = 778;\n    t[\"Agrave\"] = 667;\n    t[\"Abreve\"] = 667;\n    t[\"multiply\"] = 584;\n    t[\"uacute\"] = 556;\n    t[\"Tcaron\"] = 611;\n    t[\"partialdiff\"] = 476;\n    t[\"ydieresis\"] = 500;\n    t[\"Nacute\"] = 722;\n    t[\"icircumflex\"] = 278;\n    t[\"Ecircumflex\"] = 667;\n    t[\"adieresis\"] = 556;\n    t[\"edieresis\"] = 556;\n    t[\"cacute\"] = 500;\n    t[\"nacute\"] = 556;\n    t[\"umacron\"] = 556;\n    t[\"Ncaron\"] = 722;\n    t[\"Iacute\"] = 278;\n    t[\"plusminus\"] = 584;\n    t[\"brokenbar\"] = 260;\n    t[\"registered\"] = 737;\n    t[\"Gbreve\"] = 778;\n    t[\"Idotaccent\"] = 278;\n    t[\"summation\"] = 600;\n    t[\"Egrave\"] = 667;\n    t[\"racute\"] = 333;\n    t[\"omacron\"] = 556;\n    t[\"Zacute\"] = 611;\n    t[\"Zcaron\"] = 611;\n    t[\"greaterequal\"] = 549;\n    t[\"Eth\"] = 722;\n    t[\"Ccedilla\"] = 722;\n    t[\"lcommaaccent\"] = 222;\n    t[\"tcaron\"] = 317;\n    t[\"eogonek\"] = 556;\n    t[\"Uogonek\"] = 722;\n    t[\"Aacute\"] = 667;\n    t[\"Adieresis\"] = 667;\n    t[\"egrave\"] = 556;\n    t[\"zacute\"] = 500;\n    t[\"iogonek\"] = 222;\n    t[\"Oacute\"] = 778;\n    t[\"oacute\"] = 556;\n    t[\"amacron\"] = 556;\n    t[\"sacute\"] = 500;\n    t[\"idieresis\"] = 278;\n    t[\"Ocircumflex\"] = 778;\n    t[\"Ugrave\"] = 722;\n    t[\"Delta\"] = 612;\n    t[\"thorn\"] = 556;\n    t[\"twosuperior\"] = 333;\n    t[\"Odieresis\"] = 778;\n    t[\"mu\"] = 556;\n    t[\"igrave\"] = 278;\n    t[\"ohungarumlaut\"] = 556;\n    t[\"Eogonek\"] = 667;\n    t[\"dcroat\"] = 556;\n    t[\"threequarters\"] = 834;\n    t[\"Scedilla\"] = 667;\n    t[\"lcaron\"] = 299;\n    t[\"Kcommaaccent\"] = 667;\n    t[\"Lacute\"] = 556;\n    t[\"trademark\"] = 1000;\n    t[\"edotaccent\"] = 556;\n    t[\"Igrave\"] = 278;\n    t[\"Imacron\"] = 278;\n    t[\"Lcaron\"] = 556;\n    t[\"onehalf\"] = 834;\n    t[\"lessequal\"] = 549;\n    t[\"ocircumflex\"] = 556;\n    t[\"ntilde\"] = 556;\n    t[\"Uhungarumlaut\"] = 722;\n    t[\"Eacute\"] = 667;\n    t[\"emacron\"] = 556;\n    t[\"gbreve\"] = 556;\n    t[\"onequarter\"] = 834;\n    t[\"Scaron\"] = 667;\n    t[\"Scommaaccent\"] = 667;\n    t[\"Ohungarumlaut\"] = 778;\n    t[\"degree\"] = 400;\n    t[\"ograve\"] = 556;\n    t[\"Ccaron\"] = 722;\n    t[\"ugrave\"] = 556;\n    t[\"radical\"] = 453;\n    t[\"Dcaron\"] = 722;\n    t[\"rcommaaccent\"] = 333;\n    t[\"Ntilde\"] = 722;\n    t[\"otilde\"] = 556;\n    t[\"Rcommaaccent\"] = 722;\n    t[\"Lcommaaccent\"] = 556;\n    t[\"Atilde\"] = 667;\n    t[\"Aogonek\"] = 667;\n    t[\"Aring\"] = 667;\n    t[\"Otilde\"] = 778;\n    t[\"zdotaccent\"] = 500;\n    t[\"Ecaron\"] = 667;\n    t[\"Iogonek\"] = 278;\n    t[\"kcommaaccent\"] = 500;\n    t[\"minus\"] = 584;\n    t[\"Icircumflex\"] = 278;\n    t[\"ncaron\"] = 556;\n    t[\"tcommaaccent\"] = 278;\n    t[\"logicalnot\"] = 584;\n    t[\"odieresis\"] = 556;\n    t[\"udieresis\"] = 556;\n    t[\"notequal\"] = 549;\n    t[\"gcommaaccent\"] = 556;\n    t[\"eth\"] = 556;\n    t[\"zcaron\"] = 500;\n    t[\"ncommaaccent\"] = 556;\n    t[\"onesuperior\"] = 333;\n    t[\"imacron\"] = 278;\n    t[\"Euro\"] = 556;\n  });\n  t[\"Helvetica-Bold\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t[\"space\"] = 278;\n    t[\"exclam\"] = 333;\n    t[\"quotedbl\"] = 474;\n    t[\"numbersign\"] = 556;\n    t[\"dollar\"] = 556;\n    t[\"percent\"] = 889;\n    t[\"ampersand\"] = 722;\n    t[\"quoteright\"] = 278;\n    t[\"parenleft\"] = 333;\n    t[\"parenright\"] = 333;\n    t[\"asterisk\"] = 389;\n    t[\"plus\"] = 584;\n    t[\"comma\"] = 278;\n    t[\"hyphen\"] = 333;\n    t[\"period\"] = 278;\n    t[\"slash\"] = 278;\n    t[\"zero\"] = 556;\n    t[\"one\"] = 556;\n    t[\"two\"] = 556;\n    t[\"three\"] = 556;\n    t[\"four\"] = 556;\n    t[\"five\"] = 556;\n    t[\"six\"] = 556;\n    t[\"seven\"] = 556;\n    t[\"eight\"] = 556;\n    t[\"nine\"] = 556;\n    t[\"colon\"] = 333;\n    t[\"semicolon\"] = 333;\n    t[\"less\"] = 584;\n    t[\"equal\"] = 584;\n    t[\"greater\"] = 584;\n    t[\"question\"] = 611;\n    t[\"at\"] = 975;\n    t[\"A\"] = 722;\n    t[\"B\"] = 722;\n    t[\"C\"] = 722;\n    t[\"D\"] = 722;\n    t[\"E\"] = 667;\n    t[\"F\"] = 611;\n    t[\"G\"] = 778;\n    t[\"H\"] = 722;\n    t[\"I\"] = 278;\n    t[\"J\"] = 556;\n    t[\"K\"] = 722;\n    t[\"L\"] = 611;\n    t[\"M\"] = 833;\n    t[\"N\"] = 722;\n    t[\"O\"] = 778;\n    t[\"P\"] = 667;\n    t[\"Q\"] = 778;\n    t[\"R\"] = 722;\n    t[\"S\"] = 667;\n    t[\"T\"] = 611;\n    t[\"U\"] = 722;\n    t[\"V\"] = 667;\n    t[\"W\"] = 944;\n    t[\"X\"] = 667;\n    t[\"Y\"] = 667;\n    t[\"Z\"] = 611;\n    t[\"bracketleft\"] = 333;\n    t[\"backslash\"] = 278;\n    t[\"bracketright\"] = 333;\n    t[\"asciicircum\"] = 584;\n    t[\"underscore\"] = 556;\n    t[\"quoteleft\"] = 278;\n    t[\"a\"] = 556;\n    t[\"b\"] = 611;\n    t[\"c\"] = 556;\n    t[\"d\"] = 611;\n    t[\"e\"] = 556;\n    t[\"f\"] = 333;\n    t[\"g\"] = 611;\n    t[\"h\"] = 611;\n    t[\"i\"] = 278;\n    t[\"j\"] = 278;\n    t[\"k\"] = 556;\n    t[\"l\"] = 278;\n    t[\"m\"] = 889;\n    t[\"n\"] = 611;\n    t[\"o\"] = 611;\n    t[\"p\"] = 611;\n    t[\"q\"] = 611;\n    t[\"r\"] = 389;\n    t[\"s\"] = 556;\n    t[\"t\"] = 333;\n    t[\"u\"] = 611;\n    t[\"v\"] = 556;\n    t[\"w\"] = 778;\n    t[\"x\"] = 556;\n    t[\"y\"] = 556;\n    t[\"z\"] = 500;\n    t[\"braceleft\"] = 389;\n    t[\"bar\"] = 280;\n    t[\"braceright\"] = 389;\n    t[\"asciitilde\"] = 584;\n    t[\"exclamdown\"] = 333;\n    t[\"cent\"] = 556;\n    t[\"sterling\"] = 556;\n    t[\"fraction\"] = 167;\n    t[\"yen\"] = 556;\n    t[\"florin\"] = 556;\n    t[\"section\"] = 556;\n    t[\"currency\"] = 556;\n    t[\"quotesingle\"] = 238;\n    t[\"quotedblleft\"] = 500;\n    t[\"guillemotleft\"] = 556;\n    t[\"guilsinglleft\"] = 333;\n    t[\"guilsinglright\"] = 333;\n    t[\"fi\"] = 611;\n    t[\"fl\"] = 611;\n    t[\"endash\"] = 556;\n    t[\"dagger\"] = 556;\n    t[\"daggerdbl\"] = 556;\n    t[\"periodcentered\"] = 278;\n    t[\"paragraph\"] = 556;\n    t[\"bullet\"] = 350;\n    t[\"quotesinglbase\"] = 278;\n    t[\"quotedblbase\"] = 500;\n    t[\"quotedblright\"] = 500;\n    t[\"guillemotright\"] = 556;\n    t[\"ellipsis\"] = 1000;\n    t[\"perthousand\"] = 1000;\n    t[\"questiondown\"] = 611;\n    t[\"grave\"] = 333;\n    t[\"acute\"] = 333;\n    t[\"circumflex\"] = 333;\n    t[\"tilde\"] = 333;\n    t[\"macron\"] = 333;\n    t[\"breve\"] = 333;\n    t[\"dotaccent\"] = 333;\n    t[\"dieresis\"] = 333;\n    t[\"ring\"] = 333;\n    t[\"cedilla\"] = 333;\n    t[\"hungarumlaut\"] = 333;\n    t[\"ogonek\"] = 333;\n    t[\"caron\"] = 333;\n    t[\"emdash\"] = 1000;\n    t[\"AE\"] = 1000;\n    t[\"ordfeminine\"] = 370;\n    t[\"Lslash\"] = 611;\n    t[\"Oslash\"] = 778;\n    t[\"OE\"] = 1000;\n    t[\"ordmasculine\"] = 365;\n    t[\"ae\"] = 889;\n    t[\"dotlessi\"] = 278;\n    t[\"lslash\"] = 278;\n    t[\"oslash\"] = 611;\n    t[\"oe\"] = 944;\n    t[\"germandbls\"] = 611;\n    t[\"Idieresis\"] = 278;\n    t[\"eacute\"] = 556;\n    t[\"abreve\"] = 556;\n    t[\"uhungarumlaut\"] = 611;\n    t[\"ecaron\"] = 556;\n    t[\"Ydieresis\"] = 667;\n    t[\"divide\"] = 584;\n    t[\"Yacute\"] = 667;\n    t[\"Acircumflex\"] = 722;\n    t[\"aacute\"] = 556;\n    t[\"Ucircumflex\"] = 722;\n    t[\"yacute\"] = 556;\n    t[\"scommaaccent\"] = 556;\n    t[\"ecircumflex\"] = 556;\n    t[\"Uring\"] = 722;\n    t[\"Udieresis\"] = 722;\n    t[\"aogonek\"] = 556;\n    t[\"Uacute\"] = 722;\n    t[\"uogonek\"] = 611;\n    t[\"Edieresis\"] = 667;\n    t[\"Dcroat\"] = 722;\n    t[\"commaaccent\"] = 250;\n    t[\"copyright\"] = 737;\n    t[\"Emacron\"] = 667;\n    t[\"ccaron\"] = 556;\n    t[\"aring\"] = 556;\n    t[\"Ncommaaccent\"] = 722;\n    t[\"lacute\"] = 278;\n    t[\"agrave\"] = 556;\n    t[\"Tcommaaccent\"] = 611;\n    t[\"Cacute\"] = 722;\n    t[\"atilde\"] = 556;\n    t[\"Edotaccent\"] = 667;\n    t[\"scaron\"] = 556;\n    t[\"scedilla\"] = 556;\n    t[\"iacute\"] = 278;\n    t[\"lozenge\"] = 494;\n    t[\"Rcaron\"] = 722;\n    t[\"Gcommaaccent\"] = 778;\n    t[\"ucircumflex\"] = 611;\n    t[\"acircumflex\"] = 556;\n    t[\"Amacron\"] = 722;\n    t[\"rcaron\"] = 389;\n    t[\"ccedilla\"] = 556;\n    t[\"Zdotaccent\"] = 611;\n    t[\"Thorn\"] = 667;\n    t[\"Omacron\"] = 778;\n    t[\"Racute\"] = 722;\n    t[\"Sacute\"] = 667;\n    t[\"dcaron\"] = 743;\n    t[\"Umacron\"] = 722;\n    t[\"uring\"] = 611;\n    t[\"threesuperior\"] = 333;\n    t[\"Ograve\"] = 778;\n    t[\"Agrave\"] = 722;\n    t[\"Abreve\"] = 722;\n    t[\"multiply\"] = 584;\n    t[\"uacute\"] = 611;\n    t[\"Tcaron\"] = 611;\n    t[\"partialdiff\"] = 494;\n    t[\"ydieresis\"] = 556;\n    t[\"Nacute\"] = 722;\n    t[\"icircumflex\"] = 278;\n    t[\"Ecircumflex\"] = 667;\n    t[\"adieresis\"] = 556;\n    t[\"edieresis\"] = 556;\n    t[\"cacute\"] = 556;\n    t[\"nacute\"] = 611;\n    t[\"umacron\"] = 611;\n    t[\"Ncaron\"] = 722;\n    t[\"Iacute\"] = 278;\n    t[\"plusminus\"] = 584;\n    t[\"brokenbar\"] = 280;\n    t[\"registered\"] = 737;\n    t[\"Gbreve\"] = 778;\n    t[\"Idotaccent\"] = 278;\n    t[\"summation\"] = 600;\n    t[\"Egrave\"] = 667;\n    t[\"racute\"] = 389;\n    t[\"omacron\"] = 611;\n    t[\"Zacute\"] = 611;\n    t[\"Zcaron\"] = 611;\n    t[\"greaterequal\"] = 549;\n    t[\"Eth\"] = 722;\n    t[\"Ccedilla\"] = 722;\n    t[\"lcommaaccent\"] = 278;\n    t[\"tcaron\"] = 389;\n    t[\"eogonek\"] = 556;\n    t[\"Uogonek\"] = 722;\n    t[\"Aacute\"] = 722;\n    t[\"Adieresis\"] = 722;\n    t[\"egrave\"] = 556;\n    t[\"zacute\"] = 500;\n    t[\"iogonek\"] = 278;\n    t[\"Oacute\"] = 778;\n    t[\"oacute\"] = 611;\n    t[\"amacron\"] = 556;\n    t[\"sacute\"] = 556;\n    t[\"idieresis\"] = 278;\n    t[\"Ocircumflex\"] = 778;\n    t[\"Ugrave\"] = 722;\n    t[\"Delta\"] = 612;\n    t[\"thorn\"] = 611;\n    t[\"twosuperior\"] = 333;\n    t[\"Odieresis\"] = 778;\n    t[\"mu\"] = 611;\n    t[\"igrave\"] = 278;\n    t[\"ohungarumlaut\"] = 611;\n    t[\"Eogonek\"] = 667;\n    t[\"dcroat\"] = 611;\n    t[\"threequarters\"] = 834;\n    t[\"Scedilla\"] = 667;\n    t[\"lcaron\"] = 400;\n    t[\"Kcommaaccent\"] = 722;\n    t[\"Lacute\"] = 611;\n    t[\"trademark\"] = 1000;\n    t[\"edotaccent\"] = 556;\n    t[\"Igrave\"] = 278;\n    t[\"Imacron\"] = 278;\n    t[\"Lcaron\"] = 611;\n    t[\"onehalf\"] = 834;\n    t[\"lessequal\"] = 549;\n    t[\"ocircumflex\"] = 611;\n    t[\"ntilde\"] = 611;\n    t[\"Uhungarumlaut\"] = 722;\n    t[\"Eacute\"] = 667;\n    t[\"emacron\"] = 556;\n    t[\"gbreve\"] = 611;\n    t[\"onequarter\"] = 834;\n    t[\"Scaron\"] = 667;\n    t[\"Scommaaccent\"] = 667;\n    t[\"Ohungarumlaut\"] = 778;\n    t[\"degree\"] = 400;\n    t[\"ograve\"] = 611;\n    t[\"Ccaron\"] = 722;\n    t[\"ugrave\"] = 611;\n    t[\"radical\"] = 549;\n    t[\"Dcaron\"] = 722;\n    t[\"rcommaaccent\"] = 389;\n    t[\"Ntilde\"] = 722;\n    t[\"otilde\"] = 611;\n    t[\"Rcommaaccent\"] = 722;\n    t[\"Lcommaaccent\"] = 611;\n    t[\"Atilde\"] = 722;\n    t[\"Aogonek\"] = 722;\n    t[\"Aring\"] = 722;\n    t[\"Otilde\"] = 778;\n    t[\"zdotaccent\"] = 500;\n    t[\"Ecaron\"] = 667;\n    t[\"Iogonek\"] = 278;\n    t[\"kcommaaccent\"] = 556;\n    t[\"minus\"] = 584;\n    t[\"Icircumflex\"] = 278;\n    t[\"ncaron\"] = 611;\n    t[\"tcommaaccent\"] = 333;\n    t[\"logicalnot\"] = 584;\n    t[\"odieresis\"] = 611;\n    t[\"udieresis\"] = 611;\n    t[\"notequal\"] = 549;\n    t[\"gcommaaccent\"] = 611;\n    t[\"eth\"] = 611;\n    t[\"zcaron\"] = 500;\n    t[\"ncommaaccent\"] = 611;\n    t[\"onesuperior\"] = 333;\n    t[\"imacron\"] = 278;\n    t[\"Euro\"] = 556;\n  });\n  t[\"Helvetica-BoldOblique\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t[\"space\"] = 278;\n    t[\"exclam\"] = 333;\n    t[\"quotedbl\"] = 474;\n    t[\"numbersign\"] = 556;\n    t[\"dollar\"] = 556;\n    t[\"percent\"] = 889;\n    t[\"ampersand\"] = 722;\n    t[\"quoteright\"] = 278;\n    t[\"parenleft\"] = 333;\n    t[\"parenright\"] = 333;\n    t[\"asterisk\"] = 389;\n    t[\"plus\"] = 584;\n    t[\"comma\"] = 278;\n    t[\"hyphen\"] = 333;\n    t[\"period\"] = 278;\n    t[\"slash\"] = 278;\n    t[\"zero\"] = 556;\n    t[\"one\"] = 556;\n    t[\"two\"] = 556;\n    t[\"three\"] = 556;\n    t[\"four\"] = 556;\n    t[\"five\"] = 556;\n    t[\"six\"] = 556;\n    t[\"seven\"] = 556;\n    t[\"eight\"] = 556;\n    t[\"nine\"] = 556;\n    t[\"colon\"] = 333;\n    t[\"semicolon\"] = 333;\n    t[\"less\"] = 584;\n    t[\"equal\"] = 584;\n    t[\"greater\"] = 584;\n    t[\"question\"] = 611;\n    t[\"at\"] = 975;\n    t[\"A\"] = 722;\n    t[\"B\"] = 722;\n    t[\"C\"] = 722;\n    t[\"D\"] = 722;\n    t[\"E\"] = 667;\n    t[\"F\"] = 611;\n    t[\"G\"] = 778;\n    t[\"H\"] = 722;\n    t[\"I\"] = 278;\n    t[\"J\"] = 556;\n    t[\"K\"] = 722;\n    t[\"L\"] = 611;\n    t[\"M\"] = 833;\n    t[\"N\"] = 722;\n    t[\"O\"] = 778;\n    t[\"P\"] = 667;\n    t[\"Q\"] = 778;\n    t[\"R\"] = 722;\n    t[\"S\"] = 667;\n    t[\"T\"] = 611;\n    t[\"U\"] = 722;\n    t[\"V\"] = 667;\n    t[\"W\"] = 944;\n    t[\"X\"] = 667;\n    t[\"Y\"] = 667;\n    t[\"Z\"] = 611;\n    t[\"bracketleft\"] = 333;\n    t[\"backslash\"] = 278;\n    t[\"bracketright\"] = 333;\n    t[\"asciicircum\"] = 584;\n    t[\"underscore\"] = 556;\n    t[\"quoteleft\"] = 278;\n    t[\"a\"] = 556;\n    t[\"b\"] = 611;\n    t[\"c\"] = 556;\n    t[\"d\"] = 611;\n    t[\"e\"] = 556;\n    t[\"f\"] = 333;\n    t[\"g\"] = 611;\n    t[\"h\"] = 611;\n    t[\"i\"] = 278;\n    t[\"j\"] = 278;\n    t[\"k\"] = 556;\n    t[\"l\"] = 278;\n    t[\"m\"] = 889;\n    t[\"n\"] = 611;\n    t[\"o\"] = 611;\n    t[\"p\"] = 611;\n    t[\"q\"] = 611;\n    t[\"r\"] = 389;\n    t[\"s\"] = 556;\n    t[\"t\"] = 333;\n    t[\"u\"] = 611;\n    t[\"v\"] = 556;\n    t[\"w\"] = 778;\n    t[\"x\"] = 556;\n    t[\"y\"] = 556;\n    t[\"z\"] = 500;\n    t[\"braceleft\"] = 389;\n    t[\"bar\"] = 280;\n    t[\"braceright\"] = 389;\n    t[\"asciitilde\"] = 584;\n    t[\"exclamdown\"] = 333;\n    t[\"cent\"] = 556;\n    t[\"sterling\"] = 556;\n    t[\"fraction\"] = 167;\n    t[\"yen\"] = 556;\n    t[\"florin\"] = 556;\n    t[\"section\"] = 556;\n    t[\"currency\"] = 556;\n    t[\"quotesingle\"] = 238;\n    t[\"quotedblleft\"] = 500;\n    t[\"guillemotleft\"] = 556;\n    t[\"guilsinglleft\"] = 333;\n    t[\"guilsinglright\"] = 333;\n    t[\"fi\"] = 611;\n    t[\"fl\"] = 611;\n    t[\"endash\"] = 556;\n    t[\"dagger\"] = 556;\n    t[\"daggerdbl\"] = 556;\n    t[\"periodcentered\"] = 278;\n    t[\"paragraph\"] = 556;\n    t[\"bullet\"] = 350;\n    t[\"quotesinglbase\"] = 278;\n    t[\"quotedblbase\"] = 500;\n    t[\"quotedblright\"] = 500;\n    t[\"guillemotright\"] = 556;\n    t[\"ellipsis\"] = 1000;\n    t[\"perthousand\"] = 1000;\n    t[\"questiondown\"] = 611;\n    t[\"grave\"] = 333;\n    t[\"acute\"] = 333;\n    t[\"circumflex\"] = 333;\n    t[\"tilde\"] = 333;\n    t[\"macron\"] = 333;\n    t[\"breve\"] = 333;\n    t[\"dotaccent\"] = 333;\n    t[\"dieresis\"] = 333;\n    t[\"ring\"] = 333;\n    t[\"cedilla\"] = 333;\n    t[\"hungarumlaut\"] = 333;\n    t[\"ogonek\"] = 333;\n    t[\"caron\"] = 333;\n    t[\"emdash\"] = 1000;\n    t[\"AE\"] = 1000;\n    t[\"ordfeminine\"] = 370;\n    t[\"Lslash\"] = 611;\n    t[\"Oslash\"] = 778;\n    t[\"OE\"] = 1000;\n    t[\"ordmasculine\"] = 365;\n    t[\"ae\"] = 889;\n    t[\"dotlessi\"] = 278;\n    t[\"lslash\"] = 278;\n    t[\"oslash\"] = 611;\n    t[\"oe\"] = 944;\n    t[\"germandbls\"] = 611;\n    t[\"Idieresis\"] = 278;\n    t[\"eacute\"] = 556;\n    t[\"abreve\"] = 556;\n    t[\"uhungarumlaut\"] = 611;\n    t[\"ecaron\"] = 556;\n    t[\"Ydieresis\"] = 667;\n    t[\"divide\"] = 584;\n    t[\"Yacute\"] = 667;\n    t[\"Acircumflex\"] = 722;\n    t[\"aacute\"] = 556;\n    t[\"Ucircumflex\"] = 722;\n    t[\"yacute\"] = 556;\n    t[\"scommaaccent\"] = 556;\n    t[\"ecircumflex\"] = 556;\n    t[\"Uring\"] = 722;\n    t[\"Udieresis\"] = 722;\n    t[\"aogonek\"] = 556;\n    t[\"Uacute\"] = 722;\n    t[\"uogonek\"] = 611;\n    t[\"Edieresis\"] = 667;\n    t[\"Dcroat\"] = 722;\n    t[\"commaaccent\"] = 250;\n    t[\"copyright\"] = 737;\n    t[\"Emacron\"] = 667;\n    t[\"ccaron\"] = 556;\n    t[\"aring\"] = 556;\n    t[\"Ncommaaccent\"] = 722;\n    t[\"lacute\"] = 278;\n    t[\"agrave\"] = 556;\n    t[\"Tcommaaccent\"] = 611;\n    t[\"Cacute\"] = 722;\n    t[\"atilde\"] = 556;\n    t[\"Edotaccent\"] = 667;\n    t[\"scaron\"] = 556;\n    t[\"scedilla\"] = 556;\n    t[\"iacute\"] = 278;\n    t[\"lozenge\"] = 494;\n    t[\"Rcaron\"] = 722;\n    t[\"Gcommaaccent\"] = 778;\n    t[\"ucircumflex\"] = 611;\n    t[\"acircumflex\"] = 556;\n    t[\"Amacron\"] = 722;\n    t[\"rcaron\"] = 389;\n    t[\"ccedilla\"] = 556;\n    t[\"Zdotaccent\"] = 611;\n    t[\"Thorn\"] = 667;\n    t[\"Omacron\"] = 778;\n    t[\"Racute\"] = 722;\n    t[\"Sacute\"] = 667;\n    t[\"dcaron\"] = 743;\n    t[\"Umacron\"] = 722;\n    t[\"uring\"] = 611;\n    t[\"threesuperior\"] = 333;\n    t[\"Ograve\"] = 778;\n    t[\"Agrave\"] = 722;\n    t[\"Abreve\"] = 722;\n    t[\"multiply\"] = 584;\n    t[\"uacute\"] = 611;\n    t[\"Tcaron\"] = 611;\n    t[\"partialdiff\"] = 494;\n    t[\"ydieresis\"] = 556;\n    t[\"Nacute\"] = 722;\n    t[\"icircumflex\"] = 278;\n    t[\"Ecircumflex\"] = 667;\n    t[\"adieresis\"] = 556;\n    t[\"edieresis\"] = 556;\n    t[\"cacute\"] = 556;\n    t[\"nacute\"] = 611;\n    t[\"umacron\"] = 611;\n    t[\"Ncaron\"] = 722;\n    t[\"Iacute\"] = 278;\n    t[\"plusminus\"] = 584;\n    t[\"brokenbar\"] = 280;\n    t[\"registered\"] = 737;\n    t[\"Gbreve\"] = 778;\n    t[\"Idotaccent\"] = 278;\n    t[\"summation\"] = 600;\n    t[\"Egrave\"] = 667;\n    t[\"racute\"] = 389;\n    t[\"omacron\"] = 611;\n    t[\"Zacute\"] = 611;\n    t[\"Zcaron\"] = 611;\n    t[\"greaterequal\"] = 549;\n    t[\"Eth\"] = 722;\n    t[\"Ccedilla\"] = 722;\n    t[\"lcommaaccent\"] = 278;\n    t[\"tcaron\"] = 389;\n    t[\"eogonek\"] = 556;\n    t[\"Uogonek\"] = 722;\n    t[\"Aacute\"] = 722;\n    t[\"Adieresis\"] = 722;\n    t[\"egrave\"] = 556;\n    t[\"zacute\"] = 500;\n    t[\"iogonek\"] = 278;\n    t[\"Oacute\"] = 778;\n    t[\"oacute\"] = 611;\n    t[\"amacron\"] = 556;\n    t[\"sacute\"] = 556;\n    t[\"idieresis\"] = 278;\n    t[\"Ocircumflex\"] = 778;\n    t[\"Ugrave\"] = 722;\n    t[\"Delta\"] = 612;\n    t[\"thorn\"] = 611;\n    t[\"twosuperior\"] = 333;\n    t[\"Odieresis\"] = 778;\n    t[\"mu\"] = 611;\n    t[\"igrave\"] = 278;\n    t[\"ohungarumlaut\"] = 611;\n    t[\"Eogonek\"] = 667;\n    t[\"dcroat\"] = 611;\n    t[\"threequarters\"] = 834;\n    t[\"Scedilla\"] = 667;\n    t[\"lcaron\"] = 400;\n    t[\"Kcommaaccent\"] = 722;\n    t[\"Lacute\"] = 611;\n    t[\"trademark\"] = 1000;\n    t[\"edotaccent\"] = 556;\n    t[\"Igrave\"] = 278;\n    t[\"Imacron\"] = 278;\n    t[\"Lcaron\"] = 611;\n    t[\"onehalf\"] = 834;\n    t[\"lessequal\"] = 549;\n    t[\"ocircumflex\"] = 611;\n    t[\"ntilde\"] = 611;\n    t[\"Uhungarumlaut\"] = 722;\n    t[\"Eacute\"] = 667;\n    t[\"emacron\"] = 556;\n    t[\"gbreve\"] = 611;\n    t[\"onequarter\"] = 834;\n    t[\"Scaron\"] = 667;\n    t[\"Scommaaccent\"] = 667;\n    t[\"Ohungarumlaut\"] = 778;\n    t[\"degree\"] = 400;\n    t[\"ograve\"] = 611;\n    t[\"Ccaron\"] = 722;\n    t[\"ugrave\"] = 611;\n    t[\"radical\"] = 549;\n    t[\"Dcaron\"] = 722;\n    t[\"rcommaaccent\"] = 389;\n    t[\"Ntilde\"] = 722;\n    t[\"otilde\"] = 611;\n    t[\"Rcommaaccent\"] = 722;\n    t[\"Lcommaaccent\"] = 611;\n    t[\"Atilde\"] = 722;\n    t[\"Aogonek\"] = 722;\n    t[\"Aring\"] = 722;\n    t[\"Otilde\"] = 778;\n    t[\"zdotaccent\"] = 500;\n    t[\"Ecaron\"] = 667;\n    t[\"Iogonek\"] = 278;\n    t[\"kcommaaccent\"] = 556;\n    t[\"minus\"] = 584;\n    t[\"Icircumflex\"] = 278;\n    t[\"ncaron\"] = 611;\n    t[\"tcommaaccent\"] = 333;\n    t[\"logicalnot\"] = 584;\n    t[\"odieresis\"] = 611;\n    t[\"udieresis\"] = 611;\n    t[\"notequal\"] = 549;\n    t[\"gcommaaccent\"] = 611;\n    t[\"eth\"] = 611;\n    t[\"zcaron\"] = 500;\n    t[\"ncommaaccent\"] = 611;\n    t[\"onesuperior\"] = 333;\n    t[\"imacron\"] = 278;\n    t[\"Euro\"] = 556;\n  });\n  t[\"Helvetica-Oblique\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t[\"space\"] = 278;\n    t[\"exclam\"] = 278;\n    t[\"quotedbl\"] = 355;\n    t[\"numbersign\"] = 556;\n    t[\"dollar\"] = 556;\n    t[\"percent\"] = 889;\n    t[\"ampersand\"] = 667;\n    t[\"quoteright\"] = 222;\n    t[\"parenleft\"] = 333;\n    t[\"parenright\"] = 333;\n    t[\"asterisk\"] = 389;\n    t[\"plus\"] = 584;\n    t[\"comma\"] = 278;\n    t[\"hyphen\"] = 333;\n    t[\"period\"] = 278;\n    t[\"slash\"] = 278;\n    t[\"zero\"] = 556;\n    t[\"one\"] = 556;\n    t[\"two\"] = 556;\n    t[\"three\"] = 556;\n    t[\"four\"] = 556;\n    t[\"five\"] = 556;\n    t[\"six\"] = 556;\n    t[\"seven\"] = 556;\n    t[\"eight\"] = 556;\n    t[\"nine\"] = 556;\n    t[\"colon\"] = 278;\n    t[\"semicolon\"] = 278;\n    t[\"less\"] = 584;\n    t[\"equal\"] = 584;\n    t[\"greater\"] = 584;\n    t[\"question\"] = 556;\n    t[\"at\"] = 1015;\n    t[\"A\"] = 667;\n    t[\"B\"] = 667;\n    t[\"C\"] = 722;\n    t[\"D\"] = 722;\n    t[\"E\"] = 667;\n    t[\"F\"] = 611;\n    t[\"G\"] = 778;\n    t[\"H\"] = 722;\n    t[\"I\"] = 278;\n    t[\"J\"] = 500;\n    t[\"K\"] = 667;\n    t[\"L\"] = 556;\n    t[\"M\"] = 833;\n    t[\"N\"] = 722;\n    t[\"O\"] = 778;\n    t[\"P\"] = 667;\n    t[\"Q\"] = 778;\n    t[\"R\"] = 722;\n    t[\"S\"] = 667;\n    t[\"T\"] = 611;\n    t[\"U\"] = 722;\n    t[\"V\"] = 667;\n    t[\"W\"] = 944;\n    t[\"X\"] = 667;\n    t[\"Y\"] = 667;\n    t[\"Z\"] = 611;\n    t[\"bracketleft\"] = 278;\n    t[\"backslash\"] = 278;\n    t[\"bracketright\"] = 278;\n    t[\"asciicircum\"] = 469;\n    t[\"underscore\"] = 556;\n    t[\"quoteleft\"] = 222;\n    t[\"a\"] = 556;\n    t[\"b\"] = 556;\n    t[\"c\"] = 500;\n    t[\"d\"] = 556;\n    t[\"e\"] = 556;\n    t[\"f\"] = 278;\n    t[\"g\"] = 556;\n    t[\"h\"] = 556;\n    t[\"i\"] = 222;\n    t[\"j\"] = 222;\n    t[\"k\"] = 500;\n    t[\"l\"] = 222;\n    t[\"m\"] = 833;\n    t[\"n\"] = 556;\n    t[\"o\"] = 556;\n    t[\"p\"] = 556;\n    t[\"q\"] = 556;\n    t[\"r\"] = 333;\n    t[\"s\"] = 500;\n    t[\"t\"] = 278;\n    t[\"u\"] = 556;\n    t[\"v\"] = 500;\n    t[\"w\"] = 722;\n    t[\"x\"] = 500;\n    t[\"y\"] = 500;\n    t[\"z\"] = 500;\n    t[\"braceleft\"] = 334;\n    t[\"bar\"] = 260;\n    t[\"braceright\"] = 334;\n    t[\"asciitilde\"] = 584;\n    t[\"exclamdown\"] = 333;\n    t[\"cent\"] = 556;\n    t[\"sterling\"] = 556;\n    t[\"fraction\"] = 167;\n    t[\"yen\"] = 556;\n    t[\"florin\"] = 556;\n    t[\"section\"] = 556;\n    t[\"currency\"] = 556;\n    t[\"quotesingle\"] = 191;\n    t[\"quotedblleft\"] = 333;\n    t[\"guillemotleft\"] = 556;\n    t[\"guilsinglleft\"] = 333;\n    t[\"guilsinglright\"] = 333;\n    t[\"fi\"] = 500;\n    t[\"fl\"] = 500;\n    t[\"endash\"] = 556;\n    t[\"dagger\"] = 556;\n    t[\"daggerdbl\"] = 556;\n    t[\"periodcentered\"] = 278;\n    t[\"paragraph\"] = 537;\n    t[\"bullet\"] = 350;\n    t[\"quotesinglbase\"] = 222;\n    t[\"quotedblbase\"] = 333;\n    t[\"quotedblright\"] = 333;\n    t[\"guillemotright\"] = 556;\n    t[\"ellipsis\"] = 1000;\n    t[\"perthousand\"] = 1000;\n    t[\"questiondown\"] = 611;\n    t[\"grave\"] = 333;\n    t[\"acute\"] = 333;\n    t[\"circumflex\"] = 333;\n    t[\"tilde\"] = 333;\n    t[\"macron\"] = 333;\n    t[\"breve\"] = 333;\n    t[\"dotaccent\"] = 333;\n    t[\"dieresis\"] = 333;\n    t[\"ring\"] = 333;\n    t[\"cedilla\"] = 333;\n    t[\"hungarumlaut\"] = 333;\n    t[\"ogonek\"] = 333;\n    t[\"caron\"] = 333;\n    t[\"emdash\"] = 1000;\n    t[\"AE\"] = 1000;\n    t[\"ordfeminine\"] = 370;\n    t[\"Lslash\"] = 556;\n    t[\"Oslash\"] = 778;\n    t[\"OE\"] = 1000;\n    t[\"ordmasculine\"] = 365;\n    t[\"ae\"] = 889;\n    t[\"dotlessi\"] = 278;\n    t[\"lslash\"] = 222;\n    t[\"oslash\"] = 611;\n    t[\"oe\"] = 944;\n    t[\"germandbls\"] = 611;\n    t[\"Idieresis\"] = 278;\n    t[\"eacute\"] = 556;\n    t[\"abreve\"] = 556;\n    t[\"uhungarumlaut\"] = 556;\n    t[\"ecaron\"] = 556;\n    t[\"Ydieresis\"] = 667;\n    t[\"divide\"] = 584;\n    t[\"Yacute\"] = 667;\n    t[\"Acircumflex\"] = 667;\n    t[\"aacute\"] = 556;\n    t[\"Ucircumflex\"] = 722;\n    t[\"yacute\"] = 500;\n    t[\"scommaaccent\"] = 500;\n    t[\"ecircumflex\"] = 556;\n    t[\"Uring\"] = 722;\n    t[\"Udieresis\"] = 722;\n    t[\"aogonek\"] = 556;\n    t[\"Uacute\"] = 722;\n    t[\"uogonek\"] = 556;\n    t[\"Edieresis\"] = 667;\n    t[\"Dcroat\"] = 722;\n    t[\"commaaccent\"] = 250;\n    t[\"copyright\"] = 737;\n    t[\"Emacron\"] = 667;\n    t[\"ccaron\"] = 500;\n    t[\"aring\"] = 556;\n    t[\"Ncommaaccent\"] = 722;\n    t[\"lacute\"] = 222;\n    t[\"agrave\"] = 556;\n    t[\"Tcommaaccent\"] = 611;\n    t[\"Cacute\"] = 722;\n    t[\"atilde\"] = 556;\n    t[\"Edotaccent\"] = 667;\n    t[\"scaron\"] = 500;\n    t[\"scedilla\"] = 500;\n    t[\"iacute\"] = 278;\n    t[\"lozenge\"] = 471;\n    t[\"Rcaron\"] = 722;\n    t[\"Gcommaaccent\"] = 778;\n    t[\"ucircumflex\"] = 556;\n    t[\"acircumflex\"] = 556;\n    t[\"Amacron\"] = 667;\n    t[\"rcaron\"] = 333;\n    t[\"ccedilla\"] = 500;\n    t[\"Zdotaccent\"] = 611;\n    t[\"Thorn\"] = 667;\n    t[\"Omacron\"] = 778;\n    t[\"Racute\"] = 722;\n    t[\"Sacute\"] = 667;\n    t[\"dcaron\"] = 643;\n    t[\"Umacron\"] = 722;\n    t[\"uring\"] = 556;\n    t[\"threesuperior\"] = 333;\n    t[\"Ograve\"] = 778;\n    t[\"Agrave\"] = 667;\n    t[\"Abreve\"] = 667;\n    t[\"multiply\"] = 584;\n    t[\"uacute\"] = 556;\n    t[\"Tcaron\"] = 611;\n    t[\"partialdiff\"] = 476;\n    t[\"ydieresis\"] = 500;\n    t[\"Nacute\"] = 722;\n    t[\"icircumflex\"] = 278;\n    t[\"Ecircumflex\"] = 667;\n    t[\"adieresis\"] = 556;\n    t[\"edieresis\"] = 556;\n    t[\"cacute\"] = 500;\n    t[\"nacute\"] = 556;\n    t[\"umacron\"] = 556;\n    t[\"Ncaron\"] = 722;\n    t[\"Iacute\"] = 278;\n    t[\"plusminus\"] = 584;\n    t[\"brokenbar\"] = 260;\n    t[\"registered\"] = 737;\n    t[\"Gbreve\"] = 778;\n    t[\"Idotaccent\"] = 278;\n    t[\"summation\"] = 600;\n    t[\"Egrave\"] = 667;\n    t[\"racute\"] = 333;\n    t[\"omacron\"] = 556;\n    t[\"Zacute\"] = 611;\n    t[\"Zcaron\"] = 611;\n    t[\"greaterequal\"] = 549;\n    t[\"Eth\"] = 722;\n    t[\"Ccedilla\"] = 722;\n    t[\"lcommaaccent\"] = 222;\n    t[\"tcaron\"] = 317;\n    t[\"eogonek\"] = 556;\n    t[\"Uogonek\"] = 722;\n    t[\"Aacute\"] = 667;\n    t[\"Adieresis\"] = 667;\n    t[\"egrave\"] = 556;\n    t[\"zacute\"] = 500;\n    t[\"iogonek\"] = 222;\n    t[\"Oacute\"] = 778;\n    t[\"oacute\"] = 556;\n    t[\"amacron\"] = 556;\n    t[\"sacute\"] = 500;\n    t[\"idieresis\"] = 278;\n    t[\"Ocircumflex\"] = 778;\n    t[\"Ugrave\"] = 722;\n    t[\"Delta\"] = 612;\n    t[\"thorn\"] = 556;\n    t[\"twosuperior\"] = 333;\n    t[\"Odieresis\"] = 778;\n    t[\"mu\"] = 556;\n    t[\"igrave\"] = 278;\n    t[\"ohungarumlaut\"] = 556;\n    t[\"Eogonek\"] = 667;\n    t[\"dcroat\"] = 556;\n    t[\"threequarters\"] = 834;\n    t[\"Scedilla\"] = 667;\n    t[\"lcaron\"] = 299;\n    t[\"Kcommaaccent\"] = 667;\n    t[\"Lacute\"] = 556;\n    t[\"trademark\"] = 1000;\n    t[\"edotaccent\"] = 556;\n    t[\"Igrave\"] = 278;\n    t[\"Imacron\"] = 278;\n    t[\"Lcaron\"] = 556;\n    t[\"onehalf\"] = 834;\n    t[\"lessequal\"] = 549;\n    t[\"ocircumflex\"] = 556;\n    t[\"ntilde\"] = 556;\n    t[\"Uhungarumlaut\"] = 722;\n    t[\"Eacute\"] = 667;\n    t[\"emacron\"] = 556;\n    t[\"gbreve\"] = 556;\n    t[\"onequarter\"] = 834;\n    t[\"Scaron\"] = 667;\n    t[\"Scommaaccent\"] = 667;\n    t[\"Ohungarumlaut\"] = 778;\n    t[\"degree\"] = 400;\n    t[\"ograve\"] = 556;\n    t[\"Ccaron\"] = 722;\n    t[\"ugrave\"] = 556;\n    t[\"radical\"] = 453;\n    t[\"Dcaron\"] = 722;\n    t[\"rcommaaccent\"] = 333;\n    t[\"Ntilde\"] = 722;\n    t[\"otilde\"] = 556;\n    t[\"Rcommaaccent\"] = 722;\n    t[\"Lcommaaccent\"] = 556;\n    t[\"Atilde\"] = 667;\n    t[\"Aogonek\"] = 667;\n    t[\"Aring\"] = 667;\n    t[\"Otilde\"] = 778;\n    t[\"zdotaccent\"] = 500;\n    t[\"Ecaron\"] = 667;\n    t[\"Iogonek\"] = 278;\n    t[\"kcommaaccent\"] = 500;\n    t[\"minus\"] = 584;\n    t[\"Icircumflex\"] = 278;\n    t[\"ncaron\"] = 556;\n    t[\"tcommaaccent\"] = 278;\n    t[\"logicalnot\"] = 584;\n    t[\"odieresis\"] = 556;\n    t[\"udieresis\"] = 556;\n    t[\"notequal\"] = 549;\n    t[\"gcommaaccent\"] = 556;\n    t[\"eth\"] = 556;\n    t[\"zcaron\"] = 500;\n    t[\"ncommaaccent\"] = 556;\n    t[\"onesuperior\"] = 333;\n    t[\"imacron\"] = 278;\n    t[\"Euro\"] = 556;\n  });\n  t[\"Symbol\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t[\"space\"] = 250;\n    t[\"exclam\"] = 333;\n    t[\"universal\"] = 713;\n    t[\"numbersign\"] = 500;\n    t[\"existential\"] = 549;\n    t[\"percent\"] = 833;\n    t[\"ampersand\"] = 778;\n    t[\"suchthat\"] = 439;\n    t[\"parenleft\"] = 333;\n    t[\"parenright\"] = 333;\n    t[\"asteriskmath\"] = 500;\n    t[\"plus\"] = 549;\n    t[\"comma\"] = 250;\n    t[\"minus\"] = 549;\n    t[\"period\"] = 250;\n    t[\"slash\"] = 278;\n    t[\"zero\"] = 500;\n    t[\"one\"] = 500;\n    t[\"two\"] = 500;\n    t[\"three\"] = 500;\n    t[\"four\"] = 500;\n    t[\"five\"] = 500;\n    t[\"six\"] = 500;\n    t[\"seven\"] = 500;\n    t[\"eight\"] = 500;\n    t[\"nine\"] = 500;\n    t[\"colon\"] = 278;\n    t[\"semicolon\"] = 278;\n    t[\"less\"] = 549;\n    t[\"equal\"] = 549;\n    t[\"greater\"] = 549;\n    t[\"question\"] = 444;\n    t[\"congruent\"] = 549;\n    t[\"Alpha\"] = 722;\n    t[\"Beta\"] = 667;\n    t[\"Chi\"] = 722;\n    t[\"Delta\"] = 612;\n    t[\"Epsilon\"] = 611;\n    t[\"Phi\"] = 763;\n    t[\"Gamma\"] = 603;\n    t[\"Eta\"] = 722;\n    t[\"Iota\"] = 333;\n    t[\"theta1\"] = 631;\n    t[\"Kappa\"] = 722;\n    t[\"Lambda\"] = 686;\n    t[\"Mu\"] = 889;\n    t[\"Nu\"] = 722;\n    t[\"Omicron\"] = 722;\n    t[\"Pi\"] = 768;\n    t[\"Theta\"] = 741;\n    t[\"Rho\"] = 556;\n    t[\"Sigma\"] = 592;\n    t[\"Tau\"] = 611;\n    t[\"Upsilon\"] = 690;\n    t[\"sigma1\"] = 439;\n    t[\"Omega\"] = 768;\n    t[\"Xi\"] = 645;\n    t[\"Psi\"] = 795;\n    t[\"Zeta\"] = 611;\n    t[\"bracketleft\"] = 333;\n    t[\"therefore\"] = 863;\n    t[\"bracketright\"] = 333;\n    t[\"perpendicular\"] = 658;\n    t[\"underscore\"] = 500;\n    t[\"radicalex\"] = 500;\n    t[\"alpha\"] = 631;\n    t[\"beta\"] = 549;\n    t[\"chi\"] = 549;\n    t[\"delta\"] = 494;\n    t[\"epsilon\"] = 439;\n    t[\"phi\"] = 521;\n    t[\"gamma\"] = 411;\n    t[\"eta\"] = 603;\n    t[\"iota\"] = 329;\n    t[\"phi1\"] = 603;\n    t[\"kappa\"] = 549;\n    t[\"lambda\"] = 549;\n    t[\"mu\"] = 576;\n    t[\"nu\"] = 521;\n    t[\"omicron\"] = 549;\n    t[\"pi\"] = 549;\n    t[\"theta\"] = 521;\n    t[\"rho\"] = 549;\n    t[\"sigma\"] = 603;\n    t[\"tau\"] = 439;\n    t[\"upsilon\"] = 576;\n    t[\"omega1\"] = 713;\n    t[\"omega\"] = 686;\n    t[\"xi\"] = 493;\n    t[\"psi\"] = 686;\n    t[\"zeta\"] = 494;\n    t[\"braceleft\"] = 480;\n    t[\"bar\"] = 200;\n    t[\"braceright\"] = 480;\n    t[\"similar\"] = 549;\n    t[\"Euro\"] = 750;\n    t[\"Upsilon1\"] = 620;\n    t[\"minute\"] = 247;\n    t[\"lessequal\"] = 549;\n    t[\"fraction\"] = 167;\n    t[\"infinity\"] = 713;\n    t[\"florin\"] = 500;\n    t[\"club\"] = 753;\n    t[\"diamond\"] = 753;\n    t[\"heart\"] = 753;\n    t[\"spade\"] = 753;\n    t[\"arrowboth\"] = 1042;\n    t[\"arrowleft\"] = 987;\n    t[\"arrowup\"] = 603;\n    t[\"arrowright\"] = 987;\n    t[\"arrowdown\"] = 603;\n    t[\"degree\"] = 400;\n    t[\"plusminus\"] = 549;\n    t[\"second\"] = 411;\n    t[\"greaterequal\"] = 549;\n    t[\"multiply\"] = 549;\n    t[\"proportional\"] = 713;\n    t[\"partialdiff\"] = 494;\n    t[\"bullet\"] = 460;\n    t[\"divide\"] = 549;\n    t[\"notequal\"] = 549;\n    t[\"equivalence\"] = 549;\n    t[\"approxequal\"] = 549;\n    t[\"ellipsis\"] = 1000;\n    t[\"arrowvertex\"] = 603;\n    t[\"arrowhorizex\"] = 1000;\n    t[\"carriagereturn\"] = 658;\n    t[\"aleph\"] = 823;\n    t[\"Ifraktur\"] = 686;\n    t[\"Rfraktur\"] = 795;\n    t[\"weierstrass\"] = 987;\n    t[\"circlemultiply\"] = 768;\n    t[\"circleplus\"] = 768;\n    t[\"emptyset\"] = 823;\n    t[\"intersection\"] = 768;\n    t[\"union\"] = 768;\n    t[\"propersuperset\"] = 713;\n    t[\"reflexsuperset\"] = 713;\n    t[\"notsubset\"] = 713;\n    t[\"propersubset\"] = 713;\n    t[\"reflexsubset\"] = 713;\n    t[\"element\"] = 713;\n    t[\"notelement\"] = 713;\n    t[\"angle\"] = 768;\n    t[\"gradient\"] = 713;\n    t[\"registerserif\"] = 790;\n    t[\"copyrightserif\"] = 790;\n    t[\"trademarkserif\"] = 890;\n    t[\"product\"] = 823;\n    t[\"radical\"] = 549;\n    t[\"dotmath\"] = 250;\n    t[\"logicalnot\"] = 713;\n    t[\"logicaland\"] = 603;\n    t[\"logicalor\"] = 603;\n    t[\"arrowdblboth\"] = 1042;\n    t[\"arrowdblleft\"] = 987;\n    t[\"arrowdblup\"] = 603;\n    t[\"arrowdblright\"] = 987;\n    t[\"arrowdbldown\"] = 603;\n    t[\"lozenge\"] = 494;\n    t[\"angleleft\"] = 329;\n    t[\"registersans\"] = 790;\n    t[\"copyrightsans\"] = 790;\n    t[\"trademarksans\"] = 786;\n    t[\"summation\"] = 713;\n    t[\"parenlefttp\"] = 384;\n    t[\"parenleftex\"] = 384;\n    t[\"parenleftbt\"] = 384;\n    t[\"bracketlefttp\"] = 384;\n    t[\"bracketleftex\"] = 384;\n    t[\"bracketleftbt\"] = 384;\n    t[\"bracelefttp\"] = 494;\n    t[\"braceleftmid\"] = 494;\n    t[\"braceleftbt\"] = 494;\n    t[\"braceex\"] = 494;\n    t[\"angleright\"] = 329;\n    t[\"integral\"] = 274;\n    t[\"integraltp\"] = 686;\n    t[\"integralex\"] = 686;\n    t[\"integralbt\"] = 686;\n    t[\"parenrighttp\"] = 384;\n    t[\"parenrightex\"] = 384;\n    t[\"parenrightbt\"] = 384;\n    t[\"bracketrighttp\"] = 384;\n    t[\"bracketrightex\"] = 384;\n    t[\"bracketrightbt\"] = 384;\n    t[\"bracerighttp\"] = 494;\n    t[\"bracerightmid\"] = 494;\n    t[\"bracerightbt\"] = 494;\n    t[\"apple\"] = 790;\n  });\n  t[\"Times-Roman\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t[\"space\"] = 250;\n    t[\"exclam\"] = 333;\n    t[\"quotedbl\"] = 408;\n    t[\"numbersign\"] = 500;\n    t[\"dollar\"] = 500;\n    t[\"percent\"] = 833;\n    t[\"ampersand\"] = 778;\n    t[\"quoteright\"] = 333;\n    t[\"parenleft\"] = 333;\n    t[\"parenright\"] = 333;\n    t[\"asterisk\"] = 500;\n    t[\"plus\"] = 564;\n    t[\"comma\"] = 250;\n    t[\"hyphen\"] = 333;\n    t[\"period\"] = 250;\n    t[\"slash\"] = 278;\n    t[\"zero\"] = 500;\n    t[\"one\"] = 500;\n    t[\"two\"] = 500;\n    t[\"three\"] = 500;\n    t[\"four\"] = 500;\n    t[\"five\"] = 500;\n    t[\"six\"] = 500;\n    t[\"seven\"] = 500;\n    t[\"eight\"] = 500;\n    t[\"nine\"] = 500;\n    t[\"colon\"] = 278;\n    t[\"semicolon\"] = 278;\n    t[\"less\"] = 564;\n    t[\"equal\"] = 564;\n    t[\"greater\"] = 564;\n    t[\"question\"] = 444;\n    t[\"at\"] = 921;\n    t[\"A\"] = 722;\n    t[\"B\"] = 667;\n    t[\"C\"] = 667;\n    t[\"D\"] = 722;\n    t[\"E\"] = 611;\n    t[\"F\"] = 556;\n    t[\"G\"] = 722;\n    t[\"H\"] = 722;\n    t[\"I\"] = 333;\n    t[\"J\"] = 389;\n    t[\"K\"] = 722;\n    t[\"L\"] = 611;\n    t[\"M\"] = 889;\n    t[\"N\"] = 722;\n    t[\"O\"] = 722;\n    t[\"P\"] = 556;\n    t[\"Q\"] = 722;\n    t[\"R\"] = 667;\n    t[\"S\"] = 556;\n    t[\"T\"] = 611;\n    t[\"U\"] = 722;\n    t[\"V\"] = 722;\n    t[\"W\"] = 944;\n    t[\"X\"] = 722;\n    t[\"Y\"] = 722;\n    t[\"Z\"] = 611;\n    t[\"bracketleft\"] = 333;\n    t[\"backslash\"] = 278;\n    t[\"bracketright\"] = 333;\n    t[\"asciicircum\"] = 469;\n    t[\"underscore\"] = 500;\n    t[\"quoteleft\"] = 333;\n    t[\"a\"] = 444;\n    t[\"b\"] = 500;\n    t[\"c\"] = 444;\n    t[\"d\"] = 500;\n    t[\"e\"] = 444;\n    t[\"f\"] = 333;\n    t[\"g\"] = 500;\n    t[\"h\"] = 500;\n    t[\"i\"] = 278;\n    t[\"j\"] = 278;\n    t[\"k\"] = 500;\n    t[\"l\"] = 278;\n    t[\"m\"] = 778;\n    t[\"n\"] = 500;\n    t[\"o\"] = 500;\n    t[\"p\"] = 500;\n    t[\"q\"] = 500;\n    t[\"r\"] = 333;\n    t[\"s\"] = 389;\n    t[\"t\"] = 278;\n    t[\"u\"] = 500;\n    t[\"v\"] = 500;\n    t[\"w\"] = 722;\n    t[\"x\"] = 500;\n    t[\"y\"] = 500;\n    t[\"z\"] = 444;\n    t[\"braceleft\"] = 480;\n    t[\"bar\"] = 200;\n    t[\"braceright\"] = 480;\n    t[\"asciitilde\"] = 541;\n    t[\"exclamdown\"] = 333;\n    t[\"cent\"] = 500;\n    t[\"sterling\"] = 500;\n    t[\"fraction\"] = 167;\n    t[\"yen\"] = 500;\n    t[\"florin\"] = 500;\n    t[\"section\"] = 500;\n    t[\"currency\"] = 500;\n    t[\"quotesingle\"] = 180;\n    t[\"quotedblleft\"] = 444;\n    t[\"guillemotleft\"] = 500;\n    t[\"guilsinglleft\"] = 333;\n    t[\"guilsinglright\"] = 333;\n    t[\"fi\"] = 556;\n    t[\"fl\"] = 556;\n    t[\"endash\"] = 500;\n    t[\"dagger\"] = 500;\n    t[\"daggerdbl\"] = 500;\n    t[\"periodcentered\"] = 250;\n    t[\"paragraph\"] = 453;\n    t[\"bullet\"] = 350;\n    t[\"quotesinglbase\"] = 333;\n    t[\"quotedblbase\"] = 444;\n    t[\"quotedblright\"] = 444;\n    t[\"guillemotright\"] = 500;\n    t[\"ellipsis\"] = 1000;\n    t[\"perthousand\"] = 1000;\n    t[\"questiondown\"] = 444;\n    t[\"grave\"] = 333;\n    t[\"acute\"] = 333;\n    t[\"circumflex\"] = 333;\n    t[\"tilde\"] = 333;\n    t[\"macron\"] = 333;\n    t[\"breve\"] = 333;\n    t[\"dotaccent\"] = 333;\n    t[\"dieresis\"] = 333;\n    t[\"ring\"] = 333;\n    t[\"cedilla\"] = 333;\n    t[\"hungarumlaut\"] = 333;\n    t[\"ogonek\"] = 333;\n    t[\"caron\"] = 333;\n    t[\"emdash\"] = 1000;\n    t[\"AE\"] = 889;\n    t[\"ordfeminine\"] = 276;\n    t[\"Lslash\"] = 611;\n    t[\"Oslash\"] = 722;\n    t[\"OE\"] = 889;\n    t[\"ordmasculine\"] = 310;\n    t[\"ae\"] = 667;\n    t[\"dotlessi\"] = 278;\n    t[\"lslash\"] = 278;\n    t[\"oslash\"] = 500;\n    t[\"oe\"] = 722;\n    t[\"germandbls\"] = 500;\n    t[\"Idieresis\"] = 333;\n    t[\"eacute\"] = 444;\n    t[\"abreve\"] = 444;\n    t[\"uhungarumlaut\"] = 500;\n    t[\"ecaron\"] = 444;\n    t[\"Ydieresis\"] = 722;\n    t[\"divide\"] = 564;\n    t[\"Yacute\"] = 722;\n    t[\"Acircumflex\"] = 722;\n    t[\"aacute\"] = 444;\n    t[\"Ucircumflex\"] = 722;\n    t[\"yacute\"] = 500;\n    t[\"scommaaccent\"] = 389;\n    t[\"ecircumflex\"] = 444;\n    t[\"Uring\"] = 722;\n    t[\"Udieresis\"] = 722;\n    t[\"aogonek\"] = 444;\n    t[\"Uacute\"] = 722;\n    t[\"uogonek\"] = 500;\n    t[\"Edieresis\"] = 611;\n    t[\"Dcroat\"] = 722;\n    t[\"commaaccent\"] = 250;\n    t[\"copyright\"] = 760;\n    t[\"Emacron\"] = 611;\n    t[\"ccaron\"] = 444;\n    t[\"aring\"] = 444;\n    t[\"Ncommaaccent\"] = 722;\n    t[\"lacute\"] = 278;\n    t[\"agrave\"] = 444;\n    t[\"Tcommaaccent\"] = 611;\n    t[\"Cacute\"] = 667;\n    t[\"atilde\"] = 444;\n    t[\"Edotaccent\"] = 611;\n    t[\"scaron\"] = 389;\n    t[\"scedilla\"] = 389;\n    t[\"iacute\"] = 278;\n    t[\"lozenge\"] = 471;\n    t[\"Rcaron\"] = 667;\n    t[\"Gcommaaccent\"] = 722;\n    t[\"ucircumflex\"] = 500;\n    t[\"acircumflex\"] = 444;\n    t[\"Amacron\"] = 722;\n    t[\"rcaron\"] = 333;\n    t[\"ccedilla\"] = 444;\n    t[\"Zdotaccent\"] = 611;\n    t[\"Thorn\"] = 556;\n    t[\"Omacron\"] = 722;\n    t[\"Racute\"] = 667;\n    t[\"Sacute\"] = 556;\n    t[\"dcaron\"] = 588;\n    t[\"Umacron\"] = 722;\n    t[\"uring\"] = 500;\n    t[\"threesuperior\"] = 300;\n    t[\"Ograve\"] = 722;\n    t[\"Agrave\"] = 722;\n    t[\"Abreve\"] = 722;\n    t[\"multiply\"] = 564;\n    t[\"uacute\"] = 500;\n    t[\"Tcaron\"] = 611;\n    t[\"partialdiff\"] = 476;\n    t[\"ydieresis\"] = 500;\n    t[\"Nacute\"] = 722;\n    t[\"icircumflex\"] = 278;\n    t[\"Ecircumflex\"] = 611;\n    t[\"adieresis\"] = 444;\n    t[\"edieresis\"] = 444;\n    t[\"cacute\"] = 444;\n    t[\"nacute\"] = 500;\n    t[\"umacron\"] = 500;\n    t[\"Ncaron\"] = 722;\n    t[\"Iacute\"] = 333;\n    t[\"plusminus\"] = 564;\n    t[\"brokenbar\"] = 200;\n    t[\"registered\"] = 760;\n    t[\"Gbreve\"] = 722;\n    t[\"Idotaccent\"] = 333;\n    t[\"summation\"] = 600;\n    t[\"Egrave\"] = 611;\n    t[\"racute\"] = 333;\n    t[\"omacron\"] = 500;\n    t[\"Zacute\"] = 611;\n    t[\"Zcaron\"] = 611;\n    t[\"greaterequal\"] = 549;\n    t[\"Eth\"] = 722;\n    t[\"Ccedilla\"] = 667;\n    t[\"lcommaaccent\"] = 278;\n    t[\"tcaron\"] = 326;\n    t[\"eogonek\"] = 444;\n    t[\"Uogonek\"] = 722;\n    t[\"Aacute\"] = 722;\n    t[\"Adieresis\"] = 722;\n    t[\"egrave\"] = 444;\n    t[\"zacute\"] = 444;\n    t[\"iogonek\"] = 278;\n    t[\"Oacute\"] = 722;\n    t[\"oacute\"] = 500;\n    t[\"amacron\"] = 444;\n    t[\"sacute\"] = 389;\n    t[\"idieresis\"] = 278;\n    t[\"Ocircumflex\"] = 722;\n    t[\"Ugrave\"] = 722;\n    t[\"Delta\"] = 612;\n    t[\"thorn\"] = 500;\n    t[\"twosuperior\"] = 300;\n    t[\"Odieresis\"] = 722;\n    t[\"mu\"] = 500;\n    t[\"igrave\"] = 278;\n    t[\"ohungarumlaut\"] = 500;\n    t[\"Eogonek\"] = 611;\n    t[\"dcroat\"] = 500;\n    t[\"threequarters\"] = 750;\n    t[\"Scedilla\"] = 556;\n    t[\"lcaron\"] = 344;\n    t[\"Kcommaaccent\"] = 722;\n    t[\"Lacute\"] = 611;\n    t[\"trademark\"] = 980;\n    t[\"edotaccent\"] = 444;\n    t[\"Igrave\"] = 333;\n    t[\"Imacron\"] = 333;\n    t[\"Lcaron\"] = 611;\n    t[\"onehalf\"] = 750;\n    t[\"lessequal\"] = 549;\n    t[\"ocircumflex\"] = 500;\n    t[\"ntilde\"] = 500;\n    t[\"Uhungarumlaut\"] = 722;\n    t[\"Eacute\"] = 611;\n    t[\"emacron\"] = 444;\n    t[\"gbreve\"] = 500;\n    t[\"onequarter\"] = 750;\n    t[\"Scaron\"] = 556;\n    t[\"Scommaaccent\"] = 556;\n    t[\"Ohungarumlaut\"] = 722;\n    t[\"degree\"] = 400;\n    t[\"ograve\"] = 500;\n    t[\"Ccaron\"] = 667;\n    t[\"ugrave\"] = 500;\n    t[\"radical\"] = 453;\n    t[\"Dcaron\"] = 722;\n    t[\"rcommaaccent\"] = 333;\n    t[\"Ntilde\"] = 722;\n    t[\"otilde\"] = 500;\n    t[\"Rcommaaccent\"] = 667;\n    t[\"Lcommaaccent\"] = 611;\n    t[\"Atilde\"] = 722;\n    t[\"Aogonek\"] = 722;\n    t[\"Aring\"] = 722;\n    t[\"Otilde\"] = 722;\n    t[\"zdotaccent\"] = 444;\n    t[\"Ecaron\"] = 611;\n    t[\"Iogonek\"] = 333;\n    t[\"kcommaaccent\"] = 500;\n    t[\"minus\"] = 564;\n    t[\"Icircumflex\"] = 333;\n    t[\"ncaron\"] = 500;\n    t[\"tcommaaccent\"] = 278;\n    t[\"logicalnot\"] = 564;\n    t[\"odieresis\"] = 500;\n    t[\"udieresis\"] = 500;\n    t[\"notequal\"] = 549;\n    t[\"gcommaaccent\"] = 500;\n    t[\"eth\"] = 500;\n    t[\"zcaron\"] = 444;\n    t[\"ncommaaccent\"] = 500;\n    t[\"onesuperior\"] = 300;\n    t[\"imacron\"] = 278;\n    t[\"Euro\"] = 500;\n  });\n  t[\"Times-Bold\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t[\"space\"] = 250;\n    t[\"exclam\"] = 333;\n    t[\"quotedbl\"] = 555;\n    t[\"numbersign\"] = 500;\n    t[\"dollar\"] = 500;\n    t[\"percent\"] = 1000;\n    t[\"ampersand\"] = 833;\n    t[\"quoteright\"] = 333;\n    t[\"parenleft\"] = 333;\n    t[\"parenright\"] = 333;\n    t[\"asterisk\"] = 500;\n    t[\"plus\"] = 570;\n    t[\"comma\"] = 250;\n    t[\"hyphen\"] = 333;\n    t[\"period\"] = 250;\n    t[\"slash\"] = 278;\n    t[\"zero\"] = 500;\n    t[\"one\"] = 500;\n    t[\"two\"] = 500;\n    t[\"three\"] = 500;\n    t[\"four\"] = 500;\n    t[\"five\"] = 500;\n    t[\"six\"] = 500;\n    t[\"seven\"] = 500;\n    t[\"eight\"] = 500;\n    t[\"nine\"] = 500;\n    t[\"colon\"] = 333;\n    t[\"semicolon\"] = 333;\n    t[\"less\"] = 570;\n    t[\"equal\"] = 570;\n    t[\"greater\"] = 570;\n    t[\"question\"] = 500;\n    t[\"at\"] = 930;\n    t[\"A\"] = 722;\n    t[\"B\"] = 667;\n    t[\"C\"] = 722;\n    t[\"D\"] = 722;\n    t[\"E\"] = 667;\n    t[\"F\"] = 611;\n    t[\"G\"] = 778;\n    t[\"H\"] = 778;\n    t[\"I\"] = 389;\n    t[\"J\"] = 500;\n    t[\"K\"] = 778;\n    t[\"L\"] = 667;\n    t[\"M\"] = 944;\n    t[\"N\"] = 722;\n    t[\"O\"] = 778;\n    t[\"P\"] = 611;\n    t[\"Q\"] = 778;\n    t[\"R\"] = 722;\n    t[\"S\"] = 556;\n    t[\"T\"] = 667;\n    t[\"U\"] = 722;\n    t[\"V\"] = 722;\n    t[\"W\"] = 1000;\n    t[\"X\"] = 722;\n    t[\"Y\"] = 722;\n    t[\"Z\"] = 667;\n    t[\"bracketleft\"] = 333;\n    t[\"backslash\"] = 278;\n    t[\"bracketright\"] = 333;\n    t[\"asciicircum\"] = 581;\n    t[\"underscore\"] = 500;\n    t[\"quoteleft\"] = 333;\n    t[\"a\"] = 500;\n    t[\"b\"] = 556;\n    t[\"c\"] = 444;\n    t[\"d\"] = 556;\n    t[\"e\"] = 444;\n    t[\"f\"] = 333;\n    t[\"g\"] = 500;\n    t[\"h\"] = 556;\n    t[\"i\"] = 278;\n    t[\"j\"] = 333;\n    t[\"k\"] = 556;\n    t[\"l\"] = 278;\n    t[\"m\"] = 833;\n    t[\"n\"] = 556;\n    t[\"o\"] = 500;\n    t[\"p\"] = 556;\n    t[\"q\"] = 556;\n    t[\"r\"] = 444;\n    t[\"s\"] = 389;\n    t[\"t\"] = 333;\n    t[\"u\"] = 556;\n    t[\"v\"] = 500;\n    t[\"w\"] = 722;\n    t[\"x\"] = 500;\n    t[\"y\"] = 500;\n    t[\"z\"] = 444;\n    t[\"braceleft\"] = 394;\n    t[\"bar\"] = 220;\n    t[\"braceright\"] = 394;\n    t[\"asciitilde\"] = 520;\n    t[\"exclamdown\"] = 333;\n    t[\"cent\"] = 500;\n    t[\"sterling\"] = 500;\n    t[\"fraction\"] = 167;\n    t[\"yen\"] = 500;\n    t[\"florin\"] = 500;\n    t[\"section\"] = 500;\n    t[\"currency\"] = 500;\n    t[\"quotesingle\"] = 278;\n    t[\"quotedblleft\"] = 500;\n    t[\"guillemotleft\"] = 500;\n    t[\"guilsinglleft\"] = 333;\n    t[\"guilsinglright\"] = 333;\n    t[\"fi\"] = 556;\n    t[\"fl\"] = 556;\n    t[\"endash\"] = 500;\n    t[\"dagger\"] = 500;\n    t[\"daggerdbl\"] = 500;\n    t[\"periodcentered\"] = 250;\n    t[\"paragraph\"] = 540;\n    t[\"bullet\"] = 350;\n    t[\"quotesinglbase\"] = 333;\n    t[\"quotedblbase\"] = 500;\n    t[\"quotedblright\"] = 500;\n    t[\"guillemotright\"] = 500;\n    t[\"ellipsis\"] = 1000;\n    t[\"perthousand\"] = 1000;\n    t[\"questiondown\"] = 500;\n    t[\"grave\"] = 333;\n    t[\"acute\"] = 333;\n    t[\"circumflex\"] = 333;\n    t[\"tilde\"] = 333;\n    t[\"macron\"] = 333;\n    t[\"breve\"] = 333;\n    t[\"dotaccent\"] = 333;\n    t[\"dieresis\"] = 333;\n    t[\"ring\"] = 333;\n    t[\"cedilla\"] = 333;\n    t[\"hungarumlaut\"] = 333;\n    t[\"ogonek\"] = 333;\n    t[\"caron\"] = 333;\n    t[\"emdash\"] = 1000;\n    t[\"AE\"] = 1000;\n    t[\"ordfeminine\"] = 300;\n    t[\"Lslash\"] = 667;\n    t[\"Oslash\"] = 778;\n    t[\"OE\"] = 1000;\n    t[\"ordmasculine\"] = 330;\n    t[\"ae\"] = 722;\n    t[\"dotlessi\"] = 278;\n    t[\"lslash\"] = 278;\n    t[\"oslash\"] = 500;\n    t[\"oe\"] = 722;\n    t[\"germandbls\"] = 556;\n    t[\"Idieresis\"] = 389;\n    t[\"eacute\"] = 444;\n    t[\"abreve\"] = 500;\n    t[\"uhungarumlaut\"] = 556;\n    t[\"ecaron\"] = 444;\n    t[\"Ydieresis\"] = 722;\n    t[\"divide\"] = 570;\n    t[\"Yacute\"] = 722;\n    t[\"Acircumflex\"] = 722;\n    t[\"aacute\"] = 500;\n    t[\"Ucircumflex\"] = 722;\n    t[\"yacute\"] = 500;\n    t[\"scommaaccent\"] = 389;\n    t[\"ecircumflex\"] = 444;\n    t[\"Uring\"] = 722;\n    t[\"Udieresis\"] = 722;\n    t[\"aogonek\"] = 500;\n    t[\"Uacute\"] = 722;\n    t[\"uogonek\"] = 556;\n    t[\"Edieresis\"] = 667;\n    t[\"Dcroat\"] = 722;\n    t[\"commaaccent\"] = 250;\n    t[\"copyright\"] = 747;\n    t[\"Emacron\"] = 667;\n    t[\"ccaron\"] = 444;\n    t[\"aring\"] = 500;\n    t[\"Ncommaaccent\"] = 722;\n    t[\"lacute\"] = 278;\n    t[\"agrave\"] = 500;\n    t[\"Tcommaaccent\"] = 667;\n    t[\"Cacute\"] = 722;\n    t[\"atilde\"] = 500;\n    t[\"Edotaccent\"] = 667;\n    t[\"scaron\"] = 389;\n    t[\"scedilla\"] = 389;\n    t[\"iacute\"] = 278;\n    t[\"lozenge\"] = 494;\n    t[\"Rcaron\"] = 722;\n    t[\"Gcommaaccent\"] = 778;\n    t[\"ucircumflex\"] = 556;\n    t[\"acircumflex\"] = 500;\n    t[\"Amacron\"] = 722;\n    t[\"rcaron\"] = 444;\n    t[\"ccedilla\"] = 444;\n    t[\"Zdotaccent\"] = 667;\n    t[\"Thorn\"] = 611;\n    t[\"Omacron\"] = 778;\n    t[\"Racute\"] = 722;\n    t[\"Sacute\"] = 556;\n    t[\"dcaron\"] = 672;\n    t[\"Umacron\"] = 722;\n    t[\"uring\"] = 556;\n    t[\"threesuperior\"] = 300;\n    t[\"Ograve\"] = 778;\n    t[\"Agrave\"] = 722;\n    t[\"Abreve\"] = 722;\n    t[\"multiply\"] = 570;\n    t[\"uacute\"] = 556;\n    t[\"Tcaron\"] = 667;\n    t[\"partialdiff\"] = 494;\n    t[\"ydieresis\"] = 500;\n    t[\"Nacute\"] = 722;\n    t[\"icircumflex\"] = 278;\n    t[\"Ecircumflex\"] = 667;\n    t[\"adieresis\"] = 500;\n    t[\"edieresis\"] = 444;\n    t[\"cacute\"] = 444;\n    t[\"nacute\"] = 556;\n    t[\"umacron\"] = 556;\n    t[\"Ncaron\"] = 722;\n    t[\"Iacute\"] = 389;\n    t[\"plusminus\"] = 570;\n    t[\"brokenbar\"] = 220;\n    t[\"registered\"] = 747;\n    t[\"Gbreve\"] = 778;\n    t[\"Idotaccent\"] = 389;\n    t[\"summation\"] = 600;\n    t[\"Egrave\"] = 667;\n    t[\"racute\"] = 444;\n    t[\"omacron\"] = 500;\n    t[\"Zacute\"] = 667;\n    t[\"Zcaron\"] = 667;\n    t[\"greaterequal\"] = 549;\n    t[\"Eth\"] = 722;\n    t[\"Ccedilla\"] = 722;\n    t[\"lcommaaccent\"] = 278;\n    t[\"tcaron\"] = 416;\n    t[\"eogonek\"] = 444;\n    t[\"Uogonek\"] = 722;\n    t[\"Aacute\"] = 722;\n    t[\"Adieresis\"] = 722;\n    t[\"egrave\"] = 444;\n    t[\"zacute\"] = 444;\n    t[\"iogonek\"] = 278;\n    t[\"Oacute\"] = 778;\n    t[\"oacute\"] = 500;\n    t[\"amacron\"] = 500;\n    t[\"sacute\"] = 389;\n    t[\"idieresis\"] = 278;\n    t[\"Ocircumflex\"] = 778;\n    t[\"Ugrave\"] = 722;\n    t[\"Delta\"] = 612;\n    t[\"thorn\"] = 556;\n    t[\"twosuperior\"] = 300;\n    t[\"Odieresis\"] = 778;\n    t[\"mu\"] = 556;\n    t[\"igrave\"] = 278;\n    t[\"ohungarumlaut\"] = 500;\n    t[\"Eogonek\"] = 667;\n    t[\"dcroat\"] = 556;\n    t[\"threequarters\"] = 750;\n    t[\"Scedilla\"] = 556;\n    t[\"lcaron\"] = 394;\n    t[\"Kcommaaccent\"] = 778;\n    t[\"Lacute\"] = 667;\n    t[\"trademark\"] = 1000;\n    t[\"edotaccent\"] = 444;\n    t[\"Igrave\"] = 389;\n    t[\"Imacron\"] = 389;\n    t[\"Lcaron\"] = 667;\n    t[\"onehalf\"] = 750;\n    t[\"lessequal\"] = 549;\n    t[\"ocircumflex\"] = 500;\n    t[\"ntilde\"] = 556;\n    t[\"Uhungarumlaut\"] = 722;\n    t[\"Eacute\"] = 667;\n    t[\"emacron\"] = 444;\n    t[\"gbreve\"] = 500;\n    t[\"onequarter\"] = 750;\n    t[\"Scaron\"] = 556;\n    t[\"Scommaaccent\"] = 556;\n    t[\"Ohungarumlaut\"] = 778;\n    t[\"degree\"] = 400;\n    t[\"ograve\"] = 500;\n    t[\"Ccaron\"] = 722;\n    t[\"ugrave\"] = 556;\n    t[\"radical\"] = 549;\n    t[\"Dcaron\"] = 722;\n    t[\"rcommaaccent\"] = 444;\n    t[\"Ntilde\"] = 722;\n    t[\"otilde\"] = 500;\n    t[\"Rcommaaccent\"] = 722;\n    t[\"Lcommaaccent\"] = 667;\n    t[\"Atilde\"] = 722;\n    t[\"Aogonek\"] = 722;\n    t[\"Aring\"] = 722;\n    t[\"Otilde\"] = 778;\n    t[\"zdotaccent\"] = 444;\n    t[\"Ecaron\"] = 667;\n    t[\"Iogonek\"] = 389;\n    t[\"kcommaaccent\"] = 556;\n    t[\"minus\"] = 570;\n    t[\"Icircumflex\"] = 389;\n    t[\"ncaron\"] = 556;\n    t[\"tcommaaccent\"] = 333;\n    t[\"logicalnot\"] = 570;\n    t[\"odieresis\"] = 500;\n    t[\"udieresis\"] = 556;\n    t[\"notequal\"] = 549;\n    t[\"gcommaaccent\"] = 500;\n    t[\"eth\"] = 500;\n    t[\"zcaron\"] = 444;\n    t[\"ncommaaccent\"] = 556;\n    t[\"onesuperior\"] = 300;\n    t[\"imacron\"] = 278;\n    t[\"Euro\"] = 500;\n  });\n  t[\"Times-BoldItalic\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t[\"space\"] = 250;\n    t[\"exclam\"] = 389;\n    t[\"quotedbl\"] = 555;\n    t[\"numbersign\"] = 500;\n    t[\"dollar\"] = 500;\n    t[\"percent\"] = 833;\n    t[\"ampersand\"] = 778;\n    t[\"quoteright\"] = 333;\n    t[\"parenleft\"] = 333;\n    t[\"parenright\"] = 333;\n    t[\"asterisk\"] = 500;\n    t[\"plus\"] = 570;\n    t[\"comma\"] = 250;\n    t[\"hyphen\"] = 333;\n    t[\"period\"] = 250;\n    t[\"slash\"] = 278;\n    t[\"zero\"] = 500;\n    t[\"one\"] = 500;\n    t[\"two\"] = 500;\n    t[\"three\"] = 500;\n    t[\"four\"] = 500;\n    t[\"five\"] = 500;\n    t[\"six\"] = 500;\n    t[\"seven\"] = 500;\n    t[\"eight\"] = 500;\n    t[\"nine\"] = 500;\n    t[\"colon\"] = 333;\n    t[\"semicolon\"] = 333;\n    t[\"less\"] = 570;\n    t[\"equal\"] = 570;\n    t[\"greater\"] = 570;\n    t[\"question\"] = 500;\n    t[\"at\"] = 832;\n    t[\"A\"] = 667;\n    t[\"B\"] = 667;\n    t[\"C\"] = 667;\n    t[\"D\"] = 722;\n    t[\"E\"] = 667;\n    t[\"F\"] = 667;\n    t[\"G\"] = 722;\n    t[\"H\"] = 778;\n    t[\"I\"] = 389;\n    t[\"J\"] = 500;\n    t[\"K\"] = 667;\n    t[\"L\"] = 611;\n    t[\"M\"] = 889;\n    t[\"N\"] = 722;\n    t[\"O\"] = 722;\n    t[\"P\"] = 611;\n    t[\"Q\"] = 722;\n    t[\"R\"] = 667;\n    t[\"S\"] = 556;\n    t[\"T\"] = 611;\n    t[\"U\"] = 722;\n    t[\"V\"] = 667;\n    t[\"W\"] = 889;\n    t[\"X\"] = 667;\n    t[\"Y\"] = 611;\n    t[\"Z\"] = 611;\n    t[\"bracketleft\"] = 333;\n    t[\"backslash\"] = 278;\n    t[\"bracketright\"] = 333;\n    t[\"asciicircum\"] = 570;\n    t[\"underscore\"] = 500;\n    t[\"quoteleft\"] = 333;\n    t[\"a\"] = 500;\n    t[\"b\"] = 500;\n    t[\"c\"] = 444;\n    t[\"d\"] = 500;\n    t[\"e\"] = 444;\n    t[\"f\"] = 333;\n    t[\"g\"] = 500;\n    t[\"h\"] = 556;\n    t[\"i\"] = 278;\n    t[\"j\"] = 278;\n    t[\"k\"] = 500;\n    t[\"l\"] = 278;\n    t[\"m\"] = 778;\n    t[\"n\"] = 556;\n    t[\"o\"] = 500;\n    t[\"p\"] = 500;\n    t[\"q\"] = 500;\n    t[\"r\"] = 389;\n    t[\"s\"] = 389;\n    t[\"t\"] = 278;\n    t[\"u\"] = 556;\n    t[\"v\"] = 444;\n    t[\"w\"] = 667;\n    t[\"x\"] = 500;\n    t[\"y\"] = 444;\n    t[\"z\"] = 389;\n    t[\"braceleft\"] = 348;\n    t[\"bar\"] = 220;\n    t[\"braceright\"] = 348;\n    t[\"asciitilde\"] = 570;\n    t[\"exclamdown\"] = 389;\n    t[\"cent\"] = 500;\n    t[\"sterling\"] = 500;\n    t[\"fraction\"] = 167;\n    t[\"yen\"] = 500;\n    t[\"florin\"] = 500;\n    t[\"section\"] = 500;\n    t[\"currency\"] = 500;\n    t[\"quotesingle\"] = 278;\n    t[\"quotedblleft\"] = 500;\n    t[\"guillemotleft\"] = 500;\n    t[\"guilsinglleft\"] = 333;\n    t[\"guilsinglright\"] = 333;\n    t[\"fi\"] = 556;\n    t[\"fl\"] = 556;\n    t[\"endash\"] = 500;\n    t[\"dagger\"] = 500;\n    t[\"daggerdbl\"] = 500;\n    t[\"periodcentered\"] = 250;\n    t[\"paragraph\"] = 500;\n    t[\"bullet\"] = 350;\n    t[\"quotesinglbase\"] = 333;\n    t[\"quotedblbase\"] = 500;\n    t[\"quotedblright\"] = 500;\n    t[\"guillemotright\"] = 500;\n    t[\"ellipsis\"] = 1000;\n    t[\"perthousand\"] = 1000;\n    t[\"questiondown\"] = 500;\n    t[\"grave\"] = 333;\n    t[\"acute\"] = 333;\n    t[\"circumflex\"] = 333;\n    t[\"tilde\"] = 333;\n    t[\"macron\"] = 333;\n    t[\"breve\"] = 333;\n    t[\"dotaccent\"] = 333;\n    t[\"dieresis\"] = 333;\n    t[\"ring\"] = 333;\n    t[\"cedilla\"] = 333;\n    t[\"hungarumlaut\"] = 333;\n    t[\"ogonek\"] = 333;\n    t[\"caron\"] = 333;\n    t[\"emdash\"] = 1000;\n    t[\"AE\"] = 944;\n    t[\"ordfeminine\"] = 266;\n    t[\"Lslash\"] = 611;\n    t[\"Oslash\"] = 722;\n    t[\"OE\"] = 944;\n    t[\"ordmasculine\"] = 300;\n    t[\"ae\"] = 722;\n    t[\"dotlessi\"] = 278;\n    t[\"lslash\"] = 278;\n    t[\"oslash\"] = 500;\n    t[\"oe\"] = 722;\n    t[\"germandbls\"] = 500;\n    t[\"Idieresis\"] = 389;\n    t[\"eacute\"] = 444;\n    t[\"abreve\"] = 500;\n    t[\"uhungarumlaut\"] = 556;\n    t[\"ecaron\"] = 444;\n    t[\"Ydieresis\"] = 611;\n    t[\"divide\"] = 570;\n    t[\"Yacute\"] = 611;\n    t[\"Acircumflex\"] = 667;\n    t[\"aacute\"] = 500;\n    t[\"Ucircumflex\"] = 722;\n    t[\"yacute\"] = 444;\n    t[\"scommaaccent\"] = 389;\n    t[\"ecircumflex\"] = 444;\n    t[\"Uring\"] = 722;\n    t[\"Udieresis\"] = 722;\n    t[\"aogonek\"] = 500;\n    t[\"Uacute\"] = 722;\n    t[\"uogonek\"] = 556;\n    t[\"Edieresis\"] = 667;\n    t[\"Dcroat\"] = 722;\n    t[\"commaaccent\"] = 250;\n    t[\"copyright\"] = 747;\n    t[\"Emacron\"] = 667;\n    t[\"ccaron\"] = 444;\n    t[\"aring\"] = 500;\n    t[\"Ncommaaccent\"] = 722;\n    t[\"lacute\"] = 278;\n    t[\"agrave\"] = 500;\n    t[\"Tcommaaccent\"] = 611;\n    t[\"Cacute\"] = 667;\n    t[\"atilde\"] = 500;\n    t[\"Edotaccent\"] = 667;\n    t[\"scaron\"] = 389;\n    t[\"scedilla\"] = 389;\n    t[\"iacute\"] = 278;\n    t[\"lozenge\"] = 494;\n    t[\"Rcaron\"] = 667;\n    t[\"Gcommaaccent\"] = 722;\n    t[\"ucircumflex\"] = 556;\n    t[\"acircumflex\"] = 500;\n    t[\"Amacron\"] = 667;\n    t[\"rcaron\"] = 389;\n    t[\"ccedilla\"] = 444;\n    t[\"Zdotaccent\"] = 611;\n    t[\"Thorn\"] = 611;\n    t[\"Omacron\"] = 722;\n    t[\"Racute\"] = 667;\n    t[\"Sacute\"] = 556;\n    t[\"dcaron\"] = 608;\n    t[\"Umacron\"] = 722;\n    t[\"uring\"] = 556;\n    t[\"threesuperior\"] = 300;\n    t[\"Ograve\"] = 722;\n    t[\"Agrave\"] = 667;\n    t[\"Abreve\"] = 667;\n    t[\"multiply\"] = 570;\n    t[\"uacute\"] = 556;\n    t[\"Tcaron\"] = 611;\n    t[\"partialdiff\"] = 494;\n    t[\"ydieresis\"] = 444;\n    t[\"Nacute\"] = 722;\n    t[\"icircumflex\"] = 278;\n    t[\"Ecircumflex\"] = 667;\n    t[\"adieresis\"] = 500;\n    t[\"edieresis\"] = 444;\n    t[\"cacute\"] = 444;\n    t[\"nacute\"] = 556;\n    t[\"umacron\"] = 556;\n    t[\"Ncaron\"] = 722;\n    t[\"Iacute\"] = 389;\n    t[\"plusminus\"] = 570;\n    t[\"brokenbar\"] = 220;\n    t[\"registered\"] = 747;\n    t[\"Gbreve\"] = 722;\n    t[\"Idotaccent\"] = 389;\n    t[\"summation\"] = 600;\n    t[\"Egrave\"] = 667;\n    t[\"racute\"] = 389;\n    t[\"omacron\"] = 500;\n    t[\"Zacute\"] = 611;\n    t[\"Zcaron\"] = 611;\n    t[\"greaterequal\"] = 549;\n    t[\"Eth\"] = 722;\n    t[\"Ccedilla\"] = 667;\n    t[\"lcommaaccent\"] = 278;\n    t[\"tcaron\"] = 366;\n    t[\"eogonek\"] = 444;\n    t[\"Uogonek\"] = 722;\n    t[\"Aacute\"] = 667;\n    t[\"Adieresis\"] = 667;\n    t[\"egrave\"] = 444;\n    t[\"zacute\"] = 389;\n    t[\"iogonek\"] = 278;\n    t[\"Oacute\"] = 722;\n    t[\"oacute\"] = 500;\n    t[\"amacron\"] = 500;\n    t[\"sacute\"] = 389;\n    t[\"idieresis\"] = 278;\n    t[\"Ocircumflex\"] = 722;\n    t[\"Ugrave\"] = 722;\n    t[\"Delta\"] = 612;\n    t[\"thorn\"] = 500;\n    t[\"twosuperior\"] = 300;\n    t[\"Odieresis\"] = 722;\n    t[\"mu\"] = 576;\n    t[\"igrave\"] = 278;\n    t[\"ohungarumlaut\"] = 500;\n    t[\"Eogonek\"] = 667;\n    t[\"dcroat\"] = 500;\n    t[\"threequarters\"] = 750;\n    t[\"Scedilla\"] = 556;\n    t[\"lcaron\"] = 382;\n    t[\"Kcommaaccent\"] = 667;\n    t[\"Lacute\"] = 611;\n    t[\"trademark\"] = 1000;\n    t[\"edotaccent\"] = 444;\n    t[\"Igrave\"] = 389;\n    t[\"Imacron\"] = 389;\n    t[\"Lcaron\"] = 611;\n    t[\"onehalf\"] = 750;\n    t[\"lessequal\"] = 549;\n    t[\"ocircumflex\"] = 500;\n    t[\"ntilde\"] = 556;\n    t[\"Uhungarumlaut\"] = 722;\n    t[\"Eacute\"] = 667;\n    t[\"emacron\"] = 444;\n    t[\"gbreve\"] = 500;\n    t[\"onequarter\"] = 750;\n    t[\"Scaron\"] = 556;\n    t[\"Scommaaccent\"] = 556;\n    t[\"Ohungarumlaut\"] = 722;\n    t[\"degree\"] = 400;\n    t[\"ograve\"] = 500;\n    t[\"Ccaron\"] = 667;\n    t[\"ugrave\"] = 556;\n    t[\"radical\"] = 549;\n    t[\"Dcaron\"] = 722;\n    t[\"rcommaaccent\"] = 389;\n    t[\"Ntilde\"] = 722;\n    t[\"otilde\"] = 500;\n    t[\"Rcommaaccent\"] = 667;\n    t[\"Lcommaaccent\"] = 611;\n    t[\"Atilde\"] = 667;\n    t[\"Aogonek\"] = 667;\n    t[\"Aring\"] = 667;\n    t[\"Otilde\"] = 722;\n    t[\"zdotaccent\"] = 389;\n    t[\"Ecaron\"] = 667;\n    t[\"Iogonek\"] = 389;\n    t[\"kcommaaccent\"] = 500;\n    t[\"minus\"] = 606;\n    t[\"Icircumflex\"] = 389;\n    t[\"ncaron\"] = 556;\n    t[\"tcommaaccent\"] = 278;\n    t[\"logicalnot\"] = 606;\n    t[\"odieresis\"] = 500;\n    t[\"udieresis\"] = 556;\n    t[\"notequal\"] = 549;\n    t[\"gcommaaccent\"] = 500;\n    t[\"eth\"] = 500;\n    t[\"zcaron\"] = 389;\n    t[\"ncommaaccent\"] = 556;\n    t[\"onesuperior\"] = 300;\n    t[\"imacron\"] = 278;\n    t[\"Euro\"] = 500;\n  });\n  t[\"Times-Italic\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t[\"space\"] = 250;\n    t[\"exclam\"] = 333;\n    t[\"quotedbl\"] = 420;\n    t[\"numbersign\"] = 500;\n    t[\"dollar\"] = 500;\n    t[\"percent\"] = 833;\n    t[\"ampersand\"] = 778;\n    t[\"quoteright\"] = 333;\n    t[\"parenleft\"] = 333;\n    t[\"parenright\"] = 333;\n    t[\"asterisk\"] = 500;\n    t[\"plus\"] = 675;\n    t[\"comma\"] = 250;\n    t[\"hyphen\"] = 333;\n    t[\"period\"] = 250;\n    t[\"slash\"] = 278;\n    t[\"zero\"] = 500;\n    t[\"one\"] = 500;\n    t[\"two\"] = 500;\n    t[\"three\"] = 500;\n    t[\"four\"] = 500;\n    t[\"five\"] = 500;\n    t[\"six\"] = 500;\n    t[\"seven\"] = 500;\n    t[\"eight\"] = 500;\n    t[\"nine\"] = 500;\n    t[\"colon\"] = 333;\n    t[\"semicolon\"] = 333;\n    t[\"less\"] = 675;\n    t[\"equal\"] = 675;\n    t[\"greater\"] = 675;\n    t[\"question\"] = 500;\n    t[\"at\"] = 920;\n    t[\"A\"] = 611;\n    t[\"B\"] = 611;\n    t[\"C\"] = 667;\n    t[\"D\"] = 722;\n    t[\"E\"] = 611;\n    t[\"F\"] = 611;\n    t[\"G\"] = 722;\n    t[\"H\"] = 722;\n    t[\"I\"] = 333;\n    t[\"J\"] = 444;\n    t[\"K\"] = 667;\n    t[\"L\"] = 556;\n    t[\"M\"] = 833;\n    t[\"N\"] = 667;\n    t[\"O\"] = 722;\n    t[\"P\"] = 611;\n    t[\"Q\"] = 722;\n    t[\"R\"] = 611;\n    t[\"S\"] = 500;\n    t[\"T\"] = 556;\n    t[\"U\"] = 722;\n    t[\"V\"] = 611;\n    t[\"W\"] = 833;\n    t[\"X\"] = 611;\n    t[\"Y\"] = 556;\n    t[\"Z\"] = 556;\n    t[\"bracketleft\"] = 389;\n    t[\"backslash\"] = 278;\n    t[\"bracketright\"] = 389;\n    t[\"asciicircum\"] = 422;\n    t[\"underscore\"] = 500;\n    t[\"quoteleft\"] = 333;\n    t[\"a\"] = 500;\n    t[\"b\"] = 500;\n    t[\"c\"] = 444;\n    t[\"d\"] = 500;\n    t[\"e\"] = 444;\n    t[\"f\"] = 278;\n    t[\"g\"] = 500;\n    t[\"h\"] = 500;\n    t[\"i\"] = 278;\n    t[\"j\"] = 278;\n    t[\"k\"] = 444;\n    t[\"l\"] = 278;\n    t[\"m\"] = 722;\n    t[\"n\"] = 500;\n    t[\"o\"] = 500;\n    t[\"p\"] = 500;\n    t[\"q\"] = 500;\n    t[\"r\"] = 389;\n    t[\"s\"] = 389;\n    t[\"t\"] = 278;\n    t[\"u\"] = 500;\n    t[\"v\"] = 444;\n    t[\"w\"] = 667;\n    t[\"x\"] = 444;\n    t[\"y\"] = 444;\n    t[\"z\"] = 389;\n    t[\"braceleft\"] = 400;\n    t[\"bar\"] = 275;\n    t[\"braceright\"] = 400;\n    t[\"asciitilde\"] = 541;\n    t[\"exclamdown\"] = 389;\n    t[\"cent\"] = 500;\n    t[\"sterling\"] = 500;\n    t[\"fraction\"] = 167;\n    t[\"yen\"] = 500;\n    t[\"florin\"] = 500;\n    t[\"section\"] = 500;\n    t[\"currency\"] = 500;\n    t[\"quotesingle\"] = 214;\n    t[\"quotedblleft\"] = 556;\n    t[\"guillemotleft\"] = 500;\n    t[\"guilsinglleft\"] = 333;\n    t[\"guilsinglright\"] = 333;\n    t[\"fi\"] = 500;\n    t[\"fl\"] = 500;\n    t[\"endash\"] = 500;\n    t[\"dagger\"] = 500;\n    t[\"daggerdbl\"] = 500;\n    t[\"periodcentered\"] = 250;\n    t[\"paragraph\"] = 523;\n    t[\"bullet\"] = 350;\n    t[\"quotesinglbase\"] = 333;\n    t[\"quotedblbase\"] = 556;\n    t[\"quotedblright\"] = 556;\n    t[\"guillemotright\"] = 500;\n    t[\"ellipsis\"] = 889;\n    t[\"perthousand\"] = 1000;\n    t[\"questiondown\"] = 500;\n    t[\"grave\"] = 333;\n    t[\"acute\"] = 333;\n    t[\"circumflex\"] = 333;\n    t[\"tilde\"] = 333;\n    t[\"macron\"] = 333;\n    t[\"breve\"] = 333;\n    t[\"dotaccent\"] = 333;\n    t[\"dieresis\"] = 333;\n    t[\"ring\"] = 333;\n    t[\"cedilla\"] = 333;\n    t[\"hungarumlaut\"] = 333;\n    t[\"ogonek\"] = 333;\n    t[\"caron\"] = 333;\n    t[\"emdash\"] = 889;\n    t[\"AE\"] = 889;\n    t[\"ordfeminine\"] = 276;\n    t[\"Lslash\"] = 556;\n    t[\"Oslash\"] = 722;\n    t[\"OE\"] = 944;\n    t[\"ordmasculine\"] = 310;\n    t[\"ae\"] = 667;\n    t[\"dotlessi\"] = 278;\n    t[\"lslash\"] = 278;\n    t[\"oslash\"] = 500;\n    t[\"oe\"] = 667;\n    t[\"germandbls\"] = 500;\n    t[\"Idieresis\"] = 333;\n    t[\"eacute\"] = 444;\n    t[\"abreve\"] = 500;\n    t[\"uhungarumlaut\"] = 500;\n    t[\"ecaron\"] = 444;\n    t[\"Ydieresis\"] = 556;\n    t[\"divide\"] = 675;\n    t[\"Yacute\"] = 556;\n    t[\"Acircumflex\"] = 611;\n    t[\"aacute\"] = 500;\n    t[\"Ucircumflex\"] = 722;\n    t[\"yacute\"] = 444;\n    t[\"scommaaccent\"] = 389;\n    t[\"ecircumflex\"] = 444;\n    t[\"Uring\"] = 722;\n    t[\"Udieresis\"] = 722;\n    t[\"aogonek\"] = 500;\n    t[\"Uacute\"] = 722;\n    t[\"uogonek\"] = 500;\n    t[\"Edieresis\"] = 611;\n    t[\"Dcroat\"] = 722;\n    t[\"commaaccent\"] = 250;\n    t[\"copyright\"] = 760;\n    t[\"Emacron\"] = 611;\n    t[\"ccaron\"] = 444;\n    t[\"aring\"] = 500;\n    t[\"Ncommaaccent\"] = 667;\n    t[\"lacute\"] = 278;\n    t[\"agrave\"] = 500;\n    t[\"Tcommaaccent\"] = 556;\n    t[\"Cacute\"] = 667;\n    t[\"atilde\"] = 500;\n    t[\"Edotaccent\"] = 611;\n    t[\"scaron\"] = 389;\n    t[\"scedilla\"] = 389;\n    t[\"iacute\"] = 278;\n    t[\"lozenge\"] = 471;\n    t[\"Rcaron\"] = 611;\n    t[\"Gcommaaccent\"] = 722;\n    t[\"ucircumflex\"] = 500;\n    t[\"acircumflex\"] = 500;\n    t[\"Amacron\"] = 611;\n    t[\"rcaron\"] = 389;\n    t[\"ccedilla\"] = 444;\n    t[\"Zdotaccent\"] = 556;\n    t[\"Thorn\"] = 611;\n    t[\"Omacron\"] = 722;\n    t[\"Racute\"] = 611;\n    t[\"Sacute\"] = 500;\n    t[\"dcaron\"] = 544;\n    t[\"Umacron\"] = 722;\n    t[\"uring\"] = 500;\n    t[\"threesuperior\"] = 300;\n    t[\"Ograve\"] = 722;\n    t[\"Agrave\"] = 611;\n    t[\"Abreve\"] = 611;\n    t[\"multiply\"] = 675;\n    t[\"uacute\"] = 500;\n    t[\"Tcaron\"] = 556;\n    t[\"partialdiff\"] = 476;\n    t[\"ydieresis\"] = 444;\n    t[\"Nacute\"] = 667;\n    t[\"icircumflex\"] = 278;\n    t[\"Ecircumflex\"] = 611;\n    t[\"adieresis\"] = 500;\n    t[\"edieresis\"] = 444;\n    t[\"cacute\"] = 444;\n    t[\"nacute\"] = 500;\n    t[\"umacron\"] = 500;\n    t[\"Ncaron\"] = 667;\n    t[\"Iacute\"] = 333;\n    t[\"plusminus\"] = 675;\n    t[\"brokenbar\"] = 275;\n    t[\"registered\"] = 760;\n    t[\"Gbreve\"] = 722;\n    t[\"Idotaccent\"] = 333;\n    t[\"summation\"] = 600;\n    t[\"Egrave\"] = 611;\n    t[\"racute\"] = 389;\n    t[\"omacron\"] = 500;\n    t[\"Zacute\"] = 556;\n    t[\"Zcaron\"] = 556;\n    t[\"greaterequal\"] = 549;\n    t[\"Eth\"] = 722;\n    t[\"Ccedilla\"] = 667;\n    t[\"lcommaaccent\"] = 278;\n    t[\"tcaron\"] = 300;\n    t[\"eogonek\"] = 444;\n    t[\"Uogonek\"] = 722;\n    t[\"Aacute\"] = 611;\n    t[\"Adieresis\"] = 611;\n    t[\"egrave\"] = 444;\n    t[\"zacute\"] = 389;\n    t[\"iogonek\"] = 278;\n    t[\"Oacute\"] = 722;\n    t[\"oacute\"] = 500;\n    t[\"amacron\"] = 500;\n    t[\"sacute\"] = 389;\n    t[\"idieresis\"] = 278;\n    t[\"Ocircumflex\"] = 722;\n    t[\"Ugrave\"] = 722;\n    t[\"Delta\"] = 612;\n    t[\"thorn\"] = 500;\n    t[\"twosuperior\"] = 300;\n    t[\"Odieresis\"] = 722;\n    t[\"mu\"] = 500;\n    t[\"igrave\"] = 278;\n    t[\"ohungarumlaut\"] = 500;\n    t[\"Eogonek\"] = 611;\n    t[\"dcroat\"] = 500;\n    t[\"threequarters\"] = 750;\n    t[\"Scedilla\"] = 500;\n    t[\"lcaron\"] = 300;\n    t[\"Kcommaaccent\"] = 667;\n    t[\"Lacute\"] = 556;\n    t[\"trademark\"] = 980;\n    t[\"edotaccent\"] = 444;\n    t[\"Igrave\"] = 333;\n    t[\"Imacron\"] = 333;\n    t[\"Lcaron\"] = 611;\n    t[\"onehalf\"] = 750;\n    t[\"lessequal\"] = 549;\n    t[\"ocircumflex\"] = 500;\n    t[\"ntilde\"] = 500;\n    t[\"Uhungarumlaut\"] = 722;\n    t[\"Eacute\"] = 611;\n    t[\"emacron\"] = 444;\n    t[\"gbreve\"] = 500;\n    t[\"onequarter\"] = 750;\n    t[\"Scaron\"] = 500;\n    t[\"Scommaaccent\"] = 500;\n    t[\"Ohungarumlaut\"] = 722;\n    t[\"degree\"] = 400;\n    t[\"ograve\"] = 500;\n    t[\"Ccaron\"] = 667;\n    t[\"ugrave\"] = 500;\n    t[\"radical\"] = 453;\n    t[\"Dcaron\"] = 722;\n    t[\"rcommaaccent\"] = 389;\n    t[\"Ntilde\"] = 667;\n    t[\"otilde\"] = 500;\n    t[\"Rcommaaccent\"] = 611;\n    t[\"Lcommaaccent\"] = 556;\n    t[\"Atilde\"] = 611;\n    t[\"Aogonek\"] = 611;\n    t[\"Aring\"] = 611;\n    t[\"Otilde\"] = 722;\n    t[\"zdotaccent\"] = 389;\n    t[\"Ecaron\"] = 611;\n    t[\"Iogonek\"] = 333;\n    t[\"kcommaaccent\"] = 444;\n    t[\"minus\"] = 675;\n    t[\"Icircumflex\"] = 333;\n    t[\"ncaron\"] = 500;\n    t[\"tcommaaccent\"] = 278;\n    t[\"logicalnot\"] = 675;\n    t[\"odieresis\"] = 500;\n    t[\"udieresis\"] = 500;\n    t[\"notequal\"] = 549;\n    t[\"gcommaaccent\"] = 500;\n    t[\"eth\"] = 500;\n    t[\"zcaron\"] = 389;\n    t[\"ncommaaccent\"] = 500;\n    t[\"onesuperior\"] = 300;\n    t[\"imacron\"] = 278;\n    t[\"Euro\"] = 500;\n  });\n  t[\"ZapfDingbats\"] = (0, _core_utils.getLookupTableFactory)(function (t) {\n    t[\"space\"] = 278;\n    t[\"a1\"] = 974;\n    t[\"a2\"] = 961;\n    t[\"a202\"] = 974;\n    t[\"a3\"] = 980;\n    t[\"a4\"] = 719;\n    t[\"a5\"] = 789;\n    t[\"a119\"] = 790;\n    t[\"a118\"] = 791;\n    t[\"a117\"] = 690;\n    t[\"a11\"] = 960;\n    t[\"a12\"] = 939;\n    t[\"a13\"] = 549;\n    t[\"a14\"] = 855;\n    t[\"a15\"] = 911;\n    t[\"a16\"] = 933;\n    t[\"a105\"] = 911;\n    t[\"a17\"] = 945;\n    t[\"a18\"] = 974;\n    t[\"a19\"] = 755;\n    t[\"a20\"] = 846;\n    t[\"a21\"] = 762;\n    t[\"a22\"] = 761;\n    t[\"a23\"] = 571;\n    t[\"a24\"] = 677;\n    t[\"a25\"] = 763;\n    t[\"a26\"] = 760;\n    t[\"a27\"] = 759;\n    t[\"a28\"] = 754;\n    t[\"a6\"] = 494;\n    t[\"a7\"] = 552;\n    t[\"a8\"] = 537;\n    t[\"a9\"] = 577;\n    t[\"a10\"] = 692;\n    t[\"a29\"] = 786;\n    t[\"a30\"] = 788;\n    t[\"a31\"] = 788;\n    t[\"a32\"] = 790;\n    t[\"a33\"] = 793;\n    t[\"a34\"] = 794;\n    t[\"a35\"] = 816;\n    t[\"a36\"] = 823;\n    t[\"a37\"] = 789;\n    t[\"a38\"] = 841;\n    t[\"a39\"] = 823;\n    t[\"a40\"] = 833;\n    t[\"a41\"] = 816;\n    t[\"a42\"] = 831;\n    t[\"a43\"] = 923;\n    t[\"a44\"] = 744;\n    t[\"a45\"] = 723;\n    t[\"a46\"] = 749;\n    t[\"a47\"] = 790;\n    t[\"a48\"] = 792;\n    t[\"a49\"] = 695;\n    t[\"a50\"] = 776;\n    t[\"a51\"] = 768;\n    t[\"a52\"] = 792;\n    t[\"a53\"] = 759;\n    t[\"a54\"] = 707;\n    t[\"a55\"] = 708;\n    t[\"a56\"] = 682;\n    t[\"a57\"] = 701;\n    t[\"a58\"] = 826;\n    t[\"a59\"] = 815;\n    t[\"a60\"] = 789;\n    t[\"a61\"] = 789;\n    t[\"a62\"] = 707;\n    t[\"a63\"] = 687;\n    t[\"a64\"] = 696;\n    t[\"a65\"] = 689;\n    t[\"a66\"] = 786;\n    t[\"a67\"] = 787;\n    t[\"a68\"] = 713;\n    t[\"a69\"] = 791;\n    t[\"a70\"] = 785;\n    t[\"a71\"] = 791;\n    t[\"a72\"] = 873;\n    t[\"a73\"] = 761;\n    t[\"a74\"] = 762;\n    t[\"a203\"] = 762;\n    t[\"a75\"] = 759;\n    t[\"a204\"] = 759;\n    t[\"a76\"] = 892;\n    t[\"a77\"] = 892;\n    t[\"a78\"] = 788;\n    t[\"a79\"] = 784;\n    t[\"a81\"] = 438;\n    t[\"a82\"] = 138;\n    t[\"a83\"] = 277;\n    t[\"a84\"] = 415;\n    t[\"a97\"] = 392;\n    t[\"a98\"] = 392;\n    t[\"a99\"] = 668;\n    t[\"a100\"] = 668;\n    t[\"a89\"] = 390;\n    t[\"a90\"] = 390;\n    t[\"a93\"] = 317;\n    t[\"a94\"] = 317;\n    t[\"a91\"] = 276;\n    t[\"a92\"] = 276;\n    t[\"a205\"] = 509;\n    t[\"a85\"] = 509;\n    t[\"a206\"] = 410;\n    t[\"a86\"] = 410;\n    t[\"a87\"] = 234;\n    t[\"a88\"] = 234;\n    t[\"a95\"] = 334;\n    t[\"a96\"] = 334;\n    t[\"a101\"] = 732;\n    t[\"a102\"] = 544;\n    t[\"a103\"] = 544;\n    t[\"a104\"] = 910;\n    t[\"a106\"] = 667;\n    t[\"a107\"] = 760;\n    t[\"a108\"] = 760;\n    t[\"a112\"] = 776;\n    t[\"a111\"] = 595;\n    t[\"a110\"] = 694;\n    t[\"a109\"] = 626;\n    t[\"a120\"] = 788;\n    t[\"a121\"] = 788;\n    t[\"a122\"] = 788;\n    t[\"a123\"] = 788;\n    t[\"a124\"] = 788;\n    t[\"a125\"] = 788;\n    t[\"a126\"] = 788;\n    t[\"a127\"] = 788;\n    t[\"a128\"] = 788;\n    t[\"a129\"] = 788;\n    t[\"a130\"] = 788;\n    t[\"a131\"] = 788;\n    t[\"a132\"] = 788;\n    t[\"a133\"] = 788;\n    t[\"a134\"] = 788;\n    t[\"a135\"] = 788;\n    t[\"a136\"] = 788;\n    t[\"a137\"] = 788;\n    t[\"a138\"] = 788;\n    t[\"a139\"] = 788;\n    t[\"a140\"] = 788;\n    t[\"a141\"] = 788;\n    t[\"a142\"] = 788;\n    t[\"a143\"] = 788;\n    t[\"a144\"] = 788;\n    t[\"a145\"] = 788;\n    t[\"a146\"] = 788;\n    t[\"a147\"] = 788;\n    t[\"a148\"] = 788;\n    t[\"a149\"] = 788;\n    t[\"a150\"] = 788;\n    t[\"a151\"] = 788;\n    t[\"a152\"] = 788;\n    t[\"a153\"] = 788;\n    t[\"a154\"] = 788;\n    t[\"a155\"] = 788;\n    t[\"a156\"] = 788;\n    t[\"a157\"] = 788;\n    t[\"a158\"] = 788;\n    t[\"a159\"] = 788;\n    t[\"a160\"] = 894;\n    t[\"a161\"] = 838;\n    t[\"a163\"] = 1016;\n    t[\"a164\"] = 458;\n    t[\"a196\"] = 748;\n    t[\"a165\"] = 924;\n    t[\"a192\"] = 748;\n    t[\"a166\"] = 918;\n    t[\"a167\"] = 927;\n    t[\"a168\"] = 928;\n    t[\"a169\"] = 928;\n    t[\"a170\"] = 834;\n    t[\"a171\"] = 873;\n    t[\"a172\"] = 828;\n    t[\"a173\"] = 924;\n    t[\"a162\"] = 924;\n    t[\"a174\"] = 917;\n    t[\"a175\"] = 930;\n    t[\"a176\"] = 931;\n    t[\"a177\"] = 463;\n    t[\"a178\"] = 883;\n    t[\"a179\"] = 836;\n    t[\"a193\"] = 836;\n    t[\"a180\"] = 867;\n    t[\"a199\"] = 867;\n    t[\"a181\"] = 696;\n    t[\"a200\"] = 696;\n    t[\"a182\"] = 874;\n    t[\"a201\"] = 874;\n    t[\"a183\"] = 760;\n    t[\"a184\"] = 946;\n    t[\"a197\"] = 771;\n    t[\"a185\"] = 865;\n    t[\"a194\"] = 771;\n    t[\"a198\"] = 888;\n    t[\"a186\"] = 967;\n    t[\"a195\"] = 888;\n    t[\"a187\"] = 831;\n    t[\"a188\"] = 873;\n    t[\"a189\"] = 927;\n    t[\"a190\"] = 970;\n    t[\"a191\"] = 918;\n  });\n});\nexports.getMetrics = getMetrics;\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isPDFFunction = isPDFFunction;\nexports.PostScriptCompiler = exports.PostScriptEvaluator = exports.PDFFunctionFactory = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(4);\n\nvar _ps_parser = __w_pdfjs_require__(40);\n\nclass PDFFunctionFactory {\n  constructor({\n    xref,\n    isEvalSupported = true\n  }) {\n    this.xref = xref;\n    this.isEvalSupported = isEvalSupported !== false;\n  }\n\n  create(fn) {\n    return PDFFunction.parse({\n      xref: this.xref,\n      isEvalSupported: this.isEvalSupported,\n      fn\n    });\n  }\n\n  createFromArray(fnObj) {\n    return PDFFunction.parseArray({\n      xref: this.xref,\n      isEvalSupported: this.isEvalSupported,\n      fnObj\n    });\n  }\n\n}\n\nexports.PDFFunctionFactory = PDFFunctionFactory;\n\nfunction toNumberArray(arr) {\n  if (!Array.isArray(arr)) {\n    return null;\n  }\n\n  const length = arr.length;\n\n  for (let i = 0; i < length; i++) {\n    if (typeof arr[i] !== \"number\") {\n      const result = new Array(length);\n\n      for (let i = 0; i < length; i++) {\n        result[i] = +arr[i];\n      }\n\n      return result;\n    }\n  }\n\n  return arr;\n}\n\nvar PDFFunction = function PDFFunctionClosure() {\n  const CONSTRUCT_SAMPLED = 0;\n  const CONSTRUCT_INTERPOLATED = 2;\n  const CONSTRUCT_STICHED = 3;\n  const CONSTRUCT_POSTSCRIPT = 4;\n  return {\n    getSampleArray(size, outputSize, bps, stream) {\n      var i, ii;\n      var length = 1;\n\n      for (i = 0, ii = size.length; i < ii; i++) {\n        length *= size[i];\n      }\n\n      length *= outputSize;\n      var array = new Array(length);\n      var codeSize = 0;\n      var codeBuf = 0;\n      var sampleMul = 1.0 / (2.0 ** bps - 1);\n      var strBytes = stream.getBytes((length * bps + 7) / 8);\n      var strIdx = 0;\n\n      for (i = 0; i < length; i++) {\n        while (codeSize < bps) {\n          codeBuf <<= 8;\n          codeBuf |= strBytes[strIdx++];\n          codeSize += 8;\n        }\n\n        codeSize -= bps;\n        array[i] = (codeBuf >> codeSize) * sampleMul;\n        codeBuf &= (1 << codeSize) - 1;\n      }\n\n      return array;\n    },\n\n    getIR({\n      xref,\n      isEvalSupported,\n      fn\n    }) {\n      var dict = fn.dict;\n\n      if (!dict) {\n        dict = fn;\n      }\n\n      var types = [this.constructSampled, null, this.constructInterpolated, this.constructStiched, this.constructPostScript];\n      var typeNum = dict.get(\"FunctionType\");\n      var typeFn = types[typeNum];\n\n      if (!typeFn) {\n        throw new _util.FormatError(\"Unknown type of function\");\n      }\n\n      return typeFn.call(this, {\n        xref,\n        isEvalSupported,\n        fn,\n        dict\n      });\n    },\n\n    fromIR({\n      xref,\n      isEvalSupported,\n      IR\n    }) {\n      var type = IR[0];\n\n      switch (type) {\n        case CONSTRUCT_SAMPLED:\n          return this.constructSampledFromIR({\n            xref,\n            isEvalSupported,\n            IR\n          });\n\n        case CONSTRUCT_INTERPOLATED:\n          return this.constructInterpolatedFromIR({\n            xref,\n            isEvalSupported,\n            IR\n          });\n\n        case CONSTRUCT_STICHED:\n          return this.constructStichedFromIR({\n            xref,\n            isEvalSupported,\n            IR\n          });\n\n        default:\n          return this.constructPostScriptFromIR({\n            xref,\n            isEvalSupported,\n            IR\n          });\n      }\n    },\n\n    parse({\n      xref,\n      isEvalSupported,\n      fn\n    }) {\n      const IR = this.getIR({\n        xref,\n        isEvalSupported,\n        fn\n      });\n      return this.fromIR({\n        xref,\n        isEvalSupported,\n        IR\n      });\n    },\n\n    parseArray({\n      xref,\n      isEvalSupported,\n      fnObj\n    }) {\n      if (!Array.isArray(fnObj)) {\n        return this.parse({\n          xref,\n          isEvalSupported,\n          fn: fnObj\n        });\n      }\n\n      var fnArray = [];\n\n      for (var j = 0, jj = fnObj.length; j < jj; j++) {\n        fnArray.push(this.parse({\n          xref,\n          isEvalSupported,\n          fn: xref.fetchIfRef(fnObj[j])\n        }));\n      }\n\n      return function (src, srcOffset, dest, destOffset) {\n        for (var i = 0, ii = fnArray.length; i < ii; i++) {\n          fnArray[i](src, srcOffset, dest, destOffset + i);\n        }\n      };\n    },\n\n    constructSampled({\n      xref,\n      isEvalSupported,\n      fn,\n      dict\n    }) {\n      function toMultiArray(arr) {\n        var inputLength = arr.length;\n        var out = [];\n        var index = 0;\n\n        for (var i = 0; i < inputLength; i += 2) {\n          out[index] = [arr[i], arr[i + 1]];\n          ++index;\n        }\n\n        return out;\n      }\n\n      var domain = toNumberArray(dict.getArray(\"Domain\"));\n      var range = toNumberArray(dict.getArray(\"Range\"));\n\n      if (!domain || !range) {\n        throw new _util.FormatError(\"No domain or range\");\n      }\n\n      var inputSize = domain.length / 2;\n      var outputSize = range.length / 2;\n      domain = toMultiArray(domain);\n      range = toMultiArray(range);\n      var size = toNumberArray(dict.getArray(\"Size\"));\n      var bps = dict.get(\"BitsPerSample\");\n      var order = dict.get(\"Order\") || 1;\n\n      if (order !== 1) {\n        (0, _util.info)(\"No support for cubic spline interpolation: \" + order);\n      }\n\n      var encode = toNumberArray(dict.getArray(\"Encode\"));\n\n      if (!encode) {\n        encode = [];\n\n        for (var i = 0; i < inputSize; ++i) {\n          encode.push([0, size[i] - 1]);\n        }\n      } else {\n        encode = toMultiArray(encode);\n      }\n\n      var decode = toNumberArray(dict.getArray(\"Decode\"));\n\n      if (!decode) {\n        decode = range;\n      } else {\n        decode = toMultiArray(decode);\n      }\n\n      var samples = this.getSampleArray(size, outputSize, bps, fn);\n      return [CONSTRUCT_SAMPLED, inputSize, domain, encode, decode, samples, size, outputSize, 2 ** bps - 1, range];\n    },\n\n    constructSampledFromIR({\n      xref,\n      isEvalSupported,\n      IR\n    }) {\n      function interpolate(x, xmin, xmax, ymin, ymax) {\n        return ymin + (x - xmin) * ((ymax - ymin) / (xmax - xmin));\n      }\n\n      return function constructSampledFromIRResult(src, srcOffset, dest, destOffset) {\n        var m = IR[1];\n        var domain = IR[2];\n        var encode = IR[3];\n        var decode = IR[4];\n        var samples = IR[5];\n        var size = IR[6];\n        var n = IR[7];\n        var range = IR[9];\n        var cubeVertices = 1 << m;\n        var cubeN = new Float64Array(cubeVertices);\n        var cubeVertex = new Uint32Array(cubeVertices);\n        var i, j;\n\n        for (j = 0; j < cubeVertices; j++) {\n          cubeN[j] = 1;\n        }\n\n        var k = n,\n            pos = 1;\n\n        for (i = 0; i < m; ++i) {\n          var domain_2i = domain[i][0];\n          var domain_2i_1 = domain[i][1];\n          var xi = Math.min(Math.max(src[srcOffset + i], domain_2i), domain_2i_1);\n          var e = interpolate(xi, domain_2i, domain_2i_1, encode[i][0], encode[i][1]);\n          var size_i = size[i];\n          e = Math.min(Math.max(e, 0), size_i - 1);\n          var e0 = e < size_i - 1 ? Math.floor(e) : e - 1;\n          var n0 = e0 + 1 - e;\n          var n1 = e - e0;\n          var offset0 = e0 * k;\n          var offset1 = offset0 + k;\n\n          for (j = 0; j < cubeVertices; j++) {\n            if (j & pos) {\n              cubeN[j] *= n1;\n              cubeVertex[j] += offset1;\n            } else {\n              cubeN[j] *= n0;\n              cubeVertex[j] += offset0;\n            }\n          }\n\n          k *= size_i;\n          pos <<= 1;\n        }\n\n        for (j = 0; j < n; ++j) {\n          var rj = 0;\n\n          for (i = 0; i < cubeVertices; i++) {\n            rj += samples[cubeVertex[i] + j] * cubeN[i];\n          }\n\n          rj = interpolate(rj, 0, 1, decode[j][0], decode[j][1]);\n          dest[destOffset + j] = Math.min(Math.max(rj, range[j][0]), range[j][1]);\n        }\n      };\n    },\n\n    constructInterpolated({\n      xref,\n      isEvalSupported,\n      fn,\n      dict\n    }) {\n      var c0 = toNumberArray(dict.getArray(\"C0\")) || [0];\n      var c1 = toNumberArray(dict.getArray(\"C1\")) || [1];\n      var n = dict.get(\"N\");\n      var length = c0.length;\n      var diff = [];\n\n      for (var i = 0; i < length; ++i) {\n        diff.push(c1[i] - c0[i]);\n      }\n\n      return [CONSTRUCT_INTERPOLATED, c0, diff, n];\n    },\n\n    constructInterpolatedFromIR({\n      xref,\n      isEvalSupported,\n      IR\n    }) {\n      var c0 = IR[1];\n      var diff = IR[2];\n      var n = IR[3];\n      var length = diff.length;\n      return function constructInterpolatedFromIRResult(src, srcOffset, dest, destOffset) {\n        var x = n === 1 ? src[srcOffset] : src[srcOffset] ** n;\n\n        for (var j = 0; j < length; ++j) {\n          dest[destOffset + j] = c0[j] + x * diff[j];\n        }\n      };\n    },\n\n    constructStiched({\n      xref,\n      isEvalSupported,\n      fn,\n      dict\n    }) {\n      var domain = toNumberArray(dict.getArray(\"Domain\"));\n\n      if (!domain) {\n        throw new _util.FormatError(\"No domain\");\n      }\n\n      var inputSize = domain.length / 2;\n\n      if (inputSize !== 1) {\n        throw new _util.FormatError(\"Bad domain for stiched function\");\n      }\n\n      var fnRefs = dict.get(\"Functions\");\n      var fns = [];\n\n      for (var i = 0, ii = fnRefs.length; i < ii; ++i) {\n        fns.push(this.parse({\n          xref,\n          isEvalSupported,\n          fn: xref.fetchIfRef(fnRefs[i])\n        }));\n      }\n\n      var bounds = toNumberArray(dict.getArray(\"Bounds\"));\n      var encode = toNumberArray(dict.getArray(\"Encode\"));\n      return [CONSTRUCT_STICHED, domain, bounds, encode, fns];\n    },\n\n    constructStichedFromIR({\n      xref,\n      isEvalSupported,\n      IR\n    }) {\n      var domain = IR[1];\n      var bounds = IR[2];\n      var encode = IR[3];\n      var fns = IR[4];\n      var tmpBuf = new Float32Array(1);\n      return function constructStichedFromIRResult(src, srcOffset, dest, destOffset) {\n        var clip = function constructStichedFromIRClip(v, min, max) {\n          if (v > max) {\n            v = max;\n          } else if (v < min) {\n            v = min;\n          }\n\n          return v;\n        };\n\n        var v = clip(src[srcOffset], domain[0], domain[1]);\n\n        for (var i = 0, ii = bounds.length; i < ii; ++i) {\n          if (v < bounds[i]) {\n            break;\n          }\n        }\n\n        var dmin = domain[0];\n\n        if (i > 0) {\n          dmin = bounds[i - 1];\n        }\n\n        var dmax = domain[1];\n\n        if (i < bounds.length) {\n          dmax = bounds[i];\n        }\n\n        var rmin = encode[2 * i];\n        var rmax = encode[2 * i + 1];\n        tmpBuf[0] = dmin === dmax ? rmin : rmin + (v - dmin) * (rmax - rmin) / (dmax - dmin);\n        fns[i](tmpBuf, 0, dest, destOffset);\n      };\n    },\n\n    constructPostScript({\n      xref,\n      isEvalSupported,\n      fn,\n      dict\n    }) {\n      var domain = toNumberArray(dict.getArray(\"Domain\"));\n      var range = toNumberArray(dict.getArray(\"Range\"));\n\n      if (!domain) {\n        throw new _util.FormatError(\"No domain.\");\n      }\n\n      if (!range) {\n        throw new _util.FormatError(\"No range.\");\n      }\n\n      var lexer = new _ps_parser.PostScriptLexer(fn);\n      var parser = new _ps_parser.PostScriptParser(lexer);\n      var code = parser.parse();\n      return [CONSTRUCT_POSTSCRIPT, domain, range, code];\n    },\n\n    constructPostScriptFromIR({\n      xref,\n      isEvalSupported,\n      IR\n    }) {\n      var domain = IR[1];\n      var range = IR[2];\n      var code = IR[3];\n\n      if (isEvalSupported && _util.IsEvalSupportedCached.value) {\n        const compiled = new PostScriptCompiler().compile(code, domain, range);\n\n        if (compiled) {\n          return new Function(\"src\", \"srcOffset\", \"dest\", \"destOffset\", compiled);\n        }\n      }\n\n      (0, _util.info)(\"Unable to compile PS function\");\n      var numOutputs = range.length >> 1;\n      var numInputs = domain.length >> 1;\n      var evaluator = new PostScriptEvaluator(code);\n      var cache = Object.create(null);\n      var MAX_CACHE_SIZE = 2048 * 4;\n      var cache_available = MAX_CACHE_SIZE;\n      var tmpBuf = new Float32Array(numInputs);\n      return function constructPostScriptFromIRResult(src, srcOffset, dest, destOffset) {\n        var i, value;\n        var key = \"\";\n        var input = tmpBuf;\n\n        for (i = 0; i < numInputs; i++) {\n          value = src[srcOffset + i];\n          input[i] = value;\n          key += value + \"_\";\n        }\n\n        var cachedValue = cache[key];\n\n        if (cachedValue !== undefined) {\n          dest.set(cachedValue, destOffset);\n          return;\n        }\n\n        var output = new Float32Array(numOutputs);\n        var stack = evaluator.execute(input);\n        var stackIndex = stack.length - numOutputs;\n\n        for (i = 0; i < numOutputs; i++) {\n          value = stack[stackIndex + i];\n          var bound = range[i * 2];\n\n          if (value < bound) {\n            value = bound;\n          } else {\n            bound = range[i * 2 + 1];\n\n            if (value > bound) {\n              value = bound;\n            }\n          }\n\n          output[i] = value;\n        }\n\n        if (cache_available > 0) {\n          cache_available--;\n          cache[key] = output;\n        }\n\n        dest.set(output, destOffset);\n      };\n    }\n\n  };\n}();\n\nfunction isPDFFunction(v) {\n  var fnDict;\n\n  if (typeof v !== \"object\") {\n    return false;\n  } else if ((0, _primitives.isDict)(v)) {\n    fnDict = v;\n  } else if ((0, _primitives.isStream)(v)) {\n    fnDict = v.dict;\n  } else {\n    return false;\n  }\n\n  return fnDict.has(\"FunctionType\");\n}\n\nvar PostScriptStack = function PostScriptStackClosure() {\n  var MAX_STACK_SIZE = 100;\n\n  function PostScriptStack(initialStack) {\n    this.stack = !initialStack ? [] : Array.prototype.slice.call(initialStack, 0);\n  }\n\n  PostScriptStack.prototype = {\n    push: function PostScriptStack_push(value) {\n      if (this.stack.length >= MAX_STACK_SIZE) {\n        throw new Error(\"PostScript function stack overflow.\");\n      }\n\n      this.stack.push(value);\n    },\n    pop: function PostScriptStack_pop() {\n      if (this.stack.length <= 0) {\n        throw new Error(\"PostScript function stack underflow.\");\n      }\n\n      return this.stack.pop();\n    },\n    copy: function PostScriptStack_copy(n) {\n      if (this.stack.length + n >= MAX_STACK_SIZE) {\n        throw new Error(\"PostScript function stack overflow.\");\n      }\n\n      var stack = this.stack;\n\n      for (var i = stack.length - n, j = n - 1; j >= 0; j--, i++) {\n        stack.push(stack[i]);\n      }\n    },\n    index: function PostScriptStack_index(n) {\n      this.push(this.stack[this.stack.length - n - 1]);\n    },\n    roll: function PostScriptStack_roll(n, p) {\n      var stack = this.stack;\n      var l = stack.length - n;\n      var r = stack.length - 1,\n          c = l + (p - Math.floor(p / n) * n),\n          i,\n          j,\n          t;\n\n      for (i = l, j = r; i < j; i++, j--) {\n        t = stack[i];\n        stack[i] = stack[j];\n        stack[j] = t;\n      }\n\n      for (i = l, j = c - 1; i < j; i++, j--) {\n        t = stack[i];\n        stack[i] = stack[j];\n        stack[j] = t;\n      }\n\n      for (i = c, j = r; i < j; i++, j--) {\n        t = stack[i];\n        stack[i] = stack[j];\n        stack[j] = t;\n      }\n    }\n  };\n  return PostScriptStack;\n}();\n\nvar PostScriptEvaluator = function PostScriptEvaluatorClosure() {\n  function PostScriptEvaluator(operators) {\n    this.operators = operators;\n  }\n\n  PostScriptEvaluator.prototype = {\n    execute: function PostScriptEvaluator_execute(initialStack) {\n      var stack = new PostScriptStack(initialStack);\n      var counter = 0;\n      var operators = this.operators;\n      var length = operators.length;\n      var operator, a, b;\n\n      while (counter < length) {\n        operator = operators[counter++];\n\n        if (typeof operator === \"number\") {\n          stack.push(operator);\n          continue;\n        }\n\n        switch (operator) {\n          case \"jz\":\n            b = stack.pop();\n            a = stack.pop();\n\n            if (!a) {\n              counter = b;\n            }\n\n            break;\n\n          case \"j\":\n            a = stack.pop();\n            counter = a;\n            break;\n\n          case \"abs\":\n            a = stack.pop();\n            stack.push(Math.abs(a));\n            break;\n\n          case \"add\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a + b);\n            break;\n\n          case \"and\":\n            b = stack.pop();\n            a = stack.pop();\n\n            if ((0, _util.isBool)(a) && (0, _util.isBool)(b)) {\n              stack.push(a && b);\n            } else {\n              stack.push(a & b);\n            }\n\n            break;\n\n          case \"atan\":\n            a = stack.pop();\n            stack.push(Math.atan(a));\n            break;\n\n          case \"bitshift\":\n            b = stack.pop();\n            a = stack.pop();\n\n            if (a > 0) {\n              stack.push(a << b);\n            } else {\n              stack.push(a >> b);\n            }\n\n            break;\n\n          case \"ceiling\":\n            a = stack.pop();\n            stack.push(Math.ceil(a));\n            break;\n\n          case \"copy\":\n            a = stack.pop();\n            stack.copy(a);\n            break;\n\n          case \"cos\":\n            a = stack.pop();\n            stack.push(Math.cos(a));\n            break;\n\n          case \"cvi\":\n            a = stack.pop() | 0;\n            stack.push(a);\n            break;\n\n          case \"cvr\":\n            break;\n\n          case \"div\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a / b);\n            break;\n\n          case \"dup\":\n            stack.copy(1);\n            break;\n\n          case \"eq\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a === b);\n            break;\n\n          case \"exch\":\n            stack.roll(2, 1);\n            break;\n\n          case \"exp\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a ** b);\n            break;\n\n          case \"false\":\n            stack.push(false);\n            break;\n\n          case \"floor\":\n            a = stack.pop();\n            stack.push(Math.floor(a));\n            break;\n\n          case \"ge\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a >= b);\n            break;\n\n          case \"gt\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a > b);\n            break;\n\n          case \"idiv\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a / b | 0);\n            break;\n\n          case \"index\":\n            a = stack.pop();\n            stack.index(a);\n            break;\n\n          case \"le\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a <= b);\n            break;\n\n          case \"ln\":\n            a = stack.pop();\n            stack.push(Math.log(a));\n            break;\n\n          case \"log\":\n            a = stack.pop();\n            stack.push(Math.log(a) / Math.LN10);\n            break;\n\n          case \"lt\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a < b);\n            break;\n\n          case \"mod\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a % b);\n            break;\n\n          case \"mul\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a * b);\n            break;\n\n          case \"ne\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a !== b);\n            break;\n\n          case \"neg\":\n            a = stack.pop();\n            stack.push(-a);\n            break;\n\n          case \"not\":\n            a = stack.pop();\n\n            if ((0, _util.isBool)(a)) {\n              stack.push(!a);\n            } else {\n              stack.push(~a);\n            }\n\n            break;\n\n          case \"or\":\n            b = stack.pop();\n            a = stack.pop();\n\n            if ((0, _util.isBool)(a) && (0, _util.isBool)(b)) {\n              stack.push(a || b);\n            } else {\n              stack.push(a | b);\n            }\n\n            break;\n\n          case \"pop\":\n            stack.pop();\n            break;\n\n          case \"roll\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.roll(a, b);\n            break;\n\n          case \"round\":\n            a = stack.pop();\n            stack.push(Math.round(a));\n            break;\n\n          case \"sin\":\n            a = stack.pop();\n            stack.push(Math.sin(a));\n            break;\n\n          case \"sqrt\":\n            a = stack.pop();\n            stack.push(Math.sqrt(a));\n            break;\n\n          case \"sub\":\n            b = stack.pop();\n            a = stack.pop();\n            stack.push(a - b);\n            break;\n\n          case \"true\":\n            stack.push(true);\n            break;\n\n          case \"truncate\":\n            a = stack.pop();\n            a = a < 0 ? Math.ceil(a) : Math.floor(a);\n            stack.push(a);\n            break;\n\n          case \"xor\":\n            b = stack.pop();\n            a = stack.pop();\n\n            if ((0, _util.isBool)(a) && (0, _util.isBool)(b)) {\n              stack.push(a !== b);\n            } else {\n              stack.push(a ^ b);\n            }\n\n            break;\n\n          default:\n            throw new _util.FormatError(`Unknown operator ${operator}`);\n        }\n      }\n\n      return stack.stack;\n    }\n  };\n  return PostScriptEvaluator;\n}();\n\nexports.PostScriptEvaluator = PostScriptEvaluator;\n\nvar PostScriptCompiler = function PostScriptCompilerClosure() {\n  function AstNode(type) {\n    this.type = type;\n  }\n\n  AstNode.prototype.visit = function (visitor) {\n    (0, _util.unreachable)(\"abstract method\");\n  };\n\n  function AstArgument(index, min, max) {\n    AstNode.call(this, \"args\");\n    this.index = index;\n    this.min = min;\n    this.max = max;\n  }\n\n  AstArgument.prototype = Object.create(AstNode.prototype);\n\n  AstArgument.prototype.visit = function (visitor) {\n    visitor.visitArgument(this);\n  };\n\n  function AstLiteral(number) {\n    AstNode.call(this, \"literal\");\n    this.number = number;\n    this.min = number;\n    this.max = number;\n  }\n\n  AstLiteral.prototype = Object.create(AstNode.prototype);\n\n  AstLiteral.prototype.visit = function (visitor) {\n    visitor.visitLiteral(this);\n  };\n\n  function AstBinaryOperation(op, arg1, arg2, min, max) {\n    AstNode.call(this, \"binary\");\n    this.op = op;\n    this.arg1 = arg1;\n    this.arg2 = arg2;\n    this.min = min;\n    this.max = max;\n  }\n\n  AstBinaryOperation.prototype = Object.create(AstNode.prototype);\n\n  AstBinaryOperation.prototype.visit = function (visitor) {\n    visitor.visitBinaryOperation(this);\n  };\n\n  function AstMin(arg, max) {\n    AstNode.call(this, \"max\");\n    this.arg = arg;\n    this.min = arg.min;\n    this.max = max;\n  }\n\n  AstMin.prototype = Object.create(AstNode.prototype);\n\n  AstMin.prototype.visit = function (visitor) {\n    visitor.visitMin(this);\n  };\n\n  function AstVariable(index, min, max) {\n    AstNode.call(this, \"var\");\n    this.index = index;\n    this.min = min;\n    this.max = max;\n  }\n\n  AstVariable.prototype = Object.create(AstNode.prototype);\n\n  AstVariable.prototype.visit = function (visitor) {\n    visitor.visitVariable(this);\n  };\n\n  function AstVariableDefinition(variable, arg) {\n    AstNode.call(this, \"definition\");\n    this.variable = variable;\n    this.arg = arg;\n  }\n\n  AstVariableDefinition.prototype = Object.create(AstNode.prototype);\n\n  AstVariableDefinition.prototype.visit = function (visitor) {\n    visitor.visitVariableDefinition(this);\n  };\n\n  function ExpressionBuilderVisitor() {\n    this.parts = [];\n  }\n\n  ExpressionBuilderVisitor.prototype = {\n    visitArgument(arg) {\n      this.parts.push(\"Math.max(\", arg.min, \", Math.min(\", arg.max, \", src[srcOffset + \", arg.index, \"]))\");\n    },\n\n    visitVariable(variable) {\n      this.parts.push(\"v\", variable.index);\n    },\n\n    visitLiteral(literal) {\n      this.parts.push(literal.number);\n    },\n\n    visitBinaryOperation(operation) {\n      this.parts.push(\"(\");\n      operation.arg1.visit(this);\n      this.parts.push(\" \", operation.op, \" \");\n      operation.arg2.visit(this);\n      this.parts.push(\")\");\n    },\n\n    visitVariableDefinition(definition) {\n      this.parts.push(\"var \");\n      definition.variable.visit(this);\n      this.parts.push(\" = \");\n      definition.arg.visit(this);\n      this.parts.push(\";\");\n    },\n\n    visitMin(max) {\n      this.parts.push(\"Math.min(\");\n      max.arg.visit(this);\n      this.parts.push(\", \", max.max, \")\");\n    },\n\n    toString() {\n      return this.parts.join(\"\");\n    }\n\n  };\n\n  function buildAddOperation(num1, num2) {\n    if (num2.type === \"literal\" && num2.number === 0) {\n      return num1;\n    }\n\n    if (num1.type === \"literal\" && num1.number === 0) {\n      return num2;\n    }\n\n    if (num2.type === \"literal\" && num1.type === \"literal\") {\n      return new AstLiteral(num1.number + num2.number);\n    }\n\n    return new AstBinaryOperation(\"+\", num1, num2, num1.min + num2.min, num1.max + num2.max);\n  }\n\n  function buildMulOperation(num1, num2) {\n    if (num2.type === \"literal\") {\n      if (num2.number === 0) {\n        return new AstLiteral(0);\n      } else if (num2.number === 1) {\n        return num1;\n      } else if (num1.type === \"literal\") {\n        return new AstLiteral(num1.number * num2.number);\n      }\n    }\n\n    if (num1.type === \"literal\") {\n      if (num1.number === 0) {\n        return new AstLiteral(0);\n      } else if (num1.number === 1) {\n        return num2;\n      }\n    }\n\n    var min = Math.min(num1.min * num2.min, num1.min * num2.max, num1.max * num2.min, num1.max * num2.max);\n    var max = Math.max(num1.min * num2.min, num1.min * num2.max, num1.max * num2.min, num1.max * num2.max);\n    return new AstBinaryOperation(\"*\", num1, num2, min, max);\n  }\n\n  function buildSubOperation(num1, num2) {\n    if (num2.type === \"literal\") {\n      if (num2.number === 0) {\n        return num1;\n      } else if (num1.type === \"literal\") {\n        return new AstLiteral(num1.number - num2.number);\n      }\n    }\n\n    if (num2.type === \"binary\" && num2.op === \"-\" && num1.type === \"literal\" && num1.number === 1 && num2.arg1.type === \"literal\" && num2.arg1.number === 1) {\n      return num2.arg2;\n    }\n\n    return new AstBinaryOperation(\"-\", num1, num2, num1.min - num2.max, num1.max - num2.min);\n  }\n\n  function buildMinOperation(num1, max) {\n    if (num1.min >= max) {\n      return new AstLiteral(max);\n    } else if (num1.max <= max) {\n      return num1;\n    }\n\n    return new AstMin(num1, max);\n  }\n\n  function PostScriptCompiler() {}\n\n  PostScriptCompiler.prototype = {\n    compile: function PostScriptCompiler_compile(code, domain, range) {\n      var stack = [];\n      var i, ii;\n      var instructions = [];\n      var inputSize = domain.length >> 1,\n          outputSize = range.length >> 1;\n      var lastRegister = 0;\n      var n, j;\n      var num1, num2, ast1, ast2, tmpVar, item;\n\n      for (i = 0; i < inputSize; i++) {\n        stack.push(new AstArgument(i, domain[i * 2], domain[i * 2 + 1]));\n      }\n\n      for (i = 0, ii = code.length; i < ii; i++) {\n        item = code[i];\n\n        if (typeof item === \"number\") {\n          stack.push(new AstLiteral(item));\n          continue;\n        }\n\n        switch (item) {\n          case \"add\":\n            if (stack.length < 2) {\n              return null;\n            }\n\n            num2 = stack.pop();\n            num1 = stack.pop();\n            stack.push(buildAddOperation(num1, num2));\n            break;\n\n          case \"cvr\":\n            if (stack.length < 1) {\n              return null;\n            }\n\n            break;\n\n          case \"mul\":\n            if (stack.length < 2) {\n              return null;\n            }\n\n            num2 = stack.pop();\n            num1 = stack.pop();\n            stack.push(buildMulOperation(num1, num2));\n            break;\n\n          case \"sub\":\n            if (stack.length < 2) {\n              return null;\n            }\n\n            num2 = stack.pop();\n            num1 = stack.pop();\n            stack.push(buildSubOperation(num1, num2));\n            break;\n\n          case \"exch\":\n            if (stack.length < 2) {\n              return null;\n            }\n\n            ast1 = stack.pop();\n            ast2 = stack.pop();\n            stack.push(ast1, ast2);\n            break;\n\n          case \"pop\":\n            if (stack.length < 1) {\n              return null;\n            }\n\n            stack.pop();\n            break;\n\n          case \"index\":\n            if (stack.length < 1) {\n              return null;\n            }\n\n            num1 = stack.pop();\n\n            if (num1.type !== \"literal\") {\n              return null;\n            }\n\n            n = num1.number;\n\n            if (n < 0 || !Number.isInteger(n) || stack.length < n) {\n              return null;\n            }\n\n            ast1 = stack[stack.length - n - 1];\n\n            if (ast1.type === \"literal\" || ast1.type === \"var\") {\n              stack.push(ast1);\n              break;\n            }\n\n            tmpVar = new AstVariable(lastRegister++, ast1.min, ast1.max);\n            stack[stack.length - n - 1] = tmpVar;\n            stack.push(tmpVar);\n            instructions.push(new AstVariableDefinition(tmpVar, ast1));\n            break;\n\n          case \"dup\":\n            if (stack.length < 1) {\n              return null;\n            }\n\n            if (typeof code[i + 1] === \"number\" && code[i + 2] === \"gt\" && code[i + 3] === i + 7 && code[i + 4] === \"jz\" && code[i + 5] === \"pop\" && code[i + 6] === code[i + 1]) {\n              num1 = stack.pop();\n              stack.push(buildMinOperation(num1, code[i + 1]));\n              i += 6;\n              break;\n            }\n\n            ast1 = stack[stack.length - 1];\n\n            if (ast1.type === \"literal\" || ast1.type === \"var\") {\n              stack.push(ast1);\n              break;\n            }\n\n            tmpVar = new AstVariable(lastRegister++, ast1.min, ast1.max);\n            stack[stack.length - 1] = tmpVar;\n            stack.push(tmpVar);\n            instructions.push(new AstVariableDefinition(tmpVar, ast1));\n            break;\n\n          case \"roll\":\n            if (stack.length < 2) {\n              return null;\n            }\n\n            num2 = stack.pop();\n            num1 = stack.pop();\n\n            if (num2.type !== \"literal\" || num1.type !== \"literal\") {\n              return null;\n            }\n\n            j = num2.number;\n            n = num1.number;\n\n            if (n <= 0 || !Number.isInteger(n) || !Number.isInteger(j) || stack.length < n) {\n              return null;\n            }\n\n            j = (j % n + n) % n;\n\n            if (j === 0) {\n              break;\n            }\n\n            Array.prototype.push.apply(stack, stack.splice(stack.length - n, n - j));\n            break;\n\n          default:\n            return null;\n        }\n      }\n\n      if (stack.length !== outputSize) {\n        return null;\n      }\n\n      var result = [];\n      instructions.forEach(function (instruction) {\n        var statementBuilder = new ExpressionBuilderVisitor();\n        instruction.visit(statementBuilder);\n        result.push(statementBuilder.toString());\n      });\n      stack.forEach(function (expr, i) {\n        var statementBuilder = new ExpressionBuilderVisitor();\n        expr.visit(statementBuilder);\n        var min = range[i * 2],\n            max = range[i * 2 + 1];\n        var out = [statementBuilder.toString()];\n\n        if (min > expr.min) {\n          out.unshift(\"Math.max(\", min, \", \");\n          out.push(\")\");\n        }\n\n        if (max < expr.max) {\n          out.unshift(\"Math.min(\", max, \", \");\n          out.push(\")\");\n        }\n\n        out.unshift(\"dest[destOffset + \", i, \"] = \");\n        out.push(\";\");\n        result.push(out.join(\"\"));\n      });\n      return result.join(\"\\n\");\n    }\n  };\n  return PostScriptCompiler;\n}();\n\nexports.PostScriptCompiler = PostScriptCompiler;\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PostScriptParser = exports.PostScriptLexer = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(4);\n\nvar _core_utils = __w_pdfjs_require__(7);\n\nclass PostScriptParser {\n  constructor(lexer) {\n    this.lexer = lexer;\n    this.operators = [];\n    this.token = null;\n    this.prev = null;\n  }\n\n  nextToken() {\n    this.prev = this.token;\n    this.token = this.lexer.getToken();\n  }\n\n  accept(type) {\n    if (this.token.type === type) {\n      this.nextToken();\n      return true;\n    }\n\n    return false;\n  }\n\n  expect(type) {\n    if (this.accept(type)) {\n      return true;\n    }\n\n    throw new _util.FormatError(`Unexpected symbol: found ${this.token.type} expected ${type}.`);\n  }\n\n  parse() {\n    this.nextToken();\n    this.expect(PostScriptTokenTypes.LBRACE);\n    this.parseBlock();\n    this.expect(PostScriptTokenTypes.RBRACE);\n    return this.operators;\n  }\n\n  parseBlock() {\n    while (true) {\n      if (this.accept(PostScriptTokenTypes.NUMBER)) {\n        this.operators.push(this.prev.value);\n      } else if (this.accept(PostScriptTokenTypes.OPERATOR)) {\n        this.operators.push(this.prev.value);\n      } else if (this.accept(PostScriptTokenTypes.LBRACE)) {\n        this.parseCondition();\n      } else {\n        return;\n      }\n    }\n  }\n\n  parseCondition() {\n    const conditionLocation = this.operators.length;\n    this.operators.push(null, null);\n    this.parseBlock();\n    this.expect(PostScriptTokenTypes.RBRACE);\n\n    if (this.accept(PostScriptTokenTypes.IF)) {\n      this.operators[conditionLocation] = this.operators.length;\n      this.operators[conditionLocation + 1] = \"jz\";\n    } else if (this.accept(PostScriptTokenTypes.LBRACE)) {\n      const jumpLocation = this.operators.length;\n      this.operators.push(null, null);\n      const endOfTrue = this.operators.length;\n      this.parseBlock();\n      this.expect(PostScriptTokenTypes.RBRACE);\n      this.expect(PostScriptTokenTypes.IFELSE);\n      this.operators[jumpLocation] = this.operators.length;\n      this.operators[jumpLocation + 1] = \"j\";\n      this.operators[conditionLocation] = endOfTrue;\n      this.operators[conditionLocation + 1] = \"jz\";\n    } else {\n      throw new _util.FormatError(\"PS Function: error parsing conditional.\");\n    }\n  }\n\n}\n\nexports.PostScriptParser = PostScriptParser;\nconst PostScriptTokenTypes = {\n  LBRACE: 0,\n  RBRACE: 1,\n  NUMBER: 2,\n  OPERATOR: 3,\n  IF: 4,\n  IFELSE: 5\n};\n\nconst PostScriptToken = function PostScriptTokenClosure() {\n  const opCache = Object.create(null);\n\n  class PostScriptToken {\n    constructor(type, value) {\n      this.type = type;\n      this.value = value;\n    }\n\n    static getOperator(op) {\n      const opValue = opCache[op];\n\n      if (opValue) {\n        return opValue;\n      }\n\n      return opCache[op] = new PostScriptToken(PostScriptTokenTypes.OPERATOR, op);\n    }\n\n    static get LBRACE() {\n      return (0, _util.shadow)(this, \"LBRACE\", new PostScriptToken(PostScriptTokenTypes.LBRACE, \"{\"));\n    }\n\n    static get RBRACE() {\n      return (0, _util.shadow)(this, \"RBRACE\", new PostScriptToken(PostScriptTokenTypes.RBRACE, \"}\"));\n    }\n\n    static get IF() {\n      return (0, _util.shadow)(this, \"IF\", new PostScriptToken(PostScriptTokenTypes.IF, \"IF\"));\n    }\n\n    static get IFELSE() {\n      return (0, _util.shadow)(this, \"IFELSE\", new PostScriptToken(PostScriptTokenTypes.IFELSE, \"IFELSE\"));\n    }\n\n  }\n\n  return PostScriptToken;\n}();\n\nclass PostScriptLexer {\n  constructor(stream) {\n    this.stream = stream;\n    this.nextChar();\n    this.strBuf = [];\n  }\n\n  nextChar() {\n    return this.currentChar = this.stream.getByte();\n  }\n\n  getToken() {\n    let comment = false;\n    let ch = this.currentChar;\n\n    while (true) {\n      if (ch < 0) {\n        return _primitives.EOF;\n      }\n\n      if (comment) {\n        if (ch === 0x0a || ch === 0x0d) {\n          comment = false;\n        }\n      } else if (ch === 0x25) {\n        comment = true;\n      } else if (!(0, _core_utils.isWhiteSpace)(ch)) {\n        break;\n      }\n\n      ch = this.nextChar();\n    }\n\n    switch (ch | 0) {\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x2b:\n      case 0x2d:\n      case 0x2e:\n        return new PostScriptToken(PostScriptTokenTypes.NUMBER, this.getNumber());\n\n      case 0x7b:\n        this.nextChar();\n        return PostScriptToken.LBRACE;\n\n      case 0x7d:\n        this.nextChar();\n        return PostScriptToken.RBRACE;\n    }\n\n    const strBuf = this.strBuf;\n    strBuf.length = 0;\n    strBuf[0] = String.fromCharCode(ch);\n\n    while ((ch = this.nextChar()) >= 0 && (ch >= 0x41 && ch <= 0x5a || ch >= 0x61 && ch <= 0x7a)) {\n      strBuf.push(String.fromCharCode(ch));\n    }\n\n    const str = strBuf.join(\"\");\n\n    switch (str.toLowerCase()) {\n      case \"if\":\n        return PostScriptToken.IF;\n\n      case \"ifelse\":\n        return PostScriptToken.IFELSE;\n\n      default:\n        return PostScriptToken.getOperator(str);\n    }\n  }\n\n  getNumber() {\n    let ch = this.currentChar;\n    const strBuf = this.strBuf;\n    strBuf.length = 0;\n    strBuf[0] = String.fromCharCode(ch);\n\n    while ((ch = this.nextChar()) >= 0) {\n      if (ch >= 0x30 && ch <= 0x39 || ch === 0x2d || ch === 0x2e) {\n        strBuf.push(String.fromCharCode(ch));\n      } else {\n        break;\n      }\n    }\n\n    const value = parseFloat(strBuf.join(\"\"));\n\n    if (isNaN(value)) {\n      throw new _util.FormatError(`Invalid floating point number: ${value}`);\n    }\n\n    return value;\n  }\n\n}\n\nexports.PostScriptLexer = PostScriptLexer;\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MurmurHash3_64 = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nconst SEED = 0xc3d2e1f0;\nconst MASK_HIGH = 0xffff0000;\nconst MASK_LOW = 0xffff;\n\nclass MurmurHash3_64 {\n  constructor(seed) {\n    this.h1 = seed ? seed & 0xffffffff : SEED;\n    this.h2 = seed ? seed & 0xffffffff : SEED;\n  }\n\n  update(input) {\n    let data, length;\n\n    if ((0, _util.isString)(input)) {\n      data = new Uint8Array(input.length * 2);\n      length = 0;\n\n      for (let i = 0, ii = input.length; i < ii; i++) {\n        const code = input.charCodeAt(i);\n\n        if (code <= 0xff) {\n          data[length++] = code;\n        } else {\n          data[length++] = code >>> 8;\n          data[length++] = code & 0xff;\n        }\n      }\n    } else if ((0, _util.isArrayBuffer)(input)) {\n      data = input;\n      length = data.byteLength;\n    } else {\n      throw new Error(\"Wrong data format in MurmurHash3_64_update. \" + \"Input must be a string or array.\");\n    }\n\n    const blockCounts = length >> 2;\n    const tailLength = length - blockCounts * 4;\n    const dataUint32 = new Uint32Array(data.buffer, 0, blockCounts);\n    let k1 = 0,\n        k2 = 0;\n    let h1 = this.h1,\n        h2 = this.h2;\n    const C1 = 0xcc9e2d51,\n          C2 = 0x1b873593;\n    const C1_LOW = C1 & MASK_LOW,\n          C2_LOW = C2 & MASK_LOW;\n\n    for (let i = 0; i < blockCounts; i++) {\n      if (i & 1) {\n        k1 = dataUint32[i];\n        k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;\n        k1 = k1 << 15 | k1 >>> 17;\n        k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;\n        h1 ^= k1;\n        h1 = h1 << 13 | h1 >>> 19;\n        h1 = h1 * 5 + 0xe6546b64;\n      } else {\n        k2 = dataUint32[i];\n        k2 = k2 * C1 & MASK_HIGH | k2 * C1_LOW & MASK_LOW;\n        k2 = k2 << 15 | k2 >>> 17;\n        k2 = k2 * C2 & MASK_HIGH | k2 * C2_LOW & MASK_LOW;\n        h2 ^= k2;\n        h2 = h2 << 13 | h2 >>> 19;\n        h2 = h2 * 5 + 0xe6546b64;\n      }\n    }\n\n    k1 = 0;\n\n    switch (tailLength) {\n      case 3:\n        k1 ^= data[blockCounts * 4 + 2] << 16;\n\n      case 2:\n        k1 ^= data[blockCounts * 4 + 1] << 8;\n\n      case 1:\n        k1 ^= data[blockCounts * 4];\n        k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;\n        k1 = k1 << 15 | k1 >>> 17;\n        k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;\n\n        if (blockCounts & 1) {\n          h1 ^= k1;\n        } else {\n          h2 ^= k1;\n        }\n\n    }\n\n    this.h1 = h1;\n    this.h2 = h2;\n  }\n\n  hexdigest() {\n    let h1 = this.h1,\n        h2 = this.h2;\n    h1 ^= h2 >>> 1;\n    h1 = h1 * 0xed558ccd & MASK_HIGH | h1 * 0x8ccd & MASK_LOW;\n    h2 = h2 * 0xff51afd7 & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 0xafd7ed55 & MASK_HIGH) >>> 16;\n    h1 ^= h2 >>> 1;\n    h1 = h1 * 0x1a85ec53 & MASK_HIGH | h1 * 0xec53 & MASK_LOW;\n    h2 = h2 * 0xc4ceb9fe & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 0xb9fe1a85 & MASK_HIGH) >>> 16;\n    h1 ^= h2 >>> 1;\n    const hex1 = (h1 >>> 0).toString(16),\n          hex2 = (h2 >>> 0).toString(16);\n    return hex1.padStart(8, \"0\") + hex2.padStart(8, \"0\");\n  }\n\n}\n\nexports.MurmurHash3_64 = MurmurHash3_64;\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NativeImageDecoder = void 0;\n\nvar _colorspace = __w_pdfjs_require__(22);\n\nvar _jpeg_stream = __w_pdfjs_require__(17);\n\nvar _stream = __w_pdfjs_require__(11);\n\nclass NativeImageDecoder {\n  constructor({\n    xref,\n    resources,\n    handler,\n    forceDataSchema = false,\n    pdfFunctionFactory\n  }) {\n    this.xref = xref;\n    this.resources = resources;\n    this.handler = handler;\n    this.forceDataSchema = forceDataSchema;\n    this.pdfFunctionFactory = pdfFunctionFactory;\n  }\n\n  canDecode(image) {\n    return image instanceof _jpeg_stream.JpegStream && NativeImageDecoder.isDecodable(image, this.xref, this.resources, this.pdfFunctionFactory) && image.maybeValidDimensions;\n  }\n\n  decode(image) {\n    const dict = image.dict;\n    let colorSpace = dict.get(\"ColorSpace\", \"CS\");\n    colorSpace = _colorspace.ColorSpace.parse(colorSpace, this.xref, this.resources, this.pdfFunctionFactory);\n    return this.handler.sendWithPromise(\"JpegDecode\", [image.getIR(this.forceDataSchema), colorSpace.numComps]).then(function ({\n      data,\n      width,\n      height\n    }) {\n      return new _stream.Stream(data, 0, data.length, dict);\n    });\n  }\n\n  static isSupported(image, xref, res, pdfFunctionFactory) {\n    const dict = image.dict;\n\n    if (dict.has(\"DecodeParms\") || dict.has(\"DP\")) {\n      return false;\n    }\n\n    const cs = _colorspace.ColorSpace.parse(dict.get(\"ColorSpace\", \"CS\"), xref, res, pdfFunctionFactory);\n\n    return (cs.name === \"DeviceGray\" || cs.name === \"DeviceRGB\") && cs.isDefaultDecode(dict.getArray(\"Decode\", \"D\"));\n  }\n\n  static isDecodable(image, xref, res, pdfFunctionFactory) {\n    const dict = image.dict;\n\n    if (dict.has(\"DecodeParms\") || dict.has(\"DP\")) {\n      return false;\n    }\n\n    const cs = _colorspace.ColorSpace.parse(dict.get(\"ColorSpace\", \"CS\"), xref, res, pdfFunctionFactory);\n\n    const bpc = dict.get(\"BitsPerComponent\", \"BPC\") || 1;\n    return (cs.numComps === 1 || cs.numComps === 3) && cs.isDefaultDecode(dict.getArray(\"Decode\", \"D\"), bpc);\n  }\n\n}\n\nexports.NativeImageDecoder = NativeImageDecoder;\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PDFImage = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nvar _primitives = __w_pdfjs_require__(4);\n\nvar _colorspace = __w_pdfjs_require__(22);\n\nvar _stream = __w_pdfjs_require__(11);\n\nvar _jpeg_stream = __w_pdfjs_require__(17);\n\nvar _jpx = __w_pdfjs_require__(20);\n\nvar PDFImage = function PDFImageClosure() {\n  function handleImageData(image, nativeDecoder) {\n    if (nativeDecoder && nativeDecoder.canDecode(image)) {\n      return nativeDecoder.decode(image).catch(reason => {\n        (0, _util.warn)(\"Native image decoding failed -- trying to recover: \" + (reason && reason.message));\n        return image;\n      });\n    }\n\n    return Promise.resolve(image);\n  }\n\n  function decodeAndClamp(value, addend, coefficient, max) {\n    value = addend + value * coefficient;\n\n    if (value < 0) {\n      value = 0;\n    } else if (value > max) {\n      value = max;\n    }\n\n    return value;\n  }\n\n  function resizeImageMask(src, bpc, w1, h1, w2, h2) {\n    var length = w2 * h2;\n    let dest;\n\n    if (bpc <= 8) {\n      dest = new Uint8Array(length);\n    } else if (bpc <= 16) {\n      dest = new Uint16Array(length);\n    } else {\n      dest = new Uint32Array(length);\n    }\n\n    var xRatio = w1 / w2;\n    var yRatio = h1 / h2;\n    var i,\n        j,\n        py,\n        newIndex = 0,\n        oldIndex;\n    var xScaled = new Uint16Array(w2);\n    var w1Scanline = w1;\n\n    for (i = 0; i < w2; i++) {\n      xScaled[i] = Math.floor(i * xRatio);\n    }\n\n    for (i = 0; i < h2; i++) {\n      py = Math.floor(i * yRatio) * w1Scanline;\n\n      for (j = 0; j < w2; j++) {\n        oldIndex = py + xScaled[j];\n        dest[newIndex++] = src[oldIndex];\n      }\n    }\n\n    return dest;\n  }\n\n  function PDFImage({\n    xref,\n    res,\n    image,\n    isInline = false,\n    smask = null,\n    mask = null,\n    isMask = false,\n    pdfFunctionFactory\n  }) {\n    this.image = image;\n    var dict = image.dict;\n    const filter = dict.get(\"Filter\");\n\n    if ((0, _primitives.isName)(filter)) {\n      switch (filter.name) {\n        case \"JPXDecode\":\n          var jpxImage = new _jpx.JpxImage();\n          jpxImage.parseImageProperties(image.stream);\n          image.stream.reset();\n          image.width = jpxImage.width;\n          image.height = jpxImage.height;\n          image.bitsPerComponent = jpxImage.bitsPerComponent;\n          image.numComps = jpxImage.componentsCount;\n          break;\n\n        case \"JBIG2Decode\":\n          image.bitsPerComponent = 1;\n          image.numComps = 1;\n          break;\n      }\n    }\n\n    let width = dict.get(\"Width\", \"W\");\n    let height = dict.get(\"Height\", \"H\");\n\n    if (Number.isInteger(image.width) && image.width > 0 && Number.isInteger(image.height) && image.height > 0 && (image.width !== width || image.height !== height)) {\n      (0, _util.warn)(\"PDFImage - using the Width/Height of the image data, \" + \"rather than the image dictionary.\");\n      width = image.width;\n      height = image.height;\n    }\n\n    if (width < 1 || height < 1) {\n      throw new _util.FormatError(`Invalid image width: ${width} or height: ${height}`);\n    }\n\n    this.width = width;\n    this.height = height;\n    this.interpolate = dict.get(\"Interpolate\", \"I\") || false;\n    this.imageMask = dict.get(\"ImageMask\", \"IM\") || false;\n    this.matte = dict.get(\"Matte\") || false;\n    var bitsPerComponent = image.bitsPerComponent;\n\n    if (!bitsPerComponent) {\n      bitsPerComponent = dict.get(\"BitsPerComponent\", \"BPC\");\n\n      if (!bitsPerComponent) {\n        if (this.imageMask) {\n          bitsPerComponent = 1;\n        } else {\n          throw new _util.FormatError(`Bits per component missing in image: ${this.imageMask}`);\n        }\n      }\n    }\n\n    this.bpc = bitsPerComponent;\n\n    if (!this.imageMask) {\n      var colorSpace = dict.get(\"ColorSpace\", \"CS\");\n\n      if (!colorSpace) {\n        (0, _util.info)(\"JPX images (which do not require color spaces)\");\n\n        switch (image.numComps) {\n          case 1:\n            colorSpace = _primitives.Name.get(\"DeviceGray\");\n            break;\n\n          case 3:\n            colorSpace = _primitives.Name.get(\"DeviceRGB\");\n            break;\n\n          case 4:\n            colorSpace = _primitives.Name.get(\"DeviceCMYK\");\n            break;\n\n          default:\n            throw new Error(`JPX images with ${image.numComps} ` + \"color components not supported.\");\n        }\n      }\n\n      const resources = isInline ? res : null;\n      this.colorSpace = _colorspace.ColorSpace.parse(colorSpace, xref, resources, pdfFunctionFactory);\n      this.numComps = this.colorSpace.numComps;\n    }\n\n    this.decode = dict.getArray(\"Decode\", \"D\");\n    this.needsDecode = false;\n\n    if (this.decode && (this.colorSpace && !this.colorSpace.isDefaultDecode(this.decode, bitsPerComponent) || isMask && !_colorspace.ColorSpace.isDefaultDecode(this.decode, 1))) {\n      this.needsDecode = true;\n      var max = (1 << bitsPerComponent) - 1;\n      this.decodeCoefficients = [];\n      this.decodeAddends = [];\n      const isIndexed = this.colorSpace && this.colorSpace.name === \"Indexed\";\n\n      for (var i = 0, j = 0; i < this.decode.length; i += 2, ++j) {\n        var dmin = this.decode[i];\n        var dmax = this.decode[i + 1];\n        this.decodeCoefficients[j] = isIndexed ? (dmax - dmin) / max : dmax - dmin;\n        this.decodeAddends[j] = isIndexed ? dmin : max * dmin;\n      }\n    }\n\n    if (smask) {\n      this.smask = new PDFImage({\n        xref,\n        res,\n        image: smask,\n        isInline,\n        pdfFunctionFactory\n      });\n    } else if (mask) {\n      if ((0, _primitives.isStream)(mask)) {\n        var maskDict = mask.dict,\n            imageMask = maskDict.get(\"ImageMask\", \"IM\");\n\n        if (!imageMask) {\n          (0, _util.warn)(\"Ignoring /Mask in image without /ImageMask.\");\n        } else {\n          this.mask = new PDFImage({\n            xref,\n            res,\n            image: mask,\n            isInline,\n            isMask: true,\n            pdfFunctionFactory\n          });\n        }\n      } else {\n        this.mask = mask;\n      }\n    }\n  }\n\n  PDFImage.buildImage = function ({\n    handler,\n    xref,\n    res,\n    image,\n    isInline = false,\n    nativeDecoder = null,\n    pdfFunctionFactory\n  }) {\n    var imagePromise = handleImageData(image, nativeDecoder);\n    var smaskPromise;\n    var maskPromise;\n    var smask = image.dict.get(\"SMask\");\n    var mask = image.dict.get(\"Mask\");\n\n    if (smask) {\n      smaskPromise = handleImageData(smask, nativeDecoder);\n      maskPromise = Promise.resolve(null);\n    } else {\n      smaskPromise = Promise.resolve(null);\n\n      if (mask) {\n        if ((0, _primitives.isStream)(mask)) {\n          maskPromise = handleImageData(mask, nativeDecoder);\n        } else if (Array.isArray(mask)) {\n          maskPromise = Promise.resolve(mask);\n        } else {\n          (0, _util.warn)(\"Unsupported mask format.\");\n          maskPromise = Promise.resolve(null);\n        }\n      } else {\n        maskPromise = Promise.resolve(null);\n      }\n    }\n\n    return Promise.all([imagePromise, smaskPromise, maskPromise]).then(function ([imageData, smaskData, maskData]) {\n      return new PDFImage({\n        xref,\n        res,\n        image: imageData,\n        isInline,\n        smask: smaskData,\n        mask: maskData,\n        pdfFunctionFactory\n      });\n    });\n  };\n\n  PDFImage.createMask = function ({\n    imgArray,\n    width,\n    height,\n    imageIsFromDecodeStream,\n    inverseDecode\n  }) {\n    var computedLength = (width + 7 >> 3) * height;\n    var actualLength = imgArray.byteLength;\n    var haveFullData = computedLength === actualLength;\n    var data, i;\n\n    if (imageIsFromDecodeStream && (!inverseDecode || haveFullData)) {\n      data = imgArray;\n    } else if (!inverseDecode) {\n      data = new Uint8ClampedArray(actualLength);\n      data.set(imgArray);\n    } else {\n      data = new Uint8ClampedArray(computedLength);\n      data.set(imgArray);\n\n      for (i = actualLength; i < computedLength; i++) {\n        data[i] = 0xff;\n      }\n    }\n\n    if (inverseDecode) {\n      for (i = 0; i < actualLength; i++) {\n        data[i] ^= 0xff;\n      }\n    }\n\n    return {\n      data,\n      width,\n      height\n    };\n  };\n\n  PDFImage.prototype = {\n    get drawWidth() {\n      return Math.max(this.width, this.smask && this.smask.width || 0, this.mask && this.mask.width || 0);\n    },\n\n    get drawHeight() {\n      return Math.max(this.height, this.smask && this.smask.height || 0, this.mask && this.mask.height || 0);\n    },\n\n    decodeBuffer(buffer) {\n      var bpc = this.bpc;\n      var numComps = this.numComps;\n      var decodeAddends = this.decodeAddends;\n      var decodeCoefficients = this.decodeCoefficients;\n      var max = (1 << bpc) - 1;\n      var i, ii;\n\n      if (bpc === 1) {\n        for (i = 0, ii = buffer.length; i < ii; i++) {\n          buffer[i] = +!buffer[i];\n        }\n\n        return;\n      }\n\n      var index = 0;\n\n      for (i = 0, ii = this.width * this.height; i < ii; i++) {\n        for (var j = 0; j < numComps; j++) {\n          buffer[index] = decodeAndClamp(buffer[index], decodeAddends[j], decodeCoefficients[j], max);\n          index++;\n        }\n      }\n    },\n\n    getComponents(buffer) {\n      var bpc = this.bpc;\n\n      if (bpc === 8) {\n        return buffer;\n      }\n\n      var width = this.width;\n      var height = this.height;\n      var numComps = this.numComps;\n      var length = width * height * numComps;\n      var bufferPos = 0;\n      let output;\n\n      if (bpc <= 8) {\n        output = new Uint8Array(length);\n      } else if (bpc <= 16) {\n        output = new Uint16Array(length);\n      } else {\n        output = new Uint32Array(length);\n      }\n\n      var rowComps = width * numComps;\n      var max = (1 << bpc) - 1;\n      var i = 0,\n          ii,\n          buf;\n\n      if (bpc === 1) {\n        var mask, loop1End, loop2End;\n\n        for (var j = 0; j < height; j++) {\n          loop1End = i + (rowComps & ~7);\n          loop2End = i + rowComps;\n\n          while (i < loop1End) {\n            buf = buffer[bufferPos++];\n            output[i] = buf >> 7 & 1;\n            output[i + 1] = buf >> 6 & 1;\n            output[i + 2] = buf >> 5 & 1;\n            output[i + 3] = buf >> 4 & 1;\n            output[i + 4] = buf >> 3 & 1;\n            output[i + 5] = buf >> 2 & 1;\n            output[i + 6] = buf >> 1 & 1;\n            output[i + 7] = buf & 1;\n            i += 8;\n          }\n\n          if (i < loop2End) {\n            buf = buffer[bufferPos++];\n            mask = 128;\n\n            while (i < loop2End) {\n              output[i++] = +!!(buf & mask);\n              mask >>= 1;\n            }\n          }\n        }\n      } else {\n        var bits = 0;\n        buf = 0;\n\n        for (i = 0, ii = length; i < ii; ++i) {\n          if (i % rowComps === 0) {\n            buf = 0;\n            bits = 0;\n          }\n\n          while (bits < bpc) {\n            buf = buf << 8 | buffer[bufferPos++];\n            bits += 8;\n          }\n\n          var remainingBits = bits - bpc;\n          let value = buf >> remainingBits;\n\n          if (value < 0) {\n            value = 0;\n          } else if (value > max) {\n            value = max;\n          }\n\n          output[i] = value;\n          buf = buf & (1 << remainingBits) - 1;\n          bits = remainingBits;\n        }\n      }\n\n      return output;\n    },\n\n    fillOpacity(rgbaBuf, width, height, actualHeight, image) {\n      var smask = this.smask;\n      var mask = this.mask;\n      var alphaBuf, sw, sh, i, ii, j;\n\n      if (smask) {\n        sw = smask.width;\n        sh = smask.height;\n        alphaBuf = new Uint8ClampedArray(sw * sh);\n        smask.fillGrayBuffer(alphaBuf);\n\n        if (sw !== width || sh !== height) {\n          alphaBuf = resizeImageMask(alphaBuf, smask.bpc, sw, sh, width, height);\n        }\n      } else if (mask) {\n        if (mask instanceof PDFImage) {\n          sw = mask.width;\n          sh = mask.height;\n          alphaBuf = new Uint8ClampedArray(sw * sh);\n          mask.numComps = 1;\n          mask.fillGrayBuffer(alphaBuf);\n\n          for (i = 0, ii = sw * sh; i < ii; ++i) {\n            alphaBuf[i] = 255 - alphaBuf[i];\n          }\n\n          if (sw !== width || sh !== height) {\n            alphaBuf = resizeImageMask(alphaBuf, mask.bpc, sw, sh, width, height);\n          }\n        } else if (Array.isArray(mask)) {\n          alphaBuf = new Uint8ClampedArray(width * height);\n          var numComps = this.numComps;\n\n          for (i = 0, ii = width * height; i < ii; ++i) {\n            var opacity = 0;\n            var imageOffset = i * numComps;\n\n            for (j = 0; j < numComps; ++j) {\n              var color = image[imageOffset + j];\n              var maskOffset = j * 2;\n\n              if (color < mask[maskOffset] || color > mask[maskOffset + 1]) {\n                opacity = 255;\n                break;\n              }\n            }\n\n            alphaBuf[i] = opacity;\n          }\n        } else {\n          throw new _util.FormatError(\"Unknown mask format.\");\n        }\n      }\n\n      if (alphaBuf) {\n        for (i = 0, j = 3, ii = width * actualHeight; i < ii; ++i, j += 4) {\n          rgbaBuf[j] = alphaBuf[i];\n        }\n      } else {\n        for (i = 0, j = 3, ii = width * actualHeight; i < ii; ++i, j += 4) {\n          rgbaBuf[j] = 255;\n        }\n      }\n    },\n\n    undoPreblend(buffer, width, height) {\n      var matte = this.smask && this.smask.matte;\n\n      if (!matte) {\n        return;\n      }\n\n      var matteRgb = this.colorSpace.getRgb(matte, 0);\n      var matteR = matteRgb[0];\n      var matteG = matteRgb[1];\n      var matteB = matteRgb[2];\n      var length = width * height * 4;\n\n      for (var i = 0; i < length; i += 4) {\n        var alpha = buffer[i + 3];\n\n        if (alpha === 0) {\n          buffer[i] = 255;\n          buffer[i + 1] = 255;\n          buffer[i + 2] = 255;\n          continue;\n        }\n\n        var k = 255 / alpha;\n        buffer[i] = (buffer[i] - matteR) * k + matteR;\n        buffer[i + 1] = (buffer[i + 1] - matteG) * k + matteG;\n        buffer[i + 2] = (buffer[i + 2] - matteB) * k + matteB;\n      }\n    },\n\n    createImageData(forceRGBA = false) {\n      var drawWidth = this.drawWidth;\n      var drawHeight = this.drawHeight;\n      var imgData = {\n        width: drawWidth,\n        height: drawHeight,\n        kind: 0,\n        data: null\n      };\n      var numComps = this.numComps;\n      var originalWidth = this.width;\n      var originalHeight = this.height;\n      var bpc = this.bpc;\n      var rowBytes = originalWidth * numComps * bpc + 7 >> 3;\n      var imgArray;\n\n      if (!forceRGBA) {\n        var kind;\n\n        if (this.colorSpace.name === \"DeviceGray\" && bpc === 1) {\n          kind = _util.ImageKind.GRAYSCALE_1BPP;\n        } else if (this.colorSpace.name === \"DeviceRGB\" && bpc === 8 && !this.needsDecode) {\n          kind = _util.ImageKind.RGB_24BPP;\n        }\n\n        if (kind && !this.smask && !this.mask && drawWidth === originalWidth && drawHeight === originalHeight) {\n          imgData.kind = kind;\n          imgArray = this.getImageBytes(originalHeight * rowBytes);\n\n          if (this.image instanceof _stream.DecodeStream) {\n            imgData.data = imgArray;\n          } else {\n            var newArray = new Uint8ClampedArray(imgArray.length);\n            newArray.set(imgArray);\n            imgData.data = newArray;\n          }\n\n          if (this.needsDecode) {\n            (0, _util.assert)(kind === _util.ImageKind.GRAYSCALE_1BPP, \"PDFImage.createImageData: The image must be grayscale.\");\n            var buffer = imgData.data;\n\n            for (var i = 0, ii = buffer.length; i < ii; i++) {\n              buffer[i] ^= 0xff;\n            }\n          }\n\n          return imgData;\n        }\n\n        if (this.image instanceof _jpeg_stream.JpegStream && !this.smask && !this.mask) {\n          let imageLength = originalHeight * rowBytes;\n\n          switch (this.colorSpace.name) {\n            case \"DeviceGray\":\n              imageLength *= 3;\n\n            case \"DeviceRGB\":\n            case \"DeviceCMYK\":\n              imgData.kind = _util.ImageKind.RGB_24BPP;\n              imgData.data = this.getImageBytes(imageLength, drawWidth, drawHeight, true);\n              return imgData;\n          }\n        }\n      }\n\n      imgArray = this.getImageBytes(originalHeight * rowBytes);\n      var actualHeight = 0 | imgArray.length / rowBytes * drawHeight / originalHeight;\n      var comps = this.getComponents(imgArray);\n      var alpha01, maybeUndoPreblend;\n\n      if (!forceRGBA && !this.smask && !this.mask) {\n        imgData.kind = _util.ImageKind.RGB_24BPP;\n        imgData.data = new Uint8ClampedArray(drawWidth * drawHeight * 3);\n        alpha01 = 0;\n        maybeUndoPreblend = false;\n      } else {\n        imgData.kind = _util.ImageKind.RGBA_32BPP;\n        imgData.data = new Uint8ClampedArray(drawWidth * drawHeight * 4);\n        alpha01 = 1;\n        maybeUndoPreblend = true;\n        this.fillOpacity(imgData.data, drawWidth, drawHeight, actualHeight, comps);\n      }\n\n      if (this.needsDecode) {\n        this.decodeBuffer(comps);\n      }\n\n      this.colorSpace.fillRgb(imgData.data, originalWidth, originalHeight, drawWidth, drawHeight, actualHeight, bpc, comps, alpha01);\n\n      if (maybeUndoPreblend) {\n        this.undoPreblend(imgData.data, drawWidth, actualHeight);\n      }\n\n      return imgData;\n    },\n\n    fillGrayBuffer(buffer) {\n      var numComps = this.numComps;\n\n      if (numComps !== 1) {\n        throw new _util.FormatError(`Reading gray scale from a color image: ${numComps}`);\n      }\n\n      var width = this.width;\n      var height = this.height;\n      var bpc = this.bpc;\n      var rowBytes = width * numComps * bpc + 7 >> 3;\n      var imgArray = this.getImageBytes(height * rowBytes);\n      var comps = this.getComponents(imgArray);\n      var i, length;\n\n      if (bpc === 1) {\n        length = width * height;\n\n        if (this.needsDecode) {\n          for (i = 0; i < length; ++i) {\n            buffer[i] = comps[i] - 1 & 255;\n          }\n        } else {\n          for (i = 0; i < length; ++i) {\n            buffer[i] = -comps[i] & 255;\n          }\n        }\n\n        return;\n      }\n\n      if (this.needsDecode) {\n        this.decodeBuffer(comps);\n      }\n\n      length = width * height;\n      var scale = 255 / ((1 << bpc) - 1);\n\n      for (i = 0; i < length; ++i) {\n        buffer[i] = scale * comps[i];\n      }\n    },\n\n    getImageBytes(length, drawWidth, drawHeight, forceRGB = false) {\n      this.image.reset();\n      this.image.drawWidth = drawWidth || this.width;\n      this.image.drawHeight = drawHeight || this.height;\n      this.image.forceRGB = !!forceRGB;\n      return this.image.getBytes(length, true);\n    }\n\n  };\n  return PDFImage;\n}();\n\nexports.PDFImage = PDFImage;\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isNodeJS = void 0;\nconst isNodeJS = typeof process === \"object\" && process + \"\" === \"[object process]\" && !process.versions[\"nw\"] && !process.versions[\"electron\"];\nexports.isNodeJS = isNodeJS;\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MessageHandler = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nconst CallbackKind = {\n  UNKNOWN: 0,\n  DATA: 1,\n  ERROR: 2\n};\nconst StreamKind = {\n  UNKNOWN: 0,\n  CANCEL: 1,\n  CANCEL_COMPLETE: 2,\n  CLOSE: 3,\n  ENQUEUE: 4,\n  ERROR: 5,\n  PULL: 6,\n  PULL_COMPLETE: 7,\n  START_COMPLETE: 8\n};\n\nfunction wrapReason(reason) {\n  if (typeof reason !== \"object\" || reason === null) {\n    return reason;\n  }\n\n  switch (reason.name) {\n    case \"AbortException\":\n      return new _util.AbortException(reason.message);\n\n    case \"MissingPDFException\":\n      return new _util.MissingPDFException(reason.message);\n\n    case \"UnexpectedResponseException\":\n      return new _util.UnexpectedResponseException(reason.message, reason.status);\n\n    case \"UnknownErrorException\":\n      return new _util.UnknownErrorException(reason.message, reason.details);\n\n    default:\n      return new _util.UnknownErrorException(reason.message, reason.toString());\n  }\n}\n\nclass MessageHandler {\n  constructor(sourceName, targetName, comObj) {\n    this.sourceName = sourceName;\n    this.targetName = targetName;\n    this.comObj = comObj;\n    this.callbackId = 1;\n    this.streamId = 1;\n    this.postMessageTransfers = true;\n    this.streamSinks = Object.create(null);\n    this.streamControllers = Object.create(null);\n    this.callbackCapabilities = Object.create(null);\n    this.actionHandler = Object.create(null);\n\n    this._onComObjOnMessage = event => {\n      const data = event.data;\n\n      if (data.targetName !== this.sourceName) {\n        return;\n      }\n\n      if (data.stream) {\n        this._processStreamMessage(data);\n\n        return;\n      }\n\n      if (data.callback) {\n        const callbackId = data.callbackId;\n        const capability = this.callbackCapabilities[callbackId];\n\n        if (!capability) {\n          throw new Error(`Cannot resolve callback ${callbackId}`);\n        }\n\n        delete this.callbackCapabilities[callbackId];\n\n        if (data.callback === CallbackKind.DATA) {\n          capability.resolve(data.data);\n        } else if (data.callback === CallbackKind.ERROR) {\n          capability.reject(wrapReason(data.reason));\n        } else {\n          throw new Error(\"Unexpected callback case\");\n        }\n\n        return;\n      }\n\n      const action = this.actionHandler[data.action];\n\n      if (!action) {\n        throw new Error(`Unknown action from worker: ${data.action}`);\n      }\n\n      if (data.callbackId) {\n        const sourceName = this.sourceName;\n        const targetName = data.sourceName;\n        new Promise(function (resolve) {\n          resolve(action(data.data));\n        }).then(function (result) {\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            callback: CallbackKind.DATA,\n            callbackId: data.callbackId,\n            data: result\n          });\n        }, function (reason) {\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            callback: CallbackKind.ERROR,\n            callbackId: data.callbackId,\n            reason: wrapReason(reason)\n          });\n        });\n        return;\n      }\n\n      if (data.streamId) {\n        this._createStreamSink(data);\n\n        return;\n      }\n\n      action(data.data);\n    };\n\n    comObj.addEventListener(\"message\", this._onComObjOnMessage);\n  }\n\n  on(actionName, handler) {\n    const ah = this.actionHandler;\n\n    if (ah[actionName]) {\n      throw new Error(`There is already an actionName called \"${actionName}\"`);\n    }\n\n    ah[actionName] = handler;\n  }\n\n  send(actionName, data, transfers) {\n    this._postMessage({\n      sourceName: this.sourceName,\n      targetName: this.targetName,\n      action: actionName,\n      data\n    }, transfers);\n  }\n\n  sendWithPromise(actionName, data, transfers) {\n    const callbackId = this.callbackId++;\n    const capability = (0, _util.createPromiseCapability)();\n    this.callbackCapabilities[callbackId] = capability;\n\n    try {\n      this._postMessage({\n        sourceName: this.sourceName,\n        targetName: this.targetName,\n        action: actionName,\n        callbackId,\n        data\n      }, transfers);\n    } catch (ex) {\n      capability.reject(ex);\n    }\n\n    return capability.promise;\n  }\n\n  sendWithStream(actionName, data, queueingStrategy, transfers) {\n    const streamId = this.streamId++;\n    const sourceName = this.sourceName;\n    const targetName = this.targetName;\n    const comObj = this.comObj;\n    return new ReadableStream({\n      start: controller => {\n        const startCapability = (0, _util.createPromiseCapability)();\n        this.streamControllers[streamId] = {\n          controller,\n          startCall: startCapability,\n          pullCall: null,\n          cancelCall: null,\n          isClosed: false\n        };\n\n        this._postMessage({\n          sourceName,\n          targetName,\n          action: actionName,\n          streamId,\n          data,\n          desiredSize: controller.desiredSize\n        }, transfers);\n\n        return startCapability.promise;\n      },\n      pull: controller => {\n        const pullCapability = (0, _util.createPromiseCapability)();\n        this.streamControllers[streamId].pullCall = pullCapability;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.PULL,\n          streamId,\n          desiredSize: controller.desiredSize\n        });\n        return pullCapability.promise;\n      },\n      cancel: reason => {\n        (0, _util.assert)(reason instanceof Error, \"cancel must have a valid reason\");\n        const cancelCapability = (0, _util.createPromiseCapability)();\n        this.streamControllers[streamId].cancelCall = cancelCapability;\n        this.streamControllers[streamId].isClosed = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.CANCEL,\n          streamId,\n          reason: wrapReason(reason)\n        });\n        return cancelCapability.promise;\n      }\n    }, queueingStrategy);\n  }\n\n  _createStreamSink(data) {\n    const self = this;\n    const action = this.actionHandler[data.action];\n    const streamId = data.streamId;\n    const sourceName = this.sourceName;\n    const targetName = data.sourceName;\n    const comObj = this.comObj;\n    const streamSink = {\n      enqueue(chunk, size = 1, transfers) {\n        if (this.isCancelled) {\n          return;\n        }\n\n        const lastDesiredSize = this.desiredSize;\n        this.desiredSize -= size;\n\n        if (lastDesiredSize > 0 && this.desiredSize <= 0) {\n          this.sinkCapability = (0, _util.createPromiseCapability)();\n          this.ready = this.sinkCapability.promise;\n        }\n\n        self._postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.ENQUEUE,\n          streamId,\n          chunk\n        }, transfers);\n      },\n\n      close() {\n        if (this.isCancelled) {\n          return;\n        }\n\n        this.isCancelled = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.CLOSE,\n          streamId\n        });\n        delete self.streamSinks[streamId];\n      },\n\n      error(reason) {\n        (0, _util.assert)(reason instanceof Error, \"error must have a valid reason\");\n\n        if (this.isCancelled) {\n          return;\n        }\n\n        this.isCancelled = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.ERROR,\n          streamId,\n          reason: wrapReason(reason)\n        });\n      },\n\n      sinkCapability: (0, _util.createPromiseCapability)(),\n      onPull: null,\n      onCancel: null,\n      isCancelled: false,\n      desiredSize: data.desiredSize,\n      ready: null\n    };\n    streamSink.sinkCapability.resolve();\n    streamSink.ready = streamSink.sinkCapability.promise;\n    this.streamSinks[streamId] = streamSink;\n    new Promise(function (resolve) {\n      resolve(action(data.data, streamSink));\n    }).then(function () {\n      comObj.postMessage({\n        sourceName,\n        targetName,\n        stream: StreamKind.START_COMPLETE,\n        streamId,\n        success: true\n      });\n    }, function (reason) {\n      comObj.postMessage({\n        sourceName,\n        targetName,\n        stream: StreamKind.START_COMPLETE,\n        streamId,\n        reason: wrapReason(reason)\n      });\n    });\n  }\n\n  _processStreamMessage(data) {\n    const streamId = data.streamId;\n    const sourceName = this.sourceName;\n    const targetName = data.sourceName;\n    const comObj = this.comObj;\n\n    switch (data.stream) {\n      case StreamKind.START_COMPLETE:\n        if (data.success) {\n          this.streamControllers[streamId].startCall.resolve();\n        } else {\n          this.streamControllers[streamId].startCall.reject(wrapReason(data.reason));\n        }\n\n        break;\n\n      case StreamKind.PULL_COMPLETE:\n        if (data.success) {\n          this.streamControllers[streamId].pullCall.resolve();\n        } else {\n          this.streamControllers[streamId].pullCall.reject(wrapReason(data.reason));\n        }\n\n        break;\n\n      case StreamKind.PULL:\n        if (!this.streamSinks[streamId]) {\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL_COMPLETE,\n            streamId,\n            success: true\n          });\n          break;\n        }\n\n        if (this.streamSinks[streamId].desiredSize <= 0 && data.desiredSize > 0) {\n          this.streamSinks[streamId].sinkCapability.resolve();\n        }\n\n        this.streamSinks[streamId].desiredSize = data.desiredSize;\n        const {\n          onPull\n        } = this.streamSinks[data.streamId];\n        new Promise(function (resolve) {\n          resolve(onPull && onPull());\n        }).then(function () {\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL_COMPLETE,\n            streamId,\n            success: true\n          });\n        }, function (reason) {\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL_COMPLETE,\n            streamId,\n            reason: wrapReason(reason)\n          });\n        });\n        break;\n\n      case StreamKind.ENQUEUE:\n        (0, _util.assert)(this.streamControllers[streamId], \"enqueue should have stream controller\");\n\n        if (this.streamControllers[streamId].isClosed) {\n          break;\n        }\n\n        this.streamControllers[streamId].controller.enqueue(data.chunk);\n        break;\n\n      case StreamKind.CLOSE:\n        (0, _util.assert)(this.streamControllers[streamId], \"close should have stream controller\");\n\n        if (this.streamControllers[streamId].isClosed) {\n          break;\n        }\n\n        this.streamControllers[streamId].isClosed = true;\n        this.streamControllers[streamId].controller.close();\n\n        this._deleteStreamController(streamId);\n\n        break;\n\n      case StreamKind.ERROR:\n        (0, _util.assert)(this.streamControllers[streamId], \"error should have stream controller\");\n        this.streamControllers[streamId].controller.error(wrapReason(data.reason));\n\n        this._deleteStreamController(streamId);\n\n        break;\n\n      case StreamKind.CANCEL_COMPLETE:\n        if (data.success) {\n          this.streamControllers[streamId].cancelCall.resolve();\n        } else {\n          this.streamControllers[streamId].cancelCall.reject(wrapReason(data.reason));\n        }\n\n        this._deleteStreamController(streamId);\n\n        break;\n\n      case StreamKind.CANCEL:\n        if (!this.streamSinks[streamId]) {\n          break;\n        }\n\n        const {\n          onCancel\n        } = this.streamSinks[data.streamId];\n        new Promise(function (resolve) {\n          resolve(onCancel && onCancel(wrapReason(data.reason)));\n        }).then(function () {\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.CANCEL_COMPLETE,\n            streamId,\n            success: true\n          });\n        }, function (reason) {\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.CANCEL_COMPLETE,\n            streamId,\n            reason: wrapReason(reason)\n          });\n        });\n        this.streamSinks[streamId].sinkCapability.reject(wrapReason(data.reason));\n        this.streamSinks[streamId].isCancelled = true;\n        delete this.streamSinks[streamId];\n        break;\n\n      default:\n        throw new Error(\"Unexpected stream case\");\n    }\n  }\n\n  async _deleteStreamController(streamId) {\n    await Promise.allSettled([this.streamControllers[streamId].startCall, this.streamControllers[streamId].pullCall, this.streamControllers[streamId].cancelCall].map(function (capability) {\n      return capability && capability.promise;\n    }));\n    delete this.streamControllers[streamId];\n  }\n\n  _postMessage(message, transfers) {\n    if (transfers && this.postMessageTransfers) {\n      this.comObj.postMessage(message, transfers);\n    } else {\n      this.comObj.postMessage(message);\n    }\n  }\n\n  destroy() {\n    this.comObj.removeEventListener(\"message\", this._onComObjOnMessage);\n  }\n\n}\n\nexports.MessageHandler = MessageHandler;\n\n/***/ }),\n/* 46 */\n/***/ (function(module, exports, __w_pdfjs_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PDFWorkerStream = void 0;\n\nvar _util = __w_pdfjs_require__(2);\n\nclass PDFWorkerStream {\n  constructor(msgHandler) {\n    this._msgHandler = msgHandler;\n    this._contentLength = null;\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  getFullReader() {\n    (0, _util.assert)(!this._fullRequestReader);\n    this._fullRequestReader = new PDFWorkerStreamReader(this._msgHandler);\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(begin, end) {\n    const reader = new PDFWorkerStreamRangeReader(begin, end, this._msgHandler);\n\n    this._rangeRequestReaders.push(reader);\n\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.cancel(reason);\n    }\n\n    const readers = this._rangeRequestReaders.slice(0);\n\n    readers.forEach(function (reader) {\n      reader.cancel(reason);\n    });\n  }\n\n}\n\nexports.PDFWorkerStream = PDFWorkerStream;\n\nclass PDFWorkerStreamReader {\n  constructor(msgHandler) {\n    this._msgHandler = msgHandler;\n    this.onProgress = null;\n    this._contentLength = null;\n    this._isRangeSupported = false;\n    this._isStreamingSupported = false;\n\n    const readableStream = this._msgHandler.sendWithStream(\"GetReader\");\n\n    this._reader = readableStream.getReader();\n    this._headersReady = this._msgHandler.sendWithPromise(\"ReaderHeadersReady\").then(data => {\n      this._isStreamingSupported = data.isStreamingSupported;\n      this._isRangeSupported = data.isRangeSupported;\n      this._contentLength = data.contentLength;\n    });\n  }\n\n  get headersReady() {\n    return this._headersReady;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  async read() {\n    const {\n      value,\n      done\n    } = await this._reader.read();\n\n    if (done) {\n      return {\n        value: undefined,\n        done: true\n      };\n    }\n\n    return {\n      value: value.buffer,\n      done: false\n    };\n  }\n\n  cancel(reason) {\n    this._reader.cancel(reason);\n  }\n\n}\n\nclass PDFWorkerStreamRangeReader {\n  constructor(begin, end, msgHandler) {\n    this._msgHandler = msgHandler;\n    this.onProgress = null;\n\n    const readableStream = this._msgHandler.sendWithStream(\"GetRangeReader\", {\n      begin,\n      end\n    });\n\n    this._reader = readableStream.getReader();\n  }\n\n  get isStreamingSupported() {\n    return false;\n  }\n\n  async read() {\n    const {\n      value,\n      done\n    } = await this._reader.read();\n\n    if (done) {\n      return {\n        value: undefined,\n        done: true\n      };\n    }\n\n    return {\n      value: value.buffer,\n      done: false\n    };\n  }\n\n  cancel(reason) {\n    this._reader.cancel(reason);\n  }\n\n}\n\n/***/ })\n/******/ ]);\n});\n//# sourceMappingURL=pdf.worker.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pdfjs-dist/build/pdf.worker.js\n// module id = wk5V\n// module chunks = 0"],"sourceRoot":""}